(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 4776:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021 *********************************** */
                /* **************************** Add Script Version -> 07-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4777,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4777:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getCofCByBinIdPartId`;  \n" +
                "CREATE FUNCTION `fun_getCofCByBinIdPartId`(                      \n" +
                "	pBinId INT(11),      \n" +
                "	pPartId INT(11),    \n" +
                "	pIsMfg BOOLEAN    \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                      \n" +
                "	DECLARE vCofC VARCHAR(100);      \n" +
                "	DECLARE vMfgName VARCHAR(255);     \n" +
                "	DECLARE vResult  VARCHAR(255);           \n" +
                "  \n" +
                "	SELECT 	CONCAT(IFNULL(fun_getMfgCodeByID(mfgCodeID),''),packingSlipNumber),     \n" +
                "		fun_getMfgNameByID(mfgCodeID)     \n" +
                "	INTO 	vCofC, vMfgName      \n" +
                "	FROM 	packing_slip_material_receive      \n" +
                "	WHERE 	isDelted = 0      \n" +
                "			AND id IN (      \n" +
                "					SELECT 	refPackingSlipMaterialRecID      \n" +
                "					FROM 	packing_slip_material_receive_det       \n" +
                "					WHERE 	isDelted = 0       \n" +
                "							AND binID = pBinId     \n" +
                "							AND partID = pPartId       \n" +
                "							AND umidCreated = 0      \n" +
                "				)       \n" +
                "			AND receiptType = 'P';       \n" +
                "  \n" +
                "	IF (pIsMfg) THEN    \n" +
                "		SET vResult = vMfgName;    \n" +
                "	ELSE   \n" +
                "		SET vResult = vCofC;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	RETURN vResult;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4778,'2.00','V1','Bug 34267: While scan MPN at UMID detail screen in case getting error on screen CHARMI'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4778:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getCofCByBinIdPartId`;  \n" +
                "CREATE FUNCTION `fun_getCofCByBinIdPartId`(                      \n" +
                "	pBinId INT(11),      \n" +
                "	pPartId INT(11),    \n" +
                "	pIsMfg BOOLEAN    \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                      \n" +
                "	DECLARE vCofC VARCHAR(100);      \n" +
                "	DECLARE vMfgName VARCHAR(255);     \n" +
                "	DECLARE vResult  VARCHAR(255);           \n" +
                "  \n" +
                "	SELECT 	CONCAT(IFNULL(fun_getMfgCodeByID(mfgCodeID),''),packingSlipNumber),     \n" +
                "		fun_getMfgNameByID(mfgCodeID)     \n" +
                "	INTO 	vCofC, vMfgName      \n" +
                "	FROM 	packing_slip_material_receive      \n" +
                "	WHERE 	isDeleted = 0      \n" +
                "			AND id IN (      \n" +
                "					SELECT 	refPackingSlipMaterialRecID      \n" +
                "					FROM 	packing_slip_material_receive_det       \n" +
                "					WHERE 	isDeleted = 0       \n" +
                "							AND binID = pBinId     \n" +
                "							AND partID = pPartId       \n" +
                "							AND umidCreated = 0      \n" +
                "				)       \n" +
                "			AND receiptType = 'P';       \n" +
                "  \n" +
                "	IF (pIsMfg) THEN    \n" +
                "		SET vResult = vMfgName;    \n" +
                "	ELSE   \n" +
                "		SET vResult = vCofC;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	RETURN vResult;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-06-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(                        \n" +
                "	IN ppageIndex INT,                        \n" +
                "	IN precordPerPage INT,                        \n" +
                "	IN pOrderBy VARCHAR(255),                        \n" +
                "	IN pWhereClause VARCHAR(16383),                        \n" +
                "	-- IN pIsMFG TINYINT(1),                        \n" +
                "	IN pmfgType VARCHAR(20),                        \n" +
                "	IN pisCustOrDisty TINYINT            \n" +
                "    )  \n" +
                "BEGIN                         \n" +
                "  \n" +
                "	DECLARE pOffset INT;                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                        \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                               \n" +
                "    DECLARE vTimeZone VARCHAR(50);                               \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                       \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"                        \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,                          \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 AND mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,                                    \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,              \n" +
                "		mc.systemID,mc.customerSystemID,                  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,                  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,     \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,                  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,                  \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,                  \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,                   \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,                      \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,                                    \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,                                   \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,                                    \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,                                    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                          \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,           \n" +
                "		(SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst smm WHERE smm.supplierid=mc.id and smm.isDeleted= 0) mappingMfr,                                         \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'                                                \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'                                                \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'                                                 \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,                                                            \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,                                  \n" +
                "            wbw.acquired,                                                                 \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),                \n" +
                "        '@@@',fun_getUserNameByID(createdBy),                \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')                \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias                                                                   \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,                                                            \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,                                                             \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,                                         \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'                                                               \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,                                  \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'                        \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,                                  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'                        \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`                                                     \n" +
                "		 ,gc.gencCategoryName,                        \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'                        \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'                        \n" +
                "		END AS isCustOrDistyText,                        \n" +
                "        mc.displayOrder,            \n" +
                "        mc.invoicesRequireManagementApproval,            \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'                        \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,        \n" +
                "		mc.taxID,        \n" +
                "        mc.accountRef,        \n" +
                "        mc.paymentMethodID,        \n" +
                "		pc.gencCategoryName paymentMethodName,        \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,      \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,      \n" +
                "		mc.acctId      \n" +
                "	FROM mfgcodemst mc          \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0      \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0        \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0        \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,                        \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`                        \n" +
                "			FROM  who_bought_who wbwi                        \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id                        \n" +
                "            AND wbwi.isDeleted = 0) wbw                        \n" +
                "			ON wbw.buyTo = mc.id                        \n" +
                "	WHERE mc.isdeleted = 0                                                             \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");                                                  \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN        \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);                                             \n" +
                "	END IF;                                                  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                  \n" +
                "	ELSE                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");                        \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                                  \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                  \n" +
                "	ELSE	                                                                  \n" +
                "		SET rowNumWhere = '';                                                                  \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "   /* to get total count of rows */                                                 \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                \n" +
                "	EXECUTE query2;                                                \n" +
                "	DEALLOCATE PREPARE query2;                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "	 PREPARE query1 FROM @SQLStatement2;                                                \n" +
                "	 EXECUTE query1;                                                \n" +
                "	DEALLOCATE PREPARE query1; 	                                          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-06-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePartStatusList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePartStatusList`(                            \n" +
                "	IN ppageIndex INT,                            \n" +
                "	IN precordPerPage INT,                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN psourceDetails VARCHAR(50)                                \n" +
                "	)  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "		DECLARE pOffset INT;                            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);         \n" +
                "		DECLARE vTimeZone VARCHAR(50);                 \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;                  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                           \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempMoutingType;        \n" +
                "  \n" +
                "		SET @tempMountQuery=CONCAT(\"create temporary table if not exists  tempMoutingType as        \n" +
                "		select id,refTableName,refId,alias,isdeleted from component_fields_genericalias_mst where deletedAt is NULL\");         \n" +
                "  \n" +
                "		IF(psourceDetails IS NOT NULL OR psourceDetails<>'')THEN        \n" +
                "			SET @tempMountQuery=CONCAT(@tempMountQuery,\" and id in (select refAliasID from  component_attributes_source_mapping where mfgcodeid in (\",psourceDetails,\"))\");        \n" +
                "  \n" +
                "		END IF;          \n" +
                "  \n" +
                "		        PREPARE queryMount FROM @tempMountQuery;                    \n" +
                "			EXECUTE queryMount;                    \n" +
                "			DEALLOCATE PREPARE queryMount;                      \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT id,`name`,isActive,colorCode,systemGenerated ,  displayOrder,            \n" +
                "			fun_getUserNameByID(updatedBy) updatedby,              \n" +
                "			fun_getUserNameByID(createdBy) createdby,    \n" +
                "			fun_getRoleByID(createByRoleId) createdbyRole,              \n" +
                "			fun_getRoleByID(updateByRoleId) updatedbyRole,     \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,        \n" +
                "		        fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,    \n" +
                "			(CASE WHEN (systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete,  \n" +
                "            (CASE WHEN (systemGenerated = 0) THEN 'No'                                         \n" +
                "				WHEN (systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,           \n" +
                "				(CASE WHEN (isActive = 0) THEN 'Disable'                \n" +
                "						WHEN (isActive = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,            \n" +
                "			(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist         \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist         \n" +
                "			  from component_attributes_source_mapping c1        \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID        \n" +
                "				where c1.refAliasID = cfg.id        \n" +
                "				 ),''))  SEPARATOR '##') AS aliaslist        \n" +
                "						  FROM tempMoutingType cfg WHERE IFNULL(isdeleted,0) = 0         \n" +
                "						  AND  refTableName ='component_partstatusmst'                   \n" +
                "          AND refId=`component_partstatusmst`.`id` ) AS aliaslist                \n" +
                "		FROM `component_partstatusmst`                \n" +
                "		WHERE `deletedAt` IS NULL\");                            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN       \n" +
                "            SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,name ASC\");      \n" +
                "		ELSE                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "			SET pWhereClause = '1=1' ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "		ELSE	                            \n" +
                "			SET rowNumWhere = '';                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "         IF(psourceDetails IS NOT NULL)THEN        \n" +
                "			SET pWhereClause=CONCAT(pWhereClause,\" and aliaslist is not null\");        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		/* to get total count of rows */                     \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                    \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                    \n" +
                "			EXECUTE query2;                    \n" +
                "			DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                    \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;                    \n" +
                "			EXECUTE query1;                    \n" +
                "			DEALLOCATE PREPARE query1;                    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4779,'2.00','V1','Bug #34242 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4779:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(                        \n" +
                "	IN ppageIndex INT,                        \n" +
                "	IN precordPerPage INT,                        \n" +
                "	IN pOrderBy VARCHAR(255),                        \n" +
                "	IN pWhereClause VARCHAR(16383),                        \n" +
                "	-- IN pIsMFG TINYINT(1),                        \n" +
                "	IN pmfgType VARCHAR(20),                        \n" +
                "	IN pisCustOrDisty TINYINT            \n" +
                "    )  \n" +
                "BEGIN                         \n" +
                "  \n" +
                "	DECLARE pOffset INT;                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                        \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                               \n" +
                "    DECLARE vTimeZone VARCHAR(50);                               \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                       \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"                        \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,                          \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,                                    \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,              \n" +
                "		mc.systemID,mc.customerSystemID,                  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,                  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,     \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,                  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,                  \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,                  \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,                   \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,                      \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,                                    \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,                                   \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,                                    \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,                                    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                          \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,           \n" +
                "		(SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst smm WHERE smm.supplierid=mc.id and smm.isDeleted= 0) mappingMfr,                                         \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'                                                \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'                                                \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'                                                 \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,                                                            \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,                                  \n" +
                "            wbw.acquired,                                                                 \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),                \n" +
                "        '@@@',fun_getUserNameByID(createdBy),                \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')                \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias                                                                   \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,                                                            \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,                                                             \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,                                         \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'                                                               \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,                                  \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'                        \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,                                  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'                        \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`                                                     \n" +
                "		 ,gc.gencCategoryName,                        \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'                        \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'                        \n" +
                "		END AS isCustOrDistyText,                        \n" +
                "        mc.displayOrder,            \n" +
                "        mc.invoicesRequireManagementApproval,            \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'                        \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,        \n" +
                "		mc.taxID,        \n" +
                "        mc.accountRef,        \n" +
                "        mc.paymentMethodID,        \n" +
                "		pc.gencCategoryName paymentMethodName,        \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,      \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,      \n" +
                "		mc.acctId      \n" +
                "	FROM mfgcodemst mc          \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0      \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0        \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0        \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,                        \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`                        \n" +
                "			FROM  who_bought_who wbwi                        \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id                        \n" +
                "            AND wbwi.isDeleted = 0) wbw                        \n" +
                "			ON wbw.buyTo = mc.id                        \n" +
                "	WHERE mc.isdeleted = 0                                                             \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");                                                  \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN        \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);                                             \n" +
                "	END IF;                                                  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                  \n" +
                "	ELSE                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");                        \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                                  \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                  \n" +
                "	ELSE	                                                                  \n" +
                "		SET rowNumWhere = '';                                                                  \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "   /* to get total count of rows */                                                 \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                \n" +
                "	EXECUTE query2;                                                \n" +
                "	DEALLOCATE PREPARE query2;                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "	 PREPARE query1 FROM @SQLStatement2;                                                \n" +
                "	 EXECUTE query1;                                                \n" +
                "	DEALLOCATE PREPARE query1; 	                                          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4780,'2.00','V1','Bug #34242 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4780:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote_WitoutTransaction`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote_WitoutTransaction`(    \n" +
                "	IN poldAssyID INT,    \n" +
                "	IN pnewAssyID INT,    \n" +
                "	IN UserID INT,    \n" +
                "	IN pIsBOM TINYINT,    \n" +
                "	IN pIsExistingRFQ TINYINT,    \n" +
                "	IN pFromCustomerID INT,    \n" +
                "	IN pCustomerID INT,    \n" +
                "	IN pRfqFormID INT,    \n" +
                "	IN pCustomerApprovalComment TEXT,    \n" +
                "	IN pIsCopyPricing TINYINT,    \n" +
                "	IN pfromRFQAssyID INT,    \n" +
                "	IN pEmployeeID INT,    \n" +
                "    IN pRoleID INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "DECLARE pCount INT;    \n" +
                "DECLARE pToRFQAssyID INT;    \n" +
                "DECLARE pRFQTypeID INT;    \n" +
                "DECLARE pRFQInDate DATETIME;    \n" +
                "DECLARE pRFQDueDate DATETIME;    \n" +
                "DECLARE pQuoteDateDiff INT;    \n" +
                "DECLARE pToAssemblyLineCount INT;    \n" +
                "DECLARE pisBOMVarified TINYINT;    \n" +
                "DECLARE pisReadyForPricing TINYINT;    \n" +
                "DECLARE vRFQID INT;    \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pToAssemblyLineCount FROM rfq_lineitems WHERE partID = pnewAssyID AND IFNULL(isDeleted, 0) = 0;    \n" +
                "  \n" +
                "    IF pIsBOM OR pToAssemblyLineCount = 0 THEN    \n" +
                "		INSERT INTO `rfq_lineitems` (`lineID`,	`qpa`,	`refDesig`,	`custPN`,    \n" +
                "					`custPNID`,	`uomID`,	`description`,	`isInstall`,	`isPurchase`, `isNotRequiredKitAllocation`,    \n" +
                "					`createdBy`,	`createdAt`,    \n" +
                "					`customerRev`,	`customerDescription`,	`numOfPosition`, `dnpQty`,		`dnpDesig`,    \n" +
                "					`org_lineID`,	`org_qpa`,	`org_refDesig`,	`org_custPN`,		`org_uomName`,    \n" +
                "					`org_isInstall`, `org_isPurchase`,			`org_customerRev`,    \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,    \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,    \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,	 `partID`,	`duplicateCPNStep`,			`requireMountingTypeStep`,    \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus`,`substitutesAllow`,`org_substitutesAllow`,    \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,    \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,    \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`,    \n" +
                "                    `dnpQPARefDesStep`, `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`,    \n" +
                "                    `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,    \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`)    \n" +
                "		SELECT 	`lineID`, 	`qpa`, 	`refDesig`, 	`custPN`,    \n" +
                "					`custPNID`, 	`uomID`, 	`description`, 	`isInstall`, 	`isPurchase`,	`isNotRequiredKitAllocation`,    \n" +
                "					 UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,    \n" +
                "					`customerRev`, 	`customerDescription`, 	`numOfPosition`,    \n" +
                "					`dnpQty`, 		`dnpDesig`, `org_lineID`, 	`org_qpa`, 	`org_refDesig`, `org_custPN`, 		`org_uomName`,    \n" +
                "					`org_isInstall`, `org_isPurchase`, 			`org_customerRev`,    \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,     \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,    \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,    \n" +
                "					 pnewAssyID `partID`,	`duplicateCPNStep`,			`requireMountingTypeStep`,    \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus` ,`substitutesAllow`,`org_substitutesAllow`,    \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,    \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,    \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`, `dnpQPARefDesStep`,    \n" +
                "                    `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`, `createByRoleId`,    \n" +
                "                    `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,    \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`    \n" +
                "		FROM rfq_lineitems WHERE partID = poldAssyID AND IFNULL(isDeleted,0) = 0;    \n" +
                "  \n" +
                "		INSERT INTO `rfq_lineitems_alternatepart` (	`rfqLineItemsID`,	`distributor`,	`distMfgCodeID`,	`distPN`,    \n" +
                "							`distMfgPNID`,		`mfgCode`,	`mfgCodeID`,		`mfgPN`,    \n" +
                "							`mfgPNID`,		`description`,	 `RoHSStatusID`,  `createdBy`,		`createdAt`,	`mfgVerificationStep`,    \n" +
                "							`mfgDistMappingStep`,	`mfgCodeStep`,	`distVerificationStep`,	`distCodeStep`,    \n" +
                "							`getMFGPNStep`,		`obsoletePartStep`,			`mfgGoodPartMappingStep`,    \n" +
                "							`mfgPNStep`,		`distPNStep`,	`org_mfgCode`,    \n" +
                "							`org_mfgPN`,		`org_distributor`,`org_distPN`,		`badMfgPN`,    \n" +
                "							`distGoodPartMappingStep`,		`nonRohsStep`,		`epoxyStep`,    \n" +
                "							`invalidConnectorTypeStep`,`duplicateMPNInSameLineStep`,    \n" +
                "							`parttypeID`,		`mountingtypeID`,`partcategoryID`,	`partID`,    \n" +
                "							`userData1`,            `userData2`,	`userData3`,		`userData4`,    \n" +
                "							`userData5`,		`userData6`,	`userData7`,		`userData8`,    \n" +
                "							`userData9`,		`userData10`,	`mismatchMountingTypeStep`,    \n" +
                "							`mismatchFunctionalCategoryStep`,	`restrictUseWithPermissionStep`,    \n" +
                "							`restrictUsePermanentlyStep`,		`pickupPadRequiredStep`,    \n" +
                "							`matingPartRquiredStep`,		`driverToolsRequiredStep`,    \n" +
                "							`functionalTestingRequiredStep`,	`mismatchValueStep`,    \n" +
                "							`mismatchPackageStep`,			`mismatchToleranceStep`,    \n" +
                "							`mismatchTempratureStep`,		`mismatchPowerStep`,    \n" +
                "							`uomMismatchedStep`,    \n" +
                "							`programingRequiredStep`,	        `mismatchColorStep`, 	`customerApproval`,    \n" +
                "							`customerApprovalBy`, `customerApprovalDate`,`isCustomerUnAppoval`,`customerUnAppovalBy`,`customerUnAppovalDate`,    \n" +
                "							`restrictUseInBOMStep`,`mismatchNumberOfRowsStep`,`partPinIsLessthenBOMPinStep`,`tbdPartStep`,`exportControlledStep`,`restrictUseInBOMWithPermissionStep`,    \n" +
                "							`isUnlockApprovedPart`,`unknownPartStep`, `defaultInvalidMFRStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,    \n" +
                "                            `restrictUseExcludingAliasStep`, `restrictUseExcludingAliasWithPermissionStep`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `approvedMountingType`,    \n" +
                "                            `mismatchRequiredProgrammingStep`,`mappingPartProgramStep`, `suggestedByApplicationMsg`,`suggestedByApplicationStep`,    \n" +
                "                            `suggestedGoodPartStep`,`suggestedGoodDistPartStep`, `mismatchCustomPartStep`)    \n" +
                "		SELECT 			rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, 	ra.`distPN`,    \n" +
                "							ra.`distMfgPNID`, 	ra.`mfgCode`, 	ra.`mfgCodeID`, 	ra.`mfgPN`,    \n" +
                "							ra.`mfgPNID`,		ra.`description`,  	ra.`RoHSStatusID`,    \n" +
                "							UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`,	ra.`mfgVerificationStep`,    \n" +
                "							ra.`mfgDistMappingStep`,ra.`mfgCodeStep`,ra.`distVerificationStep`,ra.`distCodeStep`,    \n" +
                "							ra.`getMFGPNStep`, 	ra.`obsoletePartStep`, 			ra.`mfgGoodPartMappingStep`,    \n" +
                "							ra.`mfgPNStep`, 	ra.`distPNStep`, ra.`org_mfgCode`,    \n" +
                "							ra.`org_mfgPN`,		ra.`org_distributor`,ra.`org_distPN`,	ra.`badMfgPN`,    \n" +
                "							ra.`distGoodPartMappingStep`,		ra.`nonRohsStep`,		ra.`epoxyStep`,    \n" +
                "							ra.`invalidConnectorTypeStep`,ra.`duplicateMPNInSameLineStep`,    \n" +
                "							ra.`parttypeID`,		ra.`mountingtypeID`,ra.`partcategoryID`,	pnewAssyID `partID`,    \n" +
                "							ra.`userData1`,         ra.`userData2`,	ra.`userData3`,		ra.`userData4`,    \n" +
                "							ra.`userData5`,		ra.`userData6`,	ra.`userData7`,		ra.`userData8`,    \n" +
                "							ra.`userData9`,		ra.`userData10`,	ra.`mismatchMountingTypeStep`,    \n" +
                "							ra.`mismatchFunctionalCategoryStep`,	ra.`restrictUseWithPermissionStep`,    \n" +
                "							ra.`restrictUsePermanentlyStep`,	ra.`pickupPadRequiredStep`,    \n" +
                "							ra.`matingPartRquiredStep`,		ra.`driverToolsRequiredStep`,    \n" +
                "							ra.`functionalTestingRequiredStep`,	ra.`mismatchValueStep`,    \n" +
                "							ra.`mismatchPackageStep`,		ra.`mismatchToleranceStep`,    \n" +
                "							ra.`mismatchTempratureStep`,		ra.`mismatchPowerStep`,    \n" +
                "							ra.`uomMismatchedStep`,    \n" +
                "							ra.`programingRequiredStep`,	        ra.`mismatchColorStep`,	ra.`customerApproval`,    \n" +
                "							ra.`customerApprovalBy`, 		ra.`customerApprovalDate`,ra.`isCustomerUnAppoval`,ra.`customerUnAppovalBy`,ra.`customerUnAppovalDate`,    \n" +
                "							ra.`restrictUseInBOMStep`,ra.`mismatchNumberOfRowsStep`,ra.`partPinIsLessthenBOMPinStep`,ra.`tbdPartStep`,ra.`exportControlledStep`,ra.`restrictUseInBOMWithPermissionStep`,    \n" +
                "							ra.`isUnlockApprovedPart`,ra.`unknownPartStep`, ra.`defaultInvalidMFRStep`, ra.`restrictUseInBOMExcludingAliasStep`, ra.`restrictUseInBOMExcludingAliasWithPermissionStep`,    \n" +
                "                            ra.`restrictUseExcludingAliasStep`, ra.`restrictUseExcludingAliasWithPermissionStep`, ra.`createByRoleId`, ra.`updateByRoleId`, ra.`deleteByRoleId`, ra.`approvedMountingType`,    \n" +
                "                            ra.`mismatchRequiredProgrammingStep`, ra.`mappingPartProgramStep`, ra.`suggestedByApplicationMsg`, ra.`suggestedByApplicationStep`,    \n" +
                "                            ra.`suggestedGoodPartStep`,ra.`suggestedGoodDistPartStep`,ra.`mismatchCustomPartStep`    \n" +
                "			FROM rfq_lineitems_alternatepart ra    \n" +
                "			JOIN rfq_lineitems ral ON ral.id = ra.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0    \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0    \n" +
                "			WHERE ra.partID = poldAssyID AND IFNULL(ra.isDeleted, 0) = 0;    \n" +
                "  \n" +
                "		 /* Copy Additional comment form Old BOM to New generated Assembly*/    \n" +
                "			INSERT INTO rfq_lineitems_additional_comment    \n" +
                "			(`lineID`,`description`,`rfqLineItemID`,`createdBy`,`createdAt`,`partID`)    \n" +
                "				SELECT rlc.lineID, rlc.description, rl.id `rfqLineItemID`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pnewAssyID `partID`    \n" +
                "				FROM rfq_lineitems_additional_comment rlc    \n" +
                "				JOIN rfq_lineitems ral ON ral.id = rlc.rfqLineItemID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0    \n" +
                "				JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0    \n" +
                "				WHERE rlc.partID = poldAssyID AND IFNULL(rlc.isDeleted, 0) = 0;    \n" +
                "  \n" +
                "		 /* Copy Approval comment for line level errors */        \n" +
                "			INSERT INTO rfq_lineitems_approval_comment    \n" +
                "			(`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`, `createdBy`,`createdAt`, `errorCode`,    \n" +
                "			`rfqLineItemsID`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)    \n" +
                "			SELECT rac.comment,rac.`approvalBy`,rac.`approvalDate`, rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,    \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode, rl.id `rfqLineItemsID`,    \n" +
                "					rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`    \n" +
                "			FROM rfq_lineitems_approval_comment rac    \n" +
                "			JOIN rfq_lineitems ral ON ral.id = rac.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0    \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0    \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;    \n" +
                "  \n" +
                "	   /* Copy Approval comment for Alternete part level errors */        \n" +
                "			INSERT INTO `rfq_lineitems_approval_comment`              \n" +
                "			(`rfqLineItemsAlternatePartID`,`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`,  `createdBy`,`createdAt`,        \n" +
                "			`errorCode`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)        \n" +
                "			SELECT  rl.id `rfqLineItemsAlternatePartID`, rac.comment,rac.`approvalBy`,rac.`approvalDate`,        \n" +
                "					rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,               \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode,    \n" +
                "					rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`                      \n" +
                "			FROM rfq_lineitems_approval_comment rac              \n" +
                "			JOIN rfq_lineitems_alternatepart ral ON ral.id = rac.rfqLineItemsAlternatePartID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0                        \n" +
                "			JOIN rfq_lineitems_alternatepart rl ON rl.partID = pnewAssyID AND rl.mfgPNID = ral.mfgPNID AND IFNULL(rl.isDeleted,0) = 0                        \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;               \n" +
                "		   -- Have to add Part assembly relation entry manage                      \n" +
                "		   CALL Sproc_CreatePartAssyBomRelationshipForAllParent (pnewAssyID, UserID);                      \n" +
                "   END IF;              \n" +
                "  \n" +
                "	IF IFNULL(pIsBOM,FALSE) != TRUE THEN              \n" +
                "	   	IF IFNULL(pIsExistingRFQ ,0) = 0 THEN                      \n" +
                "        SELECT salesCommissionTo INTO @salesCommissionTo FROM rfqforms WHERE id = (SELECT rfqrefID FROM rfq_assemblies WHERE id = pfromRFQAssyID);                  \n" +
                "			INSERT INTO `rfqforms`(	`customerId`,`employeeID`,`isActive`,`quoteNote`,`createdBy`,`createdAt`,`updatedBy`,`salesCommissionTo`)                      \n" +
                "					VALUES (pCustomerID, pEmployeeID, TRUE, \"\", UserID, fun_DatetimetoUTCDateTime(),UserID,@salesCommissionTo);      \n" +
                "			SELECT LAST_INSERT_ID() INTO pRfqFormID;                        \n" +
                "		END IF;                      \n" +
                "		IF (SELECT COUNT(1) FROM rfqType WHERE `name` = 'Repeat') = 0 THEN                      \n" +
                "			INSERT INTO rfqType (`name`, `description`, `isActive`,`createdBy`,`createdAt`,`updatedBy`)                              \n" +
                "				VALUES ('Repeat', 'Repeat Assembly', TRUE, UserID, fun_DatetimetoUTCDateTime(),UserID);      \n" +
                "			SELECT LAST_INSERT_ID() INTO pRFQTypeID;                        \n" +
                "		ELSE                              \n" +
                "		       SELECT id INTO pRFQTypeID FROM rfqType WHERE `name` = 'Repeat';                              \n" +
                "		END IF;      \n" +
                "		SELECT quoteInDate, quoteDueDate INTO pRFQInDate , pRFQDueDate       \n" +
                "			FROM rfq_assemblies       \n" +
                "		WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;      \n" +
                "  \n" +
                "		SELECT DATEDIFF(pRFQDueDate, pRFQInDate) INTO pQuoteDateDiff;                      \n" +
                "  \n" +
                "    /* Copy RFQ Assembly detail */        \n" +
                "		INSERT INTO `rfq_assemblies`        \n" +
                "        (`rfqrefID`,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,                      \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,`createdBy`,`createdAt`,`updatedBy`,              \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`,`status`,`isBOMVerified`,`isReadyForPricing`,                      \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`,`isSummaryComplete`,                      \n" +
                "				`repeatExpectedQty`,`repeatFrequency`,`quoteFinalStatus`,`bomStatus`,`jobTypeID`,                      \n" +
                "				`RFQTypeID`,`partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,                      \n" +
                "				`additionalRequirement`,`quoteInDate`, `quoteDueDate`,                      \n" +
                "				`copyRefRfqId`,`copyConfirmationDescription`,`quotePriority`)                      \n" +
                "		SELECT pRfqFormID `rfqrefID` ,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,                      \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`, UserID `updatedBy`,               \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`, 1 ,`isBOMVerified`,`isReadyForPricing`,                      \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`, 0 ,                      \n" +
                "				`repeatExpectedQty`,`repeatFrequency`, 1 ,`bomStatus`,`jobTypeID`,                      \n" +
                "				pRFQTypeID `RFQTypeID`,pnewAssyID `partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,                      \n" +
                "				`additionalRequirement`,fun_DatetimetoUTCDateTime() `quoteInDate`,DATE_ADD(fun_DatetimetoUTCDateTime(), INTERVAL pQuoteDateDiff DAY) `quoteDueDate`,              \n" +
                "				pfromRFQAssyID `copyRefRfqId`, pCustomerApprovalComment `copyConfirmationDescription`, `quotePriority`                      \n" +
                "		FROM rfq_assemblies WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;      \n" +
                "  \n" +
                "		SELECT LAST_INSERT_ID() INTO pToRFQAssyID;                        \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity detail */        \n" +
                "		INSERT INTO `rfq_assy_quantity`(`rfqAssyID`, `requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,                      \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,                      \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,                      \n" +
                "				`createdBy`,`createdAt`,`quantityType`)                      \n" +
                "		SELECT pToRFQAssyID `rfqAssyID`,`requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,                      \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,                      \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,                      \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,`quantityType`                      \n" +
                "		FROM rfq_assy_quantity WHERE rfqAssyID = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0                      \n" +
                "        AND rfqPriceGroupId IS NULL AND rfqPriceGroupDetailId IS NULL;                      \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity turn time detail */        \n" +
                "        INSERT INTO `rfq_assy_quantity_turn_time`(`rfqAssyQtyID`,`turnTime`,`unitOfTime`,`createdBy`,`createdAt`)                      \n" +
                "		SELECT rq.`Id`, rqt.`turnTime`, rqt.`unitOfTime`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`                      \n" +
                "		FROM rfq_assy_quantity_turn_time rqt                        \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0 AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL                      \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0                        \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;                       \n" +
                "	/* Copy RFQ Assembly Quantity Price selection setting from part costing */	        \n" +
                "        INSERT INTO rfq_assy_quantity_price_selection_setting        \n" +
                "        (`qtyID`,	`stock`,	`price`, `isCheckRequiredQty`,	`isLeadTime`, `createdBy`,	`createdAt`,	`remark`,                     \n" +
                "			`stockPercentage`,	`packagingID`,`settingType`,`leadTime`)                     \n" +
                "		SELECT rq.`Id` `qtyID`, rqt.`stock`, rqt.`price`,                     \n" +
                "				rqt.`isCheckRequiredQty`,	rqt.`isLeadTime`,                      \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rqt.`remark`,                     \n" +
                "				rqt.`stockPercentage`,	rqt.`packagingID`, rqt.`settingType`,rqt.`leadTime`                  \n" +
                "		FROM rfq_assy_quantity_price_selection_setting rqt                        \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.qtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0                        \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID =  pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0                        \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;              \n" +
                "	# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy                      \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`                        \n" +
                "		(`lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `rfqLineItemID`, `uomID`,                        \n" +
                "		 `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`,    \n" +
                "		`numOfPosition`,`consolidatedLineItemIDs`, `refDesig`,`numOfRows`,`consolidatedpartlineID`,`isqpaMismatch`,`restrictCPNUseInBOMStep`,`restrictCPNUsePermanentlyStep`,`restrictCPNUseWithPermissionStep`,`custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)    \n" +
                "		SELECT  rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, pToRFQAssyID `rfqAssyID`,     \n" +
                "				rcl.`rfqLineItemID`, rcl.`uomID`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,                         \n" +
                "					rcl.`qpa`,fun_DatetimetoUTCDateTime() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`numOfPosition`,                        \n" +
                "					fun_getconsolidatedlineitems(rcl.id,pfromRFQAssyID,pnewAssyID, poldAssyID) `consolidatedLineItemIDs` ,              \n" +
                "					rcl.`refDesig`,rcl.`numOfRows`,rcl.`consolidatedpartlineID`,rcl.`isqpaMismatch`,rcl.`restrictCPNUseInBOMStep`,rcl.`restrictCPNUsePermanentlyStep`,rcl.`restrictCPNUseWithPermissionStep`,rcl.`custPNID`,        \n" +
                "                    rcl.`consolidateRestrictPartDetail`,rcl.`consolidatedPartWithFlagDetail`        \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rcl                        \n" +
                "		WHERE rcl.rfqAssyID = pfromRFQAssyID AND rcl.deletedAt IS NULL;                      \n" +
                "  \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy                        \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                        \n" +
                "					(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`, `customerApproval`,isdeleted,deletedAt,deletedBy,        \n" +
                "                    `restrictUseInBOMStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,`restrictUseInBOMWithPermissionStep`,        \n" +
                "                    `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`,        \n" +
                "					`restrictUseInBOMExcludingAliasStep`,`restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`,`mismatchMountingTypeStep`)                        \n" +
                "		SELECT rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`, UserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, rap.`mfgCodeID`,                    \n" +
                "				com.PIDCode `PIDCode` , rap.`customerApproval`, rcl.isdeleted, rcl.deletedAt, rcl.deletedBy,rap.`restrictUseInBOMStep`,        \n" +
                "                rap.`restrictUseWithPermissionStep`,rap.`restrictUsePermanentlyStep`,rap.`restrictUseInBOMWithPermissionStep`,        \n" +
                "                rap.`restrictUseExcludingAliasStep`,rap.`restrictUseExcludingAliasWithPermissionStep`,        \n" +
                "				rap.`restrictUseInBOMExcludingAliasStep`,rap.`restrictUseInBOMExcludingAliasWithPermissionStep`,rap.`approvedMountingType`,rap.`mismatchMountingTypeStep`        \n" +
                "		FROM rfq_lineitems_alternatepart rap                        \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.rfqLineItemID = rap.rfqLineItemsID                       \n" +
                "		JOIN component com ON com.id = rap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                        \n" +
                "		WHERE rcl.rfqAssyId = pToRFQAssyID                          \n" +
                "		GROUP BY rap.mfgPNID, rap.rfqLineItemsID;                      \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS result;                        \n" +
                "			CREATE TEMPORARY TABLE result                         \n" +
                "			SELECT rcl.lineID, raq.requestQty, rcl.qpa, rcl.rfqLineItemID, rlq.*               \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rlq                         \n" +
                "			LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rlq.consolidateID AND rcl.rfqAssyID = pfromRFQAssyID                        \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON raq.id = rlq.qtyID                      \n" +
                "			WHERE rlq.isDeleted = 0 AND rcl.isDeleted = 0 AND raq.isDeleted = 0 AND raq.rfqAssyID = pfromRFQAssyID;                        \n" +
                "  \n" +
                "				# create temporary table for mapping quantity between old assembly and new assembly                        \n" +
                "  					DROP TEMPORARY TABLE IF EXISTS mapping;                        \n" +
                "					CREATE TEMPORARY TABLE mapping                        \n" +
                "					SELECT a.requestQty, IFNULL((SELECT MAX(b.requestqty)  FROM rfq_assy_quantity b                         \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty <= a.requestQty AND b.isDeleted = 0),                        \n" +
                "					(SELECT MIN(b.requestqty)  FROM rfq_assy_quantity b                         \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty > a.requestQty AND b.isDeleted = 0))mappingQty                        \n" +
                "					FROM rfq_assy_quantity a                         \n" +
                "					WHERE a.rfqAssyID = pToRFQAssyID;                        \n" +
                "  \n" +
                "    # copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy                        \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                        \n" +
                "					(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,                        \n" +
                "					`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`,              \n" +
                "					`pricingSuppliers`, `apiLead`,`componentID`,`packaging`,`rfqQtySupplierID`,              \n" +
                "					`quoteQty`,`pricenotselectreason`,`availableInternalStock`,`availableInternalStockTimeStamp`,              \n" +
                "					`isBomUpdate`,`LOAprice`,`quoteQtyEach`, `unitEachPrice`,`supplierEachStcok`)                        \n" +
                "					SELECT rq.id `qtyID`, R.finalPrice `finalPrice`, cl.id `consolidateID`,                         \n" +
                "					fun_DatetimetoUTCDateTime() `createdAt`, UserID `createdBy`, R.unitPrice `unitPrice`, R.`supplier`, R.`selectedMpn`,                        \n" +
                "					R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`,              \n" +
                "					R.`pricingSuppliers`,R.`apiLead`,R.`componentID`,R.`packaging`,R.`rfqQtySupplierID`,              \n" +
                "					R.`quoteQty`,R.`pricenotselectreason`,R.`availableInternalStock`,R.`availableInternalStockTimeStamp`,              \n" +
                "					R.`isBomUpdate`,R.`LOAprice` ,R.`quoteQtyEach`, R.`unitEachPrice`,R.`supplierEachStcok`                         \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem cl                        \n" +
                "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0                        \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id AND clq.isDeleted = 0                       \n" +
                "					LEFT JOIN result R ON R.rfqLineItemID = cl.rfqLineItemID                      \n" +
                "					LEFT JOIN mapping m ON  rq.requestQty = m.requestQty                         \n" +
                "					WHERE cl.rfqAssyID = pToRFQAssyID AND cl.isDeleted = 0 AND m.mappingQty = R.requestQty;                             \n" +
                "  \n" +
                "		# Start Labor details	copy                            \n" +
                "		INSERT INTO `rfq_labor_assy_qpa_detail`                            \n" +
                "				    (`rfqAssyID`, `partID`, `subAssyID`, `perBuildQty`, `bomInternalVersion`,                            \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,                             \n" +
                "				     `originalQPA`, `isMismatchQPA`, `parPartID`, `level`, `isInstall`,                            \n" +
                "				     `createByRoleId`, `updateByRoleId`)                              \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`, rl.`partID`, rl.`subAssyID`, rl.`perBuildQty`, rl.`bomInternalVersion`,                            \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,                            \n" +
                "					rl.`originalQPA`, rl.`isMismatchQPA`, rl.`parPartID`, rl.`level`, rl.`isInstall`,                            \n" +
                "					rl.`createByRoleId`, rl.`updateByRoleId` FROM rfq_labor_assy_qpa_detail rl                            \n" +
                "				WHERE rl.rfqAssyID = pfromRFQAssyID AND rl.isDeleted = 0;           \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`                            \n" +
                "				    (`rfqAssyID`, `partID`, `mountingTypeID`, `lineCount`,                            \n" +
                "				     `totalQPA`, `isDeleted`, `createdBy`,                            \n" +
                "				     `createdAt`, `subAssyID`,                            \n" +
                "				     `isInstall`, `createByRoleId`, `updateByRoleId`)                            \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`,rlm.`partID`, rlm.`mountingTypeID`, rlm.`lineCount`,                            \n" +
                "				     rlm.`totalQPA`, 0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rlm.`subAssyID`,                            \n" +
                "				     rlm.`isInstall`, rlm.`createByRoleId`, rlm.`updateByRoleId`                            \n" +
                "				FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlm                            \n" +
                "				WHERE rlm.rfqAssyID = pfromRFQAssyID AND rlm.isDeleted = 0;                              \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`                            \n" +
                "				    (`rfqAssyQtyID`, `rfqAssyBOMMountingID`, `price`, `perAssyPrice`,                            \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,                            \n" +
                "				     `isPricePending`, `overHeadPrice`, `overHeadAssyPrice`)                            \n" +
                "			SELECT rq.id `rfqAssyQtyID`, lmc.id `rfqAssyBOMMountingID`,  rlc.`price`, rlc.`perAssyPrice`,                            \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,                            \n" +
                "					rlc.`isPricePending`, rlc.`overHeadPrice`, rlc.`overHeadAssyPrice`                            \n" +
                "					FROM rfq_assy_qtywise_bom_laborcosting_detail rlc                        \n" +
                "					JOIN rfq_assy_quantity raq ON raq.id = rlc.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0  AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL                      \n" +
                "					LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0                              \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lm ON lm.id = rlc.rfqAssyBOMMountingID AND lm.rfqAssyID = pfromRFQAssyID AND IFNULL(lm.isDeleted,0) = 0  AND lm.mountingTypeID IS NOT NULL                         \n" +
                "					LEFT JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lmc ON lmc.mountingTypeID = lm.mountingTypeID AND lmc.rfqAssyID = pToRFQAssyID AND IFNULL(lmc.isDeleted,0) = 0 AND lmc.mountingTypeID IS NOT NULL                         \n" +
                "					WHERE IFNULL(rlc.isDeleted, 0) = 0;                             \n" +
                "		# End Labor details copy		                            \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS mapping;                        \n" +
                "					DROP TEMPORARY TABLE IF EXISTS result;      \n" +
                "  \n" +
                "					SELECT liveVersion INTO @internalVerion       \n" +
                "                    FROM component      \n" +
                "                    WHERE id = pnewAssyID;      \n" +
                "  \n" +
                "					UPDATE rfq_assemblies SET  partCostingBOMInternalVersion = @internalVerion      \n" +
                "                    WHERE  id = pToRFQAssyID AND IFNULL(isDeleted, 0) = 0;                      \n" +
                "  \n" +
                "    END IF;      \n" +
                "  \n" +
                "	SELECT pToRFQAssyID;                         \n" +
                "    IF IFNULL(pIsBOM,FALSE) != TRUE THEN              \n" +
                "		SELECT rfqrefID INTO vRFQID FROM rfq_assemblies WHERE id = pToRFQAssyID;                      \n" +
                "		CALL Sproc_CopyRFQAssyDocFolderToNewRFQAssy(pfromRFQAssyID,pToRFQAssyID,UserID);                        \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pfromRFQAssyID, 1);                        \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pToRFQAssyID, 1);                        \n" +
                "        CALL Sproc_CreateCostSummaryEntry (vRFQID,UserID,pRoleID);                        \n" +
                "    END IF;                        \n" +
                "	-- SELECT * FROM rfq_lineitems WHERE partID = pnewAssyID AND isDeleted = 0;                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4781,'2.00','V1','Bug 34299: Copy BOM & Save : Showing Error once added new Assembly from the pop-up - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4781:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 10-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(        \n" +
                "	IN ppageIndex INT,        \n" +
                "	IN precordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pEmployeeID INT,        \n" +
                "	IN pCustomerIds VARCHAR(16383),        \n" +
                "	IN pAssyTypeIds VARCHAR(16383),        \n" +
                "	IN pRfqTypeIds VARCHAR(16383),        \n" +
                "	IN pJobTypeIds VARCHAR(16383),        \n" +
                "	IN pAssyIds VARCHAR(16383),        \n" +
                "	IN pAssyNicknameIds LONGTEXT,        \n" +
                "	IN pIsExportControlled TINYINT,        \n" +
                "	IN pIsQuoteOverdue TINYINT,        \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,        \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,        \n" +
                "	IN pFromDate DATE,        \n" +
                "	IN pToDate DATE,        \n" +
                "	IN pOlderThenDays INT        \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT;                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                         \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);                          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                             \n" +
                "        DECLARE vTimeZone VARCHAR(50);                \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                              \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;                \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                    \n" +
                "  		SET pWhereClause = '1=1' ;                    \n" +
                "	END IF;           	               \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN                                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');                                  \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN                                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');                                  \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN                                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');                                  \n" +
                "	END IF;                         \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN                                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');                                  \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN                                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');                                  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN                                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');                                  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN                          \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');                          \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                    \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND                        \n" +
                "		   (CASE                      \n" +
                "			WHEN rfq_statusID = 1 THEN                      \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")                    \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN                      \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")                    \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN                      \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")                    \n" +
                "		    END)');                          \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN                    \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND                     \n" +
                "		 (CASE                      \n" +
                "			WHEN rfq_statusID = 1 THEN                      \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'                    \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN                      \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'                    \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN                      \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'                    \n" +
                "		    END)                \n" +
                "		');                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN     		                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND                        \n" +
                "        (CASE                      \n" +
                "        WHEN rfq_statusID = 1 THEN                      \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"                \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN                      \n" +
                "				quoteSubmitDate > quoteDueDate                       \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN                      \n" +
                "				quoteClosedDate	> quoteDueDate		                      \n" +
                "            END)');                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN                           \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');                          \n" +
                "	END IF;                         \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN                           \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');                          \n" +
                "	END IF; */                        \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                    \n" +
                "	/* DECLARE SQLStatement varchar(255); */                    \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;                    \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,                    \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,                      \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,                    \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,                        \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,                          \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,                    \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,                    \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,                    \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,                    \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,                    \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,                    \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,                    \n" +
                "			part.liveVersion AS liveInternalVersion,                    \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,                    \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,                    \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,                  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'                    \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                    \n" +
                "				  WHEN ra.status = 3 THEN 'Won'                        \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'                    \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                    \n" +
                "			ra.status rfq_statusID,                  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'                    \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'                    \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'                    \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,                    \n" +
                "			ro.name AS `rohsComplientConvertedValue`,                    \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'                    \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,                    \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'       \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'                    \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,                        \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,                \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,                    \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,                    \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,        \n" +
                "            ra.isCustomPartDetShowInReport,        \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,                  \n" +
                "			(CASE WHEN part.isActivityStart THEN fun_getUserNameByID(part.activityStartBy) ELSE '' END )AS username, part.activityStartBy,                  \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') activityStartAt,       \n" +
                "			part.activityStartAt activityStartAtDateTime,                   \n" +
                "            ra.isActivityStart as isCostingActivityStart, (CASE WHEN ra.isActivityStart THEN fun_getUserNameByID(ra.activityStartBy) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,                  \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') costingActivityStartAt,                   \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,                                               \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,                                        \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,                                         \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,                                        \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,                                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                                       \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf                    \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0                    \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0                    \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0                    \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0                    \n" +
                "		WHERE rf.isdeleted = 0                                      \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then                                       \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)                                      \n" +
                "		else 1=1 end)                                      \n" +
                "        \");                    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
                "	ELSE                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
                "	ELSE                    \n" +
                "		SET rowNumWhere = '';                    \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN                           \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');                          \n" +
                "	ELSEIF pIsExportControlled = 1 THEN                        \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');                              \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN                        \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');                                \n" +
                "	END IF;                        \n" +
                "	/* to get total count of rows */                       \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);		                    \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;                      \n" +
                "	EXECUTE RFQquery1;                      \n" +
                "	DEALLOCATE PREPARE RFQquery1;             \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          			                        			                     \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;                      \n" +
                "	EXECUTE RFQquery2;                      \n" +
                "	DEALLOCATE PREPARE RFQquery2;                    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4782,'2.00','V1','Update sp for getting undefined when rfq download - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4782:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-06-2021 *********************************** */
                "DROP TABLE IF EXISTS `generic_transmode_mst`;  \n" +
                "  \n" +
                "CREATE TABLE `generic_transmode_mst` (  \n" +
                "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
                "  `modeType` varchar(2) NOT NULL COMMENT 'RP-Refund PAYABLE, RR-Refund RECEIVABLE',  \n" +
                "  `modeCode` varchar(10) DEFAULT NULL,  \n" +
                "  `modeName` varchar(50) NOT NULL,  \n" +
                "  `displayOrder` decimal(6,2) DEFAULT NULL,  \n" +
                "  `isActive` tinyint NOT NULL DEFAULT '1',  \n" +
                "  `systemGenerated` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `description` varchar(2000) DEFAULT NULL,  \n" +
                "  `ref_acctid` int DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createdBy` varchar(10) DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(10) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(10) DEFAULT NULL,  \n" +
                "  `unqDate` datetime NOT NULL DEFAULT '2001-01-01 00:00:00',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `IDX_UNQ_genc_transmode_transName` (`modeType`,`modeName`,`isDeleted`,`unqDate`),  \n" +
                "  UNIQUE KEY `IDX_UNQ_genc_transmode_transCode` (`modeType`,`modeCode`,`isDeleted`,`unqDate`),  \n" +
                "  KEY `FK_generic_transmode_mst_ref_acct_id` (`ref_acctid`),  \n" +
                "  CONSTRAINT `FK_generic_transmode_mst_ref_acct_id` FOREIGN KEY (`ref_acctid`) REFERENCES `acct_acctmst` (`acct_id`)  \n" +
                ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;  \n" +
                "  \n" +
                "/*Data for the table `generic_transmode_mst` */  \n" +
                "  \n" +
                "insert  into `generic_transmode_mst`(`id`,`modeType`,`modeCode`,`modeName`,`displayOrder`,`isActive`,`systemGenerated`,`description`,`ref_acctid`,`isDeleted`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`unqDate`) values   \n" +
                "(-11,'RP',NULL,'Write-off',11.00,1,1,'Write-off',NULL,0,'2021-06-10 12:08:50','2021-06-10 12:08:50',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-10,'RP',NULL,'Misc Refund',10.00,1,1,'Misc Refund',NULL,0,'2021-06-10 12:08:32','2021-06-10 12:08:32',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-9,'RP',NULL,'Overpayment Refund',9.00,1,1,'Overpayment Refund',NULL,0,'2021-06-10 12:08:14','2021-06-10 12:08:14',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-8,'RP',NULL,'Promotion',8.00,1,1,'Promotion',NULL,0,'2021-06-10 12:07:56','2021-06-10 12:07:56',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-7,'RP',NULL,'Discount',7.00,1,1,'Discount',NULL,0,'2021-06-10 12:07:44','2021-06-10 12:07:44',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-6,'RP',NULL,'CM Refund',6.00,1,1,'CM Refund',NULL,0,'2021-06-10 12:07:28','2021-06-10 12:07:28',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-5,'RR',NULL,'Misc Refund',5.00,1,1,'Misc Refund',NULL,0,'2021-06-10 12:07:11','2021-06-10 12:07:11',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-4,'RR',NULL,'Overpayment Refund',4.00,1,1,'Overpayment Refund',NULL,0,'2021-06-10 12:06:56','2021-06-10 12:06:56',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-3,'RR',NULL,'Promotion',3.00,1,1,'Promotion',NULL,0,'2021-06-10 12:06:41','2021-06-10 12:06:41',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-2,'RR',NULL,'Discount',2.00,1,1,'Discount',NULL,0,'2021-06-10 12:06:23','2021-06-10 12:06:23',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00'),  \n" +
                "(-1,'RR',NULL,'CM/DM Refund',1.00,1,1,'CM/DM Refund',NULL,0,'2021-06-10 12:05:53','2021-06-10 12:05:53',NULL,NULL,NULL,NULL,'2001-01-01 00:00:00');  \n" +
                /* **************************** Add Script Version -> 10-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4783,'2.00','V1','Create table for transmode and default system generated records for it - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4783:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_sys_unqDate_objectCount` ;  \n" +
                "CREATE PROCEDURE `Sproc_sys_unqDate_objectCount`(  \n" +
                "	IN pDBName VARCHAR(5000)   \n" +
                ")  \n" +
                "BEGIN     \n" +
                "SELECT       \n" +
                "	TABLE_NAME,       \n" +
                "	GROUP_CONCAT(COLUMN_NAME) AS COL_NAME,       \n" +
                "	GROUP_CONCAT(UNQ_KEY_NAME  SEPARATOR ' | ') UNQ_KEY_NAME, GROUP_CONCAT(UNQ_KEY_COLUMNS SEPARATOR ' | ') UNQ_KEY_COLUMNS,          \n" +
                "	GROUP_CONCAT(TRIGGER_NAME  SEPARATOR ' | ') AS UNQDATE_TRIGGER_NAME,    \n" +
                "	GROUP_CONCAT(MAN_TRIGGER_NAME  SEPARATOR ' | ') AS MANUAL_UK_TRIGGER_NAME     \n" +
                "FROM       \n" +
                "(      \n" +
                "	SELECT `TABLE_NAME`,`COLUMN_NAME`, NULL AS UNQ_KEY_NAME, NULL AS TRIGGER_NAME, NULL AS UNQ_KEY_COLUMNS, NULL AS MAN_TRIGGER_NAME       \n" +
                "	FROM `information_schema`.COLUMNS        \n" +
                "	WHERE       \n" +
                "		`TABLE_SCHEMA` =pDBName AND COLUMN_NAME='unqDate'      \n" +
                "	UNION ALL       \n" +
                "	SELECT `EVENT_OBJECT_TABLE`,NULL AS COLUMN_NAME, NULL AS UNQ_KEY_NAME,IF(`TRIGGER_NAME` LIKE 'TRG_UNQDATE_%',`TRIGGER_NAME`,NULL) AS TRIGGER_NAME, NULL AS UNQ_KEY_COLUMNS, IF(`TRIGGER_NAME` LIKE 'TRG_UK_MANUAL%',`TRIGGER_NAME`,NULL) AS MAN_TRIGGER_NAME           \n" +
                "	FROM `information_schema`.`TRIGGERS`      \n" +
                "	WHERE `TRIGGER_SCHEMA` =pDBName AND (TRIGGER_NAME LIKE 'TRG_UNQDATE_%' OR TRIGGER_NAME LIKE 'TRG_UK_MANUAL%' )      \n" +
                "	UNION ALL       \n" +
                "	SELECT `TABLE_NAME`,NULL AS COLUMN_NAME, `CONSTRAINT_NAME` AS UNQ_KEY_NAME, NULL AS`TRIGGER_NAME`, NULL AS UNQ_KEY_COLUMNS, NULL AS MAN_TRIGGER_NAME           \n" +
                "	FROM `information_schema`.`TABLE_CONSTRAINTS`      \n" +
                "	WHERE       \n" +
                "		`TABLE_SCHEMA` =pDBName       \n" +
                "		-- AND `CONSTRAINT_TYPE` = 'UNIQUE'       \n" +
                "		AND CONSTRAINT_NAME LIKE 'IDX_UNQ_%'      \n" +
                "	UNION ALL      \n" +
                "	SELECT       \n" +
                "		TABLE_NAME,NULL AS COLUMN_NAME, NULL AS UNQ_KEY_NAME, NULL AS trigger_name , GROUP_CONCAT(COLUMN_NAME) AS UNQ_KEY_COLUMNS,NULL AS MAN_TRIGGER_NAME         \n" +
                "	FROM information_schema.key_column_usage       \n" +
                "	WHERE       \n" +
                "		`TABLE_SCHEMA` =pDBName       \n" +
                "		AND CONSTRAINT_NAME LIKE 'IDX_UNQ_%'      \n" +
                "	GROUP BY TABLE_NAME,CONSTRAINT_NAME      \n" +
                ") AS X      \n" +
                "GROUP BY TABLE_NAME;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4784,'2.00','V1','SP unique object count with params - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4784:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDocumentCount`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDocumentCount`(	                              \n" +
                "	IN pUMIDId INT                      \n" +
                "    )  \n" +
                "BEGIN                              \n" +
                "	DECLARE v_PackingSlipId INT;     \n" +
                "	DECLARE v_DocumentTypeIds VARCHAR(100);        \n" +
                "	DECLARE v_DocumentCount INT;         \n" +
                "	DECLARE v_DocumentCofCCount INT;        \n" +
                "	DECLARE v_ParentDocumentCount INT;        \n" +
                "    DECLARE v_ParentUIDId INT;         \n" +
                "    DECLARE v_SplitUIDCount INT;      \n" +
                "  \n" +
                "    SELECT parentUIDId INTO v_ParentUIDId FROM component_sid_stock WHERE id = pUMIDId and isDeleted = 0;      \n" +
                "  \n" +
                "	SELECT 	refPackingSlipMaterialRecID             \n" +
                "	INTO 	v_PackingSlipId            \n" +
                "	FROM 	packing_slip_material_receive_det             \n" +
                "	WHERE 	deletedAt IS NULL     \n" +
                "			AND id = (            \n" +
                "					SELECT 	refPackingSlipDetailID             \n" +
                "					FROM 	component_sid_stock_packing_detail             \n" +
                "					WHERE 	refComponentSidStockID in (pUMIDId, v_ParentUIDId)          \n" +
                "							AND deletedAt IS NULL             \n" +
                "					LIMIT 1            \n" +
                "				)            \n" +
                "	LIMIT 1;            \n" +
                "  \n" +
                "	SELECT 	GROUP_CONCAT(gencCategoryID)             \n" +
                "	INTO	v_DocumentTypeIds            \n" +
                "	FROM 	genericcategory             \n" +
                "	WHERE 	deletedAt IS NULL        \n" +
                "			AND categoryType = 'Document Type'             \n" +
                "			AND gencCategoryName IN ('COFC', 'Packing Slip With COFC');            \n" +
                "  \n" +
                "    SELECT          \n" +
                "		IFNULL(vgf.cnt, 0) INTO v_DocumentCount        \n" +
                "	FROM 	vu_genericfilescount vgf             \n" +
                "	WHERE 	vgf.refTransID = pUMIDId             \n" +
                "			AND vgf.gencFileOwnerType = 'component_sid_stock';       \n" +
                "  \n" +
                "	SELECT          \n" +
                "		IFNULL(vgf.cnt, 0) INTO v_ParentDocumentCount        \n" +
                "	FROM 	vu_genericfilescount vgf             \n" +
                "	WHERE 	vgf.refTransID = v_ParentUIDId      \n" +
                "			AND vgf.gencFileOwnerType = 'component_sid_stock';       \n" +
                "  \n" +
                "	SELECT 	COUNT(1)            \n" +
                "	INTO 	v_DocumentCofCCount            \n" +
                "	FROM 	genericfiles             \n" +
                "	WHERE 	deletedAt IS NULL  AND isRecycle = 0             \n" +
                "			AND (          \n" +
                "				(refTransID IN (pUMIDId, IFNULL(v_ParentUIDId,'')) AND gencFileOwnerType = 'component_sid_stock' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds))             \n" +
                "				OR           \n" +
                "				(refTransID = v_PackingSlipId AND gencFileOwnerType = 'packing_slip' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds))          \n" +
                "			);     \n" +
                "  \n" +
                "	SELECT 	COUNT(1)                \n" +
                "	INTO	v_SplitUIDCount            \n" +
                "	FROM 	component_sid_stock   \n" +
                "    WHERE parentUIDId = pUMIDId and isDeleted = 0;      \n" +
                "  \n" +
                "	SELECT 	v_DocumentCount AS documentCount,      \n" +
                "		v_DocumentCofCCount AS documentCofCCount,      \n" +
                "        v_ParentDocumentCount AS parentDocumentCount,  \n" +
                "        v_SplitUIDCount AS splitUIDCount;     \n" +
                "END; \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPOSOAssemblyList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPOSOAssemblyList`(        \n" +
                "	pExcludeCanceled TINYINT,        \n" +
                "	pSalesOrderDetailID INT,        \n" +
                "	pSearch VARCHAR(500)       \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQLStatement1 = \"	SELECT  k.*,    \n" +
                "								IF(numberOfSubAssy > 0 ,  CONCAT(searchQuery,', (', numberOfSubAssy , ')') , searchQuery)  AS salescolumn  \n" +
                "						FROM (  \n" +
                "								SELECT 	        \n" +
                "									`Sales Order ID`,  `Sales Order`, 	    `Po Number`,    `Assy ID`,    `Sales Order Status`, 	        \n" +
                "									`Status`, 	   `SalesOrderDetailId`, 	`PartID`, `Customer ID`,      `Assy Name`, 	        \n" +
                "									`NickName`,    `PO Qty`,             	`mrpQty`,     `kitQty`,       `RoHSName`, 		        \n" +
                "									`RohsIcon`,   `materialDueDate`,  `shippingDate`,  `Company Name`, 	  `Po Date`,                 \n" +
                "									`kitNumber`,   `isSkipKitCreation`,  `Company Code`,     \n" +
                "									CONCAT(`Assy ID`, ', ',`Po Number`,', ',`Sales Order`,', ',`PO Qty`,', ',`kitNumber`) searchQuery,    \n" +
                "									(SELECT COUNT(1) FROM kit_allocation_assy_detail kasd WHERE kasd.refSalesOrderDetID = vusr.SalesOrderDetailId AND deletedAt IS NULL AND bomAssyLevel > 0) numberOfSubAssy                    \n" +
                "									FROM 	vu_salesorder_shipped_report vusr WHERE isSkipKitCreation !=1 ) as k WHERE 1 = 1\";        \n" +
                "  \n" +
                "    IF(pExcludeCanceled=1) THEN        \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `Status` != 'Canceled'\");            \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF(pSalesOrderDetailID IS NOT NULL) THEN        \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `SalesOrderDetailId` = \",pSalesOrderDetailID,\" \");            \n" +
                "    END IF;   \n" +
                "	IF(pSearch IS NOT NULL AND pSearch != '') THEN     \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT  s.* FROM (  \n" +
                "								\",@SQLStatement1,\"	) as s WHERE  \n" +
                "							salescolumn LIKE '%\", pSearch ,\"%' \");    \n" +
                "    END IF;   \n" +
                "  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;                                                                                                                                    \n" +
                "	EXECUTE mainQuery;                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE mainQuery;                 \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(                                     \n" +
                "	IN pVerificationType VARCHAR(100),                                     \n" +
                "	IN pUID VARCHAR(15),                                     \n" +
                "	IN pScanMFGPNLabel VARCHAR(1000),                                     \n" +
                "	IN pScanPID VARCHAR(50),                                     \n" +
                "	IN pScanCPN VARCHAR(50),                                     \n" +
                "	IN pScanUID VARCHAR(15),                                     \n" +
                "	IN pScanMFGPN VARCHAR(100),                                     \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pMFRId INT,                      \n" +
                "	IN pBarcodeId INT                                    \n" +
                ")  \n" +
                "BEGIN                                     \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;                                     \n" +
                "	DECLARE v_mfgcodeID INT;	                                  \n" +
                "	DECLARE v_mfgPN VARCHAR(100);       \n" +
                " 	DECLARE v_PIDCode VARCHAR(100);	    \n" +
                " 	DECLARE v_PartDescription VARCHAR(2000);	                                  \n" +
                "	DECLARE v_RoHSStatusID INT;		                                  \n" +
                "	DECLARE v_compStockID INT;	                                  \n" +
                "	DECLARE	v_pkgQty DECIMAL(18,8);	                                  \n" +
                "	DECLARE v_pkgUnit DECIMAL(18,8);                                  \n" +
                " 	DECLARE v_uom VARCHAR(255);                                     \n" +
                " 	DECLARE v_string2PartID INT;	                                  \n" +
                " 	DECLARE v_scanString2MFG VARCHAR(100);                                  \n" +
                " 	DECLARE v_scanString2MFGPNID VARCHAR(100);                                     \n" +
                " 	DECLARE v_packingSlipId INT;                                  \n" +
                "	DECLARE	v_packingSlipNumber VARCHAR(255);                                  \n" +
                "	DECLARE	v_packingSlipSupplierId INT;                                  \n" +
                "	DECLARE	v_packingSlipSupplierCode VARCHAR(10);                                  \n" +
                "	DECLARE	v_cOfCValue VARCHAR(100);                                \n" +
                "	DECLARE v_isCustom TINYINT(1) DEFAULT 0;                            \n" +
                "	DECLARE v_componentId INT;                        \n" +
                "	DECLARE v_successId INT;                        \n" +
                "	DECLARE v_refcompid INT;      \n" +
                "    DECLARE v_mountingTypeID INT;  \n" +
                "    DECLARE v_partPackage VARCHAR(255);  \n" +
                "    DECLARE v_uomClass VARCHAR(255);  \n" +
                "    DECLARE v_spq DECIMAL(18,8);	  \n" +
                "    DECLARE v_orgQty DECIMAL(18,8);	  \n" +
                "	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_imageURL VARCHAR(1000);  \n" +
                "    DECLARE v_documentPath VARCHAR(1000);  \n" +
                "    DECLARE v_mfgCode VARCHAR(255);  \n" +
                "    DECLARE v_mfgName VARCHAR(255);  \n" +
                "    DECLARE v_mfgType VARCHAR(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;                                     \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;                                     \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS                                     \n" +
                "		SELECT 		*,                                  \n" +
                "				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode                                  \n" +
                "		FROM 		(                                  \n" +
                "					SELECT 		*,	                                  \n" +
                "							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,                                   \n" +
                "							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
                "                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(                               \n" +
                "												CASE                               \n" +
                "													WHEN stockInventoryType = 'NI' THEN                              \n" +
                "														fun_getUMIDPackingSlipNameByID(id)   \n" +
                "													WHEN stockInventoryType = 'SI' THEN                              \n" +
                "														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
                "													ELSE                              \n" +
                "														uid                              \n" +
                "												END                              \n" +
                "											)ELSE NULL END) cOfCValue   \n" +
                "					FROM 		(                                  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   mt.name uomClass,   c.isCustom,  c.mfgPNDescription,                        \n" +
                "										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
                "								FROM 		component_sid_stock cs                                     \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id   \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id   \n" +
                "								INNER JOIN 	measurement_types mt ON um.measurementTypeID = mt.id   \n" +
                "								WHERE 		cs.uid =  pUID                              \n" +
                "								AND 		cs.isDeleted = 0                                     \n" +
                "								LIMIT 		1                                  \n" +
                "							) AS a                                  \n" +
                "				) AS b;                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (                                     \n" +
                "		scanString1 VARCHAR(1000) NULL,                                   \n" +
                "		scanString2 VARCHAR(1000) NULL,                                     \n" +
                "		string1PartID INT(11) NULL,	                                  \n" +
                "		scanString1MFG VARCHAR(100) NULL,                                   \n" +
                "		scanString1MFGPNID VARCHAR(100) NULL,                                     \n" +
                "		string2PartID INT(11) NULL,	                                  \n" +
                "		scanString2MFG VARCHAR(100) NULL,                                   \n" +
                "		scanString2MFGPNID VARCHAR(100) NULL,                                     \n" +
                "		STATUS VARCHAR(100) NULL,                                   \n" +
                "		packingSlipId INT(11) NULL,                                  \n" +
                "		packingSlipNumber VARCHAR(255) NULL,                                  \n" +
                "		packingSlipSupplierId INT(11) NULL,                                  \n" +
                "		packingSlipSupplierCode VARCHAR(10) NULL,                                  \n" +
                "		cOfCValue VARCHAR(100) NULL,                                  \n" +
                "		isDeleted TINYINT(1) DEFAULT '0',                                     \n" +
                "		createdBy VARCHAR(255) NULL,                                   \n" +
                "		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP                                  \n" +
                "	);                                     \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,                                     \n" +
                "					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                    \n" +
                "					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,                                  \n" +
                "					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,                                  \n" +
                "					`packingSlipSupplierCode`,			`cOfCValue`)                                     \n" +
                "	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,	                                    \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,                                     \n" +
                "		NULL string2PartID,                                     \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,                                  \n" +
                "		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,                                  \n" +
                "		supplierCode,			cOfCValue                                  \n" +
                "	FROM 	tempUIDDet UH;                                     \n" +
                "  \n" +
                "	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,	  \n" +
                "			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClass,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
                "            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL                         \n" +
                "	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
                "			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClass,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
                "            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL                                 \n" +
                "	FROM 	tempUIDDet u;                                    \n" +
                "  \n" +
                "	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN                                     \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN                                     \n" +
                "			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN                                     \n" +
                "				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL);                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS                        \n" +
                "				SELECT * FROM tempUIDSuccessDetail;                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS                        \n" +
                "				SELECT * FROM tempUIDComponentDetail;	                        \n" +
                "				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;                        \n" +
                "				IF (v_successId = 1) THEN                        \n" +
                "					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;                        \n" +
                "					IF (v_componentId = v_refcompid) THEN                        \n" +
                "						SET uidVerified = 1;                        \n" +
                "					END IF;                       \n" +
                "				ELSE                       \n" +
                "					SET uidVerified = 0;                        \n" +
                "				END IF;                        \n" +
                "			-- END IF;                                     \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN                                     \n" +
                "			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN                                     \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "			FROM 	component c                                     \n" +
                "			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);                                     \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN                                     \n" +
                "				SET uidVerified = 1;                                     \n" +
                "			END IF	;                                     \n" +
                "		ELSEIF (pUID = pScanUID) THEN                                     \n" +
                "			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN                                     \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "			FROM 	tempUIDDet c;                                     \n" +
                "			SET uidVerified = 1;                                     \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN                                     \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN                                     \n" +
                "				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN                                     \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "				FROM 	tempUIDDet c;                                     \n" +
                "				SET uidVerified = 1;                                     \n" +
                "			ELSE                                     \n" +
                "				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN                                     \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "				FROM 	component c                                     \n" +
                "				WHERE 	c.mfgPN = pScanMFGPN;                                     \n" +
                "			END IF;                                     \n" +
                "		END IF;                                     \n" +
                "		UPDATE 	tempUIDHistory                                     \n" +
                "		SET 	string2PartID = v_string2PartID,                                     \n" +
                "			scanString2MFG = v_scanString2MFG,                                     \n" +
                "			scanString2MFGPNID = v_scanString2MFGPNID;                                     \n" +
                "	ELSE                                     \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)                                     \n" +
                "				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));                                     \n" +
                "	END IF;                                     \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,                                     \n" +
                "						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,	                                    \n" +
                "						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,	                                    \n" +
                "						`status`,	                                    \n" +
                "						`isDeleted`,		`createdBy`,		`createdAt`)                                     \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,                                     \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),	                                  \n" +
                "		UH.scanString1MFGPNID,	UH.string2PartID,	                                  \n" +
                "		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,	                                    \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                     \n" +
                "		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`                                     \n" +
                "	FROM 	tempUIDHistory UH;                                     \n" +
                "  \n" +
                "	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
                "		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,    \n" +
                "        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,   \n" +
                "		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
                "		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClass uomClass,                              \n" +
                "		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,                                  \n" +
                "		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,                                 \n" +
                "		v_cOfCValue cOfCValue,	v_isCustom isCustom                                  \n" +
                "	FROM 	uid_verification_history                                     \n" +
                "	WHERE 	id = LAST_INSERT_ID();	                       \n" +
                "  \n" +
                "	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN                         \n" +
                "		SELECT * FROM tempUIDSuccessDetail;                      \n" +
                "	ELSE                       \n" +
                "		SELECT 1;                      \n" +
                "	END IF;                                   \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(    \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),    \n" +
                "	IN pAssyId INT,    \n" +
                "	IN pPartId VARCHAR(255),    \n" +
                "	IN pToUOM INT,    \n" +
                "	IN pRfqLineItemIds VARCHAR(255),    \n" +
                "	IN pCustomerId INT,     \n" +
                "	IN pType VARCHAR(255),    \n" +
                "	IN pStockType VARCHAR(20)    \n" +
                ")  \n" +
                "BEGIN                         \n" +
                "	DECLARE v_WhareClause VARCHAR(255);    \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);    \n" +
                "	DECLARE v_AssyId INT;    \n" +
                "	DECLARE v_IsPurchase TINYINT;    \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);    \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;    \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);    \n" +
                "	SET SESSION group_concat_max_len = 500000;    \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')    \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN    \n" +
                "	FROM 	kit_allocation_lineitems    \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID    \n" +
                "			AND partID = pAssyId    \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)    \n" +
                "			AND isDeleted = 0    \n" +
                "	LIMIT 	1;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS    \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId    \n" +
                "	FROM 		component c    \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0    \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartId)    \n" +
                "				AND c.isDeleted = 0    \n" +
                "	GROUP BY 	mfrPNId;    \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS    \n" +
                "		SELECT 	*    \n" +
                "		FROM 	(    \n" +
                "				SELECT  	*    \n" +
                "				FROM 		(    \n" +
                "							SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode,    \n" +
                "									fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,    \n" +
                "									IFNULL(cst.customerID, 0) customerID,		cst.binID,			IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,    \n" +
                "									IFNULL(cst.assyID, 0) assyID,			cst.receiveMaterialType,	cst.customerConsign,	cst.uom,	cst.packaging,    \n" +
                "									cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,    \n" +
                "									cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,    \n" +
                "									cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,    \n" +
                "									cst.pkgUnit,		c.PIDCode,		IFNULL(cst.nickName, '-') nickName,			IFNULL(fun_getMfgCodeAndNameByID(cst.customerID), '-') customer,    \n" +
                "									IFNULL(ca.PIDCode, '-') assembly,		c.RoHSStatusID	rohsID,    \n" +
                "									fun_getRoHSNameByID(c.RoHSStatusID) rohsName,				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,    \n" +
                "									IFNULL(fun_getRoHSNameByID(ca.RoHSStatusID), '-') assyRohsName,		IFNULL(fun_getRoHSIconByID(ca.RoHSStatusID), '-') assyRohsIcon,    \n" +
                "									fun_getBinNameByID(cst.binID) binName,			      		fun_getWarehouseNameByBinID(cst.binID) warehouseName,    \n" +
                "									fun_getWareHouseTypeByBinID(cst.binID) warehouseType,			fun_getDepartmentNameByBinID(cst.binID) departmentName,    \n" +
                "									fun_getUnitNameByID(cst.uom) unitName,    \n" +
                "									c.mfgPN,		0 pendingUMIDQty,    \n" +
                "									fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,    \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,    \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,    \n" +
                "									(    \n" +
                "										CASE    \n" +
                "											WHEN c.connecterTypeID = -2 THEN    \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))    \n" +
                "											ELSE 0    \n" +
                "										END    \n" +
                "									) allocatedPins,    \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,    \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,    \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,    \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,             	c.isGoodPart,                                                   \n" +
                "									c.restrictUsePermanently,		c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                 \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,					d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                          \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,      \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,					cst.isUMIDRestrict,	                                    \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                    \n" +
                "									d.customerApproval customerApproveStatus,                                       v_CustomerApprovalCPN customerApproveStatusCPN,        \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,						fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                        \n" +
                "									v_IsPurchase isPurchase,            \n" +
                "									fun_getBOMLineCleanStatusErrorCategoryWise(NULL, d.refRfqLineitem, cst.id, pAssyId, 2) lineCleanStatus            \n" +
                "									-- concat(d.refRfqLineitem, '###', cst.id, '###', pAssyId) lineCleanStatus                        \n" +
                "									-- cst.id lineCleanStatus        \n" +
                "							FROM 		component_sid_stock cst      \n" +
                "							LEFT JOIN 	component c ON c.id = cst.refcompid                                             \n" +
                "							LEFT JOIN	component ca ON ca.id = cst.assyID                 \n" +
                "							LEFT JOIN 	(                      \n" +
                "										SELECT 		ka.refUIDId,                                     \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                         \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                        \n" +
                "										FROM 		kit_allocation ka        \n" +
                "										WHERE 		ka.status = 'A'                 \n" +
                "										GROUP BY 	ka.refUIDId                    \n" +
                "									) AS ka ON ka.refUIDId = cst.id                        \n" +
                "							LEFT JOIN	(               \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                           \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                         \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                                 \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                                  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                         \n" +
                "													AND a.partID = pAssyId                            \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                       \n" +
                "													AND a.isDeleted = 0           \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                      \n" +
                "										UNION        \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  		                           \n" +
                "										FROM 		kit_allocation_lineitems a                                         \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                         \n" +
                "													AND a.partID = pAssyId                            \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                       \n" +
                "													AND a.isDeleted = 0           \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		      \n" +
                "									) d ON d.mfgPNID = cst.refcompid                        \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                        \n" +
                "										AND (                        \n" +
                "											CASE                        \n" +
                "												WHEN pStockType = 'IS' THEN                        \n" +
                "													cst.customerConsign = 0                        \n" +
                "												WHEN pStockType = 'CS' THEN                        \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                        \n" +
                "												ELSE                        \n" +
                "													1 = 1                        \n" +
                "											END                        \n" +
                "											)                        \n" +
                "										AND cst.isDeleted = 0                        \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0                         \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                  \n" +
                "			) b;                                  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                        \n" +
                "		SELECT 		0 AS id,			'-' AS uid,				refcompid,			0 AS pkgQty, 		                                    \n" +
                "				'-' AS dateCode,   		'-' AS internalDateCodeInDate,		0 AS customerID,		0 AS binID, 	                                  \n" +
                "				0 AS salesOrderDetailID,	0 AS assyID,				'-' AS receiveMaterialType, 	0 AS customerConsign,	                                    \n" +
                "				c.uom,				c.packagingID packaging,		fromBin,			b.Name fromBinName,                                  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		                        \n" +
                "				w.parentWHID fromDepartment,	fun_getWarehouseNameByID(w.parentWHID) fromDepartmentName,                                  \n" +
                "				0 AS pkgUnit,			c.PIDCode,				'-' nickName,			'-' AS customer,		                                    \n" +
                "				'-' AS assembly,		c.RoHSStatusID	rohsID,                        \n" +
                "				'-' AS assyRohsName,		'-' AS assyRohsIcon,			                        \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		                                    \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                            			                    \n" +
                "				'-' AS binName,			'-' AS warehouseName, 			'-' AS warehouseType,		'-' AS departmentName,	                    \n" +
                "				fun_getUnitNameByID(c.uom) unitName,					c.mfgPN,			pendingUMIDQty,                  \n" +
                "				0 AS convertedUnit,		0 currentPin,				'-' AS allocatedToKit,		                        \n" +
                "				0 AS allocatedQty,		0 AS allocatedUnit,			0 AS allocatedPins,		0 AS scrapedPins,                                    \n" +
                "				0 AS FreeToShare,		0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		'-' costCategory, 			                                    \n" +
                "				c.isGoodPart,			c.restrictUsePermanently,		c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently, 	                                    \n" +
                "				c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		0 AS restrictUseInBOMWithPermission,	      \n" +
                "				1 AS restrictUseInBOMExcluding,	0 AS restrictUseInBOMExcludingAliasWithPermission,			v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,      \n" +
                "				0 AS isUMIDRestrict,		fun_convertUOM(c.uom,pToUOM,c.unit) unit,				'-' customerApproveStatus,		                                    \n" +
                "				v_CustomerApprovalCPN customerApproveStatusCPN,				0 UMIDRohsStatusID,			'-' UMIDRohsStatus, 		            \n" +
                "				v_IsPurchase isPurchase, 	0 AS lineCleanStatus         \n" +
                "		FROM 		(                        \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                        \n" +
                "					FROM 		vu_umid_creation_pending vu                        \n" +
                "					GROUP BY 	vu.PartId, vu.BinID                        \n" +
                "				) vu                                  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid                                  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0                         \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0                                \n" +
                "		WHERE 		c.id IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart) AND pendingUMIDQty > 0;	                              \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                        \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                        \n" +
                "		ELSE                        \n" +
                "			SELECT 	*		                                \n" +
                "			FROM 	(                                \n" +
                "					SELECT  id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                  \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                    \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                  \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                  \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                  \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                  \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                          \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                          \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                  \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                        \n" +
                "					UNION ALL                    \n" +
                "					SELECT 	id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                  \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                    \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                  \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                  \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                  \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                  \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                          \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                          \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                  \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                   \n" +
                "					FROM 	temp_nonUmidAvailableStock                                  \n" +
                "				) d;                                \n" +
                "				-- ORDER BY internalDateCodeInDate IS NULL, internalDateCodeInDate, costCategory, uid;                          \n" +
                "		END IF;          \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN                \n" +
                "		SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                                \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                                    \n" +
                "				cst.customerID,		cst.binID,		cst.salesOrderDetailID, 	cst.assyID,		cst.receiveMaterialType,                        \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,					                        \n" +
                "				cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                  \n" +
                "				cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,             \n" +
                "				cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                                    \n" +
                "				fun_getBinNameByID(cst.binID) binName,		cst.pkgUnit,		cst.nickName,			                                    \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,	fun_getWareHouseTypeByBinID(cst.binID) warehouseType,                                            \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	fun_getDepartmentTypeByBinID(cst.binID) departmentType,                   \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			                                            \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	fun_getAssyPIDCodeByID(cst.assyID) assembly,	                                    \n" +
                "				c.PIDCode,		c.mfgPN, 			c.RoHSStatusID rohsID,				                                           \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                         \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                        \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                        \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                                    \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                                       \n" +
                "				v_NumOfPosition bomPin,                        \n" +
                "				c.noOfPosition,          \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                           \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                                \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,      \n" +
                "				c.isCustom,                          \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                                                          \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                                                    \n" +
                "				c.isCustom,	cst.rohsStatusID UMIDRohsStatusID,                                                    \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                                              \n" +
                "				ka.roHSApprovalReason,                                              \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                              \n" +
                "		FROM 		component_sid_stock cst                      \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid                                              \n" +
                "		LEFT JOIN 	(                        \n" +
                "					SELECT 		b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                         \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                        \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                           \n" +
                "					FROM 		(                        \n" +
                "								SELECT 		refUIDId, partID, allocatedUOM, consumeUOM,                         \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                         \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                          \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                        \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                        \n" +
                "								FROM 		kit_allocation                         \n" +
                "								WHERE 		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                        \n" +
                "								GROUP BY 	refUIDId, partID, allocatedUOM, consumeUOM                        \n" +
                "							) a                        \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId AND (CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                        \n" +
                " 				) ka ON ka.refUIDId = cst.id                       \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                                 \n" +
                "					AND ka.assyID = IFNULL(pAssyId,ka.assyID)                              \n" +
                "					AND ka.partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                                \n" +
                "					AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)       \n" +
                "					AND (                        \n" +
                "						CASE                         \n" +
                "							WHEN pType = 'AllocatedStock' THEN                         \n" +
                "								ka.`status` = 'A'                         \n" +
                "							ELSE                         \n" +
                "								ka.`status` = 'R'                         \n" +
                "						END                        \n" +
                "					)                        \n" +
                "					AND cst.isDeleted = 0                        \n" +
                "		ORDER BY 	internalDateCodeInDate, costCategory, cst.uid;                             \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;               \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getUMIDDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getUMIDDataForSearchMaterial`(             \n" +
                "	IN pPageIndex INT,                                                                                                                                \n" +
                "	IN pRecordPerPage INT,                                                                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pAssyId INT,       \n" +
                "    IN pNickName VARCHAR(255),    \n" +
                "	IN pSearchString VARCHAR(100),     \n" +
                "	IN pSearchType VARCHAR(10)            \n" +
                ")  \n" +
                "BEGIN                     \n" +
                "	DECLARE pOffset INT;                                                                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                                            \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_WhereClauseExtra VARCHAR(1000);       \n" +
                "    DECLARE v_WhereClauseNickName VARCHAR(1000);    \n" +
                "	DECLARE v_UMIDSearchQuery LONGTEXT;            \n" +
                "	DECLARE v_MFRSearchQuery LONGTEXT;            \n" +
                "	DECLARE v_MFRPackagingSearchQuery LONGTEXT;            \n" +
                "	DECLARE v_FromFinalSQLQuery LONGTEXT;            \n" +
                "	SET v_WhereClauseExtra = ' AND 1 = 1 ';            \n" +
                "  \n" +
                "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                                                                   \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                                  \n" +
                "	ELSE	                                                                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                                                                  \n" +
                "	END IF;	            \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \" id DESC\") ;                                                                                                                                  \n" +
                "	ELSE                                                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                                                  \n" +
                "	END IF;	            \n" +
                "	IF (pSearchType = 'contains') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');            \n" +
                "	ELSEIF (pSearchType = 'exact') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');            \n" +
                "	ELSE            \n" +
                "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';            \n" +
                "		SET v_WhereClausePIDSearch = ' 1 = 1';            \n" +
                "	END IF;            \n" +
                "  \n" +
                "    SET v_WhereClauseNickName = '1 = 1';    \n" +
                "  \n" +
                "	IF (pAssyId IS NOT NULL) THEN            \n" +
                "		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND assyID = ', pAssyId);            \n" +
                "	ELSEIF (pNickName IS NOT NULL) THEN    \n" +
                "		SET v_WhereClauseNickName = CONCAT(v_WhereClauseNickName, ' AND a.assyNickName = \"', pNickName,'\"');      \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NOT NULL AND pWhereClause != '') THEN                                                                                                                                  \n" +
                "		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND ', pWhereClause);                                                                                                                                  \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET v_UMIDSearchQuery = CONCAT('            \n" +
                "		SELECT 	id            \n" +
                "		FROM	component_sid_stock            \n" +
                "		WHERE	(', v_WhereClauseUMIDSearch ,')            \n" +
                "				AND isDeleted = 0            \n" +
                "	');            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetUMIDBySearchString;                                                                          \n" +
                "	SET @vSQLMainQuery1 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetUMIDBySearchString AS \", v_UMIDSearchQuery);                \n" +
                "	PREPARE mainQuery1 FROM @vSQLMainQuery1;                                                                                                                                                \n" +
                "	EXECUTE mainQuery1;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE mainQuery1;              \n" +
                "  \n" +
                "	SET v_MFRSearchQuery = CONCAT('             \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId          \n" +
                "			FROM 		component c        \n" +
                "			LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0     \n" +
                "			LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0         \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0             \n" +
                "			WHERE 		(', v_WhereClausePIDSearch ,')             \n" +
                "						AND c.isDeleted = 0  \n" +
                "	');      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;                                                                          \n" +
                "	SET @vSQLMainQuery2 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", v_MFRSearchQuery);                                                                                 	                      \n" +
                "	PREPARE mainQuery2 FROM @vSQLMainQuery2;                                                                                                                                                \n" +
                "	EXECUTE mainQuery2;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE mainQuery2;              \n" +
                "  \n" +
                "	SET v_FromFinalSQLQuery = CONCAT('             \n" +
                "				SELECT 		css.id,             \n" +
                "						css.uid,             \n" +
                "						css.receiveMaterialType,            \n" +
                "						css.refcompid,             \n" +
                "						fun_getMfgCodeAndNameByID(c.mfgCodeId) fullMfrName,             \n" +
                "						c.mfgPN mfrPN,             \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,            \n" +
                "						fun_getRoHSNameByID(c.RoHSStatusID) rohsName,            \n" +
                "						c.isCustom,            \n" +
                "						c.restrictUsePermanently,            \n" +
                "						c.restrictUSEwithpermission,            \n" +
                "						c.restrictPackagingUsePermanently,            \n" +
                "						c.restrictPackagingUseWithpermission,            \n" +
                "						fun_getBinNameByID(css.binID) currentBinName,            \n" +
                "						fun_getWarehouseNameByBinID(css.binID) currentWarehouseName,            \n" +
                "						fun_getDepartmentNameByBinID(css.binID) currentParentWarehouseName,            \n" +
                "						css.pkgQty currentCount,            \n" +
                "						css.pkgUnit currentUnit,            \n" +
                "						css.uom currentUOM,            \n" +
                "						fun_getUnitNameByID(css.uom) currentUOMName,            \n" +
                "						css.packaging,            \n" +
                "						fun_getPackagingNameByID(css.packaging) packagingName,            \n" +
                "						ka.status,             \n" +
                "						ka.assyID,             \n" +
                "						ka.partId,            \n" +
                "						fun_getAllocatedKitsNameByID(css.id, \"A\") allocatedToKit,            \n" +
                "						(CASE WHEN ka.assyID IS NULL THEN NULL ELSE fun_getAssyNickNameByID(ka.assyID) END) assyNickName,            \n" +
                "						rl.lineID bomLineNo            \n" +
                "				FROM 		component_sid_stock css             \n" +
                "				LEFT JOIN 	kit_allocation ka ON css.id = ka.refUIDId AND ka.status = \"A\"            \n" +
                "				LEFT JOIN 	rfq_lineitems rl ON rl.id = ka.refBOMLineID AND rl.partID = ka.assyID AND rl.isDeleted = 0            \n" +
                "				INNER JOIN	component c ON c.id = css.refcompid AND c.deletedAt IS NULL            \n" +
                "				WHERE 		css.isDeleted = 0        \n" +
                "							AND (            \n" +
                "								EXISTS (            \n" +
                "									SELECT 	1            \n" +
                "									FROM 	tempGetUMIDBySearchString t            \n" +
                "									WHERE 	t.id = css.id            \n" +
                "								)            \n" +
                "								OR            \n" +
                "								EXISTS (            \n" +
                "									SELECT 	1            \n" +
                "									FROM 	tempGetMFRPNIdBySearchString t            \n" +
                "									WHERE 	t.mfrPNId = css.refcompid   OR t.distPNId = css.refcompid        \n" +
                "								)            \n" +
                "						) GROUP BY id, refcompid '  , pOrderBy , ' ' , rowNumWhere, '            \n" +
                "			');     \n" +
                "	SET @finalMainQuery = CONCAT(\"SELECT a.* FROM ( \", v_FromFinalSQLQuery,\" ) a WHERE \", v_WhereClauseNickName, v_WhereClauseExtra );                                          \n" +
                "	PREPARE finalMainQuery FROM @finalMainQuery;                                                                                                                                                \n" +
                "	EXECUTE finalMainQuery;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE finalMainQuery;       \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getBOMDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getBOMDataForSearchMaterial`(    \n" +
                "	IN pAssyId INT,            \n" +
                "	IN pSearchString VARCHAR(100),            \n" +
                "	IN pSearchType VARCHAR(10)            \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_SearchBOMLineIds VARCHAR(10000);            \n" +
                "	DECLARE v_MFRPnIds LONGTEXT;  \n" +
                "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "  \n" +
                "    IF (pSearchType = 'contains') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');            \n" +
                "	ELSEIF (pSearchType = 'exact') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');            \n" +
                "	ELSE            \n" +
                "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';            \n" +
                "		SET v_WhereClausePIDSearch = ' 1 = 1';            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('            \n" +
                "		SELECT 	refcompid AS mfrPNId , NULL AS  distPNId         \n" +
                "		FROM 	component_sid_stock             \n" +
                "		WHERE   ', v_WhereClauseUMIDSearch ,'            \n" +
                "				AND isDeleted = 0            \n" +
                "		UNION     \n" +
                "		SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId          \n" +
                "		FROM 		component c        \n" +
                "		LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0     \n" +
                "		LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0         \n" +
                "		LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0             \n" +
                "		WHERE 		(', v_WhereClausePIDSearch ,')            \n" +
                "	');            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;                          \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", @vFromSQLQuery);            \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                  \n" +
                "	EXECUTE mainQuery;                                  \n" +
                "	DEALLOCATE PREPARE mainQuery;              \n" +
                "  \n" +
                "	SELECT CONCAT(GROUP_CONCAT(mfrPNId), ',',GROUP_CONCAT(distPNId)) INTO v_MFRPnIds FROM tempGetMFRPNIdBySearchString;            \n" +
                "  \n" +
                "  \n" +
                "	SELECT 	GROUP_CONCAT(rfqLineItemsID) INTO v_SearchBOMLineIds            \n" +
                "	FROM 	(    \n" +
                "			SELECT 		a.rfqLineItemsID            \n" +
                "			FROM 		rfq_lineitems_alternatepart a                  \n" +
                "			LEFT JOIN	rfq_lineitems b ON b.id = a.rfqLineItemsID                  \n" +
                "			INNER JOIN 	component c ON a.mfgPNID = c.id                 \n" +
                "			LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                  \n" +
                "			WHERE 		a.partID = IFNULL(pAssyId, a.partID)             \n" +
                "						AND FIND_IN_SET(IFNULL(d.id, c.id), v_MFRPnIds)            \n" +
                "						AND a.isDeleted = 0            \n" +
                "		) AS a;            \n" +
                "  \n" +
                "  \n" +
                "		SELECT 		rl.id,                \n" +
                "				fun_getAssyPIDCodeByID(rl.partId) assyPIDCode,            \n" +
                "				rl.partId assyId,          \n" +
                "				rl.lineID,    \n" +
                "				rl.cust_lineID,    \n" +
                "				rl.qpa,    \n" +
                "				rl.refDesig,    \n" +
                "				(CASE WHEN rla.mfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE rla.mfgCode END) AS mfgCode,    \n" +
                "				IFNULL(d.mfgCodeID, c.mfgCodeID) mfgCodeID,    \n" +
                "				mcm.acquisitionDetail,    \n" +
                "				IFNULL(d.mfgPN, c.mfgPN) mfgPN,    \n" +
                "				IFNULL(d.id, c.id) AS mfgPNID,            \n" +
                "				(CASE WHEN rla.distMfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE rla.distributor END) AS distributor,	                                          \n" +
                "				mcmDist.acquisitionDetail AS distAcquisitionDetail,            \n" +
                "				rla.distMfgCodeID,    \n" +
                "				rla.distPN,    \n" +
                "				rla.distMfgPNID,            \n" +
                "				rl.custPN,    \n" +
                "				rl.custPNID,                            \n" +
                "				(CASE WHEN rl.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = rl.custPNID) ELSE 0 END) AS isCustPN,                                          \n" +
                "				(CASE WHEN rl.uomID IS NULL THEN rl.org_uomName ELSE fun_getUnitNameByID(rl.uomID) END) AS uomID,    \n" +
                "				(CASE WHEN rl.programingStatus = 1 THEN 'Pre' WHEN rl.programingStatus = 2 THEN 'Post' ELSE 'N/A' END) AS programingStatus,             \n" +
                "				(CASE WHEN rl.substitutesAllow IS NULL THEN rl.org_substitutesAllow ELSE CASE WHEN rl.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN rl.substitutesAllow = 2 THEN 'No' ELSE '' END END) AS substitutesAllow,    \n" +
                "				(CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = rl.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END) AS allocatedInKit,                                         \n" +
                "				rla.description descriptionAlternate,    \n" +
                "				rl.description,    \n" +
                "				rl.numOfPosition,    \n" +
                "				rl.numOfRows,    \n" +
                "				rl.customerRev,    \n" +
                "				rl.customerDescription,    \n" +
                "				rl.customerPartDesc,            \n" +
                "				CONCAT(part.partTypeName) partclassID,    \n" +
                "				rl.isInstall,    \n" +
                "				rl.isPurchase,    \n" +
                "				rl.dnpQty,    \n" +
                "				rl.dnpDesig,    \n" +
                "				rla.id AS rfqAlternatePartID,        \n" +
                "				rl.qpaDesignatorStep,    \n" +
                "				rl.duplicateCPNStep,    \n" +
                "				rl.restrictCPNUseWithPermissionStep,                            \n" +
                "				rl.restrictCPNUsePermanentlyStep,    \n" +
                "				rl.restrictCPNUseInBOMStep,    \n" +
                "				rl.requireMountingTypeStep,    \n" +
                "				rl.requireFunctionalTypeStep,                                 \n" +
                "				rl.requireMountingTypeError,            \n" +
                "				rl.requireFunctionalTypeError,                                          \n" +
                "				(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES' WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END) AS isBuyDNPQty,                     \n" +
                "				rl.isObsoleteLine,    \n" +
                "				rl.customerApprovalForQPAREFDESStep,    \n" +
                "				rl.customerApprovalForBuyStep,            \n" +
                "				rl.customerApprovalForPopulateStep,                                 \n" +
                "				rl.dnpQPARefDesStep,    \n" +
                "				rl.customerApprovalForDNPQPAREFDESStep,    \n" +
                "				rl.customerApprovalForDNPBuyStep,                                         \n" +
                "				rl.customerApprovalCPN,             \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) qpaCustomerApprovalComment,                               \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) dnpqpaCustomerApprovalComment,                                         \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyCustomerApprovalComment,                               \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyDNPCustomerApprovalComment,                          \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) populateCustomerApprovalComment,     \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) cpnCustomerApprovalComment,                              \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedQPA,                             \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,    \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedDNPQPA,                             \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,             \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,                                          \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,                \n" +
                "				rla.mfgVerificationStep,    \n" +
                "				rla.mfgDistMappingStep,    \n" +
                "				rla.mfgCodeStep,    \n" +
                "				rla.customerApproval,    \n" +
                "				rla.isCustomerUnAppoval,    \n" +
                "				rla.org_mfgCode,    \n" +
                "				rla.org_mfgPN,    \n" +
                "				rla.org_distributor,    \n" +
                "				rla.org_distPN,    \n" +
                "				rla.distVerificationStep,               \n" +
                "				rla.distCodeStep,    \n" +
                "				rla.getMFGPNStep,    \n" +
                "				rla.obsoletePartStep,    \n" +
                "				rla.mfgGoodPartMappingStep,    \n" +
                "				rla.mfgPNStep,    \n" +
                "				rla.distPNStep,    \n" +
                "				rla.badMfgPN,    \n" +
                "				rla.distGoodPartMappingStep,    \n" +
                "				rla.nonRohsStep,    \n" +
                "				rla.epoxyStep,             \n" +
                "				rla.invalidConnectorTypeStep,    \n" +
                "				rla.duplicateMPNInSameLineStep,    \n" +
                "				rla.mismatchMountingTypeStep,    \n" +
                "				rla.mismatchFunctionalCategoryStep,    \n" +
                "				rla.restrictUseWithPermissionStep,    \n" +
                "				rla.restrictUsePermanentlyStep,    \n" +
                "				rla.partPinIsLessthenBOMPinStep,    \n" +
                "				rla.exportControlledStep,    \n" +
                "				rla.tbdPartStep,             \n" +
                "				rla.userData1,    \n" +
                "				rla.userData2,    \n" +
                "				rla.userData3,    \n" +
                "				rla.userData4,    \n" +
                "				rla.userData5,    \n" +
                "				rla.userData6,    \n" +
                "				rla.userData7,    \n" +
                "				rla.userData8,    \n" +
                "				rla.userData9,    \n" +
                "				rla.userData10,                \n" +
                "				rla.pickupPadRequiredStep,    \n" +
                "				rla.matingPartRquiredStep,               \n" +
                "				rla.suggestedGoodPartStep,                 \n" +
                "				rla.suggestedGoodDistPartStep,    \n" +
                "				rla.driverToolsRequiredStep,    \n" +
                "				rla.functionalTestingRequiredStep,    \n" +
                "				rla.mismatchValueStep,                 \n" +
                "				rla.approvedMountingType,    \n" +
                "				rla.mismatchPackageStep,    \n" +
                "				rla.mismatchPowerStep,                 \n" +
                "				rla.mismatchToleranceStep,    \n" +
                "				rla.mismatchTempratureStep,    \n" +
                "				rla.mismatchNumberOfRowsStep,    \n" +
                "				rla.uomMismatchedStep,    \n" +
                "				rla.programingRequiredStep,    \n" +
                "				rla.mismatchColorStep,    \n" +
                "				rla.restrictUseInBOMStep,    \n" +
                "				rla.restrictUseInBOMWithPermissionStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "				rla.restrictUseExcludingAliasStep,    \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,                                      \n" +
                "				rla.unknownPartStep,    \n" +
                "				rla.defaultInvalidMFRStep,    \n" +
                "				rla.isUnlockApprovedPart,        \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                     \n" +
                "							CONCAT(cpnPart.partTypeName)                     \n" +
                "						ELSE                     \n" +
                "							CONCAT(part.partTypeName)             \n" +
                "					END            \n" +
                "				)             \n" +
                "				AS parttypeID,                                  \n" +
                "				part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                     \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                     \n" +
                "							CONCAT(cpnMount.name)                     \n" +
                "						ELSE                     \n" +
                "							CONCAT(mount.name)             \n" +
                "					END            \n" +
                "				) AS mountingtypeID,                      \n" +
                "				CONCAT(cat.categoryname) partcategoryID,             \n" +
                "				c.isGoodPart isMFGGoodPart,    \n" +
                "				(SELECT co.isGoodPart FROM component co WHERE co.id = rla.distMfgPNID AND co.deletedAt IS NULL) isDistGoodPart,    \n" +
                "				c.RoHSStatusID RoHSStatusID,                \n" +
                "				fun_getRoHSCategoryByID(c.RoHSStatusID) refMainCategoryID,                                        \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN (c.eolDate IS NOT NULL AND c.eolDate < fun_DatetimetoUTCDateTime()) OR EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE c.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0) THEN             \n" +
                "							1             \n" +
                "						ELSE             \n" +
                "							0             \n" +
                "					END             \n" +
                "				) isObsolete,            \n" +
                "				c.PIDCode,                                \n" +
                "				c.mfgPNDescription,    \n" +
                "				c.pitch,    \n" +
                "				c.noOfRows,    \n" +
                "				c.partPackage,    \n" +
                "				c.value,    \n" +
                "				c.tolerance,                                          \n" +
                "				c.voltage,                  \n" +
                "				c.isCustom,    \n" +
                "				c.packaging,              \n" +
                "				c.deviceMarking,    \n" +
                "				c.powerRating,    \n" +
                "				c.minOperatingTemp,    \n" +
                "				c.maxOperatingTemp,    \n" +
                "				c.connecterTypeID,    \n" +
                "				c.driverToolRequired,                                \n" +
                "				c.matingPartRquired,                                \n" +
                "				c.pickupPadRequired,                                \n" +
                "				c.programingRequired,                                \n" +
                "				c.dataSheetLink,                    \n" +
                "				c.isCPN,               \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = c.id AND deletedAt IS NULL) AS driveToolIDs,                                \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = c.id AND deletedAt IS NULL AND `type` = 3) AS programingRequiredIDs,                          \n" +
                "				(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = c.id AND deletedAt IS NULL) AS operationalAttributeIDs,                              \n" +
                "				(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,    \n" +
                "				(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,        \n" +
                "				c.isTemperatureSensitive,    \n" +
                "				c.noOfPosition AS componentLead,    \n" +
                "				fun_getPartStatusNameByID(c.partStatus) AS partStatus,    \n" +
                "				fun_getPartStatusColorCodeByID(c.partStatus) AS partStatuscolorCode,    \n" +
                "				c.createdBy,    \n" +
                "				(SELECT u.unitName FROM UOMs u WHERE u.id = c.uom ) AS uom,            \n" +
                "				c.color,    \n" +
                "				c.uom AS partUOMID,                 \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN (            \n" +
                "							SELECT 		COUNT(cs.isExportControlled) AS isExportControlled              \n" +
                "							FROM 		component co                           \n" +
                "							LEFT JOIN 	component_standard_details csd ON csd.componentID = co.id AND IFNULL(csd.isDeleted,0) = 0                           \n" +
                "							LEFT JOIN 	certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1                          \n" +
                "							WHERE 		c.id = co.id            \n" +
                "						) > 0 THEN             \n" +
                "							1             \n" +
                "						ELSE             \n" +
                "							0             \n" +
                "					END             \n" +
                "				) isExportControlled,          \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,                              \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,    \n" +
                "				ac.description AS additionalComment,    \n" +
                "				ac.id AS additionalCommentId             \n" +
                "		FROM 		rfq_lineitems_alternatepart rla    \n" +
                "		INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0            \n" +
                "		INNER JOIN	component c ON c.id = rla.mfgPNID AND c.isDeleted = 0              \n" +
                "		LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID            \n" +
                "		LEFT JOIN 	mfgcodemst mcm ON rla.mfgCodeID = mcm.id AND mcm.isDeleted = 0            \n" +
                "		LEFT JOIN 	mfgcodemst mcmDist ON rla.mfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_parttypemst part ON c.functionalCategoryID = part.id AND part.isDeleted = 0            \n" +
                "		LEFT JOIN 	component cpn ON rl.custPNID = cpn.id AND cpn.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id AND cpnPart.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_mountingtypemst mount ON c.mountingtypeID = mount.id AND mount.isDeleted = 0             \n" +
                "		LEFT JOIN 	rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id AND cpnMount.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_partcategory cat ON c.category = cat.id AND cat.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = rl.id AND ac.isDeleted = 0            \n" +
                "		WHERE 	 	FIND_IN_SET(rl.id, v_SearchBOMLineIds)            \n" +
                "					AND rla.partID = IFNULL(pAssyId, rla.partID)            \n" +
                "					AND rla.isDeleted = 0            \n" +
                "		ORDER BY 	rl.lineID;            \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getCofCByBinIdPartId`;  \n" +
                "CREATE FUNCTION `fun_getCofCByBinIdPartId`(                        \n" +
                "	pBinId INT(11),        \n" +
                "	pPartId INT(11),      \n" +
                "	pIsMfg BOOLEAN      \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                        \n" +
                "	DECLARE vCofC VARCHAR(100);        \n" +
                "	DECLARE vMfgName VARCHAR(255);       \n" +
                "	DECLARE vResult  VARCHAR(255);             \n" +
                "	SELECT  \n" +
                "		 (CASE WHEN fun_getCofCDocumentCount(NULL, id) > 0 THEN                                                               \n" +
                "				CONCAT(IFNULL(fun_getMfgCodeByID(mfgCodeID),''),packingSlipNumber)                                                             \n" +
                "			ELSE                                                               \n" +
                "				NULL  \n" +
                "		END),       \n" +
                "		fun_getMfgNameByID(mfgCodeID)  \n" +
                "	INTO vCofC,vMfgName  \n" +
                "	FROM 	packing_slip_material_receive        \n" +
                "	WHERE 	isDeleted = 0        \n" +
                "			AND id IN (        \n" +
                "					SELECT 	refPackingSlipMaterialRecID        \n" +
                "					FROM 	packing_slip_material_receive_det         \n" +
                "					WHERE 	isDeleted = 0         \n" +
                "							AND binID = pBinId       \n" +
                "							AND partID = pPartId         \n" +
                "							AND umidCreated = 0        \n" +
                "				)         \n" +
                "			AND receiptType = 'P';         \n" +
                "  \n" +
                "	IF (pIsMfg) THEN      \n" +
                "		SET vResult = vMfgName;      \n" +
                "	ELSE     \n" +
                "		SET vResult = vCofC;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	RETURN vResult;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDeleteUIDValidation`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDeleteUIDValidation`(    \n" +
                "	IN pIDs LONGTEXT             \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_PackingSlipId INT;    \n" +
                "    DECLARE v_BinId INT;    \n" +
                "    DECLARE v_PartId INT;    \n" +
                "    DECLARE v_PackagingId INT;    \n" +
                "    DECLARE v_Count INT;    \n" +
                "    DECLARE v_ErrorCode INT;    \n" +
                "     /* To handle Response */  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail    \n" +
                "    ( 	    \n" +
                "		partId INT,    \n" +
                "        packaging INT,     \n" +
                "        packingSlipId INT,    \n" +
                "        binId INT,     \n" +
                "		uidData LONGTEXT,    \n" +
                "		pidCode VARCHAR(255),    \n" +
                "        packingSlipNumber VARCHAR(255),     \n" +
                "        binName VARCHAR(255),    \n" +
                "        packagingName VARCHAR(255),    \n" +
                "        uidCount INT    \n" +
                "	);    \n" +
                "  \n" +
                "    /* create temp table to check internal umid criteria for errorcode 1*/    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempUIDDet;    \n" +
                "    CREATE TEMPORARY TABLE tempUIDDet AS    \n" +
                "		SELECT 	css.id,				css.uid,				css.refcompid,	    \n" +
                "				css.packaging,		a.packingSlipId,		css.fromBin,    \n" +
                "                c.PIDCode,			a.packingSlipNumber,    \n" +
                "                fun_getBinNameByID(css.fromBin) binName,    \n" +
                "                fun_getPackagingNameByID(css.packaging) packagingName    \n" +
                "		FROM    \n" +
                "			component_sid_stock css    \n" +
                "				INNER JOIN	component c ON css.refcompid = c.id AND c.isDeleted = 0    \n" +
                "				LEFT JOIN	    \n" +
                "					(SELECT     \n" +
                "						cspd.refComponentSidStockID, ps.id packingSlipId, ps.packingSlipNumber    \n" +
                "					FROM    \n" +
                "						component_sid_stock_packing_detail cspd    \n" +
                "					INNER JOIN packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id    \n" +
                "						AND psd.isDeleted = 0    \n" +
                "					INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id    \n" +
                "						AND ps.isDeleted = 0    \n" +
                "					GROUP BY cspd.refComponentSidStockID , ps.id, ps.packingSlipNumber) a     \n" +
                "				ON a.refComponentSidStockID = IFNULL(css.parentUIDId, css.id)    \n" +
                "		WHERE FIND_IN_SET(css.id ,pIDs);    \n" +
                "  \n" +
                "	/* check same packingslip, packaging, partid, binid having data exists for selected umid(s) */    \n" +
                "	SELECT COUNT(1) INTO v_Count    \n" +
                "		FROM     \n" +
                "			(SELECT COUNT(1) FROM tempUIDDet GROUP BY packaging, packingSlipId, fromBin, refcompid) as psCount;    \n" +
                "  \n" +
                "	IF(v_Count > 1) THEN    \n" +
                "		/* Set Reponse data for ErrorCode 1 */    \n" +
                "		SET v_ErrorCode = 1;    \n" +
                "		INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount)    \n" +
                "				SELECT tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, GROUP_CONCAT(id, '###', uid SEPARATOR '@@@'), tu.PIDCode, tu.packingSlipNumber, tu.binName, tu.packagingName, COUNT(tu.uid)    \n" +
                "                FROM tempUIDDet tu GROUP BY tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin;    \n" +
                "    ELSE    \n" +
                "		SET v_Count = 0;     \n" +
                "		/* set value for bin, packing slip, packaging and partid */    \n" +
                "		SELECT 	t.packaging, t.packingSlipId, t.fromBin, t.refcompid     \n" +
                "				INTO v_PackagingId, v_PackingSlipId, v_BinId, v_PartId    \n" +
                "			FROM tempUIDDet t GROUP BY t.packaging, t.packingSlipId, t.fromBin, t.refcompid;    \n" +
                "  \n" +
                "		/* check any pending umid exits for same bin, packing slip, packaging and partid */    \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;    \n" +
                "		CREATE TEMPORARY TABLE tempPendingUIDDet AS    \n" +
                "		SELECT	vucp.BinID,		vucp.PartId,	vucp.packingSlipID,		vucp.packagingID,    \n" +
                "				c.PIDCode,		 ps.packingSlipNumber,    \n" +
                "                fun_getBinNameByID(vucp.BinID) binName,    \n" +
                "                fun_getPackagingNameByID(vucp.packagingID) packagingName    \n" +
                "				FROM    \n" +
                "					vu_umid_creation_pending vucp    \n" +
                "						INNER JOIN	component c ON vucp.PartId = c.id AND c.partType != 4	AND c.isdeleted = 0    \n" +
                "						INNER JOIN	packing_slip_material_receive ps ON ps.id = vucp.packingSlipID	AND ps.isdeleted = 0    \n" +
                "					WHERE	vucp.BalanceQty > 0    \n" +
                "							AND vucp.packagingID = v_PackagingId    \n" +
                "							AND vucp.BinID = v_BinId    \n" +
                "							AND vucp.PartId = v_PartId    \n" +
                "							AND vucp.packingSlipID <> v_PackingSlipId;    \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_Count    \n" +
                "			 FROM tempPendingUIDDet GROUP BY packagingID, packingSlipID, BinID, PartId;    \n" +
                "  \n" +
                "        IF(v_Count > 0) THEN    \n" +
                "			SET v_ErrorCode = 2;    \n" +
                "            INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount)    \n" +
                "				SELECT tp.PartId, tp.packagingID, tp.packingSlipID, tp.BinID, NULL, tp.PIDCode, tp.packingSlipNumber, tp.binName, tp.packagingName, NULL    \n" +
                "                FROM tempPendingUIDDet tp    \n" +
                "                GROUP BY tp.packagingID, tp.packingSlipID, tp.BinID, tp.PartId;    \n" +
                "		ELSE      \n" +
                "			SET v_ErrorCode = 0;    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "    SELECT v_ErrorCode AS errorCode;    \n" +
                "    IF(v_ErrorCode <> 0) THEN    \n" +
                "		SELECT 	* FROM tempValidationDetail;    \n" +
                "    END IF;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getUMIDPackingSlipDetilById`;  \n" +
                "CREATE PROCEDURE `Sproc_getUMIDPackingSlipDetilById`(  \n" +
                "IN pUIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT 		CONCAT(mcm.mfgCode,ps.packingSlipNumber) AS packingSlipNumber, ps.id                \n" +
                "	FROM 		component_sid_stock_packing_detail cspd              \n" +
                "	INNER JOIN 	packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0    \n" +
                "	INNER JOIN 	packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0    \n" +
                "	INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0    \n" +
                "	WHERE 		cspd.refComponentSidStockID = pUIDId          \n" +
                "	LIMIT 		1;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4785,'2.00','V1','Bug #34383 & 34274 And User Story #34269 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4785:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021  ********************************** */
                //"INSERT INTO `page_detail`   \n" +
                //"        (`pageName`, `RO`, `RW`, `menuRoute`, `menuName`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`,   \n" +
                //"    `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `popupFunName`, `isHideFromMenuList`)   \n" +
                //"VALUES ('Split UMID', '0', '0', 'splitumid', 'Split UMID', '0', '31.05', '2', 'icons-split-umid', '1', '1', '0', '1', 'Split UMID', '1', '1','openSplitUID', '0');  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4786,'2.00','V1','Bug #34383  - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4786:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021 *********************************** */
                "ALTER TABLE `component`  \n" +
                "CHANGE COLUMN `updatedBy` `updatedBy` VARCHAR(10) NOT NULL,  \n" +
                "CHANGE COLUMN `createByRoleId` `createByRoleId` INT NOT NULL,  \n" +
                "CHANGE COLUMN `updateByRoleId` `updateByRoleId` INT NOT NULL;  \n" +
                /* **************************** Add Script Version -> 14-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4787,'2.00','V1','User Story 31992: Maintain created by and modified by role from service and API for part master and make it not null in DB - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4787:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021 *********************************** */
                "ALTER TABLE help_blog_det ADD COLUMN title LONGTEXT;  \n" +
                "UPDATE help_blog_det SET title = 'Default Title' WHERE title = NULL;  \n" +
                "  \n" +
                "UPDATE page_detail SET menuName = 'Manage Help Blogs' WHERE pageName = 'Help Blogs';  \n" +
                "  \n" +
                "ALTER TABLE userpagedetail ADD COLUMN isHelpBlog TINYINT DEFAULT 1;  \n" +
                "  \n" +
                "ALTER TABLE rolepagedetail ADD COLUMN isHelpBlog TINYINT DEFAULT 1;  \n" +
                /* **************************** Add Script Version -> 14-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4788,'2.00','V1','UserStory: 34213, 34216, 34217 - Purav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4788:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetDownloadHelpBlogDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetDownloadHelpBlogDetails`(    \n" +
                "    IN phelpBlogId INT,   \n" +
                "    IN phelpBlogDetailId INT  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);            \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "  \n" +
                "	IF(phelpBlogId IS NOT NULL) THEN  \n" +
                "		IF(phelpBlogDetailId IS NULL) THEN   \n" +
                "		SELECT hbd.title,hbd.description,hbd.isSystemGenerated,  \n" +
                "		hbd.displayOrder,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,v_TimeZone,v_DateTimeDisplayFormat) lastModified,  \n" +
                "		hb.title AS menuTitle   \n" +
                "		FROM help_blog hb   \n" +
                "		INNER JOIN help_blog_det hbd   \n" +
                "			ON hbd.helpBlogId = hb.id   \n" +
                "		WHERE hb.id = phelpBlogId  \n" +
                "			AND hbd.isdeleted=0;  \n" +
                "  \n" +
                "		ELSE SELECT hbd.title,hbd.description,hbd.isSystemGenerated,  \n" +
                "		hbd.displayOrder,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,v_TimeZone,v_DateTimeDisplayFormat) lastModified,  \n" +
                "		hb.title AS menuTitle   \n" +
                "		FROM help_blog hb   \n" +
                "		INNER JOIN help_blog_det hbd   \n" +
                "			ON hbd.helpBlogId = hb.id   \n" +
                "		WHERE hb.id = phelpBlogId   \n" +
                "			AND hbd.isdeleted=0  \n" +
                "			AND hbd.id = phelpBlogDetailId;			  \n" +
                "		END IF;				  \n" +
                "	END IF;	  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4789,'2.00','V1','Sproc_GetDownloadHelpBlogDetails - Purav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4789:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(                \n" +
                "	IN ppageIndex INT,                \n" +
                "	IN precordPerPage INT,                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pUserId INT,              \n" +
                "	IN pRoleId INT,        \n" +
                "	IN isShowDefault INT        \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT;                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;              \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;              \n" +
                "  \n" +
                " 	IF (isShowDefault = 1) THEN              \n" +
                " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS              \n" +
                " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,`rp`.`isHelpBlog`,          \n" +
                " 			`pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`  \n" +
                " 			FROM `rolepagedetail` AS `rp`              \n" +
                " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`              \n" +
                " 			WHERE `rp`.`roleID` = pRoleId           \n" +
                " 			AND `rp`.`deletedAt` IS NULL           \n" +
                " 			AND `pd`.`deletedAt` IS NULL           \n" +
                " 			AND `pd`.`isActive` = 1;              \n" +
                "  \n" +
                " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)              \n" +
                " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass           \n" +
                " 			FROM page_detail           \n" +
                " 			WHERE deletedAt IS NULL           \n" +
                " 			AND isActive = 1           \n" +
                " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail           \n" +
                " 			WHERE roleID = pRoleId AND deletedAt IS NULL);              \n" +
                " 	ELSE              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS              \n" +
                "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,           \n" +
                "			`up`.`IsShortcut`,`up`.`isHelpBlog`, `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`    \n" +
                "			FROM `userpagedetail` AS `up`              \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`              \n" +
                "			WHERE `up`.`userID` = pUserId           \n" +
                "			AND `up`.`roleID` = pRoleId           \n" +
                "			AND `up`.`deletedAt` IS NULL           \n" +
                "			AND `pd`.`deletedAt` IS NULL           \n" +
                "			AND `pd`.`isActive` = 1;              \n" +
                "  \n" +
                "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)              \n" +
                "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass              \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);              \n" +
                " 	END IF;              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");                \n" +
                "	ELSE                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "	ELSE	                \n" +
                "		SET rowNumWhere = '';                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	/* to get total count of rows */                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4790,'2.00','V1','Sproc_GetPermissionsPageListByRole - Purav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4790:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-06-2021 *********************************** */
                "CALL sproc_Utility_UpdateIconInPageDetail('Configuration','icons-system');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Certificate Standard','icons-std-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Equipment, Workstation & Sample','icons-eqpt-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Defects','icons-inspection-defect');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RFQ Setting','icons-rfq-settings');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Attributes (NRE, OH, Markup, etc.)','icons-quote-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions','icons-quote-terms');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Assemblies','icons-part-master-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Receiving','icons-receiving');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Sales OrderMenu','icons-so-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Ordermenu','icons-wo-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Pending WO Creation List','icons-wo-pending');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Defect Category','icons-defect-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Configure Search','icons-configure-search');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Notification Category','icons-notification-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Requirements & Comments Category','icons-requirement-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Email Template','icons-email-template');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions Categories','icons-quote-term-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions Attributes','icons-quote-term-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO/DFM Category','icons-eco-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO/DFM Category Attributes','icons-eco-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Scanner','icons-scanner');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Order Data Fields Report','icons-data-tracking-report');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Transaction wise Work Order Data Fields','icons-wo2');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Payment','icons-customer-pmt');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Inovaxe UnAuthorize Request Response history','icons-unauthorized-notification');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('CustomerMenu','icons-customer-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('SupplierMenu','icons-supplier-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Personnel','icons-personnel-menu');  \n" +
                /* **************************** Add Script Version -> 15-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4791,'2.00','V1',' Task 34554: Generate confirmed icons and update in application - RITUL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4791:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getBOMDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getBOMDataForSearchMaterial`(      \n" +
                "	IN pAssyId INT,              \n" +
                "	IN pSearchString VARCHAR(100),              \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "    IN pNickName VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_SearchBOMLineIds VARCHAR(10000);  \n" +
                "	DECLARE v_MFRPnIds LONGTEXT;  \n" +
                "	DECLARE v_AssyIds LONGTEXT;  \n" +
                "  \n" +
                "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "  \n" +
                "	IF(pNickName IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(id) INTO v_AssyIds FROM component WHERE isDeleted = 0 AND nickname = pNickName;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pSearchType = 'contains') THEN              \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');              \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');              \n" +
                "	ELSEIF (pSearchType = 'exact') THEN              \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');              \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');              \n" +
                "	ELSE              \n" +
                "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';              \n" +
                "		SET v_WhereClausePIDSearch = ' 1 = 1';              \n" +
                "	END IF;     \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('              \n" +
                "		SELECT 	refcompid AS mfrPNId , NULL AS  distPNId           \n" +
                "		FROM 	component_sid_stock               \n" +
                "		WHERE   ', v_WhereClauseUMIDSearch ,'              \n" +
                "				AND isDeleted = 0              \n" +
                "		UNION       \n" +
                "		SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId            \n" +
                "		FROM 		component c          \n" +
                "		LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0       \n" +
                "		LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0           \n" +
                "		LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0               \n" +
                "		WHERE 		(', v_WhereClausePIDSearch ,')              \n" +
                "	');              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;                            \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", @vFromSQLQuery);              \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;   \n" +
                "	EXECUTE mainQuery;   \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT CONCAT(GROUP_CONCAT(mfrPNId), ',',GROUP_CONCAT(distPNId)) INTO v_MFRPnIds FROM tempGetMFRPNIdBySearchString;              \n" +
                "  \n" +
                "	SELECT 	GROUP_CONCAT(rfqLineItemsID) INTO v_SearchBOMLineIds              \n" +
                "	FROM 	(      \n" +
                "			SELECT 		a.rfqLineItemsID              \n" +
                "			FROM 		rfq_lineitems_alternatepart a                    \n" +
                "			LEFT JOIN	rfq_lineitems b ON b.id = a.rfqLineItemsID                    \n" +
                "			INNER JOIN 	component c ON a.mfgPNID = c.id                   \n" +
                "			LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                    \n" +
                "			WHERE 		a.partID IN (IFNULL(IFNULL(pAssyId, v_AssyIds), a.partID))         \n" +
                "						AND FIND_IN_SET(IFNULL(d.id, c.id), v_MFRPnIds)              \n" +
                "						AND a.isDeleted = 0              \n" +
                "		) AS a;              \n" +
                "  \n" +
                "   SELECT 		rl.id,                  \n" +
                "				fun_getAssyPIDCodeByID(rl.partId) assyPIDCode,              \n" +
                "				rl.partId assyId,            \n" +
                "				rl.lineID,      \n" +
                "				rl.cust_lineID,      \n" +
                "				rl.qpa,      \n" +
                "				rl.refDesig,      \n" +
                "				(CASE WHEN rla.mfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE rla.mfgCode END) AS mfgCode,      \n" +
                "				IFNULL(d.mfgCodeID, c.mfgCodeID) mfgCodeID,      \n" +
                "				mcm.acquisitionDetail,      \n" +
                "				IFNULL(d.mfgPN, c.mfgPN) mfgPN,      \n" +
                "				IFNULL(d.id, c.id) AS mfgPNID,              \n" +
                "				(CASE WHEN rla.distMfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE rla.distributor END) AS distributor,	                                            \n" +
                "				mcmDist.acquisitionDetail AS distAcquisitionDetail,              \n" +
                "				rla.distMfgCodeID,      \n" +
                "				rla.distPN,      \n" +
                "				rla.distMfgPNID,              \n" +
                "				rl.custPN,      \n" +
                "				rl.custPNID,                              \n" +
                "				(CASE WHEN rl.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = rl.custPNID) ELSE 0 END) AS isCustPN,                                            \n" +
                "				(CASE WHEN rl.uomID IS NULL THEN rl.org_uomName ELSE fun_getUnitNameByID(rl.uomID) END) AS uomID,      \n" +
                "				(CASE WHEN rl.programingStatus = 1 THEN 'Pre' WHEN rl.programingStatus = 2 THEN 'Post' ELSE 'N/A' END) AS programingStatus,               \n" +
                "				(CASE WHEN rl.substitutesAllow IS NULL THEN rl.org_substitutesAllow ELSE CASE WHEN rl.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN rl.substitutesAllow = 2 THEN 'No' ELSE '' END END) AS substitutesAllow,      \n" +
                "				(CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = rl.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END) AS allocatedInKit,                                           \n" +
                "				rla.description descriptionAlternate,      \n" +
                "				rl.description,      \n" +
                "				rl.numOfPosition,      \n" +
                "				rl.numOfRows,      \n" +
                "				rl.customerRev,      \n" +
                "				rl.customerDescription,      \n" +
                "				rl.customerPartDesc,              \n" +
                "				CONCAT(part.partTypeName) partclassID,      \n" +
                "				rl.isInstall,      \n" +
                "				rl.isPurchase,      \n" +
                "				rl.dnpQty,      \n" +
                "				rl.dnpDesig,      \n" +
                "				rla.id AS rfqAlternatePartID,          \n" +
                "				rl.qpaDesignatorStep,      \n" +
                "				rl.duplicateCPNStep,      \n" +
                "				rl.restrictCPNUseWithPermissionStep,                              \n" +
                "				rl.restrictCPNUsePermanentlyStep,      \n" +
                "				rl.restrictCPNUseInBOMStep,      \n" +
                "				rl.requireMountingTypeStep,      \n" +
                "				rl.requireFunctionalTypeStep,                                   \n" +
                "				rl.requireMountingTypeError,              \n" +
                "				rl.requireFunctionalTypeError,                                            \n" +
                "				(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES' WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END) AS isBuyDNPQty,                       \n" +
                "				rl.isObsoleteLine,      \n" +
                "				rl.customerApprovalForQPAREFDESStep,      \n" +
                "				rl.customerApprovalForBuyStep,              \n" +
                "				rl.customerApprovalForPopulateStep,                                   \n" +
                "				rl.dnpQPARefDesStep,      \n" +
                "				rl.customerApprovalForDNPQPAREFDESStep,      \n" +
                "				rl.customerApprovalForDNPBuyStep,                                           \n" +
                "				rl.customerApprovalCPN,               \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) qpaCustomerApprovalComment,                                 \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) dnpqpaCustomerApprovalComment,                                           \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyCustomerApprovalComment,                                 \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyDNPCustomerApprovalComment,                            \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) populateCustomerApprovalComment,       \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) cpnCustomerApprovalComment,                                \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedQPA,                               \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,      \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedDNPQPA,                               \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,               \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,                                            \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,                  \n" +
                "				rla.mfgVerificationStep,      \n" +
                "				rla.mfgDistMappingStep,      \n" +
                "				rla.mfgCodeStep,      \n" +
                "				rla.customerApproval,      \n" +
                "				rla.isCustomerUnAppoval,      \n" +
                "				rla.org_mfgCode,      \n" +
                "				rla.org_mfgPN,      \n" +
                "				rla.org_distributor,      \n" +
                "				rla.org_distPN,      \n" +
                "				rla.distVerificationStep,                 \n" +
                "				rla.distCodeStep,      \n" +
                "				rla.getMFGPNStep,      \n" +
                "				rla.obsoletePartStep,      \n" +
                "				rla.mfgGoodPartMappingStep,      \n" +
                "				rla.mfgPNStep,      \n" +
                "				rla.distPNStep,      \n" +
                "				rla.badMfgPN,      \n" +
                "				rla.distGoodPartMappingStep,      \n" +
                "				rla.nonRohsStep,      \n" +
                "				rla.epoxyStep,               \n" +
                "				rla.invalidConnectorTypeStep,      \n" +
                "				rla.duplicateMPNInSameLineStep,      \n" +
                "				rla.mismatchMountingTypeStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.restrictUseWithPermissionStep,      \n" +
                "				rla.restrictUsePermanentlyStep,      \n" +
                "				rla.partPinIsLessthenBOMPinStep,      \n" +
                "				rla.exportControlledStep,      \n" +
                "				rla.tbdPartStep,               \n" +
                "				rla.userData1,      \n" +
                "				rla.userData2,      \n" +
                "				rla.userData3,      \n" +
                "				rla.userData4,      \n" +
                "				rla.userData5,      \n" +
                "				rla.userData6,      \n" +
                "				rla.userData7,      \n" +
                "				rla.userData8,      \n" +
                "				rla.userData9,      \n" +
                "				rla.userData10,                  \n" +
                "				rla.pickupPadRequiredStep,      \n" +
                "				rla.matingPartRquiredStep,                 \n" +
                "				rla.suggestedGoodPartStep,                   \n" +
                "				rla.suggestedGoodDistPartStep,      \n" +
                "				rla.driverToolsRequiredStep,      \n" +
                "				rla.functionalTestingRequiredStep,      \n" +
                "				rla.mismatchValueStep,                   \n" +
                "				rla.approvedMountingType,      \n" +
                "				rla.mismatchPackageStep,      \n" +
                "				rla.mismatchPowerStep,                   \n" +
                "				rla.mismatchToleranceStep,      \n" +
                "				rla.mismatchTempratureStep,      \n" +
                "				rla.mismatchNumberOfRowsStep,      \n" +
                "				rla.uomMismatchedStep,      \n" +
                "				rla.programingRequiredStep,      \n" +
                "				rla.mismatchColorStep,      \n" +
                "				rla.restrictUseInBOMStep,      \n" +
                "				rla.restrictUseInBOMWithPermissionStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,               \n" +
                "				rla.restrictUseExcludingAliasStep,      \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,                                        \n" +
                "				rla.unknownPartStep,      \n" +
                "				rla.defaultInvalidMFRStep,      \n" +
                "				rla.isUnlockApprovedPart,          \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                       \n" +
                "							CONCAT(cpnPart.partTypeName)                       \n" +
                "						ELSE                       \n" +
                "							CONCAT(part.partTypeName)               \n" +
                "					END              \n" +
                "				)               \n" +
                "				AS parttypeID,                                    \n" +
                "				part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                       \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                       \n" +
                "							CONCAT(cpnMount.name)                       \n" +
                "						ELSE                       \n" +
                "							CONCAT(mount.name)               \n" +
                "					END              \n" +
                "				) AS mountingtypeID,                        \n" +
                "				CONCAT(cat.categoryname) partcategoryID,               \n" +
                "				c.isGoodPart isMFGGoodPart,      \n" +
                "				(SELECT co.isGoodPart FROM component co WHERE co.id = rla.distMfgPNID AND co.deletedAt IS NULL) isDistGoodPart,      \n" +
                "				c.RoHSStatusID RoHSStatusID,                  \n" +
                "				fun_getRoHSCategoryByID(c.RoHSStatusID) refMainCategoryID,                                          \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN (c.eolDate IS NOT NULL AND c.eolDate < fun_DatetimetoUTCDateTime()) OR EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE c.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0) THEN               \n" +
                "							1               \n" +
                "						ELSE               \n" +
                "							0               \n" +
                "					END               \n" +
                "				) isObsolete,              \n" +
                "				c.PIDCode,                                  \n" +
                "				c.mfgPNDescription,      \n" +
                "				c.pitch,      \n" +
                "				c.noOfRows,      \n" +
                "				c.partPackage,      \n" +
                "				c.value,      \n" +
                "				c.tolerance,                                            \n" +
                "				c.voltage,                    \n" +
                "				c.isCustom,      \n" +
                "				c.packaging,                \n" +
                "				c.deviceMarking,      \n" +
                "				c.powerRating,      \n" +
                "				c.minOperatingTemp,      \n" +
                "				c.maxOperatingTemp,      \n" +
                "				c.connecterTypeID,      \n" +
                "				c.driverToolRequired,                                  \n" +
                "				c.matingPartRquired,                                  \n" +
                "				c.pickupPadRequired,                                  \n" +
                "				c.programingRequired,                                  \n" +
                "				c.dataSheetLink,                      \n" +
                "				c.isCPN,                 \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = c.id AND deletedAt IS NULL) AS driveToolIDs,                                  \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = c.id AND deletedAt IS NULL AND `type` = 3) AS programingRequiredIDs,                            \n" +
                "				(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = c.id AND deletedAt IS NULL) AS operationalAttributeIDs,                                \n" +
                "				(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,      \n" +
                "				(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,          \n" +
                "				c.isTemperatureSensitive,      \n" +
                "				c.noOfPosition AS componentLead,      \n" +
                "				fun_getPartStatusNameByID(c.partStatus) AS partStatus,      \n" +
                "				fun_getPartStatusColorCodeByID(c.partStatus) AS partStatuscolorCode,      \n" +
                "				c.createdBy,      \n" +
                "				(SELECT u.unitName FROM UOMs u WHERE u.id = c.uom ) AS uom,              \n" +
                "				c.color,      \n" +
                "				c.uom AS partUOMID,                   \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN (              \n" +
                "							SELECT 		COUNT(cs.isExportControlled) AS isExportControlled                \n" +
                "							FROM 		component co                             \n" +
                "							LEFT JOIN 	component_standard_details csd ON csd.componentID = co.id AND IFNULL(csd.isDeleted,0) = 0                             \n" +
                "							LEFT JOIN 	certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1                            \n" +
                "							WHERE 		c.id = co.id              \n" +
                "						) > 0 THEN               \n" +
                "							1               \n" +
                "						ELSE               \n" +
                "							0               \n" +
                "					END               \n" +
                "				) isExportControlled,            \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,                                \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,      \n" +
                "				ac.description AS additionalComment,      \n" +
                "				ac.id AS additionalCommentId               \n" +
                "		FROM 		rfq_lineitems_alternatepart rla      \n" +
                "		INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0              \n" +
                "		INNER JOIN	component c ON c.id = rla.mfgPNID AND c.isDeleted = 0                \n" +
                "		LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID              \n" +
                "		LEFT JOIN 	mfgcodemst mcm ON rla.mfgCodeID = mcm.id AND mcm.isDeleted = 0              \n" +
                "		LEFT JOIN 	mfgcodemst mcmDist ON rla.mfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_parttypemst part ON c.functionalCategoryID = part.id AND part.isDeleted = 0              \n" +
                "		LEFT JOIN 	component cpn ON rl.custPNID = cpn.id AND cpn.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id AND cpnPart.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_mountingtypemst mount ON c.mountingtypeID = mount.id AND mount.isDeleted = 0               \n" +
                "		LEFT JOIN 	rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id AND cpnMount.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_partcategory cat ON c.category = cat.id AND cat.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = rl.id AND ac.isDeleted = 0              \n" +
                "		WHERE 	 	FIND_IN_SET(rl.id, v_SearchBOMLineIds)              \n" +
                "					AND rla.partID = IFNULL(pAssyId, rla.partID)              \n" +
                "					AND rla.isDeleted = 0              \n" +
                "		ORDER BY 	rl.lineID;     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;              \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4792,'2.00','V1','Bug #34383 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4792:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(                                                                                                                                   \n" +
                "	IN ppageIndex INT,                                          \n" +
                "	IN precordPerPage INT,                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                                          \n" +
                "	IN pIsKitList TINYINT,                                          \n" +
                "	IN pPlannedStatus VARCHAR(10),                                          \n" +
                "	IN pSalesOrderDetailId INT,                                          \n" +
                "	IN pIsPendingWOCreationList TINYINT,                                          \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),                                          \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,                        \n" +
                "	IN pfilterStatus VARCHAR(100),                        \n" +
                "	IN pcustomerIds VARCHAR(16000),                        \n" +
                "	IN pshippingMethodId VARCHAR(16000),                        \n" +
                "	IN ptermsIds VARCHAR(16000),                        \n" +
                "	IN psearchposotext VARCHAR(1000),                        \n" +
                "	IN psearchposotype VARCHAR(10),                        \n" +
                "	IN pfromDate DATE,                            \n" +
                "	IN ptoDate DATE,                        \n" +
                "	IN prushJob TINYINT,                        \n" +
                "	IN ppartIds VARCHAR(16000),                        \n" +
                "	IN pworkorders VARCHAR(16000),                        \n" +
                "	IN psearchextPricetext VARCHAR(1000),                        \n" +
                "	IN psearchextPricetype VARCHAR(10),                    \n" +
                "	IN pkitreturnStatus VARCHAR(100),                    \n" +
                "	IN pkitReleaseStatus VARCHAR(100)                                         \n" +
                ")  \n" +
                "BEGIN                                          \n" +
                "	DECLARE pOffset INT;                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                          \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);                                          \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);                                          \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);                                          \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);                                          \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);                                          \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';                                          \n" +
                "	SET v_PendingWOWhereClause='';       \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN                                          \n" +
                "		SET v_DynamicColumns = CONCAT(\",                                          \n" +
                "			hu.refType as refTypeKR,                                          \n" +
                "			hu.status as haltStatusKR,                                          \n" +
                "			(                                          \n" +
                "				CASE                                          \n" +
                "					WHEN hu.status = 'H' THEN                                          \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))                                                                                                      \n" +
                "					ELSE ''                                          \n" +
                "				END                                          \n" +
                "			) AS reasonKR,                                          \n" +
                "			hutt.refType as refTypePO,                                          \n" +
                "			hutt.status as haltStatusPO,                                          \n" +
                "			(                                          \n" +
                "				CASE                                          \n" +
                "					WHEN hutt.status = 'H' THEN                                          \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))                                                                                                      \n" +
                "					ELSE ''                                          \n" +
                "				END                                          \n" +
                "			) AS reasonPO,                                          \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion                                          \n" +
                "		\");                                                                                    \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"                                                                                      \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)                                                                                   \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)                                                \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;                                                                                    \n" +
                "	ELSE                                                                                    \n" +
                "		SET v_DynamicColumns=CONCAT(\",                                                                \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,                                                                                    \n" +
                "			(                                                                \n" +
                "				CASE                                                                                              \n" +
                "					WHEN hut.status = 'H' THEN                                                                                   \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))                                                                                                      \n" +
                "					ELSE ''                                                                                           \n" +
                "				END                                                                \n" +
                "			) AS reasonPO                                                                \n" +
                "		\");                                                                                    \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"                                                                \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (                                                                \n" +
                "				SELECT 	MAX(ht.id)                                                                 \n" +
                "				FROM 	holdunholdtrans ht                                                                 \n" +
                "				WHERE 	hut.refTransId = ht.refTransId                                                                 \n" +
                "						AND ht.refType='PO'                                                                 \n" +
                "						AND ht.isdeleted=0                                                                \n" +
                "					)                                                                \n" +
                "				\") ;                                                                                    \n" +
                "	END IF;                                                                \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN                                                                         \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');                                                                       \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");                                                                                    \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (                                                                                  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,                                                                                          \n" +
                "						co.mfgPN AS mfgPN,                                                                                            \n" +
                "						co.nickname AS nickName,                                                              \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,                                                                 \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,                                                                 \n" +
                "						vusalesorderdet.poNumber,                                                                 \n" +
                "						vusalesorderdet.salesOrderNumber                                                                          \n" +
                "				FROM 		workorder wo                                                                                                                                      \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3                                                                            \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID                                                                          \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName                                                              \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)                                                                \n" +
                "		\");                                                                                    \n" +
                "	END IF;                                                          \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN                                                      \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd                                                       \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');                                                      \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,                                                      \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');                                                                             \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';                                                      \n" +
                "        IF pOrderBy IS NULL THEN                                                      \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';                                                      \n" +
                "        END IF;                                                      \n" +
                "	END IF;                                                      \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"                                                                                                                \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,                                                                                                                                \n" +
                "			(                                                                                              \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN                                                                                               \n" +
                "						'No'                                                                                                                                  \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN                                                                                               \n" +
                "						'Yes'                                                                                               \n" +
                "					ELSE                                                                                               \n" +
                "						''                                                                                               \n" +
                "				END                                                                                              \n" +
                "			) AS `isHotJobValue`,                                                                                                                                  \n" +
                "			`vuss`.`Sales Order ID` AS id,                                                                                                                                \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,                                                                                                                              \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,                                                                                                                                  \n" +
                "			`vuss`.`Po Number` AS poNumber,                                                                                                                                  \n" +
                "			`vuss`.`Po Date` AS poDate,                                                                                                                                  \n" +
                "			`vuss`.`Customer ID` AS customerID,                                                                                                                                  \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,                                                                                                                                  \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,                                                                                                                                  \n" +
                "			`vuss`.`Sales Order Status` AS `status`,                                                                                                                                  \n" +
                "			`vuss`.`Revision` AS revision,                                                                                                                                  \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,                                                                                                                                  \n" +
                "			`vuss`.`Terms ID` AS termsID,                                                                                                                                  \n" +
                "			`vuss`.`So Date` AS soDate,                                                                                                                                  \n" +
                "			`vuss`.`Company Name` AS companyName,                                                 \n" +
                "			`vuss`.`internalPO` AS internalPO,                                                 \n" +
                "			`vuss`.`mfgCode` AS mfgCode,                                                                          \n" +
                "			`vuss`.`Full Name` AS fullName,                                                                                                                                  \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,                                                                                                                              \n" +
                "			`vuss`.`PO Qty` AS qty,               \n" +
                "			ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,              \n" +
                "			ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,                                                                                                                             \n" +
                "			`vuss`.`mrpQty` AS mrpQty,                                                                    \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,                                                                             \n" +
                "			`vuss`.`kitQty` AS kitQty, \",                                                                                                                       \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),                                                                                                                              \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,                                                                                                                              \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,                                                                                                                              \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,                                                                                                                              \n" +
                "			`vuss`.`shippingQty` AS shippingQty,                                                                                                                              \n" +
                "			`vuss`.`remark` AS remark,                                                                                                                              \n" +
                "			`vuss`.`Assy ID` AS PIDCode,                                                                                                                        \n" +
                "			`vuss`.`Assy Name` AS mfgPN,                                                                                                                            \n" +
                "			`vuss`.`NickName` AS nickName,                                                                                                                             \n" +
                "			`vuss`.`liveVersion` AS liveVersion,                                                                                                                             \n" +
                "			`vuss`.`partDescription` AS partDescription,                                                                                                                              \n" +
                "			`vuss`.`cancleReason` AS cancleReason,                                                                                                                              \n" +
                "			`vuss`.`Status` AS completedStatus,                                                                                                                                  \n" +
                "			`vuss`.`modifyDate` AS modifyDate,                                                                                                                                    \n" +
                "			`vuss`.`createdDate` AS createdDate,                                                                                                                                \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,                                                                                                                               \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,                                                                                                                                  \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,                                                                                                                               \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,            \n" +
                "			vuss.isBlanketPO,            \n" +
                "			vuss.blanketPOText,            \n" +
                "			vuss.poRevision,            \n" +
                "			vuss.partType,     \n" +
                "			vuss.mfgcodeID,    \n" +
                "			vuss.manufacturerName,                                                                                                                              \n" +
                "			`vuss`.`PartID` AS partID,                                                                                   \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,                                                                            \n" +
                "			`vuss`.`kitNumber` AS kitNumber,                                  \n" +
                "			`vuss`.`serialNumber` AS serialNumber,                              \n" +
                "			`vuss`.partCategory,     \n" +
                "			vuss.lineID,                             \n" +
                "			vuss.internalCommentSo,                                    \n" +
                "			vuss.internalComment,                                                          \n" +
                "			ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,                                                    \n" +
                "			vuss.Status as salesOrderDetStatusConvertedValues,                                                 \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,                                                          \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,                        \n" +
                "			 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,                                                                                                       \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,                                                                                                            \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,                                                   \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,                                                     \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,                                                               \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,                                                                                                                              \n" +
                "			(                                                                                              \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN                                                                                               \n" +
                "						'Draft'                                                                                                                                   \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN                                                                                               \n" +
                "						'Published'                                                                                                                                  \n" +
                "					ELSE                                                                                               \n" +
                "						''                                                                                               \n" +
                "				END                                                                                              \n" +
                "			) AS `statusConvertedValue`,                                                                          \n" +
                "			hutkit.refType as refTypeKA,                                                                        \n" +
                "			hutkit.status as haltStatusKA,                                                                                     \n" +
                "			(                                                                \n" +
                "				CASE                                                                                              \n" +
                "					WHEN 	hutkit.status = 'H' THEN                                                                                   \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))                                                                                                      \n" +
                "					ELSE 	''                                                                                            \n" +
                "				END                                                                \n" +
                "			) AS reasonKA,                                                                          \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,                                                                                                                    \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,   \n" +
                "			(                                                                \n" +
                "				CASE 	                                                                \n" +
                "					WHEN ifnull(p.totalPlan, 0) = 0 THEN                                                                 \n" +
                "						'Unplanned'     \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN                                                                 \n" +
                "						'Partially Planned'     \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN                                                                 \n" +
                "						'Fully Planned'     \n" +
                "					ELSE                                                                 \n" +
                "						NULL                                                                 \n" +
                "				END                                                                \n" +
                "			) as kitPlanStatus,                                                                                                \n" +
                "			(                                                                \n" +
                "				CASE 	                                                                \n" +
                "					WHEN 	ka.kitReturnStatus is null then                                                                 \n" +
                "						'N/A'                                                                 \n" +
                "					ELSE 	                                                                \n" +
                "						ka.kitReturnStatus                                                                 \n" +
                "				END                                                                \n" +
                "			) as kitReturnStatus,                                                                            \n" +
                "			(                                                                \n" +
                "				CASE 	                                                                \n" +
                "					WHEN ka.kitReleaseStatus is null then                                                                 \n" +
                "						'Not Released'                                                                 \n" +
                "					else                                                                 \n" +
                "						ka.kitReleaseStatus                                                                 \n" +
                "				END                                                                \n" +
                "			) as kitReleaseStatus,                                                                                                \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,                                                  \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100                                               \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage, 			                                                             \n" +
                "			p.nextReleaseDate,                                                                                              \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,                                                                            \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,                                                                            \n" +
                "			p.releasedPlanCount totalkitRelease,                                                                                                      \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,   \n" +
                "            IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "            IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,                                                                 \n" +
                "			vuss.releasedWorkorder,                                  \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"                                                                                    \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"                                                                            \n" +
                "	LEFT JOIN  	(                                                                            \n" +
                "				SELECT  salesOrderDetID,                                                                 \n" +
                "					refAssyId,                                                                             \n" +
                "					count(1) totalPlan,     \n" +
                "                    SUM(poQty) totalPOQty,  \n" +
                "                    SUM(kitReleaseQty) totalKitQty,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,                                                                            \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate                                                                            \n" +
                "				FROM 	salesorder_plan_detailsmst                                                                             \n" +
                "				WHERE 	isDeleted=0                                                              \n" +
                "						AND subAssyID is null                                                                             \n" +
                "				GROUP BY salesOrderDetID, refAssyId                                                                            \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`                                                                               \n" +
                "	LEFT JOIN 	(                                                                            \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                                              \n" +
                "					`k`.`assyID` AS `assyID`,                                                                  \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,                                                                            \n" +
                "					`k`.`shortageLine` AS `shortageLine`,                                                          \n" +
                "					allocPermainAssy allocPerComponent,                                                          \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,                                                                            \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,                                                                             \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,                                                                            \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`                                                                            \n" +
                "					FROM (                                                                            \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                                                 \n" +
                "							mainAssy AS `assyID`,                                                                   \n" +
                "							COUNT(1) AS `totalLine`,                                                                 \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,                                                                \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,                                                                  \n" +
                "							sum( k.shortageline) shortageline,                                                            \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,                                \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`                                \n" +
                "					      FROM (                                \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,                                                                            \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,                                       \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,                                \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,                                                           \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,                                                            \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,                                 \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,                                 \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`                                                                             \n" +
                "								FROM  	`vu_kit_allocation_detail` vk                                                              \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id                                             \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1                                                     \n" +
                "							) `k`                                                             \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy                                                            \n" +
                "					) `k`                                                                       \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`                                                                               \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0                                                                                  \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)                                                                                               \n" +
                "	\");                                                                                                                       \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                                                  \n" +
                "	ELSE                                                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;                                                                                                                                  \n" +
                "	END IF;                                                                                                                                   \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                                                                                                  \n" +
                "	END IF;                                                                           \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);                                                                          \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN                       \n" +
                "	IF(pIsKitList=1)THEN                      \n" +
                "	SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');                     \n" +
                "	ELSE                                                                     \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');                     \n" +
                "	END IF;                                                                         \n" +
                "	END IF;                          \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');                                                                          \n" +
                "	END IF;                         \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');                                                                          \n" +
                "	END IF;                           \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');                                                                          \n" +
                "	END IF;                         \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN                                    \n" +
                "	  IF(psearchposotype='C')THEN                                    \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');                                     \n" +
                "          ELSE                                    \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');                                    \n" +
                "          END IF;                                    \n" +
                "        END IF;                        \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN                                    \n" +
                "	  IF(psearchextPricetype='C')THEN                                    \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');                                     \n" +
                "          ELSE                                    \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');                                    \n" +
                "          END IF;                                    \n" +
                "        END IF;                                \n" +
                "  \n" +
                "        IF(prushJob =1) THEN                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJobValue=\"Yes\"');                                                                          \n" +
                "	END IF;                        \n" +
                "	IF(pworkorders IS NOT NULL)THEN                     \n" +
                "	SET pworkorders=REPLACE(pworkorders,',','|');                  \n" +
                "	 SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');                         \n" +
                "	END IF;                   \n" +
                "	IF(ppartIds IS NOT NULL)THEN                                    \n" +
                "  SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');                                    \n" +
                "  END IF;                    \n" +
                "  \n" +
                "  IF(pkitreturnStatus IS NOT NULL)THEN                    \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');                     \n" +
                "  END IF;                    \n" +
                "  IF(pkitReleaseStatus IS NOT NULL)THEN                    \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');                     \n" +
                "  END IF;                           \n" +
                "        -- from date to date filter                        \n" +
                "	  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN                                    \n" +
                "  SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');                                               \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN                                    \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');                                      \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN                                    \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');                                                     \n" +
                "  END IF;                                                           \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);                                                      \n" +
                "    END IF;                                                          \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN                                                            \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");                                                     \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN        \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN                                                                                              \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");    \n" +
                "		END IF;                                                                                                                                                \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN                                                                                              \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");     \n" +
                "		END IF;                                                      \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN                                                                                              \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");     \n" +
                "		END IF;     \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN                                                                                              \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);                                                                                              \n" +
                "	END IF;                                                                        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                                                                                                     \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                                  \n" +
                "	ELSE                                                                                                                                   \n" +
                "		SET rowNumWhere = '';                                                                                                                                  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                                                     \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;             \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                                                                                                                    \n" +
                "    PREPARE query2 FROM @SQLStatement2;   \n" +
                "	EXECUTE query2;         \n" +
                "	DEALLOCATE PREPARE query2;                                                                                                                                   \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);                                                                                                                        \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                    \n" +
                "	EXECUTE query3;                                                                                                                    \n" +
                "	DEALLOCATE PREPARE query3;     \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);                                                                                                                        \n" +
                "	PREPARE query4 FROM @SQLStatement4;                                                                                                                    \n" +
                "	EXECUTE query4;                                                                                                                    \n" +
                "	DEALLOCATE PREPARE query4;     \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseIndication`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseIndication`(                                	                       \n" +
                "	pNextReleaseDate DATETIME,      \n" +
                "    pShortagePer INT  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                                      \n" +
                "		DECLARE V_Indication LONGTEXT;              \n" +
                "		DECLARE V_ShortageIndication INT;        \n" +
                "		IF(pShortagePer!=100 AND pShortagePer!=0 AND pShortagePer <= 30 )THEN      \n" +
                "				SET V_ShortageIndication=1;       \n" +
                "			ELSE       \n" +
                "				SET V_ShortageIndication=0;       \n" +
                "		END IF;                      \n" +
                "	    IF pNextReleaseDate <= fun_DatetimetoUTCDateTime() AND V_ShortageIndication=1 THEN			      \n" +
                "			 SET V_Indication= CONCAT(DATEDIFF(fun_DatetimetoUTCDateTime(),pNextReleaseDate),' day(s) passed due and shortage is less then 30%');      \n" +
                "		ELSEIF pNextReleaseDate <= fun_DatetimetoUTCDateTime() + INTERVAL 7 DAY AND V_ShortageIndication=1 THEN      \n" +
                "			SET V_Indication = CONCAT(DATEDIFF(pNextReleaseDate,fun_DatetimetoUTCDateTime()),' day(s) are left to release next plan and shortage is less then 30%');		      \n" +
                "		ELSEIF pNextReleaseDate <= fun_DatetimetoUTCDateTime() THEN			      \n" +
                "			 SET V_Indication = CONCAT(DATEDIFF(fun_DatetimetoUTCDateTime(),pNextReleaseDate),' day(s) passed due');		      \n" +
                "		ELSEIF pNextReleaseDate <= (fun_DatetimetoUTCDateTime() + INTERVAL 7 DAY) THEN      \n" +
                "			SET V_Indication = CONCAT(DATEDIFF(pNextReleaseDate,fun_DatetimetoUTCDateTime()),' day(s) are left to release next plan');                  \n" +
                "		ELSEIF V_ShortageIndication=1 THEN      \n" +
                "			SET V_Indication= 'Shortage is less then 30%';      \n" +
                "		ELSE       \n" +
                "			SET V_Indication= NULL;      \n" +
                "	END IF;      \n" +
                "	RETURN V_Indication;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4793,'2.00','V1','User Story 33900: Kit List Page Improvement Points [05/20/2021]- CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4793:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021 *********************************** */
                "UPDATE page_detail SET menuName = 'Manage Help Blogs' WHERE menuName = 'Help Blogs';  \n" +
                "UPDATE help_blog_det SET title = 'Default Title' WHERE title = NULL;  \n" +
                /* **************************** Add Script Version -> 14-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4794,'2.00','V1','Dev Testing issues for #34217 - Purav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4794:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "CHANGE COLUMN `remark` `remark` VARCHAR(2000) NULL DEFAULT NULL COMMENT 'used for Printable Remark or Comment' ,  \n" +
                "CHANGE COLUMN `internalRemark` `internalRemark` VARCHAR(2000) NULL DEFAULT NULL COMMENT 'used for internal Remark or Comment' ,  \n" +
                "CHANGE COLUMN `rmaShippingAddress` `rmaShippingAddress` VARCHAR(1000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `rmaMarkForAddress` `rmaMarkForAddress` VARCHAR(1000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `rmaMarkForAddressId` `rmaMarkForAddressId` INT NULL DEFAULT NULL ;  \n" +
                "ALTER TABLE `packing_slip_material_receive_det`   \n" +
                "CHANGE COLUMN `approveNote` `approveNote` VARCHAR(2000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `remark` `remark` VARCHAR(2000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `internalRemark` `internalRemark` VARCHAR(2000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `comment` `comment` VARCHAR(2000) NULL DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version -> 16-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4795,'2.00','V1','User Story 34165: Convert Longtext, Medium text data field into Text field for Supplier Invoice Flow - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4795:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	                                                                                \n" +
                "	IN ppageIndex INT,                                                                                    \n" +
                "	IN precordPerPage INT,                                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),	                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                             \n" +
                "	IN pWOId INT,                              \n" +
                "        IN woSubstatusIds LONGTEXT,                              \n" +
                "        IN woTypeIds LONGTEXT,                              \n" +
                "        IN rohsStatusIds LONGTEXT,                              \n" +
                "        IN assyTypeIds LONGTEXT,                              \n" +
                "        IN stdCertificationIds LONGTEXT,                              \n" +
                "        IN stdclassIds LONGTEXT,                              \n" +
                "        IN isPendingSoMapping TINYINT,                              \n" +
                "        IN isPendingkitMapping TINYINT,                              \n" +
                "        IN isRunningwo TINYINT,                              \n" +
                "        IN isTrackBySerialNumber TINYINT,                              \n" +
                "        IN isrushJob TINYINT,                              \n" +
                "        IN isstoppedWo TINYINT,                              \n" +
                "        IN isnewWo TINYINT,                              \n" +
                "        IN isWaterSoluble TINYINT,                              \n" +
                "        IN isecodfm TINYINT,                              \n" +
                "        IN isOpenWo TINYINT,                      \n" +
                "	IN isInterBuildFilter TINYINT,                              \n" +
                "        IN customerIds LONGTEXT,                              \n" +
                "        IN salesOrderdetails LONGTEXT,                              \n" +
                "        IN assyIds LONGTEXT ,                              \n" +
                "        IN assyNicknameIds LONGTEXT,                              \n" +
                "        IN operationIds LONGTEXT,                              \n" +
                "        IN employeeIds LONGTEXT ,                              \n" +
                "	IN equipmentIds LONGTEXT,                              \n" +
                "	IN materialIds LONGTEXT,                              \n" +
                "	IN umidIds LONGTEXT,          \n" +
                "	IN isNoClean TINYINT,          \n" +
                "	IN isFluxNotApplicable TINYINT,          \n" +
                "	IN isKitNotRequired TINYINT          \n" +
                "    )  \n" +
                "BEGIN                                                                                    \n" +
                "	DECLARE pOffset INT;                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                      \n" +
                "	DECLARE v_WorkOrderDetailWhere VARCHAR(1000);                           \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                     \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                     \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                              \n" +
                "###                      \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(\"                                                  \n" +
                "	SELECT 	wo.woID,			wo.woNumber,				wo.customerID,                      \n" +
                "		wo.buildQty,			wo.startTime,				wo.endTime,                      \n" +
                "		wo.masterTemplateID,		wo.refrenceWOID,			wo.createdAt,                      \n" +
                "		wo.createdBy,			wo.updatedAt,				wo.updatedBy,							                      \n" +
                "		wo.woStatus,			wo.isDeleted,				wo.excessQty,				                      \n" +
                "		wo.isClusterApplied,		wo.RoHSStatusID,			wo.woVersion,				                      \n" +
                "		wo.isWatersoluble,		wo.isOperationTrackBySerialNo,		wo.ECORemark,                      \n" +
                "		wo.FCORemark,			wo.isStopWorkorder,			wo.isRevisedWO,                      \n" +
                "		wo.isMFGQty,			wo.isOperationsVerified,		wo.terminateWOID,                      \n" +
                "		wo.woType,			wo.ecoReqID,				wo.partID,                      \n" +
                "		wo.locationDetails,		wo.isHotJob,				wo.initialInternalVersion,                      \n" +
                "		wo.terminateWOOPID,		wo.isIncludeSubAssembly,		wo.documentPath,                      \n" +
                "		wo.isRackTrackingRequired,	wo.isStrictlyFollowRackValidation,	wo.createByRoleId,                      \n" +
                "		wo.updateByRoleId,		wo.selectedSampleID,			wo.isNoClean,  wo.isFluxNotApplicable ,                   \n" +
                "		wo.isInternalBuild,		wo.proposedUmidQty,                      \n" +
                "		wo.woSubStatus,(case when wo.isRackTrackingRequired=1 then 'Yes' else 'No' end) as   rackTrackingRequired,                              \n" +
                "		(case when wo.isStrictlyFollowRackValidation=1 then 'Yes' else 'No' end) as   strictlyFollowRackValidation,                                                                        \n" +
                "		fun_getIntToText(wo.isInternalBuild) as  isInternalBuildConvertedValue,                     \n" +
                "		fun_getUserNameByID(wo.updatedBy) woModifiedBy,                                          \n" +
                "		fun_getUserNameByID(wo.createdBy) woCreatedBy,                                          \n" +
                "		fun_getRoleByID(wo.updateByRoleId) updatedbyRole,                   \n" +
                "		fun_getRoleByID(wo.createByRoleId) createdbyRole,                        \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(wo.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woCreatedAt,                                    \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(wo.updatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woUpdatedAt,                                        \n" +
                "		fun_getMfgCodeAndNameByID(wo.customerID) mfgName,                                                                      \n" +
                "		co.PIDCODE AS PIDCode,                                                                       \n" +
                "		co.mfgPN AS mfgPN,                                                                          \n" +
                "		co.nickname AS nickName,                                                                       \n" +
                "		co.mfgPNDescription AS mfgPNDescription,                                                                                 \n" +
                "		co.rev AS rev,                                                                                                           \n" +
                "		co.liveVersion AS liveVersion,                                       \n" +
                "		wthu.woTransHoldUnholdId,		                                    \n" +
                "		vuwosummstk.shippedQty,                                                                      \n" +
                "		vuwosummstk.readytoShipQty,                                            \n" +
                "		vuwosummstk.scrapQty AS scrappedQty ,                       \n" +
                "		`vuwosummstk`.`stockAdjustmentQty`,                                                                     \n" +
                "		`tmp_vuwotransfer`.`OP Name` AS fromOpName,                                                                      \n" +
                "		`tmp_vuwotransfer`.`OP Number` AS fromOpNumber,                                                                      \n" +
                "		`tmp_vuwotransfer`.`woOPID Identity` AS fromWOOPID,                                                                       \n" +
                "		`tmp_vuwotransfer`.`TransferQty` AS transferQty,                                                                      \n" +
                "		`tmp_vuwotransfer`.`To WO Number` AS transferWoNumber,                                                                  \n" +
                "		`tmp_vuwotransfer`.`To WO Version` AS transferWoVersion,                                              \n" +
                "		fun_getWoSubStatusNameByID(`wo`.`woSubStatus`) AS `woSubStatusConvertedValue`,                                                                         \n" +
                "		-- fun_getReadyStock(`wo`.`woID`) AS returnPending,                                                                        \n" +
                "		(IFNULL(vuwosummstk.buildQty,0) - IFNULL(vuwosummstk.firstOPtotalQty,0)) AS returnPending,                                                                              \n" +
                "		CAST(fun_getMinShippingDateByWOID(`wo`.`woID`) AS DATETIME) AS shippingDate,                                                                                   \n" +
                "		ro.rohsIcon,                                                                      \n" +
                "		`ro`.`name` AS `rohsName` ,                                                                                \n" +
                "		tmp_workorder_operation.opCount opCount,                                                                      \n" +
                "		tmp_workorder_reqforreview.woReviewChangesCount woReviewChangesCount,                                                                      \n" +
                "		tmp_eco_request.ecoRequestCount ecoRequestCount,                                                      \n" +
                "		tmp_eco_request.dfmRequestCount as dfmRequestCount,                                                       \n" +
                "		tmp_workorder_cluster.parallelClusterCount,                                                                      \n" +
                "		fun_getSampleAvailableConvertedValueByAssyID(wo.partID) AS `isSampleAvailableConvertedValue` ,                                                                                    \n" +
                "		fun_getIntToText(wo.isHotJob) AS `isHotJobConvertedValue`,                                                                                    \n" +
                "		fun_getIntToText(`wo`.`isOperationTrackBySerialNo`) AS `isOperationTrackBySerialNoConvertedValue`,                                                                                    \n" +
                "		fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,                                                                            \n" +
                "		fun_getIntToText(`wo`.`isStopWorkorder`) AS `isHalt`,                                                                                  \n" +
                "		fun_getWOHoldUnholdReason(wo.woID,wo.isStopWorkorder,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS reasonDetails,                                                                                  \n" +
                "		tmp_workorder_operation.stopOperationCount as stopOperationCount,                                                                      \n" +
                "		vusalesorderdet.totalPOQty,                       \n" +
                "		vusalesorderdet.POQtyValues soPOQty,                                                                                      \n" +
                "   		vusalesorderdet.totalMRPQty,                       \n" +
                "   		vusalesorderdet.MRPQtyValues soMRPQty,                        \n" +
                "   		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.poNumber ELSE vusalesorderdet.poNumber END poNumber,                           \n" +
                "		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.salesOrderNumber ELSE vusalesorderdet.salesOrderNumber END salesOrderNumber,                        \n" +
                "		vusalesorderdet.lineID ,                                              \n" +
                "		 vusalesorderdet.salesOrderMstIDs,                       \n" +
                "		 vusalesorderdet.SOPOQtyValues ,                               \n" +
                "		fun_getKitReleaseStatusByWoID(wo.woID) kitReleaseStatus,                            \n" +
                "		(CASE WHEN co.totalSolderPoints > 0 THEN fun_calculateDPMOForWO(wo.woID) ELSE NULL END) AS DPMO  ,                                        \n" +
                "		tmp_workorder_reqrevcomments.pendingWOReqThreadCount as pendingWOReqThreadCount,                        \n" +
                "		fun_getAssyTypeByID(co.assemblyType) as assyTypeName ,            \n" +
                "		wo.isKitAllocationNotRequired,          \n" +
                "		Round(((IFNULL(vuwosummstk.readytoShipQty,0) + IFNULL(vuwosummstk.scrapQty,0) + IFNULL(vuwosummstk.shippedQty,0))/IFNULL(wo.buildQty,0))*100,2) AS `woCompletionPercentage`,        \n" +
                "		fun_getIntToText(wo.isKitAllocationNotRequired) isKitAllocationNotRequiredConvertedValue,    \n" +
                "        (CASE WHEN co.isFluxNotApplicable = 1 THEN 'NA'        \n" +
                "				  WHEN co.isNoClean = 0 AND co.isWaterSoluble = 1 THEN 'WS'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 0 THEN 'NC'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NCF'  END) assyFluxType,        \n" +
                "            (CASE WHEN co.isFluxNotApplicable = 1 THEN 'Not Applicable'        \n" +
                "				  WHEN co.isNoClean = 0 AND co.isWaterSoluble = 1 THEN 'Water-Soluble'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 0 THEN 'No-Clean'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'     \n" +
                "                  ELSE 'No-Configured' END ) assyFluxTypeConvertedValue ,   \n" +
                "                systemID        \n" +
                "	FROM                       \n" +
                "		workorder wo                                                                                    \n" +
                "		INNER JOIN component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3                                                                          \n" +
                "		INNER JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                                                                              \n" +
                "		LEFT OUTER JOIN vu_workorder_summary_stk vuwosummstk ON (vuwosummstk.woid = wo.woID)                                           \n" +
                "		LEFT OUTER JOIN workorder_trans_hold_unhold wthu ON wo.woID = wthu.woID AND wthu.isDeleted = 0  AND wthu.endDate IS NULL                                    \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				`wotransfer`.`OP Name`,                                                                    \n" +
                "				`wotransfer`.`OP Number`,                                                                      \n" +
                "				`wotransfer`.`woOPID Identity`,                                                                       \n" +
                "				`wotransfer`.`To WO Number`,                                                                      \n" +
                "				`wotransfer`.`To WO Version`,                                                                   \n" +
                "				`wotransfer`.`woID Identity` AS woID,                      \n" +
                "				SUM(`wotransfer`.`Transfer Qty`) `TransferQty`                                                                      \n" +
                "			FROM                       \n" +
                "				vu_workorder_transfer_report wotransfer                      \n" +
                "			GROUP BY                       \n" +
                "				`wotransfer`.`OP Name`,                                                                    \n" +
                "				`wotransfer`.`OP Number`,                                                                      \n" +
                "				`wotransfer`.`woOPID Identity`,                                                                       \n" +
                "				`wotransfer`.`To WO Number`,                                                                      \n" +
                "				`wotransfer`.`To WO Version`,                                                                   \n" +
                "				`wotransfer`.`woID Identity`                      \n" +
                "		) as tmp_vuwotransfer ON `tmp_vuwotransfer`.`woID` = wo.woID                      \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID,                       \n" +
                "				SUM(IF(er.requestType = 1, 1,0)) AS  ecoRequestCount,                      \n" +
                "				SUM(IF(er.requestType = 2, 1,0)) AS dfmRequestCount                       \n" +
                "			FROM                       \n" +
                "				eco_request er                       \n" +
                "			WHERE  er.isDeleted  = 0              \n" +
                "			GROUP BY woID) as tmp_eco_request ON tmp_eco_request.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID, COUNT(1) AS parallelClusterCount                       \n" +
                "			FROM                       \n" +
                "				workorder_cluster woc                       \n" +
                "			WHERE                       \n" +
                "				woc.isDeleted = 0 AND woc.isParellelOperation = 1              \n" +
                "				GROUP BY woID                      \n" +
                "		) as tmp_workorder_cluster ON tmp_workorder_cluster.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID, COUNT(1)  AS woReviewChangesCount                       \n" +
                "			FROM                       \n" +
                "				workorder_reqforreview                       \n" +
                "			WHERE  isDeleted = 0                      \n" +
                "			GROUP BY woID                      \n" +
                "		) as tmp_workorder_reqforreview ON tmp_workorder_reqforreview.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID,                       \n" +
                "				COUNT(*) AS opCount,                      \n" +
                "				SUM(IF(isStopOperation = 1,1,0)) AS stopOperationCount                      \n" +
                "			FROM                       \n" +
                "				workorder_operation                       \n" +
                "			WHERE  isDeleted = 0                      \n" +
                "			GROUP BY woID                      \n" +
                "		) as tmp_workorder_operation ON tmp_workorder_operation.woID = wo.woID                       \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				wr.woID, COUNT(1) AS pendingWOReqThreadCount                      \n" +
                "			FROM                       \n" +
                "				workorder AS wo                       \n" +
                "				INNER JOIN workorder_reqrevcomments AS wr ON wo.woID = wr.woID                      \n" +
                "			WHERE                       \n" +
                "				wr.isDeleted = 0  AND wr.accRejStatus = 'P'                                      \n" +
                "				AND wr.commentemployeeID != fun_getEmployeeIDByUserID(wo.createdBy)                      \n" +
                "			GROUP BY woID) as tmp_workorder_reqrevcomments  ON tmp_workorder_reqrevcomments.woID = wo.woID                      \n" +
                "		LEFT JOIN vu_workorder_salesorder_details parentSODtl ON parentSODtl.woID = wo.terminateWOID                         \n" +
                "	WHERE                       \n" +
                "		wo.isdeleted = 0\");                      \n" +
                " ##select @temp_Sproc_GetWorkorder;                      \n" +
                "  IF(woSubstatusIds IS NOT NULL AND woSubstatusIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woSubStatus in (', woSubstatusIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(woTypeIds IS NOT NULL AND woTypeIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woType in (', woTypeIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(rohsStatusIds IS NOT NULL AND rohsStatusIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.RoHSStatusID in (', rohsStatusIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(assyTypeIds IS NOT NULL AND assyTypeIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partId IN (SELECT c.id FROM component c WHERE c.isDeleted = 0 and c.assemblyType IN (',assyTypeIds,'))');                              \n" +
                "  END IF;                              \n" +
                "IF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '' AND                                                    \n" +
                "		stdclassIds IS NOT NULL AND stdclassIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' ) and wc.classIds in (', stdclassIds, ' )) ');                                                    \n" +
                "	ELSEIF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' )) ');                                                    \n" +
                "	ELSEIF (stdclassIds IS NOT NULL AND stdclassIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.classIds in (', stdclassIds, ' )) ');                                                    \n" +
                "    END IF;                              \n" +
                "  IF(isPendingSoMapping=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0 ) ');                                                    \n" +
                "  END IF;                              \n" +
                "  IF(isPendingkitMapping=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from salesorder_plan_detailsmst sp where sp.woID = wo.woID and sp.isDeleted = 0 ) ');                                                    \n" +
                "  END IF;                              \n" +
                "IF(isRunningwo=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and wt.checkinTime is not null and wt.checkoutTime is null) ');                               \n" +
                "END IF;                                \n" +
                "IF(isTrackBySerialNumber=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isOperationTrackBySerialNo=1');                                \n" +
                "END IF;                              \n" +
                "IF(isrushJob=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isHotJob=1');                                \n" +
                "END IF;                              \n" +
                "IF(isstoppedWo=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isStopWorkorder=1');                              \n" +
                "END IF;                              \n" +
                "  IF(isnewWo IS NOT NULL)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isRevisedWO=',isnewWo,'');                              \n" +
                "  END IF;                              \n" +
                "  IF(isecodfm=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 ) ');                               \n" +
                "  END IF;                              \n" +
                "  IF(isWaterSoluble = 1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isWatersoluble=1');                              \n" +
                "  END IF;          \n" +
                "  IF(isNoClean = 1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isNoClean=1');                              \n" +
                "  END IF;          \n" +
                "  IF(isFluxNotApplicable = 1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isFluxNotApplicable=1');                              \n" +
                "  END IF;	                       \n" +
                "  IF(isOpenWo IS NOT NULL)THEN                              \n" +
                "	IF(isOpenWo=1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus=\"P\") ');                              \n" +
                "	ELSE                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus!=\"P\") ');                              \n" +
                "	END IF;                              \n" +
                "  END IF;                             \n" +
                "   IF(isInterBuildFilter =1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isInternalBuild = 1 ');                              \n" +
                "	END IF;             \n" +
                "    IF(isKitNotRequired =1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isKitAllocationNotRequired = 1 ');                              \n" +
                "	END IF;                      \n" +
                "  IF(customerIds IS NOT NULL AND customerIds!='')THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.customerID in (', customerIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(salesOrderdetails IS NOT NULL AND salesOrderdetails!='')THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0  and ws.salesorderdetailID in (select sd.id from salesorderdet sd where sd.isDeleted = 0 and sd.refSalesOrderID in (',salesOrderdetails,'))) ');                              \n" +
                "  END IF;                              \n" +
                "  IF(assyIds IS NOT NULL AND assyIds!='') THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (', assyIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(assyNicknameIds IS NOT NULL AND assyNicknameIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (select c.id from component c where c.nickname in (', assyNicknameIds, ' ))');                              \n" +
                "  END IF;                              \n" +
                "  IF (operationIds IS NOT NULL AND operationIds != '') THEN                               \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_operation woop where woop.woID = wo.woID and woop.isDeleted = 0 and woop.opID in (', operationIds, ' )) ');                                                    \n" +
                "  END IF;                              \n" +
                "  IF (employeeIds IS NOT NULL AND employeeIds != '' AND operationIds IS NOT NULL AND operationIds != '') THEN                               \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0 and woe.opID in (',operationIds,') and woe.employeeID in (', employeeIds, ' ))                               \n" +
                "	OR  exists (select 1 from  workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and wte.opID in (',operationIds,') and wte.employeeID in (', employeeIds, ' )))');                               \n" +
                "  ELSEIF(employeeIds IS NOT NULL AND employeeIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.employeeID in (', employeeIds, ' ))                               \n" +
                "            OR  exists(select 1 from workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and  wte.employeeID in (', employeeIds, ' ))                              \n" +
                "            OR  exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.employeeID in (', employeeIds, ' )))');                                \n" +
                "  END IF;                              \n" +
                "  IF(equipmentIds IS NOT NULL AND equipmentIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_equipment woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.eqpID in (', equipmentIds, ' ))                               \n" +
                "            OR  exists(select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and  wt.equipmentID in (', equipmentIds, ' ))                              \n" +
                "            OR exists(select 1 from workorder_operation_equipment_feeder_details woef where woef.woopeqpid in (select woe.woOpEqpID from workorder_operation_equipment woe where woe.woID=wo.woID and woe.isDeleted = 0) and woef.isDeleted = 0 and  woef.eqpID in (', equipmentIds, ' )))');                                \n" +
                "  END IF;                              \n" +
                "  IF(materialIds IS NOT NULL AND materialIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_part wop where wop.woID = wo.woID and wop.isDeleted = 0  and wop.partID in (', materialIds, ' ))                               \n" +
                "            OR exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.mfgpnid in (', materialIds, ' )))');                                \n" +
                "  END IF;                              \n" +
                "  IF(umidIds IS NOT NULL AND umidIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.refsidid in (select csd.id from component_sid_stock csd where csd.uid in (', umidIds, ' ) and csd.isDeleted = 0))');                                \n" +
                "  END IF;                              \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                    \n" +
                "	ELSE                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName ASC\") ;                                                                                    \n" +
                "	END IF;	                                                                                    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                                                    \n" +
                "	END IF;	                                                                                    \n" +
                "    IF (pWOId != 0) THEN                                                \n" +
                "		SET v_WorkOrderDetailWhere = CONCAT(\" AND woID = \", pWOId);                                                \n" +
                "	END IF;                                      \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                    \n" +
                "	ELSE	                                                                                    \n" +
                "		SET rowNumWhere = '';                                                                                    \n" +
                "	END IF;	                                                                                    \n" +
                "	  /* to get total count of rows */                                                       \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetWorkorder,\" ) c where 1=1 and \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, ''));                                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                      \n" +
                "	EXECUTE query2;                                                      \n" +
                "	DEALLOCATE PREPARE query2;                                                    \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetWorkorder,\" ) c  where \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                                                      \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                      \n" +
                "	EXECUTE query1;                                                      \n" +
                "	DEALLOCATE PREPARE query1;                                                                               \n" +
                "	/* to get total count of rows of workorder table */                                                                                    \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) FROM workorder where isDeleted = 0\" );                                                                                    \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                    \n" +
                "	EXECUTE query3;                                                                                    \n" +
                "	DEALLOCATE PREPARE query3;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4796,'2.00','V1','Work Order List Changes - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4796:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPurchaseOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(                      \n" +
                "	IN pid INT                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "    # Purchase Order Master details                      \n" +
                "    SELECT  po.id,                       \n" +
                "		po.status,                      \n" +
                "		po.poNumber,                      \n" +
                "        po.poRevision,                      \n" +
                "        po.poDate,       \n" +
                "        po.poWorkingStatus,                     \n" +
                "        po.supplierAddress,                      \n" +
                "		po.shippingAddress,               \n" +
                "        po.intermediateAddress,              \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                        \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                      \n" +
                "        po.shippingInsurance,                      \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,                      \n" +
                "        po.poComment,                      \n" +
                "        po.serialNumber,                     \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                      \n" +
                "		us.emailAddress,                      \n" +
                "		emp.phExtension  ,  \n" +
                "        '1.00' AS docNumber  \n" +
                "	FROM purchase_order_mst po                      \n" +
                "         INNER JOIN                            \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID                            \n" +
                "        AND gcs.isDeleted = 0                            \n" +
                "        INNER JOIN                            \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID                            \n" +
                "        AND gcp.isDeleted = 0                      \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy                              \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                        \n" +
                "        WHERE po.isDeleted = 0 AND po.id = pid;                      \n" +
                "  \n" +
                "	# Purchase Order Line details                      \n" +
                "    SELECT  pod.lineID,                      \n" +
                "		pod.id AS pODetID,                      \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,              \n" +
                "		(CASE WHEN (c.iscustom=1) THEN                           \n" +
                "			c.custAssyPN                          \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                           \n" +
                "			c.mfgPN                           \n" +
                "        ELSE ''  END) AS mfgPN ,                    \n" +
                "        IFNULL(c.rev, '') AS revision,                      \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,                      \n" +
                "		pod.supplierQuoteNumber,                      \n" +
                "        pod.internalRef,                      \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,                      \n" +
                "        pod.qty,                      \n" +
                "        'EA' uom,                      \n" +
                "        pod.price,    \n" +
                "        (SELECT SUM(IFNULL(pold.receivedQty,0)) FROM purchase_order_line_release_det pold WHERE pold.isdeleted=0 AND pold.refPurchaseOrderDetID=pod.id) receivedQty,       \n" +
                "       fun_getMFGPNByID(pod.supplierPartID) supplierPN,                       \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,             \n" +
                "        CONCAT(IFNULL(pod.partDescription, ''),CASE WHEN (fun_getCertificationByPartID(pod.mfgPartID) IS NULL AND c.htsCode IS NULL AND c.countryOfOrigin IS NULL) THEN '' ELSE '<br/>' END,             \n" +
                "            IFNULL(CONCAT(                                      \n" +
                "                            fun_getCertificationByPartID(pod.mfgPartID)),                                      \n" +
                "                    ''),                      \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                      \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                    \n" +
                "        pod.lineComment                      \n" +
                "	 FROM purchase_order_det pod                      \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)                       \n" +
                "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid                       \n" +
                "	 ORDER BY pod.lineID ASC;	                      \n" +
                "  \n" +
                "	# Get purchase order Total Price table details                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                                 \n" +
                "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud                     \n" +
                "				INNER JOIN component cm ON cm.id = pud.mfgPartID                      \n" +
                "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 AND cm.partType <> 4) totalLinePrice ,                          \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,                              \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd                       \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID                      \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 AND c.partType = 4) totalPOMiscPrice                              \n" +
                "		FROM purchase_order_det pd                         \n" +
                "		WHERE pd.refPurchaseOrderID= pid                      \n" +
                "		AND pd.isdeleted=0;               \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                      \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                      \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,                 \n" +
                "				IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0),0) totalPOPrice FROM tempTotalPrice LIMIT 1;                               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4797,'2.00','V1','Sproc_GetPurchaseOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4797:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(	                                              \n" +
                "	IN pid INT(11)                                    \n" +
                "    )  \n" +
                "BEGIN                                              \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,                                      \n" +
                "		sm.soDate,                                            \n" +
                "		sm.status,                \n" +
                "		sm.shippingComment,                                            \n" +
                "		mfg.mfgName AS customer,                                            \n" +
                "		gctsm.gencCategoryName AS shippingMethod,                                            \n" +
                "		gctpm.gencCategoryName AS paymentMethod,                  \n" +
                "		-- get intermediate shipment address                  \n" +
                "		CASE                                             \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN                                                    \n" +
                "	(                                                    \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                            \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                         \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                 \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                 \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                        \n" +
                "	FROM customer_addresses ca                                                        \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                        \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0                                                     \n" +
                "	) END AS intermediateShippingAddress,                  \n" +
                "  \n" +
                "        -- get shipping detils of customer                                                     \n" +
                "        CASE                                             \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN                                                    \n" +
                "	(                                                    \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                            \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                         \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                 \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                 \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                        \n" +
                "	FROM customer_addresses ca                                                        \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                        \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                                                     \n" +
                "	) END AS shippingAddress,                                            \n" +
                "	-- get billing Address                                            \n" +
                "	CASE                                             \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN                                                    \n" +
                "	(                                                    \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                         \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),                                \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                 \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                        \n" +
                "	FROM customer_addresses ca                                                        \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID                                                        \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'                                                   \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,                               \n" +
                "    '1.00' docNumber  \n" +
                "  \n" +
                "	FROM salesordermst sm                                              \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)                                            \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)                                              \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0                                \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId                                  \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo                                          \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);                                          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT                     \n" +
                "    sd.lineID,                    \n" +
                "    c.PIDCode,                    \n" +
                "    sd.id AS sDetID,                    \n" +
                "    (CONCAT(CASE                    \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN                    \n" +
                "        ELSE c.custAssyPN                    \n" +
                "    END)) mfgPN,                    \n" +
                "    c.rev revision,             \n" +
                "    CONCAT(IFNULL(sd.partDescription, ''), '<br/>',                               \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),                                  \n" +
                "            IFNULL(CONCAT(', ',                                  \n" +
                "                            fun_getCertificationByPartID(sd.partID)),                                  \n" +
                "                    ''),                                  \n" +
                "            IFNULL(CONCAT(', Quote#', CASE                    \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                    \n" +
                "        ELSE sd.quoteNumber                    \n" +
                "    END), ''),                                  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                   \n" +
                "    sd.qty,                    \n" +
                "    sd.price,                    \n" +
                "    sd.qty * sd.price AS extPrice,                    \n" +
                "    sd.materialTentitiveDocDate,                \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,                   \n" +
                "    CASE                    \n" +
                "        WHEN sd.partCategory = 2 THEN NULL                    \n" +
                "        ELSE sd.shippingQty                    \n" +
                "    END shippingQty,                    \n" +
                "    ro.rohsIcon AS rohsIcon,                    \n" +
                "    ro.name AS rohsStatus,                    \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,                    \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,    \n" +
                "    su.emailAddress,                    \n" +
                "    sd.custPOLineNumber,                    \n" +
                "    CASE                    \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                    \n" +
                "        ELSE sd.quoteNumber                    \n" +
                "    END quoteNumber,                    \n" +
                "    sd.remark,                    \n" +
                "    emp.phExtension,              \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser                    \n" +
                "FROM                    \n" +
                "    salesorderdet sd                    \n" +
                "        JOIN                    \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id                    \n" +
                "        AND sm.deletedAt IS NULL)                    \n" +
                "        JOIN                    \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)                    \n" +
                "        JOIN                    \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id                    \n" +
                "        AND ro.deletedAt IS NULL)                    \n" +
                "        LEFT JOIN                    \n" +
                "    users su ON su.id = sm.updatedBy                    \n" +
                "        LEFT JOIN                    \n" +
                "    employees emp ON emp.id = su.employeeID                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                    \n" +
                "        AND ra.partID = sd.partID                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                    \n" +
                "WHERE                    \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)                    \n" +
                "        AND sm.id = pid                    \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;	                                \n" +
                "  \n" +
                "        -- get salesorder level total details for                                \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                \n" +
                "	SELECT SUM(sd.qty * sd.price) totalLinePrice,                                \n" +
                "	(SELECT SUM(sod.qty * sod.price) FROM salesorder_otherexpense_details sod WHERE sod.refSalesOrderDetID IN (SELECT s.id FROM salesorderdet s JOIN component c ON c.id=s.partID AND c.isdeleted=0 WHERE s.refsalesorderID=pid            \n" +
                "                	AND s.isDeleted=0 ) AND sod.isdeleted=0) totalLineMiscPrice,                                \n" +
                "	(SELECT SUM(ssd.qty * ssd.price) FROM salesorderdet ssd JOIN component c ON c.id=ssd.partID AND c.isdeleted=0  WHERE ssd.refsalesorderID=pid AND c.partType=4 AND ssd.isdeleted=0) totalSOMiscPrice                              \n" +
                "                	FROM salesorderdet sd  JOIN component c ON c.id=sd.partID AND c.isdeleted=0                             \n" +
                "                	WHERE sd.refsalesorderID=pid AND c.partType IN (2,3) AND sd.isdeleted=0;                     \n" +
                "  \n" +
                "	SELECT                     \n" +
                "    IFNULL(totalLinePrice,0) totalLinePrice,                    \n" +
                "    IFNULL(totalLineMiscPrice, 0) totalLineMiscPrice,                    \n" +
                "    IFNULL(totalSOMiscPrice, 0) totalSOMiscPrice,                    \n" +
                "    (IFNULL(totalLinePrice,0) + IFNULL(totalLineMiscPrice, 0) + IFNULL(totalSOMiscPrice, 0)) totalSOPrice                    \n" +
                "FROM                    \n" +
                "    tempTotalPrice;                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4798,'2.00','V1','Sproc_GetSalesOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4798:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                                      \n" +
                "	IN cpid INT                                      \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	SELECT                                   \n" +
                "    cp.id,                              \n" +
                "    cp.status,                     \n" +
                "    cp.packingSlipType,                    \n" +
                "    cp.packingSlipNumber AS PackingSlip,                                  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                                  \n" +
                "    cp.poDate AS PODate,                                  \n" +
                "    cp.soNumber AS SalesOrderNumber,                                  \n" +
                "    cp.poNumber AS PONumber,              \n" +
                "    cp.packingSlipComment,                                  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                                  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                                  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                              \n" +
                "    cp.soDate AS SODate,                                  \n" +
                "    cp.sorevision AS SORevision,                                  \n" +
                "	cp.billingAddress AS SoldToAddress,                            \n" +
                "	cp.shippingAddress AS ShippingAddress,                   \n" +
                "	cp.intermediateAddress AS IntermediateAddress,                     \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,                            \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,    \n" +
                "    cp.revision packingSlipVersion  ,  \n" +
                "    '1.00' docNumber  \n" +
                "FROM                                  \n" +
                "    customer_packingslip cp                         \n" +
                "        LEFT JOIN                                  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                                  \n" +
                "        AND sm.isDeleted = 0                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                                  \n" +
                "        AND gc.isDeleted = 0                                  \n" +
                "        AND gc.categoryType = 'Shipping Methods'                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                                  \n" +
                "        AND gcc.isDeleted = 0                                  \n" +
                "        AND gcc.categoryType = 'Payment Terms'                                \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                                      \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                               \n" +
                "WHERE                                  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                                  \n" +
                "LIMIT 1;                                  \n" +
                "  \n" +
                "SELECT                                   \n" +
                "	cpd.lineID AS PSLine,                            \n" +
                "    cpd.id AS cpDetID,      \n" +
                "    ss.releaseNumber,                            \n" +
                "    cpd.refCustPackingSlipID AS cpID,                             \n" +
                "    cpd.partId,                            \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                              \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,                              \n" +
                "    cpd.custPOLineID AS POLine,                      \n" +
                "    cpd.shippingNotes AS ShippingComment,                      \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN                            \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                            \n" +
                "		WHEN (c.iscustom = 1) THEN                            \n" +
                "		c.custAssyPN                            \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN                            \n" +
                "		c.mfgPN                            \n" +
                "		ELSE                            \n" +
                "		''                            \n" +
                "	END) AS PartNumber,              \n" +
                "	CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,                               \n" +
                "    IFNULL(c.rev, '') AS Revision,                             \n" +
                "    c.partType,                            \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',                               \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                                  \n" +
                "            IFNULL(CONCAT(', ',                                  \n" +
                "                            cpd.standrads),                                  \n" +
                "                    ''),                                  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                                  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                                  \n" +
                "FROM                                  \n" +
                "    customer_packingslip_det cpd                            \n" +
                "        LEFT JOIN                                  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                                  \n" +
                "        AND cp.isDeleted = 0                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    component c ON c.id = cpd.partid                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                                  \n" +
                "        AND sd.isDeleted = 0                                 \n" +
                "        LEFT JOIN                                 \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID       \n" +
                "    LEFT JOIN      \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId     	                            \n" +
                "        LEFT JOIN                                  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                                  \n" +
                "        AND ra.partID = cpd.partId                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                             \n" +
                "WHERE                          \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4799,'2.00','V1','Sproc_GetCustomerPackingslipReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4799:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                                  \n" +
                "	IN cpID INT                                  \n" +
                ")  \n" +
                "BEGIN	                                  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);        \n" +
                "    # Customer Invoice Master table details                                   \n" +
                "    SELECT  cp.id,                                  \n" +
                "		cp.invoiceNumber,                                  \n" +
                "        cp.invoiceDate,                                  \n" +
                "		cp.packingSlipNumber,                                        \n" +
                "		cp.packingSlipDate,                                        \n" +
                "		cp.poDate,                                        \n" +
                "		cp.poNumber,                  \n" +
                "        cp.poRevision,        \n" +
                "		mg.customerSystemID,                        \n" +
                "		mg.accountRef,                       \n" +
                "		cp.packingSlipComment,                                 \n" +
                "        cp.status,                                  \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '                      \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                                \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                                  \n" +
                "        cp.billingAddress,                                  \n" +
                "        cp.shippingAddress,                        \n" +
                "        cp.intermediateAddress,                                  \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                                  \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                    \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                   \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                                  \n" +
                "        cp.systemID AS legalnumber,                \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,                                  \n" +
                "		us.emailAddress,                                  \n" +
                "		emp.phExtension,      \n" +
                "        cp.revision invoiceVersion,  \n" +
                "        '1.00' AS docNumber  \n" +
                "		FROM customer_packingslip cp                         \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                                  \n" +
                "                LEFT JOIN                                        \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                                   \n" +
                "        AND gcs.isDeleted = 0                                       \n" +
                "           LEFT JOIN                                        \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                                   \n" +
                "        AND gcp.isDeleted = 0                                     \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                          \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                                   \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                                   \n" +
                "  \n" +
                "	# Customer Invoice line level details                                   \n" +
                "	SELECT                                    \n" +
                "		cpd.id,                                        \n" +
                "		cpd.partId,                              \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                               \n" +
                "		cpd.lineID,           \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,          \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,                               \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                     \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                                  \n" +
                "		  WHEN (c.iscustom=1) THEN                                   \n" +
                "			c.custAssyPN                                  \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                                   \n" +
                "			c.mfgPN                                   \n" +
                "        ELSE                                                                           \n" +
                "			  ''                                                          \n" +
                "			END) AS mfgPN ,                                  \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                       \n" +
                "			'Other Charges'                                        \n" +
                "		ELSE                                                                           \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                          \n" +
                "			END) AS  mfgName,                                  \n" +
                "		IFNULL(c.rev, '') AS revision,                                  \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                                  \n" +
                "		cpd.shipQty AS qty,                                   \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                                  \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,                        \n" +
                "		CONCAT(                  \n" +
                "		IFNULL(cpd.assyDescription, ''),'<br/>',                                       \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                          \n" +
                "                IFNULL(CONCAT(', ',                                          \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                          \n" +
                "                    ''),                          \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                          \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),          \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,                      \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS DESCRIPTION                     \n" +
                "  \n" +
                "	FROM                                        \n" +
                "		customer_packingslip_det cpd           \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0                                           \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                         \n" +
                "	WHERE                                        \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                                   \n" +
                "  \n" +
                "	SELECT  get_totalCustomerInvoiceReceivedAmountById(cpID) into vReceivedAmt;        \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                   \n" +
                "    SELECT                                                \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                                   \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                                   \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                                        \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                                            \n" +
                "			(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                                   \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                                   \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                                  \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                                   \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice                                  \n" +
                "		FROM customer_packingslip_det cpd                                       \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                                    \n" +
                "		AND cpd.isdeleted=0;                                        \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                                    \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                                    \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,              \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice,        \n" +
                "                vReceivedAmt totalRecvAmt,        \n" +
                "                (IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) - ifnull(vReceivedAmt,0)) totalBalAmt        \n" +
                "                FROM tempTotalPrice LIMIT 1;                   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                   \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4800,'2.00','V1','Sproc_GetCustomerInvoiceReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4800:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCreditMemoReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                        \n" +
                "	IN cpID INT                        \n" +
                ")  \n" +
                "BEGIN	                        \n" +
                "   # Customer Invoice Master table details                         \n" +
                "   SELECT  cp.id,                         \n" +
                "			cp.invoiceNumber,                        \n" +
                "			cp.invoiceDate,            \n" +
                "            cp.creditMemoNumber,            \n" +
                "            cp.creditMemoDate,            \n" +
                "            cp.refDebitMemoNumber,            \n" +
                "            refDebitMemoDate,                            \n" +
                "			cp.poNumber,                               \n" +
                "			cp.poDate,              \n" +
                "			mg.customerSystemID,              \n" +
                "			mg.accountRef,            \n" +
                "			cp.status,                     \n" +
                "			cp.billingAddress,             \n" +
                "			cp.shippingAddress,              \n" +
                "            cp.packingSlipComment,              \n" +
                "            cp.rmaNumber,            \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                          \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                \n" +
                "			cp.systemID AS legalnumber,                \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                  \n" +
                "			us.emailAddress,              \n" +
                "			emp.phExtension,  \n" +
                "            '1.00' docNumber  \n" +
                "		FROM customer_packingslip cp               \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                        \n" +
                "                LEFT JOIN                              \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                         \n" +
                "        AND gcs.isDeleted = 0                             \n" +
                "           LEFT JOIN                              \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                         \n" +
                "        AND gcp.isDeleted = 0                           \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                         \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0   \n" +
                "    and transType='C'  \n" +
                "    LIMIT 1;                         \n" +
                "  \n" +
                "	# Customer Invoice line level details                         \n" +
                "	SELECT                          \n" +
                "		cpd.id,                              \n" +
                "		cpd.partId,                    \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                     \n" +
                "		cpd.lineID,             \n" +
                "        cpd.reflineID,          \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                           \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                        \n" +
                "		  WHEN (c.iscustom=1) THEN                         \n" +
                "			c.custAssyPN                        \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                         \n" +
                "			c.mfgPN                         \n" +
                "        ELSE                                                                 \n" +
                "			  ''                                                \n" +
                "			END) AS mfgPN ,                        \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                             \n" +
                "			'Other Charges'                              \n" +
                "		ELSE                                                                 \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                \n" +
                "			END) AS  mfgName,                        \n" +
                "		IFNULL(c.rev, '') AS revision,                        \n" +
                "		(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                           \n" +
                "			'EA'                        \n" +
                "		ELSE         \n" +
                "			fun_getUOMAbbreviationByID(c.uom)        \n" +
                "        END) AS uom,                        \n" +
                "		cpd.shipQty AS qty,                         \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                        \n" +
                "		IFNULL(cpd.extendedPrice,0) AS extPrice,              \n" +
                "		CONCAT(IFNULL(cpd.assyDescription, ''),'<br/>',                             \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                               \n" +
                "            IFNULL(CONCAT(', ',                                \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                \n" +
                "                    ''),                \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',      \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS description               \n" +
                "  \n" +
                "	FROM                              \n" +
                "		customer_packingslip_det cpd                             \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                              \n" +
                "	WHERE                              \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID ORDER BY reflineID ASC;                         \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                         \n" +
                "    SELECT                                      \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                         \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                     \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 AND cp.refChargesTypeID IS NULL) totalLinePrice,            \n" +
                "			(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                         \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice                        \n" +
                "		FROM customer_packingslip_det cpd                             \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                          \n" +
                "		AND cpd.isdeleted=0;           \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                \n" +
                "                IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,      \n" +
                "                IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalCIOMiscPrice,0),0) totalCIPrice FROM tempTotalPrice LIMIT 1;           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4801,'2.00','V1','Sproc_GetCreditMemoReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4801:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetRFQDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQDetailForElastic`(      \n" +
                "	IN pId INT,                  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	if(pRequiredCount)   \n" +
                "    THEN	  \n" +
                "		SELECT count(1) totalCount  \n" +
                "				FROM  \n" +
                "					rfqforms AS RFQForms   \n" +
                "						INNER JOIN  \n" +
                "					rfq_assemblies AS rfqAssy ON RFQForms.id = rfqAssy.rfqrefID  \n" +
                "						AND (rfqAssy.isDeleted = FALSE)  \n" +
                "						LEFT OUTER JOIN  \n" +
                "					component AS com ON rfqAssy.partID = com.id  \n" +
                "						AND (com.isDeleted = FALSE)  \n" +
                "						LEFT OUTER JOIN  \n" +
                "					rfq_assy_typemst AS assyType ON rfqAssy.assemblyTypeID = assyType.id  \n" +
                "						AND (assyType.isDeleted = FALSE)  \n" +
                "						LEFT OUTER JOIN  \n" +
                "					jobtype AS jt ON rfqAssy.jobTypeID = jt.id  \n" +
                "						AND (jt.isDeleted = FALSE)  \n" +
                "						LEFT OUTER JOIN  \n" +
                "					rfqtype AS rt ON rfqAssy.RFQTypeID = rt.id  \n" +
                "						AND (rt.isDeleted = FALSE)  \n" +
                "						LEFT OUTER JOIN  \n" +
                "					mfgCodemst AS customer ON RFQForms.customerId = customer.id  \n" +
                "						AND (customer.isDeleted = FALSE)  \n" +
                "						LEFT OUTER JOIN  \n" +
                "					employees AS employee ON RFQForms.employeeID = employee.id  \n" +
                "						AND (employee.isDeleted = FALSE)  \n" +
                "						LEFT OUTER JOIN  \n" +
                "					employees AS salesCommissionEmployee ON RFQForms.salesCommissionTo = salesCommissionEmployee.id  \n" +
                "						AND (salesCommissionEmployee.isDeleted = FALSE)  \n" +
                "				WHERE  RFQForms.id = IFNULL(pId,RFQForms.id) AND RFQForms.isDeleted = FALSE;    \n" +
                "    ELSE  \n" +
                "			SELECT RFQForms.id, RFQForms.customerId, customer.mfgCode,customer.mfgName,customer.isCustOrDisty,customer.mfgType,RFQForms.employeeID,  \n" +
                "				employee.firstName,employee.lastName,RFQForms.salesCommissionTo,salesCommissionEmployee.firstName AS salesCEmpFirstName,  \n" +
                "				salesCommissionEmployee.lastName AS salesCEmpLastName,rfqAssy.id AS rfqAssembliesId,rfqAssy.partID,com.PIDCode,com.rev,  \n" +
                "				com.mfgPN,com.specialNote,com.nickname,rfqAssy.assemblyTypeID,assyType.name AS assemblyTypeName,rfqAssy.status,rfqAssy.jobTypeID,  \n" +
                "				jt.name AS jobTypeName,rfqAssy.RFQTypeID,rt.name AS rfqTypeName,rfqAssy.quoteDueDate,rfqAssy.quotePriority,  \n" +
                "				rfqAssy.quoteNote,rfqAssy.additionalRequirement,rfqAssy.assyNote,rfqAssy.isDeleted				  \n" +
                "			FROM  \n" +
                "				rfqforms AS RFQForms  \n" +
                "					INNER JOIN  \n" +
                "				rfq_assemblies AS rfqAssy ON RFQForms.id = rfqAssy.rfqrefID  \n" +
                "					LEFT OUTER JOIN  \n" +
                "				component AS com ON rfqAssy.partID = com.id  \n" +
                "					AND (com.isDeleted = FALSE)  \n" +
                "					LEFT OUTER JOIN  \n" +
                "				rfq_assy_typemst AS assyType ON rfqAssy.assemblyTypeID = assyType.id  \n" +
                "					AND (assyType.isDeleted = FALSE)  \n" +
                "					LEFT OUTER JOIN  \n" +
                "				jobtype AS jt ON rfqAssy.jobTypeID = jt.id  \n" +
                "					AND (jt.isDeleted = FALSE)  \n" +
                "					LEFT OUTER JOIN  \n" +
                "				rfqtype AS rt ON rfqAssy.RFQTypeID = rt.id  \n" +
                "					AND (rt.isDeleted = FALSE)  \n" +
                "					LEFT OUTER JOIN  \n" +
                "				mfgCodemst AS customer ON RFQForms.customerId = customer.id  \n" +
                "					AND (customer.isDeleted = FALSE)  \n" +
                "					LEFT OUTER JOIN  \n" +
                "				employees AS employee ON RFQForms.employeeID = employee.id  \n" +
                "					AND (employee.isDeleted = FALSE)  \n" +
                "					LEFT OUTER JOIN  \n" +
                "				employees AS salesCommissionEmployee ON RFQForms.salesCommissionTo = salesCommissionEmployee.id  \n" +
                "					AND (salesCommissionEmployee.isDeleted = FALSE)  \n" +
                "			WHERE  RFQForms.id = IFNULL(pId,RFQForms.id) AND  \n" +
                "						(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(rfqAssy.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(rfqAssy.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  			  \n" +
                "        END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPartsDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartsDetailForElastic`(      \n" +
                "	IN pId INT,                  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	if(pRequiredCount)   \n" +
                "    THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount   \n" +
                "		FROM  \n" +
                "		   component AS co  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id  \n" +
                "				AND (mfg.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id  \n" +
                "				AND (rohs.isDeleted  = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id  \n" +
                "				AND (cps.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id  \n" +
                "				AND (rpt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id  \n" +
                "				AND (rmt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id  \n" +
                "				AND (rct.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id  \n" +
                "				AND ( cpm.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id  \n" +
                "				AND (refSuppCom.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id  \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)  \n" +
                "		WHERE  (co.isDeleted = FALSE);    \n" +
                "    ELSE  \n" +
                "		SELECT fun_CovnertDateTimeByTimezoneValue(co.createdAt,v_TimeZone),fun_CovnertDateTimeByTimezoneValue(co.updatedAt,v_TimeZone),  \n" +
                "			co.id,    co.assyCode,    co.mfgPN,	co.productionPN,	co.nickname,	co.PIDCode,	co.mfgPNDescription,	co.specialNote,	co.ltbDate,  \n" +
                "			co.eolDate,	co.deviceMarking,	co.partPackage,	co.powerRating,	co.feature,	co.color,	co.tolerance,	co.voltage,	co.value,	co.noOfPosition,	co.noOfRows,	      \n" +
                "			co.mfgcodeID,	mfg.mfgCode AS mfgCode,	mfg.mfgType AS mfgType,	mfg.isCustOrDisty AS isCustOrDisty,  \n" +
                "			co.RoHSStatusID,	rohs.name AS rohsName,  \n" +
                "			co.partStatus,	cps.name AS partStatusName,  \n" +
                "			co.functionalCategoryID,	rpt.partTypeName AS rptName,  \n" +
                "			co.mountingTypeID,	rmt.name AS mountingTypeName,  \n" +
                "			co.connecterTypeID,	rct.name AS rfqConnecterTypeName,  \n" +
                "			co.packagingID,	cpm.name AS packagingName,	  \n" +
                "			co.refSupplierMfgpnComponentID,  \n" +
                "			refSuppCom.mfgPN AS refSuppComMgPN,  \n" +
                "			refSuppCom.mfgcodeID AS refSuppComMfgcodeID,  \n" +
                "			refSuppComMfg.mfgCode AS refSuppComMfgCode,  \n" +
                "			refSuppComMfg.mfgType AS refSuppComMfgType,  \n" +
                "			refSuppComMfg.isCustOrDisty AS refSuppComIsCustOrDisty,  \n" +
                "            co.isDeleted  \n" +
                "		FROM  \n" +
                "		   component AS co  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id  \n" +
                "				AND (mfg.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id  \n" +
                "				AND (rohs.isDeleted  = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id  \n" +
                "				AND (cps.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id  \n" +
                "				AND (rpt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id  \n" +
                "				AND (rmt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id  \n" +
                "				AND (rct.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id  \n" +
                "				AND ( cpm.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id  \n" +
                "				AND (refSuppCom.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id  \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)  \n" +
                "		WHERE  co.id = IFNULL(pId,co.id) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(co.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "                    or (DATE(fun_CovnertDateTimeByTimezoneValue(co.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "		END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSalesOrderDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderDetailForElastic`(      \n" +
                "	IN pId INT,                  \n" +
                "    IN psoDetId INT,   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			salesorderdet AS sod ON som.id = sod.refSalesOrderID  \n" +
                "				AND (sod.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component AS assyDet ON sod.partID = assyDet.id  \n" +
                "				AND (assyDet.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = false)  \n" +
                "		WHERE som.isDeleted = FALSE;   \n" +
                "    ELSE  \n" +
                "		SELECT   \n" +
                "			som.id,  \n" +
                "			som.salesOrderNumber,  \n" +
                "			som.poNumber,  \n" +
                "			som.poDate,  \n" +
                "			som.soDate,  \n" +
                "			som.customerID,  \n" +
                "			som.freeOnBoardId,      \n" +
                "			sod.id sodId,  \n" +
                "			sod.partID,  \n" +
                "			sod.materialDueDate,  \n" +
                "			sod.materialTentitiveDocDate,  \n" +
                "			sod.qty,  \n" +
                "			sod.isHotJob,  \n" +
                "			assyDet.PIDCode,  \n" +
                "			sod.partID,  \n" +
                "			assyDet.mfgPN,  \n" +
                "			assyDet.mfgPNDescription,  \n" +
                "			assyDet.nickname,  \n" +
                "			cust.mfgCode,  \n" +
                "			cust.isCustOrDisty,  \n" +
                "			cust.mfgType,  \n" +
                "			cust.mfgName,  \n" +
                "			fob.name AS fobName,  \n" +
                "            sod.isDeleted  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			salesorderdet AS sod ON som.id = sod.refSalesOrderID  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component AS assyDet ON sod.partID = assyDet.id  \n" +
                "				AND (assyDet.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = false)  \n" +
                "		WHERE  \n" +
                "			som.id = IFNULL(pId,som.id) AND sod.id = IFNULL(psoDetId,sod.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(som.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(som.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sod.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(sod.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);   \n" +
                "	end if;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(      \n" +
                "	IN pId INT,                  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT 	  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr                    \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID               \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0               \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)     \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)               \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);    \n" +
                "    ELSE  \n" +
                "		SELECT 		psmr.id       \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId          \n" +
                "				, psmr.receiptType AS receiptType                    \n" +
                "				, psmr.mfgCodeID                    \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber            \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber                 \n" +
                "				, psmr.poDate            \n" +
                "				, psmr.supplierSONumber               \n" +
                "				, psmr.packingSlipNumber                    \n" +
                "				, psmr.packingSlipDate                    \n" +
                "				, psmr.invoiceNumber                    \n" +
                "				, psmr.invoiceDate            \n" +
                "				, psmr.creditMemoNumber                    \n" +
                "				, psmr.creditMemoDate            \n" +
                "				, psmr.debitMemoNumber                    \n" +
                "				, psmr.debitMemoDate        \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate                    \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate                    \n" +
                "				, psmr.chequeNumber                     \n" +
                "				, psmr.chequeAmount                    \n" +
                "				, psmr.chequeDate            \n" +
                "				, psmr.creditMemoType            \n" +
                "				, (            \n" +
                "					CASE             \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'             \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'            \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'            \n" +
                "						ELSE 	NULL            \n" +
                "					END            \n" +
                "				) creditMemoTypeValue            \n" +
                "				, (            \n" +
                "					CASE             \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'             \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'            \n" +
                "						ELSE 	NULL            \n" +
                "					END            \n" +
                "				) debitMemoTypeValue            \n" +
                "				, psmrd.id AS receivingDetId                \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber              \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber              \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber              \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber              \n" +
                "				, psmrd.orderedQty            \n" +
                "				, psmrd.packingSlipQty            \n" +
                "				, psmrd.invoicePrice            \n" +
                "				, psmrd.receivedQty             \n" +
                "				, psmrd.purchasePrice            \n" +
                "				, psmrd.extendedPrice                   \n" +
                "				, psmrd.extendedReceivedPrice                   \n" +
                "				, psmrd.nickname      \n" +
                "				, comp.id AS compId                    \n" +
                "				, comp.mfgPN AS mfgPN                    \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId                    \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName                     \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode        \n" +
                "				, mfgMst.id AS mfgMstId                    \n" +
                "				, mfgMst.mfgName AS mfgName                     \n" +
                "				, mfgMst.mfgCode AS mfgCode                    \n" +
                "				, mfgMst.mfgType AS mfgType                     \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty                    \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId            \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber                    \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber            \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber                    \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId            \n" +
                "				, (            \n" +
                "					CASE             \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN             \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))             \n" +
                "						ELSE NULL             \n" +
                "					END            \n" +
                "				) refPackingSlipIdForMemo            \n" +
                "				, psmrd.packagingID              \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName              \n" +
                "				, psmrd.receivedStatus                  \n" +
                "				, (              \n" +
                "					CASE              \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'              \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'              \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'              \n" +
                "						ELSE NULL              \n" +
                "					END              \n" +
                "				) AS receivedStatusValue                     \n" +
                "				, psmrd.remark,    \n" +
                "				(case when psmr.lockStatus = 'LC' then    \n" +
                "							'Locked'    \n" +
                "						when psmr.lockStatus = 'RL' then    \n" +
                "							'Ready To Lock'    \n" +
                "						when psmr.lockStatus = 'NA' then    \n" +
                "							'Not Applicable'    \n" +
                "						else '' end    \n" +
                "				) lockStatus,    \n" +
                "				(case when h.status ='H' then    \n" +
                "						'Halted'    \n" +
                "					else '' end) haltStatus,    \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted  \n" +
                "		FROM 		packing_slip_material_receive AS psmr                    \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID               \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0               \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)                    \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id               \n" +
                "					AND comp.deletedAt IS NULL                     \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id                    \n" +
                "					AND (mfgMst.deletedAt IS NULL               \n" +
                "					AND mfgMst.isDeleted = FALSE)        \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id                    \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL               \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)               \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'    \n" +
                "		WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetChatDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetChatDetailForElastic`(      \n" +
                "	IN pChatId INT,  \n" +
                "    IN pGroupId INT,  \n" +
                "    IN pRemarkFlag varchar(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)    \n" +
                "	THEN	  \n" +
                "		Select c.totalCount from (  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			chat AS Chat  \n" +
                "				INNER JOIN  \n" +
                "			users AS senderUser ON Chat.senderID = senderUser.id  \n" +
                "				AND (senderUser.deletedAt IS NULL)  \n" +
                "				INNER JOIN  \n" +
                "			users AS receiverUser ON Chat.receiverID = receiverUser.id  \n" +
                "				AND (receiverUser.deletedAt IS NULL)  \n" +
                "		WHERE  \n" +
                "			(Chat.isDeleted = FALSE)  \n" +
                "		UNION ALL  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			group_chat_log AS GroupChatLog  \n" +
                "				INNER JOIN  \n" +
                "			users AS senderUser ON GroupChatLog.senderID = senderUser.id  \n" +
                "				AND (senderUser.deletedAt IS NULL)  \n" +
                "				INNER JOIN  \n" +
                "			group_chat AS group_chat ON GroupChatLog.groupID = group_chat.groupID  \n" +
                "				AND (group_chat.deletedAt IS NULL)  \n" +
                "		WHERE  \n" +
                "			(GroupChatLog.isDeleted = FALSE)) as c;  \n" +
                "  \n" +
                "    ELSE  \n" +
                "		IF((pChatId is null and pGroupId is null) or pChatId is not null)  \n" +
                "		THEN   \n" +
                "			SELECT   \n" +
                "				Chat.chatID,  \n" +
                "				Chat.senderID,  \n" +
                "				Chat.message,  \n" +
                "				Chat.chatDate,  \n" +
                "				Chat.receiverID,  \n" +
                "				senderUser.firstName AS sndFirstName,  \n" +
                "				senderUser.lastName AS sndLastName,  \n" +
                "				receiverUser.firstName AS recFirstName,  \n" +
                "				receiverUser.lastName AS recLastName,  \n" +
                "				true as isSingleChat  \n" +
                "			FROM  \n" +
                "				chat AS Chat  \n" +
                "					INNER JOIN  \n" +
                "				users AS senderUser ON Chat.senderID = senderUser.id  \n" +
                "					AND (senderUser.deletedAt IS NULL)  \n" +
                "					INNER JOIN  \n" +
                "				users AS receiverUser ON Chat.receiverID = receiverUser.id  \n" +
                "					AND (receiverUser.deletedAt IS NULL)  \n" +
                "			WHERE  \n" +
                "				(Chat.isDeleted = FALSE  \n" +
                "					AND Chat.chatID = IFNULL(pChatId,Chat.chatID)) AND  \n" +
                "				(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(Chat.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(Chat.updatedAt,v_TimeZone)) between pFromdate and pTodate))                  \n" +
                "					ELSE 1 = 1 END) and 1 = 1;  \n" +
                "		END IF;  \n" +
                "		IF((pChatId is null and pGroupId is null) or pGroupId is not null)  \n" +
                "		THEN   \n" +
                "			SELECT   \n" +
                "				GroupChatLog.senderID,  \n" +
                "				GroupChatLog.message,  \n" +
                "				GroupChatLog.chatDate,  \n" +
                "				GroupChatLog.groupID,  \n" +
                "				GroupChatLog.groupChatID,  \n" +
                "				senderUser.firstName AS sndFirstName,  \n" +
                "				senderUser.lastName AS sndLastName,  \n" +
                "				group_chat.groupName AS groupName,  \n" +
                "				false as isSingleChat  \n" +
                "			FROM  \n" +
                "				group_chat_log AS GroupChatLog  \n" +
                "					INNER JOIN  \n" +
                "				users AS senderUser ON GroupChatLog.senderID = senderUser.id  \n" +
                "					AND (senderUser.deletedAt IS NULL)  \n" +
                "					INNER JOIN  \n" +
                "				group_chat AS group_chat ON GroupChatLog.groupID = group_chat.groupID  \n" +
                "					AND (group_chat.deletedAt IS NULL)  \n" +
                "			WHERE  \n" +
                "				(GroupChatLog.isDeleted = FALSE  \n" +
                "					AND GroupChatLog.groupChatID = IFNULL(pGroupId,GroupChatLog.groupChatID)  \n" +
                "					AND GroupChatLog.remarkFlag = IFNULL(pRemarkFlag,GroupChatLog.remarkFlag)) AND			  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(GroupChatLog.createdAt,v_TimeZone)) between pFromdate and pTodate)  	  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(GroupChatLog.updatedAt,v_TimeZone)) between pFromdate and pTodate))                  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "		END IF;    \n" +
                "	end if;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWorkOrderDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderDetailForElastic`(	                                            \n" +
                "	IN pwoID INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)                                            \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM workorder as wo          \n" +
                "			left join mfgcodemst mfg on wo.customerID = mfg.id          \n" +
                "			left join component com on wo.partID = com.id          \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID          \n" +
                "		where IFNULL(wo.isDeleted , 0) = 0;    \n" +
                "	ELSE  \n" +
                "		select wo.woID          \n" +
                "			,woNumber          \n" +
                "			,wo.woVersion          \n" +
                "			,wo.woSubStatus          \n" +
                "			,wo.partID          \n" +
                "			,com.PIDCode          \n" +
                "			,com.mfgPN          \n" +
                "			,com.nickName          \n" +
                "			,wo.buildQty          \n" +
                "			,mfg.mfgCode          \n" +
                "			,mfg.mfgName          \n" +
                "			,mfg.isCustOrDisty          \n" +
                "			,mfg.mfgType          \n" +
                "			,wo.customerID           \n" +
                "			,vusalesorderdet.salesOrderNumber          \n" +
                "			,vusalesorderdet.poNumber          \n" +
                "			,wo.isHotJob as RushJob          \n" +
                "			,wo.isStopWorkorder as HoldStatus          \n" +
                "			,CASE WHEN wo.isStopWorkorder = 1 THEN          \n" +
                "				(select reason from workorder_trans_hold_unhold where woID = wo.woID and endDate is null)             \n" +
                "			ELSE \"\"          \n" +
                "			END as HoldReason   \n" +
                "            ,wo.isDeleted  \n" +
                "		from workorder as wo          \n" +
                "			left join mfgcodemst mfg on wo.customerID = mfg.id          \n" +
                "			left join component com on wo.partID = com.id          \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID          \n" +
                "		where wo.woID = IFNULL(pwoID, wo.woID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wo.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wo.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);      \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailForElastic`(	                                                                              \n" +
                "	IN pumID INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)                \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount   \n" +
                "		FROM component_sid_stock css                 \n" +
                "			INNER JOIN 	component c ON css.refcompid = c.id                  \n" +
                "			LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID          \n" +
                "			WHERE (css.isdeleted IS NULL OR css.isdeleted = 0) AND css.id = IFNULL(pumID, css.id);    \n" +
                "	ELSE  \n" +
                "		SELECT css.id,			          \n" +
                "				css.uid,          \n" +
                "				css.receiveMaterialType,          \n" +
                "				css.refcompid AS partID,          \n" +
                "				CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfgCode,                                      \n" +
                "				m.mfgType mfgType,          \n" +
                "				c.mfgPN,          \n" +
                "				c.PIDCode,          \n" +
                "				css.pkgQty,          \n" +
                "				css.pkgUnit,          \n" +
                "				fun_getUnitNameByID(css.uom) uomName,          \n" +
                "				css.dateCode,          \n" +
                "				css.lotCode,          \n" +
                "				fun_getCostCategoryNameByIDForElasticSearch(css.costCategoryID, TRUE) costCategory,          \n" +
                "				fun_getMSLLevelByID(c.mslID, FALSE) mslLevel,          \n" +
                "				fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,          \n" +
                "				c.mfgPNDescription,          \n" +
                "				fun_getPackagingNameByID(css.packaging) packagingName,                 \n" +
                "				css.binID,          \n" +
                "				fun_getBinNameByID(css.binID) location,          \n" +
                "				fun_getWarehouseNameByBinID(css.binID) warehouse,          \n" +
                "				fun_getDepartmentNameByBinID(css.binID) department,          \n" +
                "				css.expiryDate,          \n" +
                "				(CASE WHEN (css.expiryDate < CURRENT_TIMESTAMP ) THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "				css.isDeleted  \n" +
                "		FROM component_sid_stock css                 \n" +
                "		INNER JOIN component c ON css.refcompid = c.id                  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID          \n" +
                "		WHERE css.id = IFNULL(pumID, css.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(css.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(css.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMfgCodeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMfgCodeDetailForElastic`(	                                                                                      \n" +
                "	IN pId INT(11),              \n" +
                "    IN pIsCustOrDisty BIT,              \n" +
                "    IN pmfgType NVARCHAR(10),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)             \n" +
                ")  \n" +
                "BEGIN         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM mfgcodemst                  \n" +
                "		WHERE IFNULL(isDeleted,0) = 0 AND         \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,0)         \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType);  \n" +
                "	ELSE  \n" +
                "		SELECT  id,mfgCode,mfgName,primaryContactName,contact,faxNumber,isActive,mfgType,isCustOrDisty  ,       \n" +
                "            fun_getUserNameByEmployeID(salesCommissionTo) salesCommissionTo,    \n" +
                "            fun_getFOBById(freeOnBoardId) freeOnBoardMst ,    \n" +
                "			(SELECT gencCategoryName FROM genericcategory WHERE gencCategoryID = paymentTermsID) Terms,  \n" +
                "			isDeleted  \n" +
                "		FROM mfgcodemst                  \n" +
                "		WHERE  id = IFNULL(pId,id) AND         \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,0)    \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);     \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPersonalDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPersonalDetailForElastic`(	                                                                        \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)          \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;   \n" +
                "  \n" +
                "     IF(pRequiredCount)    \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		 from employees as e    \n" +
                "			 left join users u on e.id = u.employeeID    \n" +
                "			where IFNULL(e.isDeleted,0) = 0 and  e.id = IFNULL(pId,e.id);     \n" +
                "	ELSE  \n" +
                "			select  e.id,e.initialName, e.firstName, e.lastName, e.middleName, e.email, e.street1, e.contact, u.username, e.isDeleted  \n" +
                "			 from employees as e    \n" +
                "			 left join users u on e.id = u.employeeID    \n" +
                "			where e.id = IFNULL(pId,e.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetOperationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetOperationDetailForElastic`(      \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			operations   \n" +
                "		WHERE (isDeleted = FALSE);  \n" +
                "    ELSE   \n" +
                "		SELECT   \n" +
                "			opID,  \n" +
                "			opName,  \n" +
                "			opNumber,  \n" +
                "			opStatus,  \n" +
                "			opDescription,  \n" +
                "			opWorkingCondition,  \n" +
                "			opManagementInstruction,  \n" +
                "			opDeferredInstruction,  \n" +
                "            isDeleted  \n" +
                "		FROM  \n" +
                "			operations   \n" +
                "		WHERE  \n" +
                "			opID = IFNULL(pId,opID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "					or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))                  \n" +
                "					ELSE 1 = 1 END);	  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWorkOrderOperationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderOperationDetailForElastic`(	                                                                                \n" +
                "	IN pWOOPID INT(11),      \n" +
                "    IN pWOID INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)    \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount   \n" +
                "		from workorder_operation as wo      \n" +
                "		left join workorder w on wo.woID = w.woID and IFNULL(w.isDeleted,0) = 0      \n" +
                "		left join genericcategory gc on wo.operationTypeID = gc.gencCategoryId and IFNULL(gc.isDeleted,0) = 0      \n" +
                "		left join operations o on o.opID = wo.opID and IFNULL(o.isDeleted,0) = 0          \n" +
                "		left join operations po on po.opID = wo.parentOPID and IFNULL(po.isDeleted,0) = 0          \n" +
                "		where IFNULL(wo.isDeleted,0) = 0;  \n" +
                "    ELSE   \n" +
                "		select       \n" +
                "			wo.woOPID      \n" +
                "			, wo.woID      \n" +
                "			, w.woNumber      \n" +
                "			, wo.opNumber woOpNumber      \n" +
                "			, wo.opName woOpName      \n" +
                "			, wo.opID      \n" +
                "			, o.opNumber opNumber      \n" +
                "			, o.opName opName      \n" +
                "			, wo.opVersion      \n" +
                "			, gc.gencCategoryName as OperationType      \n" +
                "			, wo.operationTypeID      \n" +
                "			, po.opName as parentOperation      \n" +
                "			, wo.parentOPID      \n" +
                "			, wo.tabLimitAtTraveler      \n" +
                "			, wo.processTime      \n" +
                "			, wo.setupTime      \n" +
                "			, wo.perPieceTime      \n" +
                "			, wo.qtyControl      \n" +
                "			, wo.isPreProgrammingComponent      \n" +
                "			, wo.isRework      \n" +
                "			, wo.isTeamOperation       \n" +
                "			, wo.isIssueQty      \n" +
                "			, wo.cleaningType      \n" +
                "			, wo.opDescription    \n" +
                "			, wo.opWorkingCondition    \n" +
                "			, wo.opManagementInstruction    \n" +
                "			, wo.opDeferredInstruction    \n" +
                "			, wo.opDoes    \n" +
                "			, wo.opDonts   \n" +
                "            , wo.isDeleted  \n" +
                "		from workorder_operation as wo      \n" +
                "		left join workorder w on wo.woID = w.woID and IFNULL(w.isDeleted,0) = 0      \n" +
                "		left join genericcategory gc on wo.operationTypeID = gc.gencCategoryId and IFNULL(gc.isDeleted,0) = 0      \n" +
                "		left join operations o on o.opID = wo.opID and IFNULL(o.isDeleted,0) = 0          \n" +
                "		left join operations po on po.opID = wo.parentOPID and IFNULL(po.isDeleted,0) = 0          \n" +
                "		where  wo.woOPID  = IFNULL(pWOOPID,wo.woOPID) and wo.woID  = IFNULL(pWOID,wo.woID) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wo.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wo.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);      \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkStationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkStationDetailForElastic`(	                                                                                  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)        \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		select   \n" +
                "			count(1) totalCount  \n" +
                "		from equipment eqp      \n" +
                "		LEFT JOIN department dept ON dept.deptID = eqp.departmentID               \n" +
                "			where IFNULL(eqp.isDeleted,0) = 0;          \n" +
                "    ELSE  \n" +
                "		select eqp.eqpID      \n" +
                "			,eqp.equipmentAs as Category      \n" +
                "			,eqp.assetName as Name      \n" +
                "			,eqp.eqpMake as Make      \n" +
                "			,eqp.eqpModel as Model      \n" +
                "			,eqp.eqpYear as Year      \n" +
                "			,eqp.assetNumber as WorkStationAsset      \n" +
                "			,eqp.departmentID       \n" +
                "			,dept.deptName as DepartmentName            \n" +
                "			,(SELECT gencCategoryName FROM genericcategory               \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = eqp.locationTypeID) AS locationName          \n" +
                "			,locationTypeID          \n" +
                "			,(SELECT gencCategoryName FROM genericcategory               \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = eqp.eqpTypeID) AS TypeName      \n" +
                "			,eqpTypeID     \n" +
                "			,eqp.eqpDescription    \n" +
                "            ,eqp.isDeleted  \n" +
                "		from equipment eqp      \n" +
                "		LEFT JOIN department dept ON dept.deptID = eqp.departmentID               \n" +
                "		where eqp.eqpID = IFNULL(pId,eqp.eqpID) AND   \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(eqp.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(eqp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);          \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWarehouseDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWarehouseDetailForElastic`(	                                                                                      \n" +
                "	IN pId LONGTEXT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)      \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM warehousemst          \n" +
                "		WHERE IFNULL(isDeleted,0) = 0;   \n" +
                "    ELSE  \n" +
                "		SELECT  ID,          \n" +
                "			 fun_getWarehouseTypeByKey(warehouseType) warehouseType         \n" +
                "			,Name    \n" +
                "			,nickname          \n" +
                "			,parentWHID          \n" +
                "			,fun_getWarehouseNameByID(parentWHID) ParentWarehouse          \n" +
                "			,(CASE                                 \n" +
                "						WHEN (isActive = 0) THEN 'Inactive'                                         \n" +
                "						WHEN (isActive = 1) THEN 'Active'                                 \n" +
                "						ELSE ''                                 \n" +
                "					END) AS STATUS,                                    \n" +
                "					(CASE                                 \n" +
                "						WHEN (isPermanentWH = 0) THEN 'No'                                     \n" +
                "						WHEN (isPermanentWH = 1) THEN 'Yes'                                 \n" +
                "						ELSE ''                                 \n" +
                "					END) AS IsPermanentWH,                                \n" +
                "					(CASE                                 \n" +
                "						WHEN (allMovableBin = 0) THEN 'No'                                     \n" +
                "						WHEN (allMovableBin = 1) THEN 'Yes'                                 \n" +
                "						ELSE ''                                 \n" +
                "					END) AS allMovableBin,                            \n" +
                "					(CASE                                 \n" +
                "						WHEN (userAccessMode = 'S') THEN 'Single'                                     \n" +
                "						WHEN (userAccessMode = 'M') THEN 'Multiple'                      \n" +
                "						WHEN (userAccessMode = 'N/A') THEN 'N/A (Not Applicable)'                                 \n" +
                "						ELSE ''                                 \n" +
                "					END) AS userAccessMode,  \n" +
                "                    isDeleted  \n" +
                "				FROM warehousemst          \n" +
                "				WHERE FIND_IN_SET(ID,IFNULL(pId, ID)) AND   \n" +
                "				(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetTravelerDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerDetailForElastic`(	                                                                                \n" +
                "	IN pWOTransinoutID INT(11),    \n" +
                "    IN pWOTransID int (11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)    \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT     \n" +
                "			count(1) totalCount  \n" +
                "		FROM workorder_trans_empinout AS wte     \n" +
                "		LEFT OUTER JOIN workorder AS w ON wte.woID = w.woID AND w.deletedAt IS NULL     \n" +
                "		LEFT OUTER JOIN employees AS e ON wte.employeeID = e.id AND e.deletedAt IS NULL     \n" +
                "		LEFT OUTER JOIN workorder_operation AS wo ON wte.woOPId = wo.woOPID AND wo.deletedAt IS NULL     \n" +
                "		WHERE     \n" +
                "			(wte.isDeleted = 0 AND (wte.checkoutTime IS NOT NULL))  \n" +
                "		ORDER BY wte.checkinTime DESC;   \n" +
                "    ELSE  \n" +
                "		SELECT     \n" +
                "			wte.woTransinoutID    \n" +
                "			,wte.woTransID    \n" +
                "			,wte.checkinTime AS startTime    \n" +
                "			,wte.checkoutTime AS endTime    \n" +
                "			,e.initialName AS userId    \n" +
                "			,wte.employeeID    \n" +
                "			,wte.woID    \n" +
                "			,wte.woOPID    \n" +
                "			,w.woNumber    \n" +
                "			,wo.opName    \n" +
                "			,wo.opNumber    \n" +
                "			,wo.isTeamOperation    \n" +
                "		FROM workorder_trans_empinout AS wte     \n" +
                "		LEFT OUTER JOIN workorder AS w ON wte.woID = w.woID AND w.deletedAt IS NULL     \n" +
                "		LEFT OUTER JOIN employees AS e ON wte.employeeID = e.id AND e.deletedAt IS NULL     \n" +
                "		LEFT OUTER JOIN workorder_operation AS wo ON wte.woOPId = wo.woOPID AND wo.deletedAt IS NULL     \n" +
                "		WHERE     \n" +
                "			((wte.checkoutTime IS NOT NULL)) and wte.woTransinoutID = IFNULL(pWOTransinoutID,wte.woTransinoutID)    \n" +
                "				and wte.woTransID = IFNULL(pWOTransID, wte.woTransID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(wte.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(wte.updatedAt,v_TimeZone)) between pFromdate and pTodate))                  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		ORDER BY wte.checkinTime DESC;   \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetUOMDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUOMDetailForElastic`(    \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)      \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);         \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM uoms um    \n" +
                "		LEFT JOIN measurement_types mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0    \n" +
                "		WHERE  um.isdeleted = 0;    \n" +
                "    ELSE  \n" +
                "		SELECT um.id,    \n" +
                "			mt.name measurementtype,    \n" +
                "			um.abbreviation,    \n" +
                "			um.unitName,    \n" +
                "			CONCAT('1 ', um.abbreviation) AS 1UOM,    \n" +
                "			'Multiply' AS operator,    \n" +
                "			FUN_CONVERTUOMFORUOMLIST(um.id,    \n" +
                "					CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE)    \n" +
                "						AS SIGNED),    \n" +
                "					1) AS unitConvertValue,    \n" +
                "			(CASE WHEN (`um`.`isFormula` = 0)    \n" +
                "				THEN FUN_CONVERTUOMFORUOMLIST(um.id, CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE) AS SIGNED), 1)    \n" +
                "				ELSE NULL    \n" +
                "			END) AS baseEquivalent,    \n" +
                "			(SELECT GROUP_CONCAT(alias) AS aliaslist    \n" +
                "				FROM component_fields_genericalias_mst    \n" +
                "				WHERE isdeleted = 0    \n" +
                "					AND refTableName = 'Uoms'    \n" +
                "					AND refId = um.id    \n" +
                "				GROUP BY refId) AS aliaslist,    \n" +
                "			(CASE WHEN (um.defaultUOM = 1) THEN 'Yes'    \n" +
                "				ELSE 'No'    \n" +
                "			END) AS defaultUOMConvertedValue,    \n" +
                "			(CASE    \n" +
                "				WHEN (um.isFormula = 0) THEN 'No'    \n" +
                "				WHEN (um.isFormula = 1) THEN 'Yes'    \n" +
                "				ELSE ''    \n" +
                "			END) AS `isFormulaConvertedValue`,    \n" +
                "			um.description,    \n" +
                "			(CASE    \n" +
                "				WHEN (um.isSystemDefault = 0) THEN 'No'    \n" +
                "				WHEN (um.isSystemDefault = 1) THEN 'Yes'    \n" +
                "				ELSE ''    \n" +
                "			END) AS `isSystemDefaultConvertedValue`,    \n" +
                "			um.measurementTypeID,    \n" +
                "			um.ord AS displayOrder,    \n" +
                "			mt.displayOrder AS measurementTypeOrder,    \n" +
                "			FUN_GETBASEUNIT(um.measurementTypeID, TRUE) AS baseUnitValue    \n" +
                "            ,um.isDeleted  \n" +
                "		FROM uoms um    \n" +
                "		LEFT JOIN measurement_types mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0    \n" +
                "		WHERE um.id = IFNULL(pId, um.id)  AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(um.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(um.updatedAt,v_TimeZone)) between pFromdate and pTodate)) OR  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(mt.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(mt.updatedAt,v_TimeZone)) between pFromdate and pTodate))                  \n" +
                "                ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWhoBoughtWhoDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWhoBoughtWhoDetailForElastic`(	                                                                                  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)        \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);         \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT     \n" +
                "			count(1) totalCount  \n" +
                "		FROM `who_bought_who` wbw              \n" +
                "			JOIN users us ON wbw.createdBy = us.id AND us.deletedAt IS NULL        \n" +
                "			LEFT JOIN mfgcodemst mfgBymst on wbw.buyBy = mfgBymst.id AND mfgBymst.deletedAt IS NULL      \n" +
                "			LEFT JOIN mfgcodemst mfgTomst on wbw.buyTo = mfgTomst.id AND mfgTomst.deletedAt IS NULL      \n" +
                "			JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL             \n" +
                "		WHERE     \n" +
                "		IFNULL(wbw.isdeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT      \n" +
                "			wbw.id,    \n" +
                "			wbw.buyBy,    \n" +
                "			mfgBymst.mfgCode AS mfgBy,     \n" +
                "			mfgBymst.isCustOrDisty mfgByIsCust,            \n" +
                "			mfgBymst.mfgType mfgByMfgType,    \n" +
                "			wbw.buyDate,    \n" +
                "			wbw.description,    \n" +
                "			wbw.createdAt,    \n" +
                "			wbw.buyTo,    \n" +
                "			mfgTomst.isCustOrDisty mfgToIsCust,            \n" +
                "			mfgTomst.mfgType mfgToMfgType,    \n" +
                "						mfgTomst.mfgCode AS mfgTo,            \n" +
                "			CONCAT(emp.firstName, ' ', emp.lastName) AS createdByEmp  \n" +
                "            ,wbw.isdeleted  \n" +
                "		FROM `who_bought_who` wbw              \n" +
                "			JOIN users us ON wbw.createdBy = us.id AND us.deletedAt IS NULL        \n" +
                "			LEFT JOIN mfgcodemst mfgBymst on wbw.buyBy = mfgBymst.id AND mfgBymst.deletedAt IS NULL      \n" +
                "			LEFT JOIN mfgcodemst mfgTomst on wbw.buyTo = mfgTomst.id AND mfgTomst.deletedAt IS NULL      \n" +
                "			JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL             \n" +
                "		WHERE     \n" +
                "		wbw.id = IFNULL(pId, wbw.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(wbw.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(wbw.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetConnectorTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetConnectorTypesForElastic`(	                                              \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)                                                   \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount                \n" +
                "		FROM rfq_connectertypemst  AS rfqCtm      \n" +
                "		WHERE rfqCtm.isDeleted = 0;   \n" +
                "    ELSE  \n" +
                "		SELECT       \n" +
                "			rfqCtm.id      \n" +
                "			,rfqCtm.isDeleted              \n" +
                "			,NAME            \n" +
                "			,description      \n" +
                "			,(CASE WHEN (isActive = 0) THEN 'Disable'                       \n" +
                "					WHEN (isActive = 1) THEN 'Enable' ELSE '' END) AS STATUS      \n" +
                "			,(SELECT GROUP_CONCAT(alias SEPARATOR ', ') AS aliaslist         \n" +
                "				FROM component_fields_genericalias_mst         \n" +
                "				WHERE isdeleted = 0 AND  refTableName ='rfq_connectertypemst'         \n" +
                "			  AND refId= rfqCtm.id) AS aliaslist  \n" +
                "			,rfqCtm.isDeleted  \n" +
                "		FROM rfq_connectertypemst  AS rfqCtm      \n" +
                "		WHERE rfqCtm.id = IFNULL(pId, rfqCtm.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(rfqCtm.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(rfqCtm.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "					ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPartStatusForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartStatusForElastic`(	                                              \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)                                                   \n" +
                "    )  \n" +
                "BEGIN                                               \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT       \n" +
                "			count(1) totalCount  \n" +
                "		FROM component_partstatusmst cps        \n" +
                "		WHERE cps.isDeleted = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT id      \n" +
                "			,NAME      \n" +
                "			,(SELECT GROUP_CONCAT(alias SEPARATOR ', ') AS aliaslist FROM component_fields_genericalias_mst WHERE isdeleted = 0 AND        \n" +
                "				refTableName ='component_partstatusmst' AND refId=cps.id) AS aliaslist   \n" +
                "			,cps.isDeleted  \n" +
                "		FROM component_partstatusmst cps        \n" +
                "		WHERE cps.id = IFNULL(pId, cps.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(cps.createdAt) between pFromdate and pTodate)  or (DATE(cps.updatedAt) between pFromdate and pTodate))                \n" +
                "					ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMountingGroupForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMountingGroupForElastic`(    \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)    \n" +
                "	THEN  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount   \n" +
                "		FROM component_logicalgroup AS clg    \n" +
                "		WHERE clg.isDeleted = 0;    \n" +
                "    ELSE  \n" +
                "		SELECT clg.id, clg.name,    \n" +
                "			(CASE    \n" +
                "				WHEN (clg.isActive = 0) THEN 'Inactive'    \n" +
                "				WHEN (clg.isActive = 1) THEN 'Active'    \n" +
                "				ELSE ''    \n" +
                "			END) AS Status,    \n" +
                "			(SELECT GROUP_CONCAT(m.name) AS aliaslist    \n" +
                "				FROM component_logicalgroup_detail l    \n" +
                "				JOIN rfq_mountingtypemst m ON m.id = l.rfqMountingTypeID    \n" +
                "				WHERE l.logicalgroupID = clg.id    \n" +
                "				  AND l.isDeleted = 0) AS aliaslist,  \n" +
                "			clg.isDeleted  \n" +
                "		FROM component_logicalgroup AS clg    \n" +
                "		WHERE clg.id = IFNULL(pId, clg.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(clg.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(clg.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "					ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetFunctionalTypeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetFunctionalTypeForElastic`(	                                              \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount   \n" +
                "		FROM rfq_parttypemst pt          \n" +
                "		WHERE pt.isDeleted = 0;      \n" +
                "	ELSE  \n" +
                "		SELECT 	pt.id      \n" +
                "				,pt.partTypeName      \n" +
                "				,pt.displayOrder      \n" +
                "				,(CASE WHEN (pt.isActive = 0) THEN 'Disable'          \n" +
                "						WHEN (pt.isActive = 1) THEN 'Enable' ELSE '' END) AS STATUS       \n" +
                "				,(CASE WHEN (pt.isTemperatureSensitive = 1) THEN 'Yes' ELSE 'No' END) AS temperatureSensitiveValue         \n" +
                "				,(SELECT  GROUP_CONCAT(alias SEPARATOR ', ' ) AS aliaslist           \n" +
                "					FROM component_fields_genericalias_mst           \n" +
                "					WHERE isdeleted = 0 AND  refTableName ='rfq_parttypemst' AND refId = pt.id) AS aliaslist  \n" +
                "				,pt.isDeleted  \n" +
                "		FROM rfq_parttypemst pt          \n" +
                "			WHERE pt.id = IFNULL(pId, pt.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(pt.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(pt.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "					ELSE 1 = 1 END);              \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMountionTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMountionTypesForElastic`(	                                              \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN   \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount   \n" +
                "		FROM rfq_mountingtypemst AS rmt      \n" +
                "			WHERE rmt.isDeleted= 0;      \n" +
                "	ELSE  \n" +
                "		SELECT 	id      \n" +
                "			,NAME      \n" +
                "			,description      \n" +
                "			,colorCode      \n" +
                "			,CASE WHEN isCountTypeEach=1 THEN 'Yes' ELSE 'No' END CountTypeEach      \n" +
                "			,(CASE WHEN (`isActive` = 0) THEN 'Disable'        \n" +
                "								WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS STATUS      \n" +
                "			,(SELECT GROUP_CONCAT(alias SEPARATOR ', ') AS aliaslist       \n" +
                "				FROM component_fields_genericalias_mst       \n" +
                "				WHERE isdeleted = 0 AND  refTableName ='rfq_mountingtypemst'      \n" +
                "					AND refId=rmt.id ) AS aliaslist    \n" +
                "			,rmt.isDeleted  \n" +
                "		FROM rfq_mountingtypemst AS rmt      \n" +
                "			WHERE rmt.id = IFNULL(pId, rmt.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(rmt.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(rmt.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "					ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCostCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCostCategoryForElastic`(	                                            \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)                                               \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount   \n" +
                "		FROM cost_category AS cc    \n" +
                "		where IFNULL(cc.isDeleted , 0) = 0;    \n" +
                "	ELSE  \n" +
                "		SELECT 	cc.id    \n" +
                "				,cc.categoryName    \n" +
                "				,cc.from    \n" +
                "				,cc.to    \n" +
                "                ,cc.isDeleted  \n" +
                "					FROM cost_category AS cc      \n" +
                "			where cc.id = IFNULL(pId, cc.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(cc.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(cc.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "					ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPackagningTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackagningTypesForElastic`(	                                              \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount   \n" +
                "		FROM component_packagingmst pt        \n" +
                "			WHERE pt.isDeleted = 0;   \n" +
                "	ELSE  \n" +
                "		SELECT 	pt.id      \n" +
                "			,pt.name      \n" +
                "			,(CASE WHEN (pt.isActive = 0) THEN 'Disable'        \n" +
                "				WHEN (pt.isActive = 1) THEN 'Enable' ELSE '' END) AS STATUS        \n" +
                "			,(SELECT  GROUP_CONCAT(alias SEPARATOR ', ' ) AS aliaslist FROM component_fields_genericalias_mst       \n" +
                "				WHERE isdeleted = 0 AND  refTableName ='component_packagingmst' AND refId = pt.id ) AS aliaslist   \n" +
                "			,pt.isDeleted  \n" +
                "		FROM component_packagingmst pt        \n" +
                "			WHERE pt.id = IFNULL(pId, pt.id)  AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(pt.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(pt.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "					ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetStandardsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStandardsForElastic`(	                                            \n" +
                "	IN pId INT(11)  ,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )   \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount   \n" +
                "		FROM certificate_standards AS cs      \n" +
                "        LEFT JOIN genericcategory AS gcst ON cs.standardTypeID = gcst.gencCategoryID AND gcst.deletedAt IS NULL      \n" +
                "        WHERE IFNULL(cs.isDeleted , 0) = 0;  \n" +
                "	ELSE  \n" +
                "	  SELECT cs.certificateStandardID    \n" +
                "        ,cs.fullName    \n" +
                "                ,cs.shortName    \n" +
                "        ,gcst.gencCategoryID AS standardTypeId    \n" +
                "                ,gcst.gencCategoryName AS standardType     \n" +
                "                ,cs.priority    \n" +
                "        ,cs.description    \n" +
                "        ,cs.standardInfo    \n" +
                "        ,cs.displayOrder    \n" +
                "                ,(CASE WHEN (cs.isCertified = 0) THEN 'Compliant'                     \n" +
                "                        WHEN (cs.isCertified = 1) THEN 'Certified' ELSE '' END) AS Certificate    \n" +
                "                ,cs.cerificateIssueDate    \n" +
                "        ,cs.certificateDate                  \n" +
                "                ,(CASE WHEN (cs.isActive = 0) THEN 'Disable'                     \n" +
                "                        WHEN (cs.isActive = 1) THEN 'Enable' ELSE '' END) AS Status      \n" +
                "                ,(CASE WHEN (cs.isExportControlled = 0) THEN 'No'                     \n" +
                "                        WHEN (cs.isExportControlled = 1) THEN 'Yes' ELSE '' END) AS ExportControlled    \n" +
                "                ,(CASE WHEN (cs.isRestrictDataAccess = 0) THEN 'No'                     \n" +
                "                        WHEN (cs.isRestrictDataAccess = 1) THEN 'Yes' ELSE '' END) AS RestrictedDataAccess   \n" +
                "				,cs.isDeleted  \n" +
                "          FROM certificate_standards AS cs      \n" +
                "        LEFT JOIN genericcategory AS gcst ON cs.standardTypeID = gcst.gencCategoryID AND gcst.deletedAt IS NULL      \n" +
                "        WHERE  cs.certificateStandardID = IFNULL(pId, cs.certificateStandardID )  AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(cs.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(cs.updatedAt,v_TimeZone)) between pFromdate and pTodate))                \n" +
                "                ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetStandardsCategoriesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStandardsCategoriesForElastic`(	                                              \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN   \n" +
                "		SELECT 	  \n" +
                "			count(1) totalCount  \n" +
                "		FROM standard_class AS sc        \n" +
                "        LEFT OUTER JOIN certificate_standards AS csc ON sc.certificateStandardID = csc.certificateStandardID  \n" +
                "        WHERE sc.isDeleted  = 0;   \n" +
                "    ELSE  \n" +
                "	  SELECT sc.classID      \n" +
                "		,sc.className      \n" +
                "		,csc.certificateStandardID AS standardId        \n" +
                "        ,csc.fullName AS Standard      \n" +
                "        ,csc.displayOrder AS displayOrder      \n" +
                "        ,sc.colorCode      \n" +
                "        ,(CASE WHEN (sc.isActive = 0) THEN 'Disable'               \n" +
                "			WHEN (sc.isActive = 1) THEN 'Enable' ELSE '' END) AS Status  \n" +
                "		,sc.isDeleted  \n" +
                "		FROM standard_class AS sc        \n" +
                "        LEFT OUTER JOIN certificate_standards AS csc ON sc.certificateStandardID = csc.certificateStandardID AND csc.deletedAt IS NULL                \n" +
                "        WHERE sc.classID = IFNULL(pId, sc.classID )  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(sc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(sc.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(	                                                     \n" +
                "	IN pId VARCHAR(1000),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	DECLARE v_TimeZone VARCHAR(50);         \n" +
                "    DECLARE pWhereClause VARCHAR(1000);         \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' sd.isDeleted = 0 ' ; 			  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT       \n" +
                "			  k.id          \n" +
                "				,k.refSalesOrderDetID          \n" +
                "                ,sd.refSalesOrderID           \n" +
                "				,s.poNumber          \n" +
                "				,s.salesOrderNumber          \n" +
                "				,k.assyId                          \n" +
                "                ,assy.mfgcodeID          \n" +
                "                ,assy_mcm.mfgType assyMfgType          \n" +
                "				,assy.PIDCode AssyPIdCode          \n" +
                "				,assy.mfgPN assyMfgPN          \n" +
                "				,k.partId          \n" +
                "                ,c_mcm.mfgType partMfgType          \n" +
                "				,c.PIDCode partCode          \n" +
                "				,assy.mfgPN partMfgPn          \n" +
                "				,c.assyCode part          \n" +
                "				,k.UID          \n" +
                "				,k.refUIDId          \n" +
                "                ,k.allocatedQty          \n" +
                "                ,k.consumeQty          \n" +
                "                ,k.scrapExpiredQty          \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'        \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'        \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'        \n" +
                "					ELSE 'Consumed' END KitStatus         \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted\");  \n" +
                "  \n" +
                "			IF(pId IS NULL OR pId = '') THEN                                  \n" +
                "				SET pWhereClause = ' 1=1 ' ;                                  \n" +
                "			ELSE           \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (\", pId , \")\");          \n" +
                "			END IF;	  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3         \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id          \n" +
                "			left join component assy on k.assyId = assy.Id          \n" +
                "			left join component c on k.partId = c.Id          \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id          \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id            \n" +
                "            where           \n" +
                "	\");     \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN                                                      \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))   \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')    \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))   \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')    \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                    \n" +
                "	EXECUTE query1;                    \n" +
                "	DEALLOCATE PREPARE query1;                               \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWorkorderEquipmentDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEquipmentDetailForElastic`(	                                                 \n" +
                "	IN pId varchar(1000),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)                                                   \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "    declare pWhereClause varchar(1000);      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetWorkorderEquipmentDetailForElastic = CONCAT(\"  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount \");  \n" +
                "		SET pWhereClause = ' woe.isDeleted = 0 ' ; 			  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetWorkorderEquipmentDetailForElastic = CONCAT(\"          \n" +
                "				select     \n" +
                "					woe.woOpEqpId    \n" +
                "					,wo.woID          \n" +
                "					,woNumber          \n" +
                "					,wo.woVersion      \n" +
                "					,woo.opNumber woOpNumber      \n" +
                "					,woo.opName woOpName      \n" +
                "					,woe.woOPID    \n" +
                "					,vusalesorderdet.salesOrderNumber          \n" +
                "					,vusalesorderdet.poNumber    \n" +
                "					,woe.eqpID    \n" +
                "					,e.assetName    \n" +
                "					,e.eqpMake    \n" +
                "					,e.eqpModel    \n" +
                "					,e.eqpYear    \n" +
                "					,woe.isDeleted  \n" +
                "		\");      \n" +
                "  \n" +
                "        IF(pId IS NULL OR pId = '') THEN                              \n" +
                "			SET pWhereClause = ' 1=1 ' ;                              \n" +
                "		ELSE       \n" +
                "			SET pWhereClause = CONCAT(\" woe.woOpEqpId IN (\", pId , \")\");      \n" +
                "		END IF;	   \n" +
                "  \n" +
                "        IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN                                                      \n" +
                "			SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(woe.createdAt,'\",v_TimeZone,\"'))   \n" +
                "			between '\",pFromdate,\"' and '\",pTodate,\"')    \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(woe.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    SET @temp_Sproc_GetWorkorderEquipmentDetailForElastic = CONCAT(@temp_Sproc_GetWorkorderEquipmentDetailForElastic,\"      \n" +
                "			from workorder_operation_equipment as woe     \n" +
                "					left join workorder wo on wo.woID = woe.woID    \n" +
                "					left join workorder_operation woo on woo.woOPID = woe.woOPID    \n" +
                "					left join equipment e on e.eqpID = woe.eqpID    \n" +
                "					LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = woe.woID           \n" +
                "					where   \n" +
                "    \");     \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetWorkorderEquipmentDetailForElastic,pWhereClause);      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                           \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWOOperationEmployeeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOOperationEmployeeDetailForElastic`(	                                                 \n" +
                "	IN pId varchar(1000),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "    declare pWhereClause varchar(1000);     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;   \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' woe.isDeleted = 0 ' ; 			  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"          \n" +
                "			select 	woe.woOpEmployeeID    \n" +
                "					,woe.employeeID             \n" +
                "					,woNumber          \n" +
                "					,wo.woVersion          \n" +
                "					,woe.woID        \n" +
                "					,vusalesorderdet.poNumber    \n" +
                "					,woo.opNumber woOpNumber      \n" +
                "					,woo.opName woOpName        \n" +
                "					,woe.woOPID    \n" +
                "					,wo.woID       \n" +
                "					,vusalesorderdet.salesOrderNumber      \n" +
                "					,e.firstName    \n" +
                "					,e.lastName    \n" +
                "					,e.initialName    \n" +
                "					,fun_getEmpCertificationByEmpID(woe.employeeID)  empCertifications  \n" +
                "                    ,woe.isDeleted  \n" +
                "		\");           \n" +
                "		IF(pId IS NULL OR pId = '') THEN                              \n" +
                "			SET pWhereClause = '1=1' ;                              \n" +
                "		ELSE       \n" +
                "			SET pWhereClause = CONCAT(\" woe.woOpEmployeeID IN (\", pId , \")\");      \n" +
                "		END IF;	   \n" +
                "  \n" +
                "        IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN                                                      \n" +
                "			SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(woe.createdAt,'\",v_TimeZone,\"'))   \n" +
                "			between '\",pFromdate,\"' and '\",pTodate,\"')    \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(woe.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(@temp_Sproc_GetWorkorEmployeeDetailForElastic,\"       \n" +
                "		from workorder_operation_employee as woe     \n" +
                "        left join workorder wo on wo.woID = woe.woID    \n" +
                "		left join workorder_operation woo on woo.woOPID = woe.woOPID    \n" +
                "        LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID          \n" +
                "        left join employees e on woe.employeeID = e.id         \n" +
                "				where   \n" +
                "	\");                  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetWorkorEmployeeDetailForElastic,pWhereClause);    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                           \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWOOperationPartDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOOperationPartDetailForElastic`(	                                                 \n" +
                "	IN pId varchar(1000),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN                               \n" +
                "    declare pWhereClause varchar(1000);  \n" +
                "    DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"  \n" +
                "		SELECT       \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' wop.isDeleted = 0 ' ; 			  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"          \n" +
                "			select     \n" +
                "				wop.woOPPartID            \n" +
                "				,woNumber          \n" +
                "				,wo.woVersion          \n" +
                "				,wop.woID        \n" +
                "				,vusalesorderdet.poNumber    \n" +
                "				,woo.opNumber woOpNumber      \n" +
                "				,woo.opName woOpName        \n" +
                "				,wop.woOPID    \n" +
                "				,wo.woID       \n" +
                "				,vusalesorderdet.salesOrderNumber      \n" +
                "				,wop.partId    \n" +
                "				,co.PIDCode    \n" +
                "				,co.mfgPNDescription    \n" +
                "				,co.mfgPN    \n" +
                "				,mfg.mfgType    \n" +
                "				,pt.partTypeName    \n" +
                "				,rr.name rohsName    \n" +
                "				,mt.name mountingType    \n" +
                "				,CASE WHEN (wop.qpa is null or wop.qpa <= 0)    \n" +
                "					THEN 'N/A'    \n" +
                "					ELSE    \n" +
                "					wop.qpa    \n" +
                "					END qpa    \n" +
                "				,CASE WHEN ((wop.qpa is null or wop.qpa <= 0) or wo.buildQty <= 0)    \n" +
                "					THEN 'N/A'    \n" +
                "					ELSE    \n" +
                "					fun_convertUOM(wop.uomID,(SELECT id FROM uoms           \n" +
                "						WHERE measurementTypeID = (SELECT measurementTypeID FROM uoms WHERE id = wop.uomID AND deletedAt IS NULL)           \n" +
                "						AND defaultUOM = 1 AND deletedAt IS NULL LIMIT 1),qpa) * wo.buildQty    \n" +
                "					END    \n" +
                "				totalQPA  \n" +
                "                ,wop.isDeleted  \n" +
                "		\");     \n" +
                "  \n" +
                "		IF(pId IS NULL OR pId = '') THEN                              \n" +
                "			SET pWhereClause = ' 1=1' ;                              \n" +
                "		ELSE       \n" +
                "			SET pWhereClause = CONCAT(\" wop.woOPPartID IN (\", pId , \")\");      \n" +
                "		END IF;	   \n" +
                "  \n" +
                "        IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN                                                      \n" +
                "			SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(wop.createdAt,'\",v_TimeZone,\"'))   \n" +
                "			between '\",pFromdate,\"' and '\",pTodate,\"')    \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(wop.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetWOOperationPartDetailForElastic = CONCAT(@temp_Sproc_GetWorkorEmployeeDetailForElastic,\"        \n" +
                "			from workorder_operation_part wop    \n" +
                "				join workorder wo on wo.woID = wop.woID    \n" +
                "				join workorder_operation woo on woo.woOPID = wop.woOPID    \n" +
                "				LEFT JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID    \n" +
                "				join component co on wop.partId = co.id    \n" +
                "				join mfgcodemst mfg on co.mfgcodeID = mfg.id    \n" +
                "				JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND co.deletedAt IS NULL AND IFNULL(rr.isDeleted,0) =0            \n" +
                "				JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                        \n" +
                "				JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                            \n" +
                "				LEFT JOIN rfq_connectertypemst rct ON co.connecterTypeID = rct.id    \n" +
                "		where   \n" +
                "	\");           \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetWOOperationPartDetailForElastic,pWhereClause);           \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                           \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWOOPChangeRequestDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOOPChangeRequestDetailForElastic`(	                                                 \n" +
                "	IN pId INT(11),    \n" +
                "    IN pRequestType varchar(1),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;     \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM  workorder_reqrevcomments wrc    \n" +
                "		left join employees  appRejEmp on appRejEmp.id = wrc.accRejBy    \n" +
                "		join employees commentEmp on commentEmp.id = wrc.commentemployeeID    \n" +
                "		join workorder_reqforreview wr on wrc.woRevReqId = wr.woRevReqId        \n" +
                "		join workorder wo on wo.woID = wr.woID    \n" +
                "		left join workorder_operation woo on woo.woOPID = wr.woOPID    \n" +
                "		LEFT JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID    \n" +
                "		where wrc.isDeleted = 0 AND wr.requestType = IFNULL(pRequestType,wr.requestType);  \n" +
                "	ELSE  \n" +
                "		select     \n" +
                "				wrc.woRevReqcommID    \n" +
                "				,woNumber          \n" +
                "				,wo.woVersion          \n" +
                "				,wr.woID        \n" +
                "				,vusalesorderdet.poNumber    \n" +
                "				,woo.opNumber woOpNumber      \n" +
                "				,woo.opName woOpName        \n" +
                "				,wr.woOPID    \n" +
                "				,wo.woID       \n" +
                "				,vusalesorderdet.salesOrderNumber      \n" +
                "				,wrc.accRejBy    \n" +
                "				,wrc.accRejDate    \n" +
                "				, wrc.commentemployeeID    \n" +
                "				,wrc.commentDate    \n" +
                "				,wrc.description    \n" +
                "				,wr.requestType    \n" +
                "				,wr.threadTitle    \n" +
                "				,wr.changeType    \n" +
                "				,concat(appRejEmp.firstName, \" \", appRejEmp.lastName) AppRejBy    \n" +
                "				,concat(commentEmp.firstName, \" \", commentEmp.lastName) CommentBy    \n" +
                "				,CASE WHEN (wrc.accRejStatus = \"A\") THEN \"Approved\" ELSE \"Rejected\" END accRejStatus    \n" +
                "				,wr.woRevnumber    \n" +
                "				,wr.woOpRevNumber   \n" +
                "                ,wrc.isDeleted  \n" +
                "		from workorder_reqrevcomments wrc    \n" +
                "			left join employees  appRejEmp on appRejEmp.id = wrc.accRejBy    \n" +
                "			join employees commentEmp on commentEmp.id = wrc.commentemployeeID    \n" +
                "			join workorder_reqforreview wr on wrc.woRevReqId = wr.woRevReqId        \n" +
                "			join workorder wo on wo.woID = wr.woID    \n" +
                "			left join workorder_operation woo on woo.woOPID = wr.woOPID    \n" +
                "			LEFT JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID    \n" +
                "		where wrc.woRevReqcommID = IFNULL(pId,wrc.woRevReqcommID) and wr.requestType = IFNULL(pRequestType,wr.requestType) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wrc.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wrc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkstationTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkstationTypesForElastic`(	                                                    \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory a WHERE         \n" +
                "		a.categoryType = 'Equipment, Workstation & Sample Types' AND a.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT a.gencCategoryID        \n" +
                "			,a.gencCategoryName        \n" +
                "			,a.gencCategoryCode        \n" +
                "			,a.displayOrder        \n" +
                "			,CASE WHEN (a.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS        \n" +
                "            ,a.isDeleted  \n" +
                "		FROM genericcategory a WHERE         \n" +
                "		a.categoryType = 'Equipment, Workstation & Sample Types'  \n" +
                "		AND a.gencCategoryID = IFNULL(pId,a.gencCategoryID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(a.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(a.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);        \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkstationGroupsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkstationGroupsForElastic`(	                                                    \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc WHERE         \n" +
                "		gc.categoryType = 'Equipment, Workstation & Sample Groups' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT gc.gencCategoryID        \n" +
                "			,gc.gencCategoryName        \n" +
                "			,gc.gencCategoryCode        \n" +
                "			,gc.displayOrder        \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS        \n" +
                "			,gc.parentGencCategoryID        \n" +
                "			,pgc.gencCategoryID AS parentGenCatID,                  \n" +
                "			pgc.gencCategoryName AS parentName  \n" +
                "            ,gc.isDeleted  \n" +
                "		FROM genericcategory gc                 \n" +
                "					LEFT OUTER JOIN genericcategory AS pgc                  \n" +
                "					ON gc.parentGencCategoryID = pgc.gencCategoryID                  \n" +
                "					AND IFNULL(pgc.deletedAt,0) = 0   \n" +
                "		where  \n" +
                "				gc.categoryType = 'Equipment, Workstation & Sample Groups'  \n" +
                "		AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "        AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);        \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkstationOwnershipsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkstationOwnershipsForElastic`(	                                                    \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc WHERE         \n" +
                "		gc.categoryType = 'Equipment, Workstation & Sample Ownerships' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT gc.gencCategoryID        \n" +
                "			,gc.gencCategoryName        \n" +
                "			,gc.gencCategoryCode        \n" +
                "			,gc.displayOrder        \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS        \n" +
                "            ,gc.isDeleted  \n" +
                "		FROM genericcategory gc                 \n" +
                "			WHERE        \n" +
                "            gc.categoryType = 'Equipment, Workstation & Sample Ownerships'      \n" +
                "			AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "			AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);   \n" +
                "	END IF;    \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetLocationsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLocationsForElastic`(	                                                  \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc WHERE         \n" +
                "		gc.categoryType = 'Locations' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "	  SELECT gc.gencCategoryID      \n" +
                "			,gc.gencCategoryName      \n" +
                "			,gc.gencCategoryCode      \n" +
                "			,gc.displayOrder      \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS      \n" +
                "			,gc.isDeleted  \n" +
                "		FROM genericcategory gc               \n" +
                "		WHERE  gc.categoryType = 'Locations'    \n" +
                "			AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "			AND  \n" +
                "				(CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);      \n" +
                "	END IF;    \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetECOCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECOCategoryForElastic`(	                                                \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;   \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		from eco_type_category e     \n" +
                "			WHERE e.category = 1 and e.isDeleted = 0 ;  \n" +
                "	ELSE  \n" +
                "	  select     \n" +
                "		e.ecoTypeCatID     \n" +
                "		,e.name    \n" +
                "        ,e.displayOrder    \n" +
                "        ,e.isDeleted  \n" +
                "		from eco_type_category e     \n" +
                "			WHERE e.category = 1   \n" +
                "		and e.ecoTypeCatID = IFNULL(pId,e.ecoTypeCatID)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetECOCategoryAttributeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECOCategoryAttributeForElastic`(	                                                \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;     \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		from ECO_Type_Values e     \n" +
                "		LEFT OUTER JOIN eco_type_category AS etc ON e.ecoTypeCatID = etc.ecoTypeCatID   \n" +
                "		WHERE etc.category = 1 and e.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "	  select     \n" +
                "		e.ecoTypeValID    \n" +
                "		,e.ecoTypeCatID    \n" +
                "		,e.name    \n" +
                "		,e.displayOrder    \n" +
                "		,etc.name  AS ecoTypeCatName    \n" +
                "		,etc.category    \n" +
                "		,(CASE WHEN (e.noteRequired = 0) THEN 'NO'          \n" +
                "					WHEN (e.noteRequired = 1) THEN 'Yes' ELSE '' END) AS NoteRequired    \n" +
                "		,e.isDeleted  \n" +
                "		from ECO_Type_Values e     \n" +
                "		LEFT OUTER JOIN eco_type_category AS etc ON e.ecoTypeCatID = etc.ecoTypeCatID AND etc.isDeleted = 0  \n" +
                "		WHERE etc.category = 1    \n" +
                "		and e.ecoTypeValID = IFNULL(pId,e.ecoTypeValID)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetECODFMTypeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECODFMTypeForElastic`(	                                                    \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc                 \n" +
                "		LEFT OUTER JOIN genericcategory AS pgc ON gc.parentGencCategoryID = pgc.gencCategoryID AND  pgc.isDeleted  = 0        \n" +
                "		WHERE  gc.categoryType = 'ECO/DFM Type' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT gc.gencCategoryID        \n" +
                "			,gc.gencCategoryName        \n" +
                "			,gc.gencCategoryCode        \n" +
                "			,gc.displayOrder        \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS      \n" +
                "            ,gc.isDeleted  \n" +
                "		FROM genericcategory gc                 \n" +
                "		LEFT OUTER JOIN genericcategory AS pgc ON gc.parentGencCategoryID = pgc.gencCategoryID AND pgc.isDeleted = 0  \n" +
                "		WHERE  gc.categoryType = 'ECO/DFM Type' AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);        \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveReserveStockRequestForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReserveStockRequestForElastic`(                        \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN   \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM reserve_stock_request r    \n" +
                "			left outer join component ca on r.assyID = ca.id    \n" +
                "			left outer join component c on r.partID = c.id    \n" +
                "			left outer join mfgcodemst m on r.customerID = m.id    \n" +
                "			left outer join mfgcodemst mc on c.mfgcodeID = mc.id    \n" +
                "		WHERE r.isDeleted = 0;   \n" +
                "	ELSE  \n" +
                "		SELECT r.id,    \n" +
                "			r.partID,  fun_getMFGTypeByID(c.mfgcodeID) mfgType, ca.PIDCode PIDCode,c.mfgPN,CONCAT('(', mc.mfgCode, ')', ' ',  mc.mfgName) mfg,    \n" +
                "			r.customerID, Concat('(', m.mfgCode, ') ', m.mfgName) customerName, m.isCustOrDisty,m.mfgType cusMfgType, r.nickName,    \n" +
                "			r.assyID, ca.mfgcodeID assyMFGcodeID, fun_getMFGTypeByID(ca.mfgcodeID) assyMFGType, ca.PIDCode assyPIDCode,    \n" +
                "			r.transactionDate,r.count,r.unit,r.uom,r.description,r.isDeleted  \n" +
                "			FROM reserve_stock_request r    \n" +
                "			left outer join component ca on r.assyID = ca.id    \n" +
                "			left outer join component c on r.partID = c.id    \n" +
                "			left outer join mfgcodemst m on r.customerID = m.id    \n" +
                "			left outer join mfgcodemst mc on c.mfgcodeID = mc.id    \n" +
                "			WHERE r.id = IFNULL(pId,r.id)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(r.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(r.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);     \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetRequestShipmentForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRequestShipmentForElastic`(	                                                      \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM shipping_request sr         \n" +
                "		JOIN shipping_requestdet srd on sr.id = srd.shippingRequestID and srd.isDeleted = 0            \n" +
                "		JOIN employees emp ON sr.requestedBy = emp.id AND emp.isDeleted = 0                \n" +
                "		JOIN workorder wo ON srd.woID = wo.woID AND wo.isDeleted = 0                        \n" +
                "		JOIN component co ON wo.partID = co.id AND co.isDeleted = 0  AND IFNULL(co.category, 0) = 3                       \n" +
                "		JOIN mfgcodemst mfg ON mfg.id = wo.customerID AND co.isDeleted = 0         \n" +
                "		LEFT JOIN mfgcodemst c_mcm on c_mcm.id = co.mfgcodeId      \n" +
                "		WHERE sr.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	srd.id,    \n" +
                "				sr.id req_id,         \n" +
                "				sr.requestDate,      \n" +
                "				sr.requestedBy,                    \n" +
                "				sr.note,                \n" +
                "				CONCAT( '(', emp.initialName,')', emp.firstName , ' ' , emp.lastName) requestedByName,    			      \n" +
                "				CASE WHEN sr.status = '1' THEN 'Published' ELSE 'Draft' END `status`,          			      \n" +
                "				CASE WHEN EXISTS(SELECT 1 FROM shipping_request_empdet sred WHERE sred.shippingRequestID = sr.id AND IFNULL(sred.isDeleted, 0) = 0                \n" +
                "					AND IFNULL(sred.isAck, 0) = 1) THEN 'Verified' ELSE 'Pending' END 'verificationStatus'  ,      \n" +
                "				co.id AS `partMasterID`,  	  		      \n" +
                "				srd.woID,                  \n" +
                "				wo.woNumber,                  \n" +
                "				wo.customerID,                    \n" +
                "				co.PIDcode AS `PIDCode`,                \n" +
                "				co.mfgPN AS mfgPN,               \n" +
                "				c_mcm.mfgType AS mfgType,      \n" +
                "				mfg.mfgName mfgName,  \n" +
                "                srd.isDeleted  \n" +
                "		FROM shipping_request sr        \n" +
                "		JOIN shipping_requestdet srd on sr.id = srd.shippingRequestID and srd.isDeleted = 0            \n" +
                "		JOIN employees emp ON sr.requestedBy = emp.id AND emp.isDeleted = 0                \n" +
                "		JOIN workorder wo ON srd.woID = wo.woID AND wo.isDeleted = 0                        \n" +
                "		JOIN component co ON wo.partID = co.id AND co.isDeleted = 0  AND IFNULL(co.category, 0) = 3                       \n" +
                "		JOIN mfgcodemst mfg ON mfg.id = wo.customerID AND co.isDeleted = 0         \n" +
                "		LEFT JOIN mfgcodemst c_mcm on c_mcm.id = co.mfgcodeId      \n" +
                "		WHERE  sr.id = IFNULL(pId,sr.id)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(sr.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(sr.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(srd.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(srd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetDefectCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetDefectCategoryForElastic`(	                                                                          \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		from defectcategory as dc     \n" +
                "			where dc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		select  dc.defectCatId,    \n" +
                "				dc.defectCatName,    \n" +
                "				dc.description defectDescription,  \n" +
                "                dc.isDeleted  \n" +
                "		from defectcategory as dc     \n" +
                "		where dc.defectCatId = IFNULL(pId,dc.defectCatId)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(dc.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(dc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetDepartmentForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetDepartmentForElastic`(	                                                                          \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)    \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM department as d      \n" +
                "		JOIN employees as e ON e.Id = d.deptMngrId and e.isDeleted = 0      \n" +
                "		LEFT JOIN department as pd ON pd.deptID = d.parentDeptID and pd.isDeleted = 0                  \n" +
                "		where d.isDeleted = 0;   \n" +
                "	ELSE  \n" +
                "		select  d.deptId,      \n" +
                "				d.deptName,      \n" +
                "				e.initialName deptMngrName,      \n" +
                "				pd.deptName deptParentName ,    \n" +
                "				d.deptMngrID,  \n" +
                "                d.isDeleted  \n" +
                "		FROM department as d      \n" +
                "		JOIN employees as e ON e.Id = d.deptMngrId and e.isDeleted = 0      \n" +
                "		LEFT JOIN department as pd ON pd.deptID = d.parentDeptID and pd.isDeleted = 0                  \n" +
                "		where d.deptID = IFNULL(pId,d.deptID)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(d.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(d.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);      \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEntityForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEntityForElastic`(	                                                                          \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		from entity as e                            \n" +
                "		where e.isDeleted = 0  \n" +
                "		AND e.systemGenerated = 0;  \n" +
                "	ELSE  \n" +
                "		select  e.entityID,    \n" +
                "				e.entityName,    \n" +
                "				e.remark,  \n" +
                "                e.isDeleted  \n" +
                "		from entity as e                            \n" +
                "		where e.systemGenerated = 0    \n" +
                "		AND  e.entityID = IFNULL(pId,e.entityID)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSupplierQuoteDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierQuoteDetailForElastic`(	                                                                              \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;   \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM    \n" +
                "			supplier_quote_parts_det sqpd	    \n" +
                "		LEFT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID=s.id AND s.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON sqpd.partID = c.id AND c.isDeleted = 0   \n" +
                "		LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL             \n" +
                "		LEFT JOIN mfgcodemst mfc ON c.mfgcodeID = mfc.id AND mfc.isDeleted = 0  \n" +
                "		LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0   \n" +
                "		WHERE sqpd.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 						    \n" +
                "			s.id AS supplierQuoteMstID,    \n" +
                "			sqpd.id AS supplierQuotePartDetID,      \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		       \n" +
                "			fun_getMfgCodeAndNameByID(m.id) supplier,		       \n" +
                "			s.supplierID,    \n" +
                "			sqpd.partID,    \n" +
                "			c.mfgPN AS mfgPN,    \n" +
                "			c.mfgcodeID,    \n" +
                "			sc.mfgcodeID AS supplierMfgcodeID,    \n" +
                "			sc.mfgPN AS supplierPN,    \n" +
                "			sqpd.supplierPartID,        \n" +
                "			s.quoteNumber,    \n" +
                "			s.quoteDate,    \n" +
                "			s.reference,    \n" +
                "			(                                \n" +
                "			 CASE  WHEN (s.quoteStatus = 'D') THEN                                 \n" +
                "			   'Draft'                                                                     \n" +
                "			  WHEN (s.quoteStatus = 'P') THEN                                 \n" +
                "			   'Published'                                                                    \n" +
                "			  ELSE                                 \n" +
                "			   ''                                 \n" +
                "			 END                                \n" +
                "			) AS `quoteStatus`,    \n" +
                "			(            \n" +
                "			CASE                                           \n" +
                "				WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                   \n" +
                "				WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                           \n" +
                "				ELSE ''                                           \n" +
                "				END            \n" +
                "			) AS `isActive`,    \n" +
                "			c.isCustom,    \n" +
                "			mfc.isCustOrDisty,     \n" +
                "			sc.isCustom AS isCustomSupplier,  \n" +
                "            sqpd.isDeleted  \n" +
                "		FROM    \n" +
                "			supplier_quote_parts_det sqpd	    \n" +
                "		LEFT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID=s.id AND s.deletedAt IS NULL        \n" +
                "		LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                        \n" +
                "		LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL             \n" +
                "		LEFT JOIN mfgcodemst mfc ON c.mfgcodeID = mfc.id AND mfc.deletedAt IS NULL	    \n" +
                "		LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL        \n" +
                "		WHERE sqpd.id = IFNULL(pId,sqpd.Id)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(sqpd.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(sqpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCalibrationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCalibrationDetailForElastic`(    \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		from calibration_details cd    \n" +
                "		join equipment e ON e.eqpID = cd.refEqpID    \n" +
                "		where cd.isDeleted = 0  ;  \n" +
                "	ELSE   \n" +
                "		select cd.id,    \n" +
                "				cd.refEqpID,    \n" +
                "				e.assetName,    \n" +
                "				e.eqpMake,    \n" +
                "				e.eqpModel,    \n" +
                "				e.eqpYear,    \n" +
                "				case when cd.calibrationType = 1 then    \n" +
                "						'Calibration'    \n" +
                "					when  cd.calibrationType = 2 then    \n" +
                "						'Repair'    \n" +
                "				end calibrationType,    \n" +
                "				cd.calibrationDate,    \n" +
                "				cd.calibrationExpirationDate,    \n" +
                "				cd.calibrationComments,  \n" +
                "                cd.isDeleted  \n" +
                "		  from calibration_details cd    \n" +
                "		  join equipment e ON e.eqpID = cd.refEqpID    \n" +
                "		 where cd.id = IFNULL(pId,cd.id)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cd.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCustomerPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailForElastic`(	                                                                                              \n" +
                "	IN pId INT,                  \n" +
                "	IN pdetID INT,   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")   \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM customer_packingslip_det cpd             \n" +
                "			JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID and cp.isDeleted = 0                  \n" +
                "			LEFT JOIN mfgcodemst mfg ON mfg.id=cp.customerID AND mfg.isdeleted=0              \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0    		      \n" +
                "		WHERE cpd.isdeleted=0 AND transType ='P';   \n" +
                "	ELSE  \n" +
                "		SELECT cpd.custPOLineID,                  \n" +
                "			cpd.id AS customerPackingSlipDetID,              \n" +
                "			cpd.poQty,                  \n" +
                "			cpd.shipQty,            \n" +
                "			cpd.remainingQty,                  \n" +
                "			cpd.partId,                  \n" +
                "			fun_getAssyPIDCodeByID(cpd.partId) assyID,                  \n" +
                "			fun_getAssyNameByID(cpd.partId) assyName,             \n" +
                "			fun_getRoHSIconByPartID(cpd.partId) rohsIcon,                  \n" +
                "			fun_getRoHSNameByPartID(cpd.partId) rohsName,                  \n" +
                "			fun_getAssyNickNameByID(cpd.partId) nickName,               \n" +
                "			assyDescription,               \n" +
                "			cp.poNumber,                  \n" +
                "			cp.poDate,      \n" +
                "			cp.poRevision,      \n" +
                "			cp.soNumber,                  \n" +
                "			cp.soDate,                  \n" +
                "			cp.packingSlipNumber,                  \n" +
                "			cp.packingSlipDate,                  \n" +
                "			IFNULL(cp.refSalesOrderID,0) refSalesOrderID,                  \n" +
                "			cp.customerID,                  \n" +
                "			fun_getMfgNameByID(cp.customerID) customerName,                  \n" +
                "			fun_getMfgCodeByID(cp.customerID) customerCode,                  \n" +
                "			cp.id customerPackingSlipID,                  \n" +
                "			mfg.mfgType,              \n" +
                "			cp.headerComment,              \n" +
                "			cp.packingSlipComment,              \n" +
                "			cpd.internalComment,              \n" +
                "			cpd.standrads,              \n" +
                "			cpd.shippingNotes,                  \n" +
                "			CASE WHEN cp.subStatus=1 THEN 'Draft' WHEN cp.subStatus=2 THEN 'Ready to Ship' WHEN cp.subStatus=3 THEN 'Waiting For Shipping Label' WHEN cp.subStatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END AS `status`,                  \n" +
                "			CASE WHEN cp.packingSlipType=1 THEN 'MISC' ELSE 'PO/SO' END packingslipType,                  \n" +
                "			cp.sorevision, cp.systemID ,             \n" +
                "			cp.termsID,             \n" +
                "			(CASE WHEN cp.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cp.termsID) END) AS termsDisplayText ,            \n" +
                "			cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingmethodid) AS shippingMethodDisplayText ,            \n" +
                "			cp.salesCommissionTo ,              \n" +
                "			CONCAT('(',emp.initialName,')',' ',IFNULL(emp.firstName,''),' ',IFNULL(emp.lastName,'')) salesCommissionToDisplayText,            \n" +
                "			fun_getFOBById(cp.freeOnBoardId) freeOnBoardDisplayText ,            \n" +
                "			(select GROUP_CONCAT(cpstn.trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpstn where cpstn.refCustPackingSlipID = cp.id AND cpstn.isDeleted=0 ) AS trackingNumberList,  \n" +
                "            cpd.isDeleted  \n" +
                "		FROM customer_packingslip_det cpd             \n" +
                "			INNER JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID and cp.isDeleted = 0                  \n" +
                "			LEFT JOIN mfgcodemst mfg ON mfg.id=cp.customerID AND mfg.isdeleted=0              \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0    		      \n" +
                "		WHERE cpd.refCustPackingSlipID=ifnull(pId,cpd.refCustPackingSlipID)   \n" +
                "			AND cpd.id=IFNULL(pdetID,cpd.id) AND transType ='P'  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cpd.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);                        \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCustomerInvoiceDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetailForElastic`(	                                                                                                  \n" +
                "	IN pId INT,  \n" +
                "    IN pTransType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)   \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM customer_packingslip cp                 \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0                \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0              \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0     		      \n" +
                "		WHERE cp.isDeleted = 0 AND cp.transType = IFNULL(pTransType, cp.transType);  \n" +
                "	ELSE   \n" +
                "		SELECT  cp.id AS custInvMstID,  \n" +
                "			cpd.id AS customerInvDetID,  \n" +
                "			cp.invoiceNumber,                  \n" +
                "			cp.invoiceDate,                    \n" +
                "			cp.poNumber,                      \n" +
                "			cp.poDate,                      \n" +
                "			cp.poRevision,      \n" +
                "			cp.soNumber,                      \n" +
                "			cp.soDate,                      \n" +
                "			cp.packingSlipNumber,                      \n" +
                "			cp.packingSlipDate,                        \n" +
                "			(SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = cp.id AND packing.isDeleted = 0) packingSlipID,                \n" +
                "			fun_getFOBById(cp.freeOnBoardId) FOBName,                 \n" +
                "			fun_getIntToText(cp.isLocked) `Locked`,                \n" +
                "			fun_getGenericCategoryNameByID(cp.termsId) terms,                  \n" +
                "			fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethod,                  \n" +
                "			cpd.reflineID,                \n" +
                "			cpd.partId ,                \n" +
                "			co.mfgPn mfgPn,            \n" +
                "			fun_getAssyPIDCodeByID(cpd.partId) AS assyID,                        \n" +
                "			fun_getMFGTypeByID(co.mfgcodeID) mfgType,                     \n" +
                "			fun_getAssyNickNameByID(cpd.partId) nickName,            \n" +
                "			cpd.shippedQty , cpd.shipQty, cp.systemID,            \n" +
                "			cp.termsID,             \n" +
                "			(CASE WHEN cp.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cp.termsID) END) AS termsDisplayText ,            \n" +
                "			cp.shippingMethodId ,            \n" +
                "			cp.salesCommissionTo ,              \n" +
                "			CONCAT('(',emp.initialName,')',' ',IFNULL(emp.firstName,''),' ',IFNULL(emp.lastName,'')) salesCommissionToDisplayText,            \n" +
                "			cp.headerComment, cp.packingSlipComment,             \n" +
                "			cpd.internalComment, shippingNotes ,            \n" +
                "			IFNULL(cp.refSalesOrderID,0) refSalesOrderID ,            \n" +
                "			cpd.assyDescription , cpd.custPOLineID,            \n" +
                "			cp.creditMemoNumber, cp.creditMemoDate, cp.refDebitMemoNumber,             \n" +
                "			cp.refDebitMemoDate, cp.rmaNumber, cp.transType  ,          \n" +
                "			cp.customerID, 		          \n" +
                "			fun_getMfgNameByID(cp.customerID) customerName,                    \n" +
                "			fun_getMfgCodeByID(cp.customerID) customerCode ,        \n" +
                "			(select GROUP_CONCAT(cpstn.trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpstn where cpstn.refCustPackingSlipID = cp.id AND cpstn.isDeleted=0) AS trackingNumberList ,        \n" +
                "			(CASE WHEN cp.packingSlipType = 1 OR cp.packingSlipType = 2  THEN 'Invoice'                                         \n" +
                "					WHEN  cp.packingSlipType = 3 THEN 'MISC Invoice' END)invoiceType ,        \n" +
                "			fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "            cp.isDeleted  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0  \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0              \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0     		      \n" +
                "		WHERE cp.id= IFNULL(pId,cp.id) AND cp.transType = IFNULL(pTransType, cp.transType)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(cpd.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSupplierRMADetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierRMADetailForElastic`(	                                                                                    \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")   \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr                \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID           \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0           \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	psmr.receiptType = 'R' AND (psmrd.isDeleted = 0 AND psmr.isDeleted = 0);   \n" +
                "	ELSE  \n" +
                "		SELECT 		psmr.id              \n" +
                "				, psmr.systemId      \n" +
                "				, psmr.mfgCodeID                \n" +
                "				, psmr.poNumber        \n" +
                "				, psmr.poDate        \n" +
                "				, psmr.packingSlipNumber                \n" +
                "				, psmr.packingSlipDate                \n" +
                "				, psmr.receiptDate        \n" +
                "				, psmr.refPackingSlipNumberForInvoice        \n" +
                "				, psmr.shippingMethodId        \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.shippingMethodId) shippingMethod        \n" +
                "				, psmr.carrierId        \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.carrierId) carrier        \n" +
                "				, psmrd.id AS receivingDetId            \n" +
                "				, psmrd.packingSlipSerialNumber          \n" +
                "				, psmrd.receivedQty        \n" +
                "				, (CASE WHEN psmrd.refPackingSlipIdForRma IS NULL THEN psmrd.refPackingSlipForRma ELSE fun_getPackingSlipNumberById(psmrd.refPackingSlipIdForRma) END) refPackingSlipNumber        \n" +
                "				, (CASE WHEN psmrd.refInvoiceIdForRma IS NULL THEN psmrd.refInvoiceForRma ELSE fun_getSupplierInvoiceNumberByID(psmrd.refInvoiceIdForRma) END) refInvoiceNumber        \n" +
                "				, comp.id AS compId                \n" +
                "				, comp.mfgPN AS mfgPN        \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId                \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName                 \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode            \n" +
                "				, mfgMst.id AS mfgMstId                \n" +
                "				, mfgMst.mfgName AS mfgName                 \n" +
                "				, mfgMst.mfgCode AS mfgCode                \n" +
                "				, mfgMst.mfgType AS mfgType                         \n" +
                "				, psmrd.packagingID          \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName     \n" +
                "                , psmrd.isDeleted  \n" +
                "		FROM 		packing_slip_material_receive AS psmr                \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID           \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0           \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)                \n" +
                "		LEFT JOIN 	component AS comp ON psmrd.partID = comp.id           \n" +
                "					AND comp.deletedAt IS NULL                 \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id                \n" +
                "					AND (mfgMst.deletedAt IS NULL           \n" +
                "					AND mfgMst.isDeleted = FALSE)         \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id                \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL           \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)             \n" +
                "		WHERE      	psmr.receiptType = 'R'  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psmr.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmr.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);     \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_PurchaseOrderElasticSearchDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderElasticSearchDetail`(          \n" +
                "	IN poID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID          \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0        \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0        \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0          \n" +
                "		WHERE pom.isdeleted=0 AND pod.isDeleted = 0 AND  pom.id=IFNULL(poID ,pom.id);    \n" +
                "	ELSE  \n" +
                "		SELECT         \n" +
                "		   pod.id,        \n" +
                "		   pom.id AS purchaseID,        \n" +
                "		   DATE_FORMAT(pom.poDate , \"%m/%d/%y\") poDate,        \n" +
                "		   pom.poNumber,        \n" +
                "		   pom.poRevision,        \n" +
                "		   DATE_FORMAT(pom.soDate , \"%m/%d/%y\") soDate,        \n" +
                "		   pom.soNumber,        \n" +
                "		   CONCAT('(',mg.mfgCode,')',' ',mg.mfgName) supplierName,        \n" +
                "		   pom.supplierID,        \n" +
                "		   pod.supplierQuoteNumber,        \n" +
                "		   fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,         \n" +
                "		   pom.termsID,        \n" +
                "		   pom.shippingMethodID,        \n" +
                "		   fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,         \n" +
                "		   pom.carrierID,        \n" +
                "		   fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,         \n" +
                "		   pom.carrierAccountNumber,         \n" +
                "		   pom.poComment,        \n" +
                "		   pod.internalRef,        \n" +
                "		   pom.serialNumber,        \n" +
                "		   c.PIDCode,        \n" +
                "		   c.mfgPN,        \n" +
                "		   pod.mfgPartID,        \n" +
                "		   CONCAT(emp.firstName,' ',emp.lastName) contactPerson,        \n" +
                "		   pom.contactPersonEmpID,        \n" +
                "		  fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,        \n" +
                "		  c.mfgcodeID,        \n" +
                "		  pod.partDescription,        \n" +
                "		  pod.qty,        \n" +
                "		  fun_getUnitNameByID(c.uom) unitName,        \n" +
                "		  pod.packagingID,        \n" +
                "		  fun_getPackagingNameByID(pod.packagingID) packagingName,        \n" +
                "		  pom.serialNumber,      \n" +
                "		  case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatus        ,    \n" +
                "		  pom.cancleReason,    \n" +
                "		  case when pom.CancellationConfirmed=1 then 'Yes' else 'No' end CancellationConfirmed,  \n" +
                "          pod.isDeleted  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID          \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0        \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0        \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0          \n" +
                "		WHERE pom.id=IFNULL(poID ,pom.id)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(pod.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pod.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(pom.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pom.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);     \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCustomerPaymentDetForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(                                                                                                    \n" +
                "	IN pPaymentMstID INT,  \n" +
                "    IN pRefPaymentMode VARCHAR(5),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)   \n" +
                ")  \n" +
                "BEGIN                                                                                                    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;   \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "            WHERE psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  AND psip.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 						                                                      \n" +
                "			psip.id,                                                                  \n" +
                "			psip.mfgcodeID, cps1.id as custCreditMemoID , cps1.creditMemoNumber ,     \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cps1.creditMemoDate, v_TimeZone, v_DateTimeDisplayFormat) as creditMemoDate ,                                         \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                 \n" +
                "			psip.isPaymentVoided, psip.refPaymentMode ,                            \n" +
                "			CASE WHEN psip.isPaymentVoided = 0 THEN 'Received'                            \n" +
                "				ELSE 'Voided' END isPaymentVoidedConvertedValue,                            \n" +
                "			psip.voidPaymentReason,              \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,               \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,                                \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)              \n" +
                "									ELSE NULL END) AS voidedAt,	                          \n" +
                "			psip.refVoidedPaymentNumber,                \n" +
                "			psip.refVoidedPaymentId,                            \n" +
                "			psip.paymentNumber,     \n" +
                "			psip.bankName,                                              \n" +
                "			psip.bankAccountNo,                                              \n" +
                "			psip.paymentType,                                              \n" +
                "			psip.bankAccountMasID,             \n" +
                "			psip.systemId ,                                             \n" +
                "			gc.gencCategoryName paymentMethod,                                        \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,                                        \n" +
                "			psip.paymentDate,                                        \n" +
                "			psip.accountReference,                                        \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'         \n" +
                "		 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,	        \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                                \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,                                                                   \n" +
                "			invPayDetTemp.invoiceNumberList,          \n" +
                "			psip.remark  , psip.depositBatchNumber,  \n" +
                "            psip.isDeleted  \n" +
                "		FROM packingslip_invoice_payment psip       \n" +
                "			LEFT JOIN customer_packingslip cps1 ON cps1.id = refCustCreditMemoID AND cps1.transType = 'C' AND cps1.isDeleted = 0    \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0                      \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') invoiceNumberList                     \n" +
                "				    FROM packingslip_invoice_payment_det psipd                      \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id                       \n" +
                "											AND cps.isDeleted = 0                      \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                       \n" +
                "				     AND psipd.isDeleted = 0                      \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp                       \n" +
                "				ON psip.id = invPayDetTemp.refPayementid                           \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)          \n" +
                "            AND psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetChartOfAccountsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetChartOfAccountsForElastic`(      \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)   \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM `acct_acctmst` AS am    \n" +
                "		   JOIN `acct_classmst` AS acm                        \n" +
                "				ON am.`sub_class_id` = acm.`class_id`                        \n" +
                "				AND acm.`isDeleted`=0         \n" +
                "			where am.`isDeleted` = 0 ;  \n" +
                "	ELSE  \n" +
                "		SELECT am.`acct_id`, am.`acct_name`, am.`acct_code`, acm.`class_name` AS account_type,     \n" +
                "			(CASE WHEN (am.`isSubAccount` = 0) THEN 'No'                         \n" +
                "						WHEN (am.`isSubAccount` = 1) THEN 'Yes' ELSE '' END) AS isSubAccount,        \n" +
                "			aam.`acct_name` AS parent_account_name, am.`description`, am.`systemid`,  \n" +
                "            am.`isDeleted`  \n" +
                "		  FROM `acct_acctmst` AS am    \n" +
                "		   JOIN `acct_classmst` AS acm                        \n" +
                "				ON am.`sub_class_id` = acm.`class_id`                        \n" +
                "				AND acm.`isDeleted`=0         \n" +
                "			LEFT JOIN `acct_acctmst` AS aam      \n" +
                "				ON am.`parent_acct_id` = aam.`acct_id`    \n" +
                "			where am.`acct_id` = IFNULL(pId,am.`acct_id`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(am.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(am.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetAccountTypeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAccountTypeForElastic`(      \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "	)  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)    \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM `acct_classmst` AS cm     \n" +
                "			WHERE cm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT cm.`class_id`, cm.`class_name`, cm.`class_code`,     \n" +
                "			(CASE WHEN (cm.`isSubType` = 0) THEN 'No'                         \n" +
                "				WHEN (cm.`isSubType` = 1) THEN 'Yes' ELSE '' END) AS isSubType,     \n" +
                "			acm.`class_name` AS parent_class_name, cm.`systemid`, cm.`description`,    \n" +
                "			(CASE WHEN (cm.`system_defined` = 0) THEN 'No'                         \n" +
                "				WHEN (cm.`system_defined` = 1) THEN 'Yes' ELSE '' END) AS system_defined,  \n" +
                "			cm.isDeleted  \n" +
                "		FROM `acct_classmst` AS cm    \n" +
                "		LEFT JOIN `acct_classmst` AS acm                      \n" +
                "				ON cm.`parent_class_id` = acm.`class_id`                      \n" +
                "				AND acm.`isDeleted`=0       \n" +
                "		WHERE cm.`class_id` = IFNULL(pId,cm.`class_id`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cm.createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cm.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;    \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPaymentTypeCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPaymentTypeCategoryForElastic`(        \n" +
                "	IN pId INT(11),   \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)   \n" +
                "	THEN  \n" +
                "		SELECT   \n" +
                "			count(1) totalCount  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE  `categoryType`='Payment Type Category' AND `isDeleted` = 0 AND `gencCategoryID` = IFNULL(pId,`gencCategoryID`);   \n" +
                "	ELSE  \n" +
                "		SELECT `gencCategoryID`, `gencCategoryName`, `gencCategoryCode`,     \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Inactive'                           \n" +
                "				WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS isActive,    \n" +
                "			(CASE WHEN (`systemGenerated` = 0) THEN 'No'                           \n" +
                "				WHEN (`systemGenerated` = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "			isDeleted  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE  `categoryType`='Payment Type Category' AND `gencCategoryID` = IFNULL(pId,`gencCategoryID`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN   \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)   \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +


                /* **************************** Add Script Version -> 16-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4802,'2.00','V1',' User Story 34159: Restore database for elastic search and update document - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4802:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 16-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(    \n" +
                "	IN ppartID INT    \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "   # Create Temporary table for Assembly and its sub Assembly RoHS Status and Deviation  \n" +
                "		DROP temporary table if exists temp_AssyRohsStatusWithDeviation;  \n" +
                "		create temporary table temp_AssyRohsStatusWithDeviation as  \n" +
                "		select com.id, com.RoHSStatusID, ro.name as RoHSName, com.rohsDeviation from component com  \n" +
                "		Join rfq_rohsmst ro on ro.id = com.RoHSStatusID  \n" +
                "		where com.id in (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0);  \n" +
                "	# For get Mounting type wise glance Detail        \n" +
                "		SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,      \n" +
                "			a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,       \n" +
                "			COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,        \n" +
                "			b.mountingType      \n" +
                "		FROM	      \n" +
                "			(       \n" +
                "				select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,	      \n" +
                "						ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,      \n" +
                "						(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,      \n" +
                "						(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,        \n" +
                "						(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,        \n" +
                "						(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount      \n" +
                "				FROM rfq_lineitems rl         \n" +
                "				INNER JOIN component assypart ON assypart.id = rl.partID        \n" +
                "				INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID           \n" +
                "				where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)       \n" +
                "			) a      \n" +
                "			INNER JOIN       \n" +
                "			(      \n" +
                "				SELECT 	rl.id,	      \n" +
                "				case when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  and ifnull(max(com.mountingtypeID),'Unknown') = 'Unknown' then       \n" +
                "						'Unknown'      \n" +
                "					when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  then       \n" +
                "						fun_getMountingTypeNameByID(max(com.mountingtypeID))      \n" +
                "					else 'Mismatched' end  as mountingType      \n" +
                "				FROM rfq_lineitems rl         \n" +
                "				Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0              \n" +
                "				LEFT JOIN component com ON com.id = ra.mfgPNID     \n" +
                "				WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)       \n" +
                "				AND rl.isDeleted = 0 and com.isGoodPart <> 2     \n" +
                "				GROUP BY rl.id,rl.partID       \n" +
                "			) b on a.id = b.id      \n" +
                "			GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon, a.`level`, b.mountingType;      \n" +
                "  \n" +
                "  # For get RoHS type wise glance Detail        \n" +
                "  SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,      \n" +
                "		a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,       \n" +
                "		COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,        \n" +
                "		b.RoHSStatus      \n" +
                "	FROM	      \n" +
                "		(       \n" +
                "			select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,	      \n" +
                "					ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,      \n" +
                "					(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,      \n" +
                "					(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,        \n" +
                "					(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,        \n" +
                "					(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount      \n" +
                "			FROM rfq_lineitems rl         \n" +
                "			INNER JOIN component assypart ON assypart.id = rl.partID        \n" +
                "			INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID           \n" +
                "			where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)       \n" +
                "		) a      \n" +
                "		INNER JOIN       \n" +
                "		(      \n" +
                "			SELECT 	rl.id,	      \n" +
                "			case when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  and ifnull(max(com.RoHSStatusID),'Unknown') = 'Unknown' then       \n" +
                "					'Unknown'      \n" +
                "				when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  then       \n" +
                "					fun_getRoHSNameByID(max(com.RoHSStatusID))      \n" +
                "				else 'Mismatched' end  as RoHSStatus      \n" +
                "			FROM rfq_lineitems rl         \n" +
                "			Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0              \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID    \n" +
                "			WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)       \n" +
                "			AND rl.isDeleted = 0  and com.isGoodPart <> 2     \n" +
                "			GROUP BY rl.id,rl.partID       \n" +
                "		) b on a.id = b.id      \n" +
                "		GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon,a.`level`, b.RoHSStatus;        \n" +
                "  \n" +
                "    # get Assembly Standard detail for glance        \n" +
                "        SELECT sc.className, sc.colorCode, cs.fullName AS standardName,csd.*           \n" +
                "		FROM component_standard_details csd                \n" +
                "		INNER JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isDeleted = 0                \n" +
                "		LEFT JOIN standard_class sc ON sc.classID = csd.ClassID AND sc.isDeleted = 0                \n" +
                "		WHERE csd.isDeleted = 0 AND csd.componentID = ppartID          \n" +
                "		ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC;                \n" +
                "  \n" +
                "    # Assembly detail                        \n" +
                "	   SELECT com.id partID, com.PIDCode, com.mfgPN, com.mfgcodeID AS customerID, fun_getMfgCodeAndNameByPartID(com.id) Customer, com.mfgPNDescription,com.totalSolderPoints,                        \n" +
                "		ro.name,ro.rohsIcon                        \n" +
                "	   FROM component com                        \n" +
                "	   JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0                        \n" +
                "	   WHERE com.id = ppartID;     \n" +
                "	# get RoHS Status by Part  \n" +
                "		SELECT 	rla.partID, count(1) partCount,  (case when com.RoHSStatusID is null then 'Unknown' else ro.name end) as RoHSStatus,  \n" +
                "		(case when tar.RoHSStatusID = com.RoHSStatusID then 'Yes' else 'No' end) as complientWithAssy  \n" +
                "		FROM rfq_lineitems_alternatepart rla   \n" +
                "        Join temp_AssyRohsStatusWithDeviation tar on tar.id = rla.partID  \n" +
                "		Left JOIN component com ON com.id = rla.mfgPNID   \n" +
                "        left Join rfq_rohsmst ro on ro.id = com.RoHSStatusID  \n" +
                "		WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)       \n" +
                "		AND rla.isDeleted = 0   \n" +
                "		GROUP BY rla.partID,com.RoHSStatusID;  \n" +
                "  \n" +
                "	# Get RoHS Status By Item with All Complient parts with in Item(Compared with Assembly RoHS Requirement)  \n" +
                "		SELECT COUNT(1) AS `ItemCount`, a.partID,  \n" +
                "			(CASE WHEN MIN(RoHSStatus) = MAX(RoHSStatus) THEN RoHSStatus ELSE 'Mismatched' END) rohs,  \n" +
                "			(CASE WHEN MIN(complientWithAssy) = 1 THEN 'Yes' ELSE 'No' END) complientWithAssy  \n" +
                "		FROM  \n" +
                "			(SELECT rla.partID,  \n" +
                "					(CASE WHEN MIN(com.RoHSStatusID) = MAX(com.RoHSStatusID)  \n" +
                "						THEN  \n" +
                "							(CASE WHEN tar.RoHSStatusID = MAX(com.RoHSStatusID)   \n" +
                "								THEN ro.name  \n" +
                "								ELSE 'Mismatched'  \n" +
                "							END)  \n" +
                "						ELSE 'Mismatched'  \n" +
                "					END) RoHSStatus,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE 0 END) AS complientWithAssy,  \n" +
                "					rla.rfqLineItemsID  \n" +
                "			FROM rfq_lineitems_alternatepart rla  \n" +
                "			JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID  \n" +
                "			JOIN component com ON com.id = rla.mfgPNID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rla.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "			AND rla.isDeleted = 0  \n" +
                "			GROUP BY rla.partID , rla.rfqLineItemsID) a  \n" +
                "		GROUP BY a.partID , a.RoHSStatus;  \n" +
                "  \n" +
                "	# RoHS Status By Item with  minimum one compliant part within item ( Compared to assembly RoHS requirement)  \n" +
                "		SELECT  COUNT(1) AS `ItemCount`, b.partID, b.rohs, b.complientWithAssy, sum(deviationApproveCount) deviationApproveCount  \n" +
                "		FROM  \n" +
                "			(SELECT  a.partID,  \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1  \n" +
                "						THEN  \n" +
                "							(CASE WHEN MAX(LineRoHSStatus) = - 15 THEN 'Mismatched'    /* -15 added as Static value for Check mismatched*/  \n" +
                "									WHEN MAX(LineRoHSStatus) = - 10 THEN 'RoHS Deviation (Allowed w/ Eng. Approval)'  /* -10 added as Static value for Check RoHS Deviation*/  \n" +
                "									ELSE FUN_GETROHSNAMEBYID(MAX(LineRoHSStatus))  \n" +
                "							END)  \n" +
                "						ELSE 'Mismatched'  \n" +
                "					END) rohs,  \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1 THEN 'Yes'  \n" +
                "							ELSE 'No'  \n" +
                "					END) complientWithAssy,  \n" +
                "					sum(deviationApproveCount) deviationApproveCount,  \n" +
                "					a.rfqLineItemsID  \n" +
                "			FROM  \n" +
                "				(SELECT  rla.partID,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN com.RoHSStatusID  \n" +
                "							ELSE (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN - 10 ELSE - 15  END) /* -15 & -10 added as Static value for Check mismatched and RoHS Deviation*/  \n" +
                "					END) LineRoHSStatus,  \n" +
                "					ro.name AS RoHSStatus,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE  \n" +
                "						(CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END)  \n" +
                "					 END) AS complientWithAssy,  \n" +
                "					 (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END) deviationApproveCount,  \n" +
                "					rla.rfqLineItemsID  \n" +
                "				FROM rfq_lineitems_alternatepart rla  \n" +
                "				JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID  \n" +
                "				JOIN component com ON com.id = rla.mfgPNID  \n" +
                "				JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "				WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				AND rla.isDeleted = 0  \n" +
                "				ORDER BY rfqLineItemsID ASC , complientWithAssy DESC , LineRoHSStatus ASC  \n" +
                "				) a  \n" +
                "				GROUP BY a.partID , a.rfqLineItemsID  \n" +
                "				ORDER BY complientWithAssy  \n" +
                "			) b  \n" +
                "		GROUP BY b.partID , b.rohs  \n" +
                "		ORDER BY complientWithAssy;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4803,'2.00','V1','User Story 25400: Part Master > Assembly At Glance: Add Kit Item Count Enhancement in Assembly detail by Mounting Type and Assembly details by RoHS Type - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4803:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021 *********************************** */
                "ALTER TABLE mfgcodemst ADD COLUMN isSupplierEnable TINYINT NOT NULL DEFAULT 1;  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN externalSupplierOrder DECIMAL(10,5);  \n" +
                /* **************************** Add Script Version -> 16-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4804,'2.00','V1',' MFG Table update - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4804:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021 *********************************** */
                "INSERT INTO feature_mst(featureName,isActive,createdBy)VALUES('Allow to Enable/Disable Supplier for External API Request',1,1);  \n" +
                /* **************************** Add Script Version -> 16-05-2021 *********************************** */
                "INSERT INTO systemconfigrations (`key`,`values`,clusterName,isActive,createdBy,isEditable,description,displayName)VALUES  \n" +
                "('HeilindPartnerName','FLXCIR','Heilind',1,1,1,'The text which is mentioned in the value field is a Heilind partner name.','Heilind Partner Name'),  \n" +
                "('HeilindAccessToken','aGxkX2NpcmN1aXQ6QTRsYkchbjVGMzZQ','Heilind',1,1,1,'The text which is mentioned in the value field is a Heilind basic access token which can be generate through username and password.','Heilind Access Token');  \n" +
                /* **************************** Add Script Version -> 16-05-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName='Developer';  \n" +
                "INSERT INTO page_detail(pageName,RO,RW,menuRoute,pageRoute,pageURL,menuName,parentPageID,hasChild,orderBy,tablevel,iconClass,isActive,createdBy,isDeleted,isDisplay,displayMenuName,isAllowAsHomePage,isPopup)VALUES  \n" +
                "('Supplier Call Limits',0,0,'setting.system.developer.supplierlimit','app.supplierlimit','/supplierlimit','Supplier Call Limits',@pageID,0,71,1,'icons-supplier-limit',1,1,0,1,'Supplier Call Limits',1,0);  \n" +
                /* **************************** Add Script Version -> 16-05-2021 *********************************** */
                /* **************************** Add Script Version -> 16-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4805,'2.00','V1',' Supplier Details - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4805:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(          \n" +
                "    IN pWhereClause VARCHAR(16383),          \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),        \n" +
                "    IN pprefix VARCHAR(20),          \n" +
                "    IN pIsFromUID TINYINT,          \n" +
                "    IN pComponentID INT,          \n" +
                "    IN pCustomerID INT,          \n" +
                "    IN pCPN BOOL,          \n" +
                "    IN pMFGAvailabel BOOL,          \n" +
                "    IN pRefCpnMfgID INT,          \n" +
                "    IN pAssyID INT,          \n" +
                "    IN pSalesOrderDetailID INT,          \n" +
                "    IN pReceiveMaterialType VARCHAR(255),          \n" +
                "    IN pkitAssemblyID INT,          \n" +
                "    IN pBarcodeID INT,          \n" +
                "    IN pBOMLineID INT,          \n" +
                "    IN pSupplierID INT,          \n" +
                "    IN pCategory VARCHAR(2),          \n" +
                "    IN pInventoryType VARCHAR(2),          \n" +
                "    IN pCallFrom VARCHAR(50),      \n" +
                "    IN pExcludeStatus INT      \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;          \n" +
                "	DECLARE v_delimiter VARCHAR(10);          \n" +
                "	DECLARE v_length INT;          \n" +
                "	DECLARE v_fieldType INT;          \n" +
                "	DECLARE v_entityId INT;          \n" +
                "	DECLARE v_dataElementId INT;          \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);          \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);          \n" +
                "	DECLARE strLabel VARCHAR(2000);          \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);           \n" +
                "	DECLARE StaticField VARCHAR(100);          \n" +
                "	DECLARE DynamicField VARCHAR(100);          \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';          \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');          \n" +
                "	DECLARE plen,slen INT;          \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;          \n" +
                "	DECLARE pbr_Separator VARCHAR(50);          \n" +
                "	DECLARE barcode_type_id INT;          \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);          \n" +
                "	DECLARE UpdateValue VARCHAR(16383);          \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';          \n" +
                "	DECLARE v_SupplierID INT;          \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);          \n" +
                "	DECLARE v_barcode_id INT;          \n" +
                "	DECLARE v_barcode_count INT;          \n" +
                "	DECLARE v_NumberOfPart INT;          \n" +
                "	DECLARE v_rfqLineItemsID INT;          \n" +
                "	DECLARE v_componentCount INT;          \n" +
                "	DECLARE v_componentId INT;          \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);          \n" +
                "	DECLARE v_partMFG INT;          \n" +
                "	DECLARE v_isGoodPart TINYINT;          \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;          \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;          \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;          \n" +
                "	DECLARE v_isInstall TINYINT;          \n" +
                "	DECLARE v_isBOMLineClean TINYINT;          \n" +
                "	DECLARE v_BOMLineId INT;          \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;          \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;          \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;          \n" +
                "	DECLARE v_PIDCode VARCHAR(110);          \n" +
                "	DECLARE v_isPurchase TINYINT;          \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);          \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);          \n" +
                "	DECLARE v_BOMLineCount INT;          \n" +
                "	DECLARE v_AlternateLineId INT;          \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);          \n" +
                "	DECLARE v_BOMAssyId INT;          \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);          \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;          \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;          \n" +
                "	DECLARE v_isCPNFlag TINYINT;          \n" +
                "	DECLARE v_dateCodeFormatID INT;          \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);          \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);          \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;          \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;                                    \n" +
                "	DECLARE v_MFRList VARCHAR(10000);                                  \n" +
                "	DECLARE v_barcode_status INT;                                  \n" +
                "	DECLARE v_category INT;                                  \n" +
                "	DECLARE v_partType INT;                      \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;	                                    \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;                                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                             \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                            \n" +
                "	(                            \n" +
                "		errorText LONGTEXT,                            \n" +
                "		IsSuccess VARCHAR (2),                  \n" +
                "		MFGPart VARCHAR(10000)                                 \n" +
                "	);                                \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */            \n" +
                "	IF (pCategory = 'P') THEN                                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;                             \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive                                \n" +
                "		(                                         \n" +
                "			scanlabel VARCHAR(1000),                                \n" +
                "			poNumber VARCHAR(50),                            \n" +
                "			supplierSONumber VARCHAR(50),                          \n" +
                "			packingSlipNumber VARCHAR(50),                          \n" +
                "			invoiceNumber VARCHAR(50)                          \n" +
                "		);                                \n" +
                "	ELSE /* Temp table for MFR */                                 \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                             \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock                            \n" +
                "		(                            \n" +
                "			refcompid INT,                            \n" +
                "			pkgQty DECIMAL(18,6),          \n" +
                "			dateCode VARCHAR(10),          \n" +
                "			lotCode VARCHAR(255),          \n" +
                "			scanlabel VARCHAR(1000),          \n" +
                "			createdBy VARCHAR(255),          \n" +
                "			uid VARCHAR(14),          \n" +
                "			prefix VARCHAR(20),          \n" +
                "			nickName VARCHAR(50),          \n" +
                "			cpn TINYINT,          \n" +
                "			mfgAvailabel TINYINT,          \n" +
                "			refCPNMFGPNID INT,          \n" +
                "			customerID INT,          \n" +
                "			assyID INT,          \n" +
                "			salesOrderDetailID INT,          \n" +
                "			receiveMaterialType VARCHAR(255),          \n" +
                "			refSupplierPartId INT,                                                    \n" +
                "			mfrDateCode VARCHAR(50),                          \n" +
                "			poNumber VARCHAR(50),                            \n" +
                "			supplierSONumber VARCHAR(50),                          \n" +
                "			packingSlipNumber VARCHAR(50),                          \n" +
                "			invoiceNumber VARCHAR(50),                      \n" +
                "			binName VARCHAR(100),                      \n" +
                "			packaging VARCHAR(100),                      \n" +
                "			packingSlipDetailNickname VARCHAR(50)                      \n" +
                "		);            \n" +
                "  \n" +
                "		/* Temp table for data element value */            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                             \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                            \n" +
                "		(                            \n" +
                "			entityid INT,          \n" +
                "			dataelementid INT,          \n" +
                "			`value` LONGTEXT,          \n" +
                "			createdBy VARCHAR(255)          \n" +
                "		);           \n" +
                "    END IF;                                    \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator             \n" +
                "	# return error code          \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found          \n" +
                "	# 0: Barcode template does not exist, Please add template          \n" +
                "	# 1: Validation Clear          \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component          \n" +
                "	# 3: Mfgcode is not found          \n" +
                "	# 4: MFG PN does not exist          \n" +
                "	# 5: Multiple MFG PN found          \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code          \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly          \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer          \n" +
                "	# 9:  Multiple barcode template found.          \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check          \n" +
                "	# 11: MFG PN is incorrect part          \n" +
                "	# 12: PID PID1 was restricted part at part master level.          \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.          \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.          \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.          \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.          \n" +
                "	# 17: PID is contain more than 1 BOM line.          \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.          \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.          \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.          \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.          \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.          \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other          \n" +
                "  \n" +
                "	block1: BEGIN                           \n" +
                "   SET valuesforInsert = REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause, '\\\\', '\\\\'), '\\\\', '\\\\\\\\'), '\"', '\\\\\"'), \"'\",\"\\\\'\");           \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                                       \n" +
                "			/* Get barcode from labelstring */            \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status                                 \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                             \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN                                  \n" +
                "				/* Get More than 1 barcode then give validation */            \n" +
                "				IF (v_barcode_count > 1) THEN            \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                              \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                             \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                             \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);	                            \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                   \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "				ELSE               \n" +
                "					SET pBarcodeID = v_barcode_id;            \n" +
                "				END IF;                                   \n" +
                "			END IF;           \n" +
                "		ELSE            \n" +
                "			/* Get data from barcode id */            \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;            \n" +
                "		END IF;                                                                                                     \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */            \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN                     			                  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);                           \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name                                 \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND              \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;            \n" +
                "			SET pBarcodeID = v_barcode_id;                                                                      \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */              \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                          \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;            \n" +
                "			SET v_BarcodeType = '2D';                  \n" +
                "		ELSE /* barcode 1D */                                                               \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                           \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;                                                             \n" +
                "			SET v_BarcodeType = '1D';               \n" +
                "		END IF;             \n" +
                "	END block1;                                                                  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */            \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN            \n" +
                "		block2: BEGIN                                              \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                            \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                            \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                         \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;                     \n" +
                "			-- declare exit loop if data not found                            \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                            \n" +
                "			-- if any record match found than  check for delimiter and its value                       \n" +
                "			IF (pbr_template_ID > 0) THEN                            \n" +
                "				-- create temporary table for deliemeter and component dataelement                            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                            \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                            \n" +
                "					pentityId INT,                            \n" +
                "					pdataElementId INT,                            \n" +
                "					pdelimiter_value VARCHAR(200)                            \n" +
                "				);                       \n" +
                "				-- create temporary table for separator string values                            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;			                            \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                            \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength                                 \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;                 \n" +
                "				-- open cursor                            \n" +
                "				OPEN barcodeMatch_cursor;                       \n" +
                "				-- set str label as whereclause                          \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter                        \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");           \n" +
                "				-- if prefix is found than remove those from actual string match                            \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN		                            \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));          \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));          \n" +
                "				 END IF;                           \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                             \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                            \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                            \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                            \n" +
                "				 END IF;	                                                                                        \n" +
                "				-- insert all values after seprator split                    \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                                    				                        \n" +
                "				PREPARE stmt1 FROM @SQL;                            \n" +
                "				EXECUTE stmt1;                                           \n" +
                "				DEALLOCATE PREPARE stmt1;                          \n" +
                "				IF (pCategory = 'P') THEN                                \n" +
                "					-- create dynamic query to insert in packing slip                            \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';                                                \n" +
                "				ELSE                                 \n" +
                "					-- create dynamic query to insert in recieving material                            \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                \n" +
                "				END IF;                                \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                            \n" +
                "				barcodeMatch_loop:LOOP                           \n" +
                "					-- get all five selected values                            \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                    \n" +
                "					-- exit loop if no record found for barcode match                            \n" +
                "					IF exit_loop THEN                                                                                              \n" +
                "						CLOSE barcodeMatch_cursor;                            \n" +
                "						LEAVE barcodeMatch_loop;                            \n" +
                "					END IF;                       \n" +
                "					-- dynamic query to get dellimeter string with values from string                            \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                              \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                            \n" +
                "					EXECUTE stmtdelimiter;                                                \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;                                 \n" +
                "  \n" +
                "					-- get delimiter values from string                            \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                    \n" +
                "					-- check for field type is static or dynamic                            \n" +
                "					-- if static field than check for mfg code and mfg part number          \n" +
                "					IF v_fieldType = 0  THEN                                \n" +
                "						-- component_sid_stock                             \n" +
                "						-- get static field name from barcode table delimiter data element id                                            \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);                 \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                            \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                    \n" +
                "							SET MFG_Part_No = delimiter_value_data;             \n" +
                "							/* If component id is not found */                                 \n" +
                "							IF(pComponentID = 0)      \n" +
                "                            THEN                    \n" +
                "								/* Get component data */            \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;          \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                            \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM                       \n" +
                "								(                      \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType          \n" +
                "									FROM 	component c                                                                                                       \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND       \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)             \n" +
                "									UNION                      \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                                       \n" +
                "									FROM 		component_otherpn co                                                                                                       \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0                 \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND      \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0	                                      \n" +
                "								) a                                      \n" +
                "								UNION                                      \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM                       \n" +
                "								(                      \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                    \n" +
                "									FROM 	component c                                                                                                       \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND      \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0                   \n" +
                "									UNION                      \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                    \n" +
                "									FROM 		component_otherpn co                                                                                                       \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                       \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)       \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0	                                      \n" +
                "								) a                                      \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;            \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN          \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID                                     \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;                                    \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail; 				                                    \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  		                                    \n" +
                "								   ELSE          \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;          \n" +
                "								END IF;					                                    \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN                   \n" +
                "									/* If component is more that one then remove supplier from list */            \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;          \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS          \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;          \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */            \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;          \n" +
                "									IF (v_componentCount < 2) THEN          \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission          \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission          \n" +
                "										FROM 	temp_component_supplier_detail;          \n" +
                "									END IF;          \n" +
                "								ELSE          \n" +
                "									IF (pSupplierID IS NULL) THEN          \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType          \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType          \n" +
                "										FROM 	temp_component_detail;                                    \n" +
                "									ELSE 	                                    \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN                                    \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;                                    \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN                                    \n" +
                "											SET v_componentCount=0;                                    \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;                                    \n" +
                "										ELSE                                    \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                            \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                            \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);                                    \n" +
                "										END IF;          \n" +
                "									END IF;          \n" +
                "								END IF;       \n" +
                "							ELSE                \n" +
                "								/* If component id is found */            \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType                            \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType                            \n" +
                "								FROM 	component          \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;                  \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */            \n" +
                "							IF v_componentCount > 1 THEN            \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;                  \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */            \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN                             \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;                  \n" +
                "							END IF;                            \n" +
                "  \n" +
                "							/* If bad part found */            \n" +
                "							IF (v_isGoodPart != 1) THEN                                    \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;             \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Check all type of restriction */            \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                       \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */            \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                     \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */            \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                     \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;                  \n" +
                "							END IF;                    \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */            \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                \n" +
                "							IF (@MFGType = 'DIST') THEN                \n" +
                "								SET v_SupplierID = v_componentId;                \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and       \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);                \n" +
                "							END IF;             \n" +
                "  \n" +
                "							/* Check kit allocation */            \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */            \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;          \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId          \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId                        \n" +
                "								FROM 	(          \n" +
                "										SELECT 	*          \n" +
                "										FROM          \n" +
                "											(            \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                       \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId          \n" +
                "												FROM 		component_packagingalias cp              \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid          \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id          \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID          \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0      \n" +
                "												UNION              \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,          \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId          \n" +
                "												FROM 		rfq_lineitems_alternatepart rla          \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                           \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0                 \n" +
                "												UNION                                                                               \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,          \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId          \n" +
                "												FROM 		rfq_lineitems_alternatepart rla          \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                           \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL          \n" +
                "												GROUP BY 	custPNID, rla.partID          \n" +
                "											) b                       \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)          \n" +
                "										GROUP BY b.lineID, b.assyId                                                                \n" +
                "									) a;                                                                \n" +
                "  \n" +
                "								/* BOM line not found  */            \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                   \n" +
                "									CLOSE barcodeMatch_cursor;                            \n" +
                "									LEAVE barcodeMatch_loop;                 \n" +
                "								/* Found More then one BOM line */          \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                    \n" +
                "									CLOSE barcodeMatch_cursor;                            \n" +
                "									LEAVE barcodeMatch_loop;          \n" +
                "								ELSE                      \n" +
                "									/* Restrict use bom */            \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                  \n" +
                "										CLOSE barcodeMatch_cursor;                            \n" +
                "										LEAVE barcodeMatch_loop;                  \n" +
                "									END IF;                                                                         \n" +
                "  \n" +
                "									/* BOM line contain any error */            \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;          \n" +
                "									IF (v_isBOMLineClean = 0) THEN          \n" +
                "										CLOSE barcodeMatch_cursor;          \n" +
                "										LEAVE barcodeMatch_loop;          \n" +
                "									END IF;          \n" +
                "								END IF;          \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */          \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN          \n" +
                "									CLOSE barcodeMatch_cursor;          \n" +
                "									LEAVE barcodeMatch_loop;          \n" +
                "								END IF;          \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Set dynamic query for component */            \n" +
                "							IF  v_componentCount = 1 THEN                                     \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                            \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				          \n" +
                "								ELSE                                  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                            \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"'); 	    		                            \n" +
                "								END IF;                                  \n" +
                "							END IF;                        \n" +
                "						END IF;                            \n" +
                "  \n" +
                "						/* Not in use */            \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                            \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;                                            \n" +
                "						END IF;              \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */            \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');          \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                               \n" +
                "							END IF;                                  \n" +
                "						END IF;                                  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */            \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;          \n" +
                "						END IF;          \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */            \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN                                      \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                                    \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                                                    \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                                                    \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                                                    \n" +
                "							ELSE                                  \n" +
                "								SET exit_loop = FALSE;                                  \n" +
                "							END IF;                                   \n" +
                "						END IF;                        \n" +
                "  \n" +
                "						/* Set dynamic query for binid */            \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                          \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */            \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                        \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */            \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                                 \n" +
                "  \n" +
                "						/* Set dynamic query for po number */            \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                                 \n" +
                "  \n" +
                "						/* Set dynamic query for so number */            \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                             \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */            \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                             \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */            \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                        \n" +
                "					ELSE                           \n" +
                "						/* Set dynamic query for other than system generated */            \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                             \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;                         \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                             \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);          \n" +
                "					END IF;          \n" +
                "				END LOOP barcodeMatch_loop;          \n" +
                "				-- check if mfg and component both found than          \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                        \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                            \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);          	                                    \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);				                                    \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);          \n" +
                "				ELSEIF (v_componentCount > 1) THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);                             \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);                             \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                         \n" +
                "					IF (v_isGoodPart = 2) THEN                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);          \n" +
                "					ELSE                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);          \n" +
                "					END IF;                                                                                    \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);          \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                                                         \n" +
                "					IF (v_isCPNFlag = 1) THEN                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);          \n" +
                "					ELSE                                                                     \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);          \n" +
                "					END IF;                                                                    \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                         \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);                    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                 \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                 \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                 \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN                           \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);                            \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                            \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                            \n" +
                "					IF @Mfgmatched = 0  THEN                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);					                            \n" +
                "					END IF;							                            \n" +
                "				ELSE                   \n" +
                "					IF @mfgCount = 0 THEN                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                            \n" +
                "					END IF;	                            \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                              \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);                            \n" +
                "					END IF;				                            \n" +
                "				END IF;	          \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN           \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;              \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;              \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                            \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                            \n" +
                "					END IF;           \n" +
                "				END IF;                 \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN                \n" +
                "					/* If not fire any validation */            \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                   \n" +
                "  \n" +
                "						-- must call statements in sequence               \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */       		                  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');          \n" +
                "						PREPARE stmt1 FROM @SQL1;                            \n" +
                "						EXECUTE stmt1;                         \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');              \n" +
                "						IF (pnickName IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');              \n" +
                "						END IF;                  \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);            \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);              \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);              \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);              \n" +
                "						END IF;                 \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);              \n" +
                "						END IF;                  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');           \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);              \n" +
                "						END IF;               \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;	                             \n" +
                "						PREPARE stmt2 FROM @SQL2;                            \n" +
                "						EXECUTE stmt2;	            \n" +
                "						DEALLOCATE PREPARE stmt2;                                   \n" +
                "  \n" +
                "						/* Add success result in save error table */            \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                                                            \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                            \n" +
                "						ELSE                                                                             \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                            \n" +
                "						END IF;                                                                            \n" +
                "  \n" +
                "						/* Add data in table of delimeter table */            \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                             \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 	                            \n" +
                "						END IF;                            \n" +
                "  \n" +
                "						/* select detail of error table */            \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */              \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;              \n" +
                "  \n" +
                "						/* Select data of component */            \n" +
                "						SELECT 	c.*,                                                          \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                          \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                           \n" +
                "							csup.packageQty AS supplierPkgQty,          \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,          \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                           \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                           \n" +
                "							mcm.mfgName AS supplierMFGName,                                                           \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                           \n" +
                "							csup.packagingID AS supplierPackagingId,                                                           \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                                                           \n" +
                "							csup.minimum AS supplierMinimum,                                                           \n" +
                "							ccpn.id AS cpnID,                                                           \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                           \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                           \n" +
                "							rfqroh.name AS rohsName,                                                           \n" +
                "							rfqmou.name AS mountingTypeName,                                                           \n" +
                "							um.unitName AS uomName,                                                          \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                          \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                          \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                                        \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                                           \n" +
                "						FROM component AS c           \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID          \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID          \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                          \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID          \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                      \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID          \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID            \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                         \n" +
                "						WHERE c.id = v_componentId;      \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */            \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`          \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv           \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl          \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;                 \n" +
                "  \n" +
                "						/* select data of cpn */            \n" +
                "						SELECT 	id, refComponentID, refCPNPartID          \n" +
                "						FROM 	component_cust_alias_rev_pn          \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;          \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (          \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0          \n" +
                "						) AND isDeleted = 0;                                                                            \n" +
                "  \n" +
                "						/* select detail of bom */            \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,          \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN          \n" +
                "						FROM 		rfq_lineitems_alternatepart rla          \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0          \n" +
                "						WHERE 		rla.isDeleted = 0          \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))          \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)          \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);          \n" +
                "  \n" +
                "					ELSE                      \n" +
                "						/* Found any error then select error  */            \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                            \n" +
                "					END IF;              \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                 \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "				ELSE          \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */            \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN          \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');          \n" +
                "						PREPARE stmt1 FROM @SQL1;                            \n" +
                "						EXECUTE stmt1;          \n" +
                "						DEALLOCATE PREPARE stmt1;                        \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					/* Add success data in temp error table */            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                       \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */            \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                   \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                                   \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                         \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */            \n" +
                "					IF (pCategory = 'M') THEN                      \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                   \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                      \n" +
                "						SELECT 	c.*,                                                           \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                           \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                           \n" +
                "							csup.packageQty AS supplierPkgQty,          \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,          \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                           \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                           \n" +
                "							mcm.mfgName AS supplierMFGName,                                                           \n" +
                "							csup.packagingID AS supplierPackagingId,                                                           \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                           \n" +
                "							csup.id AS supplierMFGPNID,                                                           \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                                                           \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                                                     \n" +
                "							ccpn.id AS cpnID,                                                           \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                           \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                           \n" +
                "							rfqroh.name AS rohsName,                                                           \n" +
                "							rfqmou.name AS mountingTypeName,                                                           \n" +
                "							um.unitName AS uomName,                                                          \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                          \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                          \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,          \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName          \n" +
                "						FROM component AS c           \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID          \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID          \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                          \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID          \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                       \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                     \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID              \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom            \n" +
                "						WHERE c.id = v_componentId;      \n" +
                "					END IF;                                    \n" +
                "				END IF;                        \n" +
                "			ELSE                                                             \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                             \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                            \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;	                                  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                   \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                  \n" +
                "				SELECT 1;                                   \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                   \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                  \n" +
                "				SELECT 1; 		                                \n" +
                "			END IF;                            \n" +
                "  \n" +
                "		END block2;                                  \n" +
                "	ELSE                                                  \n" +
                "		IF (pIsFromUID = 1) THEN                                                  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;                                                  \n" +
                "		ELSE                                                   \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                   \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                  \n" +
                "			SELECT 1;                                                  \n" +
                "		END IF;                                                  \n" +
                "	END IF;                                      \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4806,'2.00','V1','Bug 34641: While create UMID within same page with Add UMID button then from department is set null - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4806:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021 *********************************** */
                "UPDATE help_blog_det SET title = 'Default Title' WHERE title = '';  \n" +
                /* **************************** Add Script Version -> 14-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4807,'2.00','V1','Bug 34600: Qa Testing issues for #34213 - Purav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4807:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveHelpBlogHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveHelpBlogHistory`(                                                      	                                                        \n" +
                "	IN ppageIndex INT,                                                              \n" +
                "	IN precordPerPage INT,                                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                                              \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN phelpBlogDetId INT,    \n" +
                "    IN phelpBlogId INT    \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "  \n" +
                "	DECLARE pOffset INT;                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);         \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE vTimeZone VARCHAR(50);          \n" +
                "	DECLARE vCustPSDetIdWhrClause VARCHAR(100);      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;        \n" +
                "  \n" +
                "	IF (phelpBlogDetId IS NULL) THEN  \n" +
                "	SET @temp_Sproc_HelpBlogChangeHistory = CONCAT(\"            \n" +
                "		SELECT 	da.ID,    \n" +
                "				da.Tablename,    \n" +
                "				da.RefTransID,    \n" +
                "				da.Colname,    \n" +
                "				da.Oldval,    \n" +
                "				da.Newval,      \n" +
                "				fun_getUserNameByID(da.Updatedby) updatedby,            \n" +
                "				fun_getUserNameByID(da.createdBy) createdby,            \n" +
                "				fun_getRoleByID(da.createByRoleId) createdbyRole,            \n" +
                "				fun_getRoleByID(da.updateByRoleId) updatedbyRole,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt        \n" +
                "		FROM dataentrychange_auditlog da       \n" +
                "				WHERE RefTransID in (select id from help_blog_det where helpBlogId =\",phelpBlogId,\" )  \n" +
                "				AND (da.Tablename = 'HELPBLOG' OR da.Tablename = 'HELPBLOGDET')   \n" +
                "  \n" +
                "         \");  \n" +
                "         ELSE  \n" +
                "            SET @temp_Sproc_HelpBlogChangeHistory = CONCAT(\"            \n" +
                "		SELECT 	da.ID,    \n" +
                "				da.Tablename,    \n" +
                "				da.RefTransID,    \n" +
                "				da.Colname,    \n" +
                "				da.Oldval,    \n" +
                "				da.Newval,      \n" +
                "				fun_getUserNameByID(da.Updatedby) updatedby,            \n" +
                "				fun_getUserNameByID(da.createdBy) createdby,            \n" +
                "				fun_getRoleByID(da.createByRoleId) createdbyRole,            \n" +
                "				fun_getRoleByID(da.updateByRoleId) updatedbyRole,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt        \n" +
                "		FROM dataentrychange_auditlog da       \n" +
                "				WHERE RefTransID = \",phelpBlogDetId,\" AND (da.Tablename = 'HELPBLOG' OR da.Tablename = 'HELPBLOGDET')  \n" +
                "  \n" +
                "         \");     \n" +
                "         END IF;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "		SET pWhereClause = '1=1' ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */                       \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HelpBlogChangeHistory,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "		PREPARE query2 FROM @SQLStatement2;             \n" +
                "		EXECUTE query2;                      \n" +
                "		DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HelpBlogChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "		PREPARE query1 FROM @SQLStatement2;                      \n" +
                "		EXECUTE query1;     	                 \n" +
                "		DEALLOCATE PREPARE query1;         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4808,'2.00','V1','Bug 34600: Qa Testing issues for #34213 - Purav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4808:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPartsDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartsDetailForElastic`(        \n" +
                "	IN pId INT,                    \n" +
                "    In pFromdate date,    \n" +
                "    In pTodate date,    \n" +
                "    IN pRequiredCount tinyint(1)    \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "  \n" +
                "	if(pRequiredCount)  \n" +
                "    THEN    \n" +
                "		SELECT     \n" +
                "			count(1) totalCount     \n" +
                "		FROM    \n" +
                "		   component AS co    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id    \n" +
                "				AND (mfg.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id    \n" +
                "				AND (rohs.isDeleted  = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id    \n" +
                "				AND (cps.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id    \n" +
                "				AND (rpt.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id    \n" +
                "				AND (rmt.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id    \n" +
                "				AND (rct.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id    \n" +
                "				AND ( cpm.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id    \n" +
                "				AND (refSuppCom.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id    \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)    \n" +
                "		WHERE  (co.isDeleted = FALSE);      \n" +
                "    ELSE    \n" +
                "		SELECT  \n" +
                "			co.id,    co.assyCode,    co.mfgPN,	co.productionPN,	co.nickname,	co.PIDCode,	co.mfgPNDescription,	co.specialNote,	co.ltbDate,    \n" +
                "			co.eolDate,	co.deviceMarking,	co.partPackage,	co.powerRating,	co.feature,	co.color,	co.tolerance,	co.voltage,	co.value,	co.noOfPosition,	co.noOfRows,	        \n" +
                "			co.mfgcodeID,	mfg.mfgCode AS mfgCode,	mfg.mfgType AS mfgType,	mfg.isCustOrDisty AS isCustOrDisty,    \n" +
                "			co.RoHSStatusID,	rohs.name AS rohsName,    \n" +
                "			co.partStatus,	cps.name AS partStatusName,    \n" +
                "			co.functionalCategoryID,	rpt.partTypeName AS rptName,    \n" +
                "			co.mountingTypeID,	rmt.name AS mountingTypeName,    \n" +
                "			co.connecterTypeID,	rct.name AS rfqConnecterTypeName,    \n" +
                "			co.packagingID,	cpm.name AS packagingName,	    \n" +
                "			co.refSupplierMfgpnComponentID,    \n" +
                "			refSuppCom.mfgPN AS refSuppComMgPN,    \n" +
                "			refSuppCom.mfgcodeID AS refSuppComMfgcodeID,    \n" +
                "			refSuppComMfg.mfgCode AS refSuppComMfgCode,    \n" +
                "			refSuppComMfg.mfgType AS refSuppComMfgType,    \n" +
                "			refSuppComMfg.isCustOrDisty AS refSuppComIsCustOrDisty,    \n" +
                "            co.isDeleted    \n" +
                "		FROM    \n" +
                "		   component AS co    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id    \n" +
                "				AND (mfg.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id    \n" +
                "				AND (rohs.isDeleted  = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id    \n" +
                "				AND (cps.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id    \n" +
                "				AND (rpt.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id    \n" +
                "				AND (rmt.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id    \n" +
                "				AND (rct.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id    \n" +
                "				AND ( cpm.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id    \n" +
                "				AND (refSuppCom.isDeleted = FALSE)    \n" +
                "				LEFT OUTER JOIN    \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id    \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)    \n" +
                "		WHERE  (CASE WHEN pId is not null THEN (co.id = IFNULL(pId,co.id)   \n" +
                "        OR IFNULL(co.refSupplierMfgpnComponentID,0) = IFNULL(pId,IFNULL(co.refSupplierMfgpnComponentID,0))) ELSE 1 = 1 END) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN    \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(co.createdAt,v_TimeZone)) between pFromdate and pTodate)      \n" +
                "                    or (DATE(fun_CovnertDateTimeByTimezoneValue(co.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);    \n" +
                "		END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4809,'2.00','V1',' Bug 34523: In enterprise search the Part Status updating is not reflecting - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4809:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseStatus`(              \n" +
                "	pRefSalesOrderDetID INT,                    \n" +
                "	pAssyID INT,              \n" +
                "	pMainAssyID INT,    \n" +
                "	pKitAllocationPer DECIMAL(18,8),             \n" +
                "	pIsConsolidated TINYINT(1)         \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN              \n" +
                "	DECLARE vKitReleaseStatus VARCHAR(50);  \n" +
                "	DECLARE vPendingCount INT;  \n" +
                "	DECLARE vReleaseCount INT;  \n" +
                "	DECLARE vTotalKitQty INT;  \n" +
                "	DECLARE vTotalPOQty INT;  \n" +
                "	DECLARE vKitQty INT;  \n" +
                "	DECLARE vPOQty INT;  \n" +
                "	DECLARE vKitAllocationPercentage DECIMAL(18,8);    \n" +
                "  \n" +
                "	SET vKitReleaseStatus = 'Not Released';           \n" +
                "	SET vPendingCount = 0;      \n" +
                "	SET vReleaseCount = 0;          \n" +
                "  \n" +
                "	SELECT	  	  \n" +
                "			SUM(spd.kitReleaseQty) totalKitQty,	SUM(spd.poQty) totalPOQty,  \n" +
                "            (SELECT kitQty FROM salesorderdet   \n" +
                "						WHERE 	isDeleted = 0  AND id = pRefSalesOrderDetID  \n" +
                "			) kitQty,	  \n" +
                "            (SELECT qty FROM salesorderdet   \n" +
                "						WHERE 	isDeleted = 0  AND id = pRefSalesOrderDetID  \n" +
                "			) qty,  \n" +
                "            IFNULL(SUM(CASE WHEN kitStatus ='R' THEN 1 ELSE 0 END), 0) releaseCount,          \n" +
                "			IFNULL(SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END), 0) pendingCount    \n" +
                "	INTO 	vTotalKitQty, vTotalPOQty, vKitQty, vPOQty, vReleaseCount, vPendingCount   \n" +
                "	FROM 	salesorder_plan_detailsmst  spd   \n" +
                "	WHERE 	spd.isDeleted = 0    \n" +
                "	AND		spd.salesOrderDetID = pRefSalesOrderDetID         \n" +
                "	AND 	spd.refAssyId = IFNULL(pAssyID, pMainAssyID)  \n" +
                "			AND spd.subAssyID IS NULL  \n" +
                "	GROUP BY spd.salesOrderDetID, spd.refAssyId;  \n" +
                "	IF (vReleaseCount = 0 AND (vPendingCount > 0 OR vPendingCount = 0) AND (pKitAllocationPer IS NOT NULL AND FLOOR(pKitAllocationPer) = 100)) THEN    		    \n" +
                "		SET vKitReleaseStatus = 'Ready To Release';         \n" +
                "	ELSEIF (vReleaseCount > 0 AND (vPendingCount > 0 OR (vTotalKitQty <> vKitQty AND vTotalPOQty <> vPOQty))) THEN            \n" +
                "		SET vKitReleaseStatus = 'Partially Released';              \n" +
                "	ELSEIF (vReleaseCount > 0 AND vPendingCount = 0 AND (vTotalKitQty = vKitQty AND vTotalPOQty = vPOQty)) THEN            \n" +
                "		SET vKitReleaseStatus = 'Fully Released';        \n" +
                "	ELSEIF (vReleaseCount = 0 AND vPendingCount > 0) THEN            \n" +
                "		SET vKitReleaseStatus = 'Not Released';          \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN vKitReleaseStatus;              \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-06-2021  ********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(                \n" +
                "	pUMIDId INT,        \n" +
                "    pKitAllocationId INT       \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	Select	ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        mt.name as allocatedUOMClass,  \n" +
                "        		rp.kitReleaseDate,  rp.promiseShipDate,      \n" +
                "        fun_getKitReleaseStatus(ka.refSalesOrderDetID, NULL, ka.assyID, k.allocPerWithSubAssy, false) AS kitReleaseStatus     \n" +
                "	From(        \n" +
                "	SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,	            \n" +
                "			SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,                 \n" +
                "			k.allocatedUOM allocatedUOMID         \n" +
                "	FROM 	kit_allocation k        \n" +
                "	WHERE 	k.id = IFNULL(pKitAllocationId, k.id)               \n" +
                "	AND 	k.refUIDId = pUMIDId        \n" +
                "	AND 	k.status = 'A'        \n" +
                "	GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM        \n" +
                "	) ka         \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3                    \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                    \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id        \n" +
                "	INNER JOIN uoms u ON u.id = ka.allocatedUOMID    \n" +
                "	INNER JOIN  measurement_types mt ON mt.id = u.measurementTypeID    \n" +
                "	LEFT JOIN (  \n" +
                "	SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "			ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "			FROM  \n" +
                "			(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "					vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "					IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "							FROM  		vu_kit_allocation_detail vk                                                                \n" +
                "							INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id                                               \n" +
                "							WHERE    	vk.isNotRequiredKitAllocation != 1  \n" +
                "							GROUP BY 	vk.refSalesorderdetid, vk.assyID  \n" +
                "			) as k  \n" +
                "	) k ON ka.refSalesOrderDetID = k.refSalesorderdetid and ka.assyID = k.assyID       \n" +
                "	left join (        \n" +
                "		Select 	salesOrderDetID,         \n" +
                "				(case when subAssyID is not null then subAssyID else refAssyId end) assyID,        \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,        \n" +
                "				MIN(poDueDate) promiseShipDate,        \n" +
                "		count(1) totalPlan,         \n" +
                "				sum(case when kitStatus = 'R' then 1 else 0 end) totalReleasedPlan        \n" +
                "		from 	vu_release_plan_detail        \n" +
                "		Group by salesOrderDetID, refAssyId, subAssyID        \n" +
                "	) rp on ka.refSalesOrderDetID = rp.salesOrderDetID and ka.assyID = rp.assyID        \n" +
                "	ORDER BY (rp.kitReleaseDate IS NULL),  rp.kitReleaseDate ASC, ka.id ASC;          \n" +
                "END ; \n" +
                /* **************************** New Script -> 17-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4810,'2.00','V1','User Story 34371: Modification in Kit Return/Release flow for partially plan kit - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4810:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyCompListForCustomerPackingSlipMISC` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(                                    \n" +
                "	IN pCustomerID INT,      \n" +
                "	IN pSearch VARCHAR(300),      \n" +
                "	IN pPartID INT,  \n" +
                "	IN pisFromSO TINYINT    \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (      \n" +
                "		customerID INT      \n" +
                "    );       \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/      \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN                             \n" +
                "		SET pCustomerID = NULL;                                \n" +
                "	END IF;                             \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/      \n" +
                "    IF 	pCustomerID IS NOT NULL THEN      \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;      \n" +
                "        INSERT INTO temp_Customers      \n" +
                "		SELECT buyTo AS customerID      \n" +
                "		FROM acquireCustomers;      \n" +
                "        INSERT INTO temp_Customers      \n" +
                "        SELECT smm.refMfgCodeMstID AS customerID      \n" +
                "		FROM supplier_mapping_mst smm      \n" +
                "		WHERE smm.supplierID = pCustomerID      \n" +
                "        AND smm.isDeleted = 0;       \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/      \n" +
                "	SELECT *     \n" +
                "    FROM (    \n" +
                "		SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,      \n" +
                "				co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,      \n" +
                "				ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,      \n" +
                "				co.mfgcodeID,		FUN_GETMFGCODEANDNAMEBYID(co.mfgcodeID) mfgName,					cst.standards,      \n" +
                "				mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,      \n" +
                "				cst.componentStandardList,					co.rfqOnly      \n" +
                "		FROM 	component co      \n" +
                "		INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id       \n" +
                "												AND mfg.isDeleted = 0       \n" +
                "												AND mfg.mfgType = 'MFG'      \n" +
                "												-- and mfg.id = (case when co.iscustom = 1 then ifnull(pCustomerID, mfg.id) else mfg.id end)      \n" +
                "												AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)       \n" +
                "														THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = mfg.id))      \n" +
                "														ELSE 1 = 1      \n" +
                "													END)      \n" +
                "		INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0      \n" +
                "		INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0      \n" +
                "		LEFT JOIN (      \n" +
                "			SELECT 	csd.componentID,      \n" +
                "					GROUP_CONCAT(cs.fullName) componentStandardList,      \n" +
                "					GROUP_CONCAT(CASE WHEN csd.classID IS NULL      \n" +
                "											THEN cs.fullName      \n" +
                "										ELSE      \n" +
                "											(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))      \n" +
                "											FROM standard_class s      \n" +
                "											WHERE s.classID = csd.classID AND isDeleted = 0)      \n" +
                "								END              \n" +
                "								ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC              \n" +
                "								SEPARATOR ', ') standards      \n" +
                "			FROM component_standard_details csd      \n" +
                "			INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0      \n" +
                "			WHERE csd.isDeleted = 0      \n" +
                "			GROUP BY csd.componentID      \n" +
                "		) cst ON co.id = cst.componentID      \n" +
                "		WHERE co.id > 0       \n" +
                "		AND co.id = IFNULL(pPartID, co.id)      \n" +
                "		AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)  \n" +
                "		AND co.isDeleted = 0      \n" +
                "		AND co.isGoodPart = 1      \n" +
                "		AND co.partType != 4      \n" +
                "    ) AS co    \n" +
                "    WHERE (CASE WHEN pSearch IS NOT NULL    \n" +
                "				THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))    \n" +
                "				ELSE 1 = 1    \n" +
                "		END);      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4811,'2.00','V1',' Alter procedure Sproc_GetAssyCompListForCustomerPackingSlipMISC - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4811:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 18-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateConsolidateDataForPart`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateConsolidateDataForPart`(    \n" +
                "	IN prfqAssyIDORrefSalesOrderdetID INT,    \n" +
                "    IN ppartID INT    \n" +
                ")  \n" +
                "BEGIN       \n" +
                "DECLARE v_GroupConcatSeparator text;                \n" +
                "	SET SESSION group_concat_max_len = 500000;               \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;                  \n" +
                "       -- Create leavel wise assembly BOM data      \n" +
                "        DROP TEMPORARY TABLE IF EXISTS leveldata;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS    \n" +
                "		WITH RECURSIVE cte AS    \n" +
                "		(    \n" +
                "			(    \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID,         \n" +
                "				rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,     \n" +
                "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,    \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,    \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,    \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,    \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,    \n" +
                "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,    \n" +
                "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,    \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,    \n" +
                "				/*    \n" +
                "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',    \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',    \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,    \n" +
                "				*/    \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,    \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,    \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,    \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,    \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,    \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,    \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,    \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,    \n" +
                "				/* we not required this in functionaly this will be used for check in detail    \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',    \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',    \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,    \n" +
                "				*/    \n" +
                "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,    \n" +
                "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, com.liveVersion, rl.isNotRequiredKitAllocation,    \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN    \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)    \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,    \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID    \n" +
                "				FROM  rfq_lineitems rl    \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0    \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2              \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID    \n" +
                "				WHERE rl.partId = ppartID  AND ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted = 0    \n" +
                "			)    \n" +
                "			UNION ALL    \n" +
                "			(    \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID,     \n" +
                "				rl.refDesig,    \n" +
                "				(    \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN    \n" +
                "							(cte.qpa1) 						      \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "					END) * IFNULL(rl.qpa,0)    \n" +
                "				) AS qpacount,     \n" +
                "                (    \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN             \n" +
                "							0    \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "						ELSE    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "					END) * IFNULL(rl.qpa,0)        \n" +
                "				) AS kitqpacount,     \n" +
                "				(    \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "					END) * IFNULL(rl.dnpQty,0)    \n" +
                "				) AS dnpQty,    \n" +
                "                (    \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							0    \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "						ELSE    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "					END) * IFNULL(rl.dnpQty,0)    \n" +
                "				) AS kitdnpQty,    \n" +
                "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,    \n" +
                "				(    \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "					END)*    \n" +
                "					(CASE WHEN rl.uomID = -1 THEN    \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN    \n" +
                "								IFNULL(rl.refDesigCount,0)    \n" +
                "							ELSE IFNULL(rl.qpa,0)    \n" +
                "						END)    \n" +
                "						ELSE IFNULL(rl.qpa,0)    \n" +
                "					END)    \n" +
                "				) AS qpa1,    \n" +
                "                (    \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							0    \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "						ELSE    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "					END)*    \n" +
                "  (CASE WHEN rl.uomID = -1 THEN    \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)    \n" +
                "					ELSE     \n" +
                "						IFNULL(rl.qpa,0)    \n" +
                "  END)    \n" +
                "				) AS kitqpa1,    \n" +
                "				(    \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "					END)*    \n" +
                "					(CASE WHEN rl.uomID = -1 THEN     \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN     \n" +
                "								IFNULL(rl.dnpDesigCount,0)     \n" +
                "							ELSE IFNULL(rl.dnpQty,0)     \n" +
                "						END)     \n" +
                "						ELSE IFNULL(rl.dnpQty,0)     \n" +
                "					END)    \n" +
                "				) AS dnpQPA1,    \n" +
                "                (    \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							0    \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "						ELSE    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "					END) *     \n" +
                "				(CASE WHEN rl.uomID = -1 THEN    \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)    \n" +
                "					ELSE    \n" +
                "						IFNULL(rl.dnpQty,0)    \n" +
                "					END)    \n" +
                "				) AS kitdnpQPA1,      \n" +
                "				(    \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "					END) *     \n" +
                "					IFNULL(rl.refDesigCount,0)    \n" +
                "				) refDesigCount,    \n" +
                "                (    \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							0    \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "						ELSE    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "					END) * IFNULL(rl.refDesigCount,0)    \n" +
                "				) AS kitrefDesigCount,    \n" +
                "				(    \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "					END) *    \n" +
                "					IFNULL(rl.dnpDesigCount,0)    \n" +
                "				) dnpDesigCount,    \n" +
                "                (    \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							0    \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN    \n" +
                "							(cte.qpa1)    \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN    \n" +
                "							(cte.dnpQPA1)    \n" +
                "						ELSE    \n" +
                "							(cte.dnpQPA1 + cte.qpa1)    \n" +
                "					END) *    \n" +
                "					IFNULL(rl.dnpDesigCount,0)    \n" +
                "				) kitdnpDesigCount,    \n" +
                "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN     \n" +
                "						1     \n" +
                "					ELSE rl.qpaDesignatorStep     \n" +
                "				END) AS qpaDesignatorStep ,    \n" +
                "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,     \n" +
                "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,    \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,    \n" +
                "				/* CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) ,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) ,' | ',    \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0),' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0) ,' | ',IFNULL(rla.restrictUseExcludingAliasStep,1) ,' | ',IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) ,' | ',    \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) ,' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,*/    \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,    \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,    \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,     \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,    \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,    \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,    \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,    \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,    \n" +
                "				#com.packaginggroupID,    \n" +
                "				/* we not required this in functionaly this will be used for check in detail    \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',    \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',    \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,    \n" +
                "				*/    \n" +
                "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,    \n" +
                "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, com.liveVersion,rl.isNotRequiredKitAllocation,    \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN    \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)    \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,    \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID    \n" +
                "				FROM  rfq_lineitems rl    \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0    \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2                     \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID    \n" +
                "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))    \n" +
                "				WHERE ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted =0    \n" +
                "			)    \n" +
                "		)    \n" +
                "		SELECT cte.* FROM cte    \n" +
                "		ORDER BY lineItemID;    \n" +
                "  \n" +
                "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;    \n" +
                "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWiseAlternatepartwithPackagingGroup AS    \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.category, a.rfqlineitemsid, a.partid,    \n" +
                "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */    \n" +
                "					MIN(a.mountingTypeID)     \n" +
                "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */     \n" +
                "					MAX(approvedMountingTypeID)     \n" +
                "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,         \n" +
                "        (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN  /* Matched funcitonal Type */    \n" +
                "					MIN(a.partType)     \n" +
                "			WHEN MIN(a.partType) !=  MAX(a.partType)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval funcitonal Type */     \n" +
                "					MAX(approvedFunctionalTypeID)     \n" +
                "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD funcitonal type*/ END) partType,        \n" +
                "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */    \n" +
                "			MIN(a.connecterTypeID)    \n" +
                "		ELSE     \n" +
                "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/    \n" +
                "		END) AS connecterTypeID,    \n" +
                "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,    \n" +
                "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,    \n" +
                "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',    \n" +
                "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',    \n" +
                "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',    \n" +
                "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',    \n" +
                "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',        \n" +
                "      a.approvedMountingType,' | ',        \n" +
                "      ifnull(a.custAssyPN,''),' | ',        \n" +
                "      ifnull(a.isCustom,0)      \n" +
                "      ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,    \n" +
                "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),    \n" +
                "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,     \n" +
                "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,    \n" +
                "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,    \n" +
                "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,    \n" +
                "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,                \n" +
                "      ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),                 \n" +
                "      ' | Approved Mounting Type:', approvedMountingTypeName,        \n" +
                "      ' | Approved Functional Type:', approvedFunctionalTypeName,      \n" +
                "      ' | Custom PartNum:', ifnull(custAssyPN,''),      \n" +
                "      ' | isCustom:', ifnull(isCustom,''),      \n" +
                "      ' | AssyPN:', AssyPN,    \n" +
                "      ' | partID:', partID,      \n" +
                "      ' | assyCustPN:', assyCustPN,      \n" +
                "      ' | mfgPN:', mfgPN,      \n" +
                "      '}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings    \n" +
                "		FROM     \n" +
                "			(SELECT x.rfqAssyIDORrefSalesOrderdetID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID,x.AssyPN,x.assyCustPN, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,    \n" +
                "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.custAssyPN, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,    \n" +
                "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,    \n" +
                "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,    \n" +
                "  x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,    \n" +
                "  x.approvedMountingTypeID, x.approvedMountingTypeName, x.approvedFunctionalTypeID,x.approvedFunctionalTypeName        \n" +
                "				FROM    \n" +
                "				(SELECT al.rfqAssyIDORrefSalesOrderdetID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, al.AssyPN, al.assyCustPN, IFNULL(d.id, c.id) AS mfgPNID,    \n" +
                "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,    \n" +
                "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,    \n" +
                "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.custAssyPN, c.custAssyPN) AS custAssyPN, IFNULL(d.partStatus, d.partStatus) AS partStatus,     \n" +
                "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,     \n" +
                "      IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,    \n" +
                "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,    \n" +
                "      (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,        \n" +
                "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,        \n" +
                "						(CASE WHEN al.approvedMountingType = 1 THEN c.functionalCategoryID ELSE -1 END) approvedFunctionalTypeID,        \n" +
                "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getPartTypeNameByID(c.functionalCategoryID) ELSE '' END) approvedFunctionalTypeName,        \n" +
                "      al.mismatchMountingTypeStep,        \n" +
                "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/    \n" +
                "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,    \n" +
                "						(CASE    \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */    \n" +
                "								IFNULL(al.restrictUsePermanentlyStep, 1)     \n" +
                "							ELSE	 /*Packaging Alias*/      \n" +
                "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/           \n" +
                "						END) AS restrictUsePermanentlyStep,    \n" +
                "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */           \n" +
                "						(CASE    \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/    \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/    \n" +
                "							ELSE     \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */    \n" +
                "						END) AS restrictUseInBOMExcludingAliasStep,    \n" +
                "						(CASE     \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/    \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)    \n" +
                "							ELSE   /*Packaging Alias*/    \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */    \n" +
                "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,    \n" +
                "						(CASE    \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/    \n" +
                "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/     \n" +
                "							ELSE     \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */    \n" +
                "						END) AS restrictUseExcludingAliasStep,    \n" +
                "						(CASE    \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/      \n" +
                "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/    \n" +
                "							ELSE     \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */    \n" +
                "						END) AS restrictUseExcludingAliasWithPermissionStep,    \n" +
                "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload    \n" +
                "				FROM    \n" +
                "					leveldata al    \n" +
                "				INNER JOIN component c ON al.mfgPNID = c.id    \n" +
                "				LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2              \n" +
                "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id    \n" +
                "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0    \n" +
                "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id    \n" +
                "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0    \n" +
                "			) AS X    \n" +
                "			GROUP BY x.rfqAssyIDORrefSalesOrderdetID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID ,x.AssyPN,x.assyCustPN, x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.custAssyPN, x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,     \n" +
                "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,     \n" +
                "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,    \n" +
                "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName,x.approvedFunctionalTypeID,x.approvedFunctionalTypeName        \n" +
                "		) a    \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");         \n" +
                "  \n" +
                "		PREPARE query2 FROM @consolidateAlternatePartDetail;                \n" +
                "		EXECUTE query2;                \n" +
                "		DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "	-- Create Temporary table for level wise lineitem detail    \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;    \n" +
                "		CREATE TEMPORARY TABLE temp_LevleWiseLineItemDetail AS    \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.isInstall,        \n" +
                "				 a.numOfPosition,        \n" +
                "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1        \n" +
                "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))        \n" +
                "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0        \n" +
                "					THEN (IFNULL(a.dnpQPA1, 0))        \n" +
                "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1        \n" +
                "					THEN (a.qpa1)        \n" +
                "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))        \n" +
                "				END) qpa,  /* QPA count for Pricing */        \n" +
                "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN        \n" +
                "							0        \n" +
                "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN        \n" +
                "							(a.kitqpa1)        \n" +
                "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN        \n" +
                "							(a.kitdnpQPA1)        \n" +
                "						ELSE        \n" +
                "							(a.kitdnpQPA1 + a.kitqpa1)        \n" +
                "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */        \n" +
                "				a.kitdnpQPA1 AS kitdnpWithoutQPA , /* QPA count for Kit Allocation - Change by CP on 30-04-2021 */        \n" +
                "                 IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,        \n" +
                "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,        \n" +
                "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,    \n" +
                "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),    \n" +
                "						' | REF DES Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP REF DES Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,    \n" +
                "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, '}') AS partlineID,    \n" +
                "				(CASE WHEN a.uomID = - 1    \n" +
                "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)    \n" +
                "				ELSE 0    \n" +
                "				END) isqpaMismatchflag,    \n" +
                "				(CASE WHEN a.uomID = - 1    \n" +
                "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)    \n" +
                "				ELSE 0    \n" +
                "				END) isdnpQPAMismatchflag,    \n" +
                "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1    \n" +
                "					THEN 1    \n" +
                "				ELSE 0    \n" +
                "				END) isPurchaseWithDNP    \n" +
                "		FROM    \n" +
                "			leveldata a    \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level, a.rfqlineitemsid , a.partid, a.lineID , a.uomID,  a.isInstall,         \n" +
                "        a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,        \n" +
                "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "        -- Create Consolidated data in temp table    \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;    \n" +
                "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqConsolidateLineItem AS      \n" +
                "		SELECT tl.rfqAssyIDORrefSalesOrderdetID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,     \n" +
                "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,     \n" +
                "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,    \n" +
                "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,    \n" +
                "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,    \n" +
                "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM leveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,    \n" +
                "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,    \n" +
                "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,    \n" +
                "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,    \n" +
                "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,    \n" +
                "				COUNT(tl.rfqLineItemsID) AS multiple,    \n" +
                "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,     \n" +
                "				GROUP_CONCAT(tal.mfgPartsWithPackagings SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidateRestrictPartDetail    \n" +
                "		FROM     \n" +
                "				temp_LevleWiseLineItemDetail tl      \n" +
                "				INNER JOIN temp_LevleWiseAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level    \n" +
                "		GROUP BY      \n" +
                "					tl.rfqAssyIDORrefSalesOrderdetID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,     \n" +
                "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,     \n" +
                "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,    \n" +
                "   tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason    \n" +
                "		ORDER BY rfqlineitemsid\");    \n" +
                "  \n" +
                "		PREPARE query3 FROM @finalConsolidateDetail;                \n" +
                "		EXECUTE query3;                \n" +
                "		DEALLOCATE PREPARE query3;                \n" +
                "  \n" +
                "        -- Drop temporary tables generated for generate consolidate data    \n" +
                "         DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;    \n" +
                "		 DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPricingHistoryLastFive`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPricingHistoryLastFive`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN passyQtyID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT;           \n" +
                "	    DECLARE pMaxHistoryID INT;  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;               \n" +
                "	    DECLARE vTimeZone VARCHAR(50);   \n" +
                "	    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "  \n" +
                "  \n" +
                "		/****************************** 1. Prepare Order By Statement ******************************/    \n" +
                "		IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY lineiD asc\";   \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/****************************** 2. Prepare Where Clause if null from SP call ******************************/           \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/****************************** 3. Prepare Pagination Section ******************************/           \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	          \n" +
                "		/****************************** 4. Create Temp Table to store id of last 5 consolidated history data ******************************/        \n" +
                "		SELECT MAX(id) INTO pMaxHistoryID FROM rfq_consolidated_history  WHERE rfqAssyID = prfqAssyID AND isDeleted = 0;        \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT CONCAT(  \n" +
                "					'Max((IF(rq.refHistoryID = ''',  \n" +
                "						a.id,  \n" +
                "					''',CONCAT(FORMAT((rq.unitPrice * rl.qpa * (        \n" +
                "						CASE WHEN  c.connecterTypeID = -2 THEN                  \n" +
                "							IFNULL(rl.numOfPosition,1)                  \n" +
                "						ELSE         \n" +
                "							1         \n" +
                "						END)),5),\"|\",rq.supplier,\"|\",rq.selectedPIDCode,\"|\",FORMAT(IFNULL(rq.unitEachPrice,0),5),\" EA\"), null))) AS ''',  \n" +
                "						fun_ConvertUTCDatetimeToSpecificTimeZone(a.createdAt, vTimeZone),''''  \n" +
                "					) ORDER BY a.createdAt DESC) INTO @SQLString  \n" +
                "                    from  \n" +
                "						(  \n" +
                "							SELECT  max(rch.id)id, rch.createdAt as createdAt  \n" +
                "							FROM rfq_consolidate_mfgpn_lineitem_quantity_history rq  \n" +
                "							JOIN rfq_consolidated_mfgpn_lineitem_history rl ON rq.consolidateID = rl.consolidateID             \n" +
                "							JOIN rfq_consolidated_history rch ON rch.id = rl.refHistoryID   \n" +
                "							WHERE rl.rfqAssyID = prfqAssyID          \n" +
                "								AND rq.qtyid = passyQtyID         \n" +
                "								AND rq.isDeleted = 0          \n" +
                "								AND rch.id > (pMaxHistoryID - 5)  \n" +
                "							group by rch.createdAt  \n" +
                "						) a;           \n" +
                "  \n" +
                "		SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackagingHistory_New(prfqAssyID,@SQLString,passyQtyID,pMaxHistoryID));         \n" +
                "		PREPARE stmt FROM @SQLStatement;                   \n" +
                "		EXECUTE stmt;	        \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);   \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "		SELECT 	rq.refHistoryID,        \n" +
                "			CAST(fun_ConvertUTCDatetimeToSpecificTimeZone(rch.createdAt, vTimeZone) AS CHAR(100)) createdAt,  \n" +
                "			(SUM(rq.unitPrice * ra.qpa * (        \n" +
                "				CASE WHEN c.connecterTypeID  = -2 THEN                \n" +
                "					IFNULL(ra.numOfPosition,1)                \n" +
                "				ELSE         \n" +
                "					1         \n" +
                "				END))) AS TotalExtendedPrice,                  \n" +
                "			(SUM(rq.unitPrice * ra.qpa * (        \n" +
                "				CASE WHEN  c.connecterTypeID  = -2 THEN                \n" +
                "					IFNULL(ra.numOfPosition,1)                \n" +
                "				ELSE         \n" +
                "					1         \n" +
                "				END)) * IFNULL(rq.requestQty,0)) AS TotalAssemblyPrice,         \n" +
                "			SUM((IFNULL(rq.quoteqty,0)-(rq.requestQty*IFNULL(ra.qpa,1) * (        \n" +
                "				CASE WHEN c.connecterTypeID  = -2  THEN                \n" +
                "					IFNULL(ra.numOfPosition,1)                \n" +
                "				ELSE         \n" +
                "					1         \n" +
                "				END)))*IFNULL(rq.unitPrice,0)) AS TotalExcessPrice  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity_history rq                   \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_history ra ON rq.consolidateID=ra.consolidateID AND rq.refHistoryID=ra.refHistoryID           \n" +
                "		LEFT JOIN COMPONENT c ON c.id = rq.componentID        \n" +
                "		LEFT JOIN rfq_consolidated_history rch ON rch.id=rq.refHistoryID  \n" +
                "		WHERE         \n" +
                "			ra.rfqAssyid = prfqAssyID        \n" +
                "			AND rq.qtyID = passyQtyID           \n" +
                "			AND rch.id > (pMaxHistoryID - 5)        \n" +
                "			AND ra.isPurchase = 1         \n" +
                "			AND ra.isdeleted = 0         \n" +
                "			AND rq.isDeleted = 0         \n" +
                "		GROUP BY rq.refHistoryID, rch.createdAt;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE consolidatetemp;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4812,'2.00','V1','Bug 34606: QA Testing finings for #34098 : BOM API Refactor Jun-21 - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4812:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateKitAllocationAssyDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateKitAllocationAssyDetail`(      \n" +
                "	IN pPartID INT,            \n" +
                "	IN pSalesOrderDetailID INT,      \n" +
                "	IN pKitQty INT,      \n" +
                "	IN pMrpQty INT,        \n" +
                "	IN pUserID VARCHAR(50),          \n" +
                "	IN pActionStatus VARCHAR(50),      \n" +
                "	IN pRoleID INT,    \n" +
                "    IN pIsOnlyQtyChange TINYINT    \n" +
                ")  \n" +
                "BEGIN                       \n" +
                "	DECLARE v_assyDataCount INT;                \n" +
                "	DECLARE v_KitAssyDetailPIDs VARCHAR(10000);                 \n" +
                "	DECLARE v_RfqLineitemsIds VARCHAR(10000);                 \n" +
                "	DECLARE v_RfqLineItemIdsForDeallocate VARCHAR(10000);                 \n" +
                "	DECLARE v_AssyIdsForDeallocate VARCHAR(10000);      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;                 \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS               \n" +
                "	SELECT 		ps.prPerPartID,                     \n" +
                "			c.liveInternalVersion,                     \n" +
                "			c.liveVersion,              \n" +
                "			ps.level        \n" +
                "	FROM 		part_sub_assy_relationship ps        \n" +
                "	JOIN		component c ON c.id = ps.prPerPartID        \n" +
                "	WHERE 		ps.PartID = pPartID                \n" +
                "	AND 		c.liveInternalVersion IS NOT NULL                 \n" +
                "	AND 		ps.isDeleted = 0                \n" +
                "	GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion, ps.level;                 \n" +
                "  \n" +
                "	SELECT 	COUNT(1)                     \n" +
                "	INTO 	v_assyDataCount                     \n" +
                "	FROM 	tempSubAmmseblyData                     \n" +
                "	WHERE 	prPerPartID = pPartID;      \n" +
                "  \n" +
                "	IF (v_assyDataCount > 0) THEN      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS                    \n" +
                "		SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId, isDeleted                 \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail                 \n" +
                "		WHERE 	refSalesOrderDetID = pSalesOrderDetailID                    \n" +
                "				AND isAssembly = 1                 \n" +
                "				AND isDeleted = 0;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForUpdate AS         \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID, 			                 \n" +
                "				pSalesOrderDetailID AS salesOrderDetailID,         \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty, 		                     \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,                      \n" +
                "				pKitQty AS kitQty,                     \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,                      \n" +
                "				pMrpQty AS mrpQty,                     \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,	                    \n" +
                "				tsd.liveVersion AS liveVersion,		        \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel,			                    \n" +
                "				pUserID AS updatedBy,      \n" +
                "				pUserID AS createdBy,                     \n" +
                "				pRoleID AS createByRoleId,                    \n" +
                "				pRoleID AS updateByRoleId          \n" +
                "		FROM 		tempSubAmmseblyData tsd        \n" +
                "		LEFT JOIN	(                \n" +
                "					SELECT 		rla.mfgPNID, a.qpa              \n" +
                "					FROM 		tempAssyConsolidateDetail a                \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0                \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs) AND a.isDeleted = 0                \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID                 \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level              \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;                       \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;                 \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItem AS         \n" +
                "		SELECT 		pSalesOrderDetailID AS refSalesOrderDetID,  		id, 		                \n" +
                "				lineID, 	qpa, 		dnpQty,		    	isInstall,	                    \n" +
                "				isPurchase,	isBuyDNPQty,	custPN,			custPNID,	                    \n" +
                "				uomID, 		partID,		numOfPosition, 		description,	                \n" +
                "				restrictCPNUseWithPermissionStep,	restrictCPNUsePermanentlyStep, 		                \n" +
                "				restrictCPNUseInBOMStep,		customerApprovalCPN,		    	                \n" +
                "				isNotRequiredKitAllocation,                     \n" +
                "				fun_getApprovalCommentOfBOMLine(19, rl.id) notRequiredKitAllocationReason,                \n" +
                "				isDeleted,      deleteByRoleId,		refDesig,	customerRev,	        \n" +
                "                customerDescription,	dnpDesig,	programingStatus,	        \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,      \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep,  duplicateCPNStep,      \n" +
                "				requireMountingTypeStep, requireFunctionalTypeStep, refDesigCount, isObsoleteLine,      \n" +
                "				customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,      \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount,      \n" +
                "				requireMountingTypeError, requireFunctionalTypeError, dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep,      \n" +
                "				customerApprovalForDNPBuyStep, isSupplierToBuy      \n" +
                "		FROM 		rfq_lineitems rl         \n" +
                "		WHERE 	 	/*FIND_IN_SET(PartId, v_KitAssyDetailPIDs) */              \n" +
                "				EXISTS (SELECT 1  FROM tempSubAmmseblyData temp               \n" +
                "										WHERE temp.prPerPartid = partid)              \n" +
                "                AND isDeleted = 0;                   \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;                 \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItemAlternatePart AS        \n" +
                "		SELECT 	pSalesOrderDetailID AS refSalesOrderDetID,		rfqLineItemsID, 		id, 			                \n" +
                "			distributor, 			distMfgCodeID, 		distPN, 	    		distMfgPNID,		                \n" +
                "			mfgCode,			mfgCodeID, 		mfgPN, 				mfgPNID,		                \n" +
                "			description,		RoHSStatusID,		                \n" +
                "			parttypeID, 		    	mountingtypeID,		partcategoryID, 	    	partID,			                \n" +
                "			customerApproval,		customerApprovalBy,	customerApprovalDate,		restrictUsePermanentlyStep,      \n" +
                "			restrictUseWithPermissionStep, 	restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep, 	    		                \n" +
                "			mismatchMountingTypeStep,	approvedMountingType, 	mismatchFunctionalCategoryStep,      \n" +
                "			uomMismatchedStep,		restrictUseInBOMExcludingAliasStep,	    		restrictUseInBOMExcludingAliasWithPermissionStep, 	                    \n" +
                "			restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,		isDeleted,                     \n" +
                "			deleteByRoleId,mfgVerificationStep, mfgDistMappingStep, mfgCodeStep, distVerificationStep, distCodeStep,      \n" +
                "			getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep, mfgPNStep, distPNStep,       \n" +
                "			badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep, duplicateMPNInSameLineStep,      \n" +
                "			pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep, functionalTestingRequiredStep,      \n" +
                "			mismatchValueStep, mismatchPackageStep, mismatchToleranceStep, mismatchTempratureStep, mismatchPowerStep,      \n" +
                "			programingRequiredStep, mismatchColorStep, isCustomerUnAppoval, customerUnAppovalBy,      \n" +
                "			customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep,      \n" +
                "			tbdPartStep, exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep,       \n" +
                "			suggestedGoodPartStep, suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep,      \n" +
                "			mismatchCustomPartStep, suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep			        \n" +
                "		FROM 	rfq_lineitems_alternatepart rla         \n" +
                "		WHERE 	EXISTS  ( SELECT 1 FROM rfq_LineItems rl               \n" +
                "									WHERE EXISTS (SELECT 1  FROM tempSubAmmseblyData temp               \n" +
                "															WHERE temp.prPerPartid = partid)              \n" +
                "									AND rl.id =  rla.rfqLineItemsID              \n" +
                "    AND rl.isdeleted = 0)              \n" +
                "				AND isDeleted = 0;                  \n" +
                "  \n" +
                "		/* Delete any line detail (delete any kit) from sales order */                \n" +
                "		IF (pActionStatus = 'DELETE')     \n" +
                "        THEN                \n" +
                "			/* Delete from kit_allocation_assy_detail */                \n" +
                "			UPDATE 	kit_allocation_assy_detail kasd                \n" +
                "			SET 	kasd.updatedBy = pUserID,                  \n" +
                "				kasd.isDeleted = 1,          \n" +
                "				kasd.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "				kasd.deletedBy = pUserId,                    \n" +
                "				kasd.updateByRoleId = pRoleID,                    \n" +
                "				kasd.deleteByRoleId = pRoleID                \n" +
                "			WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID;                \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems */                \n" +
                "			UPDATE 	kit_allocation_lineitems kal                \n" +
                "			SET 	kal.updatedBy = pUserID,                  \n" +
                "				kal.isDeleted = 1,          \n" +
                "				kal.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "				kal.deletedBy = pUserId,                    \n" +
                "				kal.updateByRoleId = pRoleID,                    \n" +
                "				kal.deleteByRoleId = pRoleID                \n" +
                "			WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID;                \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems_alternatepart */                \n" +
                "			UPDATE 	kit_allocation_lineitems_alternatepart kala                \n" +
                "			SET 	kala.updatedBy = pUserID,                  \n" +
                "				kala.isDeleted = 1,          \n" +
                "				kala.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "				kala.deletedBy = pUserId,                    \n" +
                "				kala.updateByRoleId = pRoleID,                    \n" +
                "				kala.deleteByRoleId = pRoleID                \n" +
                "			WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID;                \n" +
                "  \n" +
                "			-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order                \n" +
                "			UPDATE 	kit_allocation ka                  \n" +
                "			SET 	ka.returnQty = ka.allocatedQty,                  \n" +
                "				ka.returnUnit = ka.allocatedUnit,                  \n" +
                "				ka.returnUOM = ka.allocatedUOM,                  \n" +
                "				ka.returnDate = fun_DatetimetoUTCDateTime(),                    \n" +
                "				ka.updatedBy = pUserID,                                    \n" +
                "				ka.updateByRoleId = pRoleID,	                                    \n" +
                "				ka.`status` = 'D',                              \n" +
                "				ka.remark = 'Auto Deallocated from ReCalculation'                  \n" +
                "			WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID                \n" +
                "					AND ka.`status` = 'A';             \n" +
                "  \n" +
                "			-- Delete release plan detail            \n" +
                "			UPDATE 	salesorder_plan_detailsmst            \n" +
                "			SET 	isDeleted = 1,      \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "				deletedBy = pUserId            \n" +
                "			WHERE 	salesOrderDetID = pSalesOrderDetailID             \n" +
                "					AND isDeleted = 0;            \n" +
                "		END IF;                \n" +
                "  \n" +
                "		/* Insert data in kit allocation table when any new sales order line detail add in sales order */                \n" +
                "		IF (pActionStatus != 'DELETE') THEN                \n" +
                "			IF (pActionStatus = 'UPDATE')    \n" +
                "            THEN                \n" +
                "				/* Delete kit_allocation_assy_detail if sales order detail changed assy for particular line detail */                \n" +
                "				UPDATE 	kit_allocation_assy_detail kasd                \n" +
                "				SET 	kasd.updatedBy = pUserID,                  \n" +
                "					kasd.isDeleted = 1,          \n" +
                "					kasd.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "					kasd.deletedBy = pUserId,                    \n" +
                "					kasd.updateByRoleId = pRoleID,                    \n" +
                "					kasd.deleteByRoleId = pRoleID                \n" +
                "				WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID                 \n" +
                "						AND kasd.isDeleted = 0;                \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems if sales order detail changed assy for particular line detail */                \n" +
                "				UPDATE 	kit_allocation_lineitems kal                \n" +
                "				SET 	kal.updatedBy = pUserID,                  \n" +
                "					kal.isDeleted = 1,          \n" +
                "					kal.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "					kal.deletedBy = pUserId,                    \n" +
                "					kal.updateByRoleId = pRoleID,                    \n" +
                "					kal.deleteByRoleId = pRoleID                \n" +
                "				WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID              \n" +
                "						AND kal.isDeleted = 0;                \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems_alternatepart if sales order detail changed assy for particular line detail */		                \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart kala                \n" +
                "				SET 	kala.updatedBy = pUserID,                  \n" +
                "						kala.isDeleted = 1,          \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "						kala.deletedBy = pUserId,                    \n" +
                "						kala.updateByRoleId = pRoleID,                    \n" +
                "						kala.deleteByRoleId = pRoleID                \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID        \n" +
                "							AND kala.isDeleted = 0;                \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order                \n" +
                "				-- In this case assembly was change on sales order line detail so internally we do deallocate UMID which contail old assembly (Old Kit)                \n" +
                "				IF(pIsOnlyQtyChange = 0) THEN    \n" +
                "					UPDATE 	kit_allocation ka                  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,                  \n" +
                "						ka.returnUnit = ka.allocatedUnit,                  \n" +
                "						ka.returnUOM = ka.allocatedUOM,                  \n" +
                "						ka.returnDate = fun_DatetimetoUTCDateTime(),                    \n" +
                "						ka.updatedBy = pUserID,                                    \n" +
                "						ka.updateByRoleId = pRoleID,	                                    \n" +
                "						ka.`status` = 'D',                              \n" +
                "						ka.remark = 'Auto Deallocated from ReCalculation'                  \n" +
                "					WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID                \n" +
                "							AND ka.`status` = 'A';       \n" +
                "				END IF;             \n" +
                "			END IF;      \n" +
                "  \n" +
                "			IF (pActionStatus = 'UPDATE' OR pActionStatus = 'CALCULATEKITALLOCATION')     \n" +
                "            THEN                \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')     \n" +
                "                THEN                \n" +
                "  \n" +
                "					/* Delete from kit_allocation_assy_detail if any sub assembly line delete from BOM */                \n" +
                "					UPDATE 	kit_allocation_assy_detail kasd                \n" +
                "					SET 	kasd.updatedBy = pUserID,                  \n" +
                "							kasd.isDeleted = 1,          \n" +
                "							kasd.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "							kasd.deletedBy = pUserId,                    \n" +
                "							kasd.updateByRoleId = pRoleID,                    \n" +
                "							kasd.deleteByRoleId = pRoleID                \n" +
                "						WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID      \n" +
                "								AND NOT EXISTS (  	SELECT 	1                \n" +
                "													FROM 	tempResultForUpdate r                \n" +
                "													WHERE 	r.salesOrderDetailID = kasd.refSalesOrderDetID                \n" +
                "															AND r.prPerPartID = kasd.partId  	)                \n" +
                "								AND kasd.isDeleted = 0;                \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems if any sub assembly or any mfr pn line remove from BOM */                \n" +
                "					UPDATE 	kit_allocation_lineitems kal                \n" +
                "					SET 	kal.updatedBy = pUserID,                  \n" +
                "						kal.isDeleted = 1,          \n" +
                "						kal.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "						kal.deletedBy = pUserId,                    \n" +
                "						kal.updateByRoleId = pRoleID,                    \n" +
                "						kal.deleteByRoleId = pRoleID                \n" +
                "					WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID                \n" +
                "							-- AND kal.partID = pPartID                \n" +
                "							AND NOT EXISTS ( 	SELECT 	1                \n" +
                "								FROM 	tempResultForLineItem r                \n" +
                "								WHERE 	r.refSalesOrderDetID = kal.refSalesOrderDetID                \n" +
                "										AND r.partID = kal.partID                \n" +
                "										AND r.id = kal.refRfqLineitem  	)                \n" +
                "							AND kal.isDeleted = 0;                \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any line delete from BOM*/                \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)                \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate                \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala                \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID                \n" +
                "							-- AND kala.partID = pPartID                \n" +
                "							AND NOT EXISTS (  SELECT 	1                \n" +
                "												FROM 	tempResultForLineItemAlternatePart r                \n" +
                "												WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID                \n" +
                "														AND r.partID = kala.partID                \n" +
                "														AND r.mfgPNID = kala.mfgPNID                \n" +
                "														AND r.rfqLineitemsID = kala.refRfqLineitem)                \n" +
                "							AND kala.isDeleted = 0;                \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems_alternatepart if any sub assembly or any mfr pn line remove from BOM */                \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala                \n" +
                "					SET 	kala.updatedBy = pUserID,                  \n" +
                "						kala.isDeleted = 1,          \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),          \n" +
                "						kala.deletedBy = pUserId,                    \n" +
                "						kala.updateByRoleId = pRoleID,                    \n" +
                "						kala.deleteByRoleId = pRoleID                \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID         \n" +
                "							AND NOT EXISTS (  SELECT 	1                \n" +
                "								FROM 	tempResultForLineItemAlternatePart r                \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID                \n" +
                "										AND r.rfqLineitemsID = kala.refRfqLineitem              \n" +
                "										AND r.partID = kala.partID                \n" +
                "										AND r.mfgPNID = kala.mfgPNID  )                \n" +
                "						AND kala.isDeleted = 0;                \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate */                \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN                \n" +
                "						UPDATE 	kit_allocation ka                  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,                  \n" +
                "							ka.returnUnit = ka.allocatedUnit,                  \n" +
                "							ka.returnUOM = ka.allocatedUOM,                  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),                    \n" +
                "							ka.updatedBy = pUserID,                                    \n" +
                "							ka.updateByRoleId = pRoleID,                                    \n" +
                "							ka.`status` = 'D',                              \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'                  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)            \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)                \n" +
                "								AND ka.`status` = 'A';                 \n" +
                "					END IF;                \n" +
                "  \n" +
                "				END IF;                \n" +
                "  \n" +
                "				/* Update kit_allocation_assy_detail if any change in sales order detail line or any change in kit */                \n" +
                "				/* In case of pActionStatus = 'UPDATE' we have to update only kit_allocation_assy_detail table becuse we only update qty, mrpqty, kitqty and update assy case cover in above query*/                \n" +
                "				UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd         \n" +
                "				SET 	ka.partId = tsd.prPerPartID,         \n" +
                "					ka.refSalesOrderDetID = tsd.salesOrderDetailID,         \n" +
                "					ka.perAssyBuildQty = tsd.perAssyBuildQty,         \n" +
                "					ka.totalAssyBuildQty = tsd.totalAssyBuildQty,         \n" +
                "					ka.kitQty = tsd.kitQty,         \n" +
                "					ka.totalAssyMrpQty = tsd.totalAssyMrpQty,         \n" +
                "					ka.mrpQty = tsd.mrpQty,         \n" +
                "					ka.bomInternalVersion = tsd.liveInternalVersion,       \n" +
                "					ka.bomInternalVersionString = tsd.liveVersion,      \n" +
                "					ka.bomAssyLevel = tsd.bomAssyLevel,         \n" +
                "					ka.updatedBy = tsd.updatedBy,                                    \n" +
                "					ka.updateByRoleId = tsd.updateByRoleId                                    \n" +
                "				WHERE	ka.id IS NOT NULL                \n" +
                "						AND ka.partId = tsd.prPerPartID                 \n" +
                "						AND ka.refSalesOrderDetID = tsd.salesOrderDetailID                 \n" +
                "						AND ka.isDeleted = 0;                \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')    \n" +
                " THEN                \n" +
                "  \n" +
                "					/* Update kit_allocation_lineitems table if any change in BOM line */                \n" +
                "					UPDATE 	kit_allocation_lineitems kal, tempResultForLineItem tlt         \n" +
                "					SET 	kal.refSalesOrderDetID = tlt.refSalesOrderDetID,         \n" +
                "						kal.refRfqLineitem = tlt.id,         \n" +
                "						kal.lineID = tlt.lineID,         \n" +
                "						kal.qpa = tlt.qpa,                       \n" +
                "						kal.dnpQty = tlt.dnpQty,                \n" +
                "						kal.isInstall = tlt.isInstall,               \n" +
                "						kal.isPurchase = tlt.isPurchase,               \n" +
                "						kal.isBuyDNPQty = tlt.isBuyDNPQty,                   \n" +
                "						kal.custPN = tlt.custPN,         \n" +
                "						kal.custPNID = tlt.custPNID,         \n" +
                "						kal.uomID = tlt.uomID,         \n" +
                "						kal.partID = tlt.partID,                   \n" +
                "						kal.numOfPosition = tlt.numOfPosition,          \n" +
                "						kal.description = tlt.description,         \n" +
                "						kal.restrictCPNUseWithPermissionStep = tlt.restrictCPNUseWithPermissionStep,         \n" +
                "						kal.restrictCPNUsePermanentlyStep = tlt.restrictCPNUsePermanentlyStep,         \n" +
                "						kal.restrictCPNUseInBOMStep = tlt.restrictCPNUseInBOMStep,         \n" +
                "						kal.customerApprovalCPN = tlt.customerApprovalCPN,                             \n" +
                "						kal.isNotRequiredKitAllocation = tlt.isNotRequiredKitAllocation,                          \n" +
                "						kal.notRequiredKitAllocationReason = tlt.notRequiredKitAllocationReason,                   \n" +
                "						kal.updatedBy = pUserID,        \n" +
                "						kal.updateByRoleId = pRoleID,        \n" +
                "                        kal.refDesig = tlt.refDesig,        \n" +
                "                        kal.customerRev = tlt.customerRev,        \n" +
                "                        kal.customerDescription = tlt.customerDescription,        \n" +
                "                        kal.dnpDesig = tlt.dnpDesig,        \n" +
                "                        kal.programingStatus = tlt.programingStatus,        \n" +
                "                        kal.cust_lineID = tlt.cust_lineID,        \n" +
                "                        kal.substitutesAllow = tlt.substitutesAllow,        \n" +
                "                        kal.numOfRows = tlt.numOfRows,        \n" +
                "                        kal.customerPartDesc = tlt.customerPartDesc,      \n" +
                "                        kal.qpaDesignatorStep = tlt.qpaDesignatorStep,      \n" +
                "						kal.mergeLines = tlt.mergeLines,      \n" +
                "						kal.lineMergeStep = tlt.lineMergeStep,      \n" +
                "						kal.duplicateCPNStep = tlt.duplicateCPNStep,      \n" +
                "						kal.requireMountingTypeStep = tlt.requireMountingTypeStep,      \n" +
                "						kal.requireFunctionalTypeStep = tlt.requireFunctionalTypeStep,      \n" +
                "						kal.refDesigCount = tlt.refDesigCount,      \n" +
                "						kal.isObsoleteLine = tlt.isObsoleteLine,      \n" +
                "						kal.customerApprovalForQPAREFDESStep = tlt.customerApprovalForQPAREFDESStep,      \n" +
                "						kal.customerApprovalForBuyStep = tlt.customerApprovalForBuyStep,      \n" +
                "						kal.customerApprovalForPopulateStep = tlt.customerApprovalForPopulateStep,      \n" +
                "						kal.customerApprovalCPNBy = tlt.customerApprovalCPNBy,      \n" +
                "						kal.customerApprovalCPNDate = tlt.customerApprovalCPNDate,      \n" +
                "						kal.dnpDesigCount = tlt.dnpDesigCount,      \n" +
                "						kal.requireMountingTypeError = tlt.requireMountingTypeError,      \n" +
                "						kal.requireFunctionalTypeError = tlt.requireFunctionalTypeError,      \n" +
                "						kal.dnpQPARefDesStep = tlt.dnpQPARefDesStep,      \n" +
                "						kal.customerApprovalForDNPQPAREFDESStep = tlt.customerApprovalForDNPQPAREFDESStep,      \n" +
                "						kal.customerApprovalForDNPBuyStep = tlt.customerApprovalForDNPBuyStep,      \n" +
                "						kal.isSupplierToBuy = tlt.isSupplierToBuy      \n" +
                "					WHERE	kal.id IS NOT NULL                 \n" +
                "							AND kal.refRfqLineitem = tlt.id                 \n" +
                "							AND kal.refSalesOrderDetID = tlt.refSalesOrderDetID                 \n" +
                "							AND kal.isDeleted = 0;               \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any change in MFR PN on particular line*/                \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)                \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate                \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala                \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID      \n" +
                "							AND NOT EXISTS (                \n" +
                "								SELECT 	1                \n" +
                "								FROM 	tempResultForLineItemAlternatePart r                \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID                \n" +
                "										AND r.partID = kala.partID                \n" +
                "										AND r.mfgPNID = kala.mfgPNID                \n" +
                "										AND kala.id IS NOT NULL                \n" +
                "							)                \n" +
                "							AND kala.isDeleted = 0;                \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala, tempResultForLineItemAlternatePart tlia         \n" +
                "					SET 	kala.refSalesOrderDetID = tlia.refSalesOrderDetID,         \n" +
                "						kala.refRfqLineitem = tlia.rfqLineItemsID,         \n" +
                "						kala.refRfqLineItemAlternatePartId = tlia.id,         \n" +
                "						kala.distributor = tlia.distributor,         \n" +
                "						kala.distMfgCodeID = tlia.distMfgCodeID,         \n" +
                "						kala.distPN = tlia.distPN,         \n" +
                "						kala.distMfgPNID = tlia.distMfgPNID,        \n" +
                "						kala.mfgCode = tlia.mfgCode,        \n" +
                "						kala.mfgCodeID = tlia.mfgCodeID,        \n" +
                "						kala.mfgPN = tlia.mfgPN,        \n" +
                "						kala.mfgPNID = tlia.mfgPNID,           \n" +
                "						kala.description = tlia.description,                    \n" +
                "						kala.RoHSStatusID = tlia.RoHSStatusID,        \n" +
                "						kala.parttypeID = tlia.parttypeID,        \n" +
                "						kala.mountingtypeID = tlia.mountingtypeID,        \n" +
                "						kala.partcategoryID = tlia.partcategoryID,        \n" +
                "						kala.partID = tlia.partID,                   \n" +
                "						kala.customerApproval = tlia.customerApproval,              \n" +
                "						kala.customerApprovalBy = tlia.customerApprovalBy,              \n" +
                "						kala.customerApprovalDate = tlia.customerApprovalDate,              \n" +
                "						kala.restrictUsePermanentlyStep = tlia.restrictUsePermanentlyStep,        \n" +
                "						kala.restrictUseWithPermissionStep = tlia.restrictUseWithPermissionStep,        \n" +
                "						kala.restrictUseInBOMStep = tlia.restrictUseInBOMStep,             \n" +
                "						kala.restrictUseInBOMWithPermissionStep = tlia.restrictUseInBOMWithPermissionStep,           \n" +
                "						kala.mismatchMountingTypeStep = tlia.mismatchMountingTypeStep,                         \n" +
                "						kala.approvedMountingType = tlia.approvedMountingType,             \n" +
                "						kala.mismatchFunctionalCategoryStep = tlia.mismatchFunctionalCategoryStep,            \n" +
                "						kala.uomMismatchedStep = tlia.uomMismatchedStep,            \n" +
                "						kala.restrictUseInBOMExcludingAliasStep = tlia.restrictUseInBOMExcludingAliasStep,          \n" +
                "						kala.restrictUseInBOMExcludingAliasWithPermissionStep = tlia.restrictUseInBOMExcludingAliasWithPermissionStep,          \n" +
                "						kala.restrictUseExcludingAliasStep = tlia.restrictUseExcludingAliasStep,          \n" +
                "						kala.restrictUseExcludingAliasWithPermissionStep = tlia.restrictUseExcludingAliasWithPermissionStep,      \n" +
                "						kala.updatedBy = pUserID,        \n" +
                "						kala.updateByRoleId=pRoleID,                                    \n" +
                "						kala.deleteByRoleId=tlia.deleteByRoleId,      \n" +
                "                        kala.mfgVerificationStep = tlia.mfgVerificationStep,      \n" +
                "						kala.mfgDistMappingStep = tlia.mfgDistMappingStep,      \n" +
                "						kala.mfgCodeStep = tlia.mfgCodeStep,      \n" +
                "						kala.distVerificationStep = tlia.distVerificationStep,      \n" +
                "						kala.distCodeStep = tlia.distCodeStep,      \n" +
                "						kala.getMFGPNStep = tlia.getMFGPNStep,      \n" +
                "						kala.obsoletePartStep = tlia.obsoletePartStep,      \n" +
                "						kala.mfgGoodPartMappingStep = tlia.mfgGoodPartMappingStep,      \n" +
                "						kala.mfgPNStep = tlia.mfgPNStep,      \n" +
                "						kala.distPNStep = tlia.distPNStep,      \n" +
                "						kala.badMfgPN = tlia.badMfgPN,      \n" +
                "						kala.distGoodPartMappingStep = tlia.distGoodPartMappingStep,      \n" +
                "						kala.nonRohsStep = tlia.nonRohsStep,      \n" +
                "						kala.epoxyStep = tlia.epoxyStep,      \n" +
                "						kala.invalidConnectorTypeStep = tlia.invalidConnectorTypeStep,      \n" +
                "						kala.duplicateMPNInSameLineStep = tlia.duplicateMPNInSameLineStep,      \n" +
                "						kala.pickupPadRequiredStep = tlia.pickupPadRequiredStep,      \n" +
                "						kala.matingPartRquiredStep = tlia.matingPartRquiredStep,      \n" +
                "						kala.driverToolsRequiredStep = tlia.driverToolsRequiredStep,      \n" +
                "						kala.functionalTestingRequiredStep = tlia.functionalTestingRequiredStep,      \n" +
                "						kala.mismatchValueStep = tlia.mismatchValueStep,      \n" +
                "						kala.mismatchPackageStep = tlia.mismatchPackageStep,      \n" +
                "						kala.mismatchToleranceStep = tlia.mismatchToleranceStep,      \n" +
                "						kala.mismatchTempratureStep = tlia.mismatchTempratureStep,      \n" +
                "						kala.mismatchPowerStep = tlia.mismatchPowerStep,      \n" +
                "						kala.programingRequiredStep = tlia.programingRequiredStep,      \n" +
                "						kala.mismatchColorStep = tlia.mismatchColorStep,      \n" +
                "						kala.isCustomerUnAppoval = tlia.isCustomerUnAppoval,      \n" +
                "						kala.customerUnAppovalBy = tlia.customerUnAppovalBy,      \n" +
                "						kala.customerUnAppovalDate = tlia.customerUnAppovalDate,      \n" +
                "						kala.mismatchNumberOfRowsStep = tlia.mismatchNumberOfRowsStep,      \n" +
                "						kala.partPinIsLessthenBOMPinStep = tlia.partPinIsLessthenBOMPinStep,      \n" +
                "						kala.tbdPartStep = tlia.tbdPartStep,      \n" +
                "						kala.exportControlledStep = tlia.exportControlledStep,      \n" +
                "						kala.isUnlockApprovedPart = tlia.isUnlockApprovedPart,      \n" +
                "						kala.unknownPartStep = tlia.unknownPartStep,      \n" +
                "						kala.defaultInvalidMFRStep = tlia.defaultInvalidMFRStep,      \n" +
                "						kala.suggestedGoodPartStep = tlia.suggestedGoodPartStep,      \n" +
                "						kala.suggestedGoodDistPartStep = tlia.suggestedGoodDistPartStep,      \n" +
                "						kala.mismatchRequiredProgrammingStep = tlia.mismatchRequiredProgrammingStep,      \n" +
                "						kala.mappingPartProgramStep = tlia.mappingPartProgramStep,      \n" +
                "						kala.mismatchCustomPartStep = tlia.mismatchCustomPartStep,      \n" +
                "						kala.suggestedByApplicationMsg = tlia.suggestedByApplicationMsg,      \n" +
                "						kala.suggestedByApplicationStep = tlia.suggestedByApplicationStep,      \n" +
                "						kala.mismatchProgrammingStatusStep = tlia.mismatchProgrammingStatusStep      \n" +
                "					WHERE	kala.id IS NOT NULL                 \n" +
                "							AND kala.refSalesOrderDetID = tlia.refSalesOrderDetID                 \n" +
                "							AND kala.refRfqLineitem = tlia.rfqLineItemsID                 \n" +
                "							AND kala.mfgPNID = tlia.mfgPNID                 \n" +
                "							AND kala.isDeleted = 0;                \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate*/                \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN                \n" +
                "						UPDATE 	kit_allocation ka                  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,                  \n" +
                "							ka.returnUnit = ka.allocatedUnit,                  \n" +
                "							ka.returnUOM = ka.allocatedUOM,                  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),                    \n" +
                "							ka.updatedBy = pUserID,                                    \n" +
                "							ka.updateByRoleId = pRoleID,                                    \n" +
                "							ka.`status` = 'D',                              \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'                  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)            \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)                \n" +
                "								AND ka.`status` = 'A';                 \n" +
                "					END IF;                \n" +
                "				END IF;	                \n" +
                "			END IF;                \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_assy_detail */                \n" +
                "			INSERT INTO kit_allocation_assy_detail (                    \n" +
                "				partId, 		refSalesOrderDetID, 		perAssyBuildQty, 		totalAssyBuildQty,                     \n" +
                "				kitQty,     		totalAssyMrpQty,     		mrpQty,     			bomInternalVersion,                     \n" +
                "				bomInternalVersionString,     				bomAssyLevel,     		createdBy,                     \n" +
                "				updatedBy,		createByRoleId,    		updateByRoleId                    \n" +
                "			)        \n" +
                "			SELECT 	tsd.prPerPartID,		tsd.salesOrderDetailID,		tsd.perAssyBuildQty, 		tsd.totalAssyBuildQty,		                    \n" +
                "				tsd.kitQty,			tsd.totalAssyMrpQty,		tsd.mrpQty,			tsd.liveInternalVersion,	                    \n" +
                "				tsd.liveVersion,		tsd.bomAssyLevel,		tsd.updatedBy, 			tsd.createdBy,		                    \n" +
                "				tsd.createByRoleId, 		tsd.updateByRoleId        \n" +
                "			FROM 	tempResultForUpdate tsd                \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = tsd.prPerPartID                 \n" +
                "						AND kaad.refSalesOrderDetID = tsd.salesOrderDetailID                \n" +
                "						AND kaad.isDeleted = 0                \n" +
                "			WHERE 	kaad.id IS NULL;                \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems */                \n" +
                "			INSERT INTO kit_allocation_lineitems (                    \n" +
                "				refSalesOrderDetID, 		refRfqLineitem, 		lineID, 		qpa,                     \n" +
                "				dnpQty,     			isInstall,     			isPurchase,     	isBuyDNPQty,                     \n" +
                "				custPN,     			custPNID,     			uomID,     		partID,                     \n" +
                "				numOfPosition,  		description,     		restrictCPNUseWithPermissionStep,                     \n" +
                "				restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,     	customerApprovalCPN,    isNotRequiredKitAllocation,                     \n" +
                "				notRequiredKitAllocationReason, createdBy,     			updatedBy,    		createByRoleId,                    \n" +
                "				updateByRoleId,		refDesig,	customerRev,	customerDescription,	dnpDesig,	programingStatus,	        \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,       \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep, duplicateCPNStep, requireMountingTypeStep, requireFunctionalTypeStep,       \n" +
                "				refDesigCount, isObsoleteLine, customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,      \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount, requireMountingTypeError, requireFunctionalTypeError,      \n" +
                "				dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep, customerApprovalForDNPBuyStep, isSupplierToBuy      \n" +
                "			)        \n" +
                "			SELECT 	tlt.refSalesOrderDetID,	    		tlt.id,			tlt.lineID,			tlt.qpa, 		                    \n" +
                "				tlt.dnpQty,				tlt.isInstall,		tlt.isPurchase, 	    	tlt.isBuyDNPQty,               \n" +
                "				tlt.custPN, 	      	    		tlt.custPNID,	    	tlt.uomID, 		    	tlt.partID, 	                    \n" +
                "				tlt.numOfPosition,			tlt.description,	tlt.restrictCPNUseWithPermissionStep, 		                    \n" +
                "				tlt.restrictCPNUsePermanentlyStep,	tlt.restrictCPNUseInBOMStep,				tlt.customerApprovalCPN,	                    \n" +
                "				tlt.isNotRequiredKitAllocation,		tlt.notRequiredKitAllocationReason,    		pUserID,	                 \n" +
                "				pUserID,				pRoleID,     		pRoleID,	tlt.refDesig,	tlt.customerRev,	tlt.customerDescription,        \n" +
                "                tlt.dnpDesig,	tlt.programingStatus,	tlt.cust_lineID,	tlt.substitutesAllow,	tlt.numOfRows, tlt.customerPartDesc,      \n" +
                "                tlt.qpaDesignatorStep, 	tlt.mergeLines, 	tlt.lineMergeStep, 		tlt.duplicateCPNStep, 		tlt.requireMountingTypeStep,      \n" +
                "                tlt.requireFunctionalTypeStep, 	tlt.refDesigCount, 		tlt.isObsoleteLine, 	tlt.customerApprovalForQPAREFDESStep,       \n" +
                "                tlt.customerApprovalForBuyStep, 	tlt.customerApprovalForPopulateStep, 	tlt.customerApprovalCPNBy,       \n" +
                "                tlt.customerApprovalCPNDate, 	tlt.dnpDesigCount, 		tlt.requireMountingTypeError, 	tlt.requireFunctionalTypeError,      \n" +
                "				tlt.dnpQPARefDesStep, 		tlt.customerApprovalForDNPQPAREFDESStep, 		tlt.customerApprovalForDNPBuyStep, 	tlt.isSupplierToBuy      \n" +
                "			FROM 	tempResultForLineItem tlt                \n" +
                "			LEFT JOIN kit_allocation_lineitems kal ON kal.refSalesOrderDetID = tlt.refSalesOrderDetID                \n" +
                "							AND kal.partID = tlt.partID                \n" +
                "							AND kal.refRfqLineitem = tlt.id                \n" +
                "							AND kal.isDeleted = 0                \n" +
                "			WHERE 	kal.id IS NULL;                  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems_alternatepart */       \n" +
                "			INSERT INTO kit_allocation_lineitems_alternatepart (                    \n" +
                "				refSalesOrderDetID,		refKitAllocationLineItemId,     	refRfqLineitem,     		refRfqLineItemAlternatePartId,                     \n" +
                "				distributor,     		distMfgCodeID,     			distPN,     			distMfgPNID,                     \n" +
                "				mfgCode,     			mfgCodeID,     				mfgPN,     			mfgPNID,                     \n" +
                "				description,    		RoHSStatusID,                     \n" +
                "				parttypeID,     		mountingtypeID,     			partcategoryID,     		partID,                     \n" +
                "				customerApproval,     		customerApprovalBy,     		customerApprovalDate,   	restrictUsePermanentlyStep,               \n" +
                "				restrictUseWithPermissionStep, 	restrictUseInBOMStep,     		restrictUseInBOMWithPermissionStep,                     \n" +
                "				mismatchMountingTypeStep,     	approvedMountingType,     		mismatchFunctionalCategoryStep,	uomMismatchedStep,           \n" +
                "				restrictUseInBOMExcludingAliasStep,	    				restrictUseInBOMExcludingAliasWithPermissionStep, 	                    \n" +
                "				restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,                          	createdBy,                     \n" +
                "				updatedBy,    createByRoleId,    	updateByRoleId,   mfgVerificationStep, 	mfgDistMappingStep,      \n" +
                "				mfgCodeStep, distVerificationStep, distCodeStep, getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep,      \n" +
                "				mfgPNStep, distPNStep, badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep,      \n" +
                "				duplicateMPNInSameLineStep, pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep,      \n" +
                "				functionalTestingRequiredStep, mismatchValueStep, mismatchPackageStep, mismatchToleranceStep,      \n" +
                "				mismatchTempratureStep, mismatchPowerStep, programingRequiredStep, mismatchColorStep, isCustomerUnAppoval,      \n" +
                "				customerUnAppovalBy, customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep, tbdPartStep,      \n" +
                "				exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep, suggestedGoodPartStep,      \n" +
                "				suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep, mismatchCustomPartStep,       \n" +
                "				suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep      \n" +
                "			)        \n" +
                "			SELECT 	tlia.refSalesOrderDetID, 	fun_getKitLineItemPKIdForKitAlternate(tlia.rfqLineItemsID, pSalesOrderDetailID) refKitAllocationLineItemId,        \n" +
                "				tlia.rfqLineItemsID,		tlia.id,			tlia.distributor,		tlia.distMfgCodeID, 		                    \n" +
                "				tlia.distPN, 	    		tlia.distMfgPNID,		tlia.mfgCode,			tlia.mfgCodeID, 		                    \n" +
                "				tlia.mfgPN,			tlia.mfgPNID,			tlia.description,	    	      \n" +
                "                tlia.RoHSStatusID,		tlia.parttypeID, 		tlia.mountingtypeID, 			                    \n" +
                "				tlia.partcategoryID,		tlia.partID,			tlia.customerApproval,		tlia.customerApprovalBy,	                    \n" +
                "				tlia.customerApprovalDate,	tlia.restrictUsePermanentlyStep,				tlia.restrictUseWithPermissionStep, 		                    \n" +
                "				tlia.restrictUseInBOMStep,	tlia.restrictUseInBOMWithPermissionStep, 	    		tlia.mismatchMountingTypeStep, 		                    \n" +
                "				tlia.approvedMountingType,	tlia.mismatchFunctionalCategoryStep,		    		tlia.uomMismatchedStep,          \n" +
                "				tlia.restrictUseInBOMExcludingAliasStep,	    		tlia.restrictUseInBOMExcludingAliasWithPermissionStep, 		                    \n" +
                "				tlia.restrictUseExcludingAliasStep,		    		tlia.restrictUseExcludingAliasWithPermissionStep,          \n" +
                "				pUserID, pUserID,    pRoleID,     pRoleID, tlia.mfgVerificationStep, 	tlia.mfgDistMappingStep,      \n" +
                "				tlia.mfgCodeStep, tlia.distVerificationStep, tlia.distCodeStep, tlia.getMFGPNStep, tlia.obsoletePartStep, tlia.mfgGoodPartMappingStep,      \n" +
                "				tlia.mfgPNStep, tlia.distPNStep, tlia.badMfgPN, tlia.distGoodPartMappingStep, tlia.nonRohsStep, tlia.epoxyStep, tlia.invalidConnectorTypeStep,      \n" +
                "				tlia.duplicateMPNInSameLineStep, tlia.pickupPadRequiredStep, tlia.matingPartRquiredStep, tlia.driverToolsRequiredStep,      \n" +
                "				tlia.functionalTestingRequiredStep, tlia.mismatchValueStep, tlia.mismatchPackageStep, tlia.mismatchToleranceStep,      \n" +
                "				tlia.mismatchTempratureStep, tlia.mismatchPowerStep, tlia.programingRequiredStep, tlia.mismatchColorStep, tlia.isCustomerUnAppoval,      \n" +
                "				tlia.customerUnAppovalBy, tlia.customerUnAppovalDate, tlia.mismatchNumberOfRowsStep, tlia.partPinIsLessthenBOMPinStep, tlia.tbdPartStep,      \n" +
                "				tlia.exportControlledStep, tlia.isUnlockApprovedPart, tlia.unknownPartStep, tlia.defaultInvalidMFRStep, tlia.suggestedGoodPartStep,      \n" +
                "				tlia.suggestedGoodDistPartStep, tlia.mismatchRequiredProgrammingStep, tlia.mappingPartProgramStep, tlia.mismatchCustomPartStep,       \n" +
                "				tlia.suggestedByApplicationMsg, tlia.suggestedByApplicationStep, tlia.mismatchProgrammingStatusStep      \n" +
                "			FROM 	tempResultForLineItemAlternatePart tlia                 \n" +
                "			LEFT JOIN kit_allocation_lineitems_alternatepart kala ON tlia.refSalesOrderDetID = kala.refSalesOrderDetID                 \n" +
                "							AND tlia.partID = kala.partID                 \n" +
                "							AND tlia.rfqLineItemsID = kala.refRfqLineitem                \n" +
                "							AND tlia.mfgPNID = kala.mfgPNID                \n" +
                "							AND kala.isDeleted = 0                \n" +
                "			WHERE 	kala.id IS NULL;                \n" +
                "  \n" +
                "			CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);                \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		SELECT 1 AS IsSuccess, NULL AS ErrorCode;	                \n" +
                "	ELSE                 \n" +
                "		SELECT 0 AS IsSuccess, 'ERR_KIT01' AS ErrorCode;                \n" +
                "	END IF;       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;	        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;       \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4813,'2.00','V1','Sproc_CreateKitAllocationAssyDetail Auto Deallocation status changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4813:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-06-2021 *********************************** */
                "ALTER TABLE `component`   \n" +
                "ADD COLUMN `shelfLifeAcceptanceDays` INT NULL DEFAULT NULL,  \n" +
                "ADD COLUMN `maxShelfLifeAcceptanceDays` INT NULL DEFAULT NULL,  \n" +
                "ADD COLUMN `maxShelfListDaysThresholdPercentage` DECIMAL(18,8) NULL DEFAULT NULL;  \n" +
                /* **************************** Add Script Version -> 18-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4814,'2.00','V1',' User Story 34072: UMID Creation Life Acceptance threshold logic change - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4814:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetManufacturer` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(                          \n" +
                "	IN ppageIndex INT,                          \n" +
                "	IN precordPerPage INT,                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383),                          \n" +
                "	-- IN pIsMFG TINYINT(1),                          \n" +
                "	IN pmfgType VARCHAR(20),                          \n" +
                "	IN pisCustOrDisty TINYINT              \n" +
                "    )  \n" +
                "BEGIN                           \n" +
                "  \n" +
                "	DECLARE pOffset INT;                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                                 \n" +
                "    DECLARE vTimeZone VARCHAR(50);                                 \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                         \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"                          \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,                            \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,                                      \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,    \n" +
                "		mc.isSupplierEnable,  \n" +
                "		mc.externalSupplierOrder,              \n" +
                "		mc.systemID,mc.customerSystemID,                    \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,                    \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,       \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,                    \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,                    \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,                    \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
                "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,                            \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,                        \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,                                      \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,                                     \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,                                      \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,                                      \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                            \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,             \n" +
                "		(SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst smm WHERE smm.supplierid=mc.id and smm.isDeleted= 0) mappingMfr,                                           \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'                                                  \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'                                                  \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'                                                   \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,                                                              \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,                                    \n" +
                "            wbw.acquired,                                                                   \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),                  \n" +
                "        '@@@',fun_getUserNameByID(createdBy),                  \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')                  \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias                                                                     \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,                                                              \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,                                                               \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,                                           \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'                                                                 \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,                                    \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'                          \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,                                    \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'                          \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`                                                       \n" +
                "		 ,gc.gencCategoryName,                          \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'                          \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'                          \n" +
                "		END AS isCustOrDistyText,                          \n" +
                "        mc.displayOrder,              \n" +
                "        mc.invoicesRequireManagementApproval,              \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'                          \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,          \n" +
                "		mc.taxID,          \n" +
                "        mc.accountRef,          \n" +
                "        mc.paymentMethodID,          \n" +
                "		pc.gencCategoryName paymentMethodName,          \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,        \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,        \n" +
                "		mc.acctId        \n" +
                "	FROM mfgcodemst mc            \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0        \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0          \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0          \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,                          \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`                          \n" +
                "			FROM  who_bought_who wbwi                          \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id                          \n" +
                "            AND wbwi.isDeleted = 0) wbw                          \n" +
                "			ON wbw.buyTo = mc.id                          \n" +
                "	WHERE mc.isdeleted = 0                                                               \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");                                                    \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN          \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);                                               \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                    \n" +
                "	ELSE                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");                          \n" +
                "	END IF;	                                                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                                    \n" +
                "	END IF;	                                                                    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                    \n" +
                "	ELSE	                                                                    \n" +
                "		SET rowNumWhere = '';                                                                    \n" +
                "	END IF;	                                                                    \n" +
                "  \n" +
                "   /* to get total count of rows */                                                   \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                  \n" +
                "	EXECUTE query2;                                                  \n" +
                "	DEALLOCATE PREPARE query2;                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                              \n" +
                "	 PREPARE query1 FROM @SQLStatement2;                                                  \n" +
                "	 EXECUTE query1;                                                  \n" +
                "	DEALLOCATE PREPARE query1; 	                                            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4815,'2.00','V1',' Upadte procedure Sproc_GetManufacturer- Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4815:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-06-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseIncomingInspectionList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseIncomingInspectionList`(  \n" +
                "    IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pInspectionTempId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @tempLeftJoin = concat('LEFT JOIN `inspection_template_requirement_det` AS itrd  \n" +
                "				ON itrd.`inspectionRequirementId` = im.`id`  \n" +
                "                AND itrd.`inspectionTemplateId` = ',pInspectionTempId,'  \n" +
                "                AND itrd.`isDeleted`=0 ');  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT im.id, im.isActive, gc.`gencCategoryID`,  \n" +
                "			(CASE WHEN (`im`.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (`im`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,  \n" +
                "			(CASE WHEN im.requiementType = 'R' THEN 'Requirement'  \n" +
                "				WHEN im.requiementType = 'C' THEN 'Comment' END) AS requiementType,      \n" +
                "			im.systemGenerated,  \n" +
                "            \",(CASE WHEN pInspectionTempId IS NOT NULL AND pInspectionTempId  != '' THEN 'itrd.id' ELSE 'null' END),\" AS TemplateDetId,  \n" +
                "            \",(CASE WHEN pInspectionTempId IS NOT NULL AND pInspectionTempId  != '' THEN 'itrd.inspectionTemplateId' ELSE 'null' END),\" AS templateId,  \n" +
                "            (CASE WHEN (im.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (im.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "			im.requirement,  \n" +
                "			fun_checkForInspectionId(im.id) isRequirementReference,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(im.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_getUserNameByID(im.createdBy) createdBy,  \n" +
                "			fun_getUserNameByID(im.updatedBy) updatedBy,  \n" +
                "			fun_getRoleByID(im.createByRoleId) createByRoleId,  \n" +
                "			fun_getRoleByID(im.updateByRoleId) updateByRoleId,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(im.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "            case when gc.gencCategoryCode is not null then concat('(',gc.gencCategoryCode,') ',gc.gencCategoryName) else gc.gencCategoryName End AS partRequirementCategoryName  \n" +
                "            FROM `inspection_mst` AS im  \n" +
                "            JOIN `genericcategory` AS gc  \n" +
                "				ON im.`partRequirementCategoryID` = gc.`gencCategoryID`  \n" +
                "				AND gc.`isDeleted`=0  \n" +
                "			\", (CASE WHEN pInspectionTempId IS NOT NULL AND pInspectionTempId  != '' THEN @tempLeftJoin ELSE '' END) ,\"  \n" +
                "            WHERE im.`isDeleted` = 0 \");  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY requirement ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY templateId DESC,\" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) AS TotalRecord FROM ( \",@tempquery,\" ) c WHERE 1=1 AND \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT * FROM ( \", @tempquery,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4816,'2.00','V1',' Bug 34692 & Bug 34303 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4816:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveWhereUsedMFGCodeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWhereUsedMFGCodeList`(                            \n" +
                "	IN ppageIndex INT,                            \n" +
                "	IN precordPerPage INT,                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "    IN pMFGCode VARCHAR(500),          \n" +
                "    IN pIsManufacture TINYINT        \n" +
                ")  \n" +
                "BEGIN           \n" +
                "	DECLARE pOffset INT(11);                             \n" +
                "	DECLARE rowNumWhere VARCHAR(255);        \n" +
                "    DECLARE SQLMFGStatement varchar(100);        \n" +
                "    DECLARE SQLComponentStatement varchar(100);            \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                       \n" +
                "    DECLARE vTimeZone VARCHAR(50);                    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;         \n" +
                "  \n" +
                "    SET @SQLMFGWhereClause =\"  \";           \n" +
                "    SET @SQLComponentWhereClause =\"  \";     \n" +
                "  \n" +
                "	if pIsManufacture = 1 then                \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_mfgCode = '\", pMFGCode, \"' or rla.mfgCode = '\", pMFGCode, \"') \");        \n" +
                "        SET @SQLComponentWhereClause=  concat(\" and mfgType = 'MFG' \");       \n" +
                "	else       \n" +
                "		SET @SQLComponentWhereClause=  concat(\" and mfgType = 'DIST' \");       \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_distributor = '\", pMFGCode, \"' or rla.distributor = '\", pMFGCode, \"') \");          \n" +
                "	end if;        \n" +
                "  \n" +
                "    set @tempQuery =  concat(\"select (CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPN ELSE rla.distPN END) as MFGPN        \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgCode ELSE rla.distributor END) as MFGCode        \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgCode ELSE rla.org_distributor END) as orgMFGCode                \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgPN ELSE rla.org_distPN END) as orgMFGPN        \n" +
                "							,rla.rfqLineItemsID as lineItemID        \n" +
                "							,rl.lineID as lineID        \n" +
                "                            ,assyDet.PIDCode assyCode             \n" +
                "							,assyDet.mfgPN assyMfgPN          \n" +
                "                            ,assyDet.id partId       \n" +
                "                            ,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPNID ELSE rla.distMfgPNID END) as mfgPNID      \n" +
                "							,assyDet.isCustom        \n" +
                "							,assyDet.restrictUsePermanently        \n" +
                "							,assyDet.restrictUSEwithpermission        \n" +
                "							,assyDet.restrictPackagingUsePermanently        \n" +
                "							,assyDet.restrictPackagingUseWithpermission  \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.isCustom ELSE distDet.isCustom END) mfgIsCustom  \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictUsePermanently ELSE distDet.restrictUsePermanently END) mfgRestrictUsePermanently  \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictUSEwithpermission ELSE distDet.restrictUSEwithpermission END)  mfgRestrictUSEwithpermission  \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictPackagingUsePermanently ELSE distDet.restrictPackagingUsePermanently END)  mfgRestrictPackagingUsePermanently  \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictPackagingUseWithpermission ELSE distDet.restrictPackagingUseWithpermission END)  mfgRestrictPackagingUseWithpermission  \n" +
                "                            ,fun_getUserNameByID(rla.createdBy) createdbyvalue         \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(rla.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                    \n" +
                "                            ,1 Type        \n" +
                "						from rfq_lineitems_alternatepart as rla        \n" +
                "						left join rfq_lineitems as rl on rla.rfqLineItemsID = rl.id and rl.isDeleted = 0         \n" +
                "						left join component assyDet on rla.partId = assyDet.id and assyDet.isDeleted = 0    \n" +
                "                        left join component mfgDet on rla.mfgPNID = mfgDet.id and mfgDet.isDeleted = 0  \n" +
                "						left join component distDet on rla.distMfgPNID = distDet.id and assyDet.isDeleted = 0  \n" +
                "						where rla.isDeleted = 0  \", @SQLMFGWhereClause    \n" +
                "                        ,\" union all        \n" +
                "                        select c.mfgPN as MFGPN, mfg.mfgCode as MFGCode        \n" +
                "							,c.mfrNameText as orgMFGCode  \n" +
                "							,c.mfrNameText as orgMFGPN        \n" +
                "							,null as lineItemID, null as lineID        \n" +
                "                            ,c.PIDCode assyCode             \n" +
                "							,c.mfgPN assyMfgPN            \n" +
                "                            ,c.id partId        \n" +
                "                            ,c.id mfgPNID      \n" +
                "                            ,c.isCustom        \n" +
                "							,c.restrictUsePermanently        \n" +
                "							,c.restrictUSEwithpermission        \n" +
                "							,c.restrictPackagingUsePermanently        \n" +
                "							,c.restrictPackagingUseWithpermission   \n" +
                "                            ,c.isCustom mfgIsCustom  \n" +
                "							,c.restrictUsePermanently as mfgRestrictUsePermanently  \n" +
                "							,c.restrictUSEwithpermission as mfgRestrictUSEwithpermission  \n" +
                "							,c.restrictPackagingUsePermanently as mfgRestrictPackagingUsePermanently  \n" +
                "							,c.restrictPackagingUseWithpermission as mfgRestrictPackagingUseWithpermission  \n" +
                "                            ,fun_getUserNameByID(c.createdBy) createdbyvalue         \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                    \n" +
                "							,2 Type        \n" +
                "						from component as c        \n" +
                "							left join mfgcodemst mfg on c.mfgcodeID = mfg.id and mfg.isDeleted = 0 where c.isDeleted = 0    \n" +
                "                            and (c.mfrNameText = '\", pMFGCode, \"' or mfg.mfgCode = '\", pMFGCode, \"')\", @SQLComponentWhereClause);        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "		SET pOrderBy = \"ORDER BY MFGCode ASC\";                          \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	END IF;	                            \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "		SET pWhereClause = '1=1' ;                            \n" +
                "	END IF;	                            \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                         \n" +
                "  \n" +
                "	/* to get total count of rows */                       \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                      \n" +
                "		where \", pWhereClause , \" \" , pOrderBy, rowNumWhere);             \n" +
                "	PREPARE query1 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4817,'2.00','V1',' Bug 34741: Supplier Master: Where Used Pop-up : Digikey, Findchip, Google icon is missing for SPN added using BOM.  - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4817:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-06-2021 *********************************** */
                "INSERT INTO `systemconfigrations` (`key`, `values`) VALUES ('DefaultTheme', 'default');  \n" +
                "INSERT INTO `systemconfigrations` (`key`, `values`) VALUES ('DemoTheme', '0');  \n" +
                /* **************************** Add Script Version -> 21-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4818,'2.00','V1',' User Story 34526: Theme configuration in existing application - Ritul '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4818:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(          \n" +
                "	IN ppageIndex INT,          \n" +
                "	IN precordPerPage INT,          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN psupplierID VARCHAR(16000),          \n" +
                "	IN pshippingMethodId VARCHAR(16000),          \n" +
                "	IN psearchposotype VARCHAR(10),          \n" +
                "	IN psearchposotext VARCHAR(1000),          \n" +
                "	IN ppartIds VARCHAR(1000),         \n" +
                "    IN ppolinestatus VARCHAR(10),          \n" +
                "	IN ppostatus VARCHAR(10),          \n" +
                "	IN pfromDate DATE,          \n" +
                "	IN ptoDate DATE          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT;          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);          \n" +
                "	DECLARE vTimeZone VARCHAR(50);          \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;          \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;          \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"          \n" +
                "		SELECT  pod.id,          \n" +
                "				pom.id as refPurchaseOrderID,          \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,          \n" +
                "				pod.mfgPartID,          \n" +
                "				pod.packagingID,          \n" +
                "				pod.supplierPartID,          \n" +
                "				pod.partDescription,          \n" +
                "				pod.pcbPerArray,          \n" +
                "				pod.rohsStatusID,          \n" +
                "				pod.internalRef,          \n" +
                "				pod.qty,          \n" +
                "				pod.price,          \n" +
                "				pom.shippingMethodID,          \n" +
                "				(pod.qty * pod.price) extPrice,          \n" +
                "				pod.totalRelease,          \n" +
                "				pod.lineComment,          \n" +
                "				pod.lineID,          \n" +
                "				pod.supplierQuoteNumber,          \n" +
                "				pom.poDate,          \n" +
                "				pom.poRevision,          \n" +
                "				pom.soNumber,          \n" +
                "				pom.soDate,          \n" +
                "				c.mfgPN,          \n" +
                "				c.pidCode,          \n" +
                "				c.unit,          \n" +
                "				c.iscustom,          \n" +
                "				c.partType,          \n" +
                "				rr.name AS rohsName,          \n" +
                "				rr.rohsIcon,          \n" +
                "				cp.name AS packagingName,          \n" +
                "				mc.mfgCode,          \n" +
                "				mc.mfgName,          \n" +
                "				mc.id As mfgcodeID,          \n" +
                "				pom.poNumber,          \n" +
                "				pom.status,          \n" +
                "				pom.carrierID,          \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,          \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,          \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,          \n" +
                "				vups.totalReceivedQty,          \n" +
                "				vups.totalPendingQty,          \n" +
                "				vups.poLineCompleteReason,           \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,          \n" +
                "				concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,          \n" +
                "				fun_getUnitNameByID(c.uom) uomName,          \n" +
                "				sc.mfgPN supplierPN,          \n" +
                "				pom.supplierID,          \n" +
                "				pom.termsID,          \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,          \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,          \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,          \n" +
                "				pom.carrierAccountNumber,          \n" +
                "				pom.poComment,          \n" +
                "				pom.shippingComment,          \n" +
                "				pod.internalLineComment,          \n" +
                "				m.mfgcode as supplierMfgName,          \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,          \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,          \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,          \n" +
                "				CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,          \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,          \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,          \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,          \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,          \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,          \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,          \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,          \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId          \n" +
                "		FROM purchase_order_det pod       \n" +
                "		left JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0          \n" +
                "		left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id          \n" +
                "		left JOIN mfgcodemst m ON m.id=pom.supplierID          \n" +
                "		left JOIN component c ON c.id=pod.mfgPartID          \n" +
                "		left join component sc on sc.id=pod.supplierPartID          \n" +
                "		left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID          \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID          \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID          \n" +
                "		WHERE pod.isdeleted=0          \n" +
                "	\");           \n" +
                "	IF(psupplierID IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');          \n" +
                "	END IF;          \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');          \n" +
                "	END IF;          \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN          \n" +
                "		IF(psearchposotype='C')THEN          \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');          \n" +
                "		ELSE          \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');          \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');          \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''')');          \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate<=''',ptoDate,''')');          \n" +
                "	END IF;          \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when c.partType=4 and pom.poWorkingStatus=\"C\" then \"C\" else ifnull(vups.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');          \n" +
                "	END IF;          \n" +
                "	IF(ppostatus IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when pom.poWorkingStatus=\"C\" then \"C\" when pom.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');          \n" +
                "	END IF;          \n" +
                "	IF(ppartIds IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');          \n" +
                "	END IF;          \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);          \n" +
                "	END IF;          \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1';          \n" +
                "	END IF;          \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN          \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);          \n" +
                "	ELSE          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;          \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query1 FROM @SQLStatement2;          \n" +
                "	EXECUTE query1;           \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4819,'2.00','V1',' Sproc_RetrievePurchaseOrderPerLineDeatils - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4819:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_HistoryByTableName`;  \n" +
                "CREATE PROCEDURE `Sproc_HistoryByTableName`(  \n" +
                "	IN pID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pTableName VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_HistoryByTableName = CONCAT(\"SELECT  \n" +
                "		ID,  \n" +
                "        Tablename,  \n" +
                "        RefTransID,  \n" +
                "        Colname,  \n" +
                "        Oldval,  \n" +
                "        Newval,  \n" +
                "		fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM dataentrychange_auditlog WHERE (RefTransID='\",pID,\"' AND Tablename='\",pTableName,\"')  \n" +
                "	\");  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HistoryByTableName,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HistoryByTableName,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP function IF EXISTS `fun_getChartOfAccountsCodeNameByID`;  \n" +
                "CREATE FUNCTION `fun_getChartOfAccountsCodeNameByID`(            \n" +
                "	pChartOfAccountsID INT(11)          \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN            \n" +
                "	DECLARE v_ChartOfAccountsCodeName VARCHAR(100);             \n" +
                "	SELECT 	(      \n" +
                "			CASE       \n" +
                "				WHEN acct_code IS NOT NULL THEN        \n" +
                "					CONCAT('(', acct_code, ') ', acct_name)      \n" +
                "				ELSE      \n" +
                "					acct_name      \n" +
                "			END       \n" +
                "		) chartOfAccountsCodeName       \n" +
                "	INTO 	v_ChartOfAccountsCodeName  \n" +
                "	FROM 	acct_acctmst       \n" +
                "	WHERE  	acct_id = pChartOfAccountsID  \n" +
                "			AND isDeleted = 0;             \n" +
                "	RETURN v_ChartOfAccountsCodeName;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4820,'2.00','V1',' User Story 32182: Maintain Change History of supplier /customer / MFR master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4820:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4821,'2.00','V1',' User Story 32182: Maintain Change History of supplier /customer / MFR master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4821:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "INSERT INTO page_detail(`pageName`,`RO`,`RW`,`pageRoute`,`pageURL`,`menuName`,`hasChild`,`iconClass`,`isActive`,`createdBy`,`isDisplay`,`displayMenuName`,`isAllowAsHomePage`,`isPopup`,`isHideFromMenuList`,`isReadOnlyDeveloped`) VALUES ('Manage Customer History',0,0,'app.customer.managecustomer.history','/history/:customerType/:cid','Manage Customer History',0,'icons-manage-customer',1,1,1,'Customer',0,0,0,0);  \n" +
                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Manage Customer';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid WHERE pageName='Manage Customer History';  \n" +
                "INSERT INTO page_detail(`pageName`,`RO`,`RW`,`pageRoute`,`pageURL`,`menuName`,`hasChild`,`iconClass`,`isActive`,`createdBy`,`isDisplay`,`displayMenuName`,`isAllowAsHomePage`,`isPopup`,`isHideFromMenuList`,`isReadOnlyDeveloped`) VALUES ('Manage Supplier History',0,0,'app.supplier.managesupplier.history','/history/:customerType/:cid','Manage Supplier History',0,'icons-manage-supplier',1,1,1,'Supplier',0,0,0,0);  \n" +
                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Manage Supplier';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid WHERE pageName='Manage Supplier History';  \n" +
                "INSERT INTO page_detail(`pageName`,`RO`,`RW`,`pageRoute`,`pageURL`,`menuName`,`hasChild`,`iconClass`,`isActive`,`createdBy`,`isDisplay`,`displayMenuName`,`isAllowAsHomePage`,`isPopup`,`isHideFromMenuList`,`isReadOnlyDeveloped`) VALUES ('Manage Manufacturer History',0,0,'app.manufacturer.managemanufacturer.history','/history/:customerType/:cid','Manage Manufacturer History',0,'icons-manage-manufacturer',1,1,1,'Manufacturer',0,0,0,0);  \n" +
                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Manage Manufacturer';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid WHERE pageName='Manage Manufacturer History';  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4822,'2.00','V1',' User Story 32182: Maintain Change History of supplier /customer / MFR master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4822:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "ALTER TABLE packingslip_invoice_payment_det  \n" +
                "ADD comment VARCHAR(2000);  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment  \n" +
                "ADD offsetAmount DECIMAL(18,8);  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment_det  \n" +
                "ADD refRefundPaymentID INT;  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment_det  \n" +
                "ADD CONSTRAINT FK_packingslip_invoice_payment_det_refRefundPaymentID  \n" +
                "FOREIGN KEY (refRefundPaymentID) REFERENCES packingslip_invoice_payment (id);  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment  \n" +
                "ADD refGencTransModeID INT;  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment_det  \n" +
                "ADD refRefundCustCreditMemoID INT;  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment_det  \n" +
                "ADD CONSTRAINT FK_customer_packingslip_refRefundCustCreditMemoID  \n" +
                "FOREIGN KEY (refRefundCustCreditMemoID) REFERENCES customer_packingslip (id);  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4823,'2.00','V1',' User Story 33544: Customer Refund: Add/Update Screen [GenericTransMode Table And Fields]- Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4823:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getDeallocatedUIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_getDeallocatedUIDList`(  \n" +
                "	IN pPageIndex INT,   \n" +
                "	IN pRecordPerPage INT,   \n" +
                "	IN pOrderBy VARCHAR(255),   \n" +
                "	IN pWhereClause VARCHAR(16383),   \n" +
                "	IN pRefSalesOrderID INT,  \n" +
                "	IN pAssyID INT,   \n" +
                "    IN pPartIDs LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Offset INT;   \n" +
                "	DECLARE v_RowNumWhere VARCHAR(255);   \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);   \n" +
                "    DECLARE v_mfgPnIds LONGTEXT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;   \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;   \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS      \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId    \n" +
                "	FROM 		component c      \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0      \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartIDs)      \n" +
                "				AND c.isDeleted = 0      \n" +
                "	GROUP BY 	mfrPNId;      \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN   \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;   \n" +
                "	ELSE   \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";   \n" +
                "	END IF;   \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN   \n" +
                "		SET pWhereClause = ' 1=1';   \n" +
                "	END IF;   \n" +
                "  \n" +
                "    SET v_mfgPnIds = (SELECT GROUP_CONCAT(m.mfrPNId) FROM temp_mainPartAndPackagingAliesPart m);  \n" +
                "  \n" +
                "    IF(v_mfgPnIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND partID IN (\" ,v_mfgPnIds , \")\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN   \n" +
                "		SET v_Offset = (pPageIndex -1) * pRecordPerPage;   \n" +
                "		SET v_RowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , v_Offset) ;                                                                          \n" +
                "	ELSE   \n" +
                "		SET v_RowNumWhere = '';   \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @temp_Sproc_Deallocated_UMID = CONCAT(\" SELECT	  \n" +
                "				cst.id,			cst.uid,				cst.refcompid,		cst.dateCode, 	   kl.lineID,   \n" +
                "				cst.rohsStatusID UMIDRohsStatusID, 		cst.binID,				cst.uom,   \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate, 	  \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus, 		ka.refBOMLineID,  \n" +
                "				c.PIDCode,		c.mfgPN, 		c.RoHSStatusID rohsID, 		ka.refSalesOrderDetID, 		ka.assyID,  \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 				c.isCustom,   \n" +
                "                fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,   \n" +
                "                c.restrictUsePermanently,			c.restrictUSEwithpermission,   \n" +
                "                c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,   \n" +
                "                cst.isUMIDRestrict, 	ka.partID,    \n" +
                "                ka.returnQty, 			ka.returnUnit,  	 	(IFNULL(ka.returnUnit, 0) * IFNULL(c.noOfPosition, 0)) returnPins,   \n" +
                "                ka.allocatedQty, 		ka.allocatedUnit, 		(IFNULL(ka.allocatedUnit, 0) * IFNULL(c.noOfPosition, 0)) allocatedPins,   \n" +
                "                cst.pkgUnit,			cst.pkgQty, 			(IFNULL(cst.pkgUnit, 0) * IFNULL(c.noOfPosition, 0)) currentPins,   \n" +
                "				fun_getBinNameByID(cst.binID) binName,   \n" +
                "                c.noOfPosition,  \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,   \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,   \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,   \n" +
                "                fun_getUserNameByID(ka.updatedBy) updatedBy,                             \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ka.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt   \n" +
                "		FROM 		component_sid_stock cst                        \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  AND c.isDeleted = 0                                           \n" +
                "		INNER JOIN  kit_allocation ka ON cst.id = ka.refUIDId AND ka.status = 'D'  \n" +
                "		INNER JOIN 	kit_allocation_lineitems kl ON kl.refRfqLineitem = ka.refBOMLineID AND kl.refSalesOrderDetID = \", pRefSalesOrderID ,\"  \n" +
                "		WHERE 		ka.refSalesOrderDetID = \", pRefSalesOrderID ,\"  \n" +
                "					AND ka.assyID = IFNULL(\", pAssyID ,\",ka.assyID)   \n" +
                "					AND ka.status = 'D'   \n" +
                "					AND cst.isDeleted = 0   \n" +
                "		GROUP BY ka.id  \n" +
                "			\");                        \n" +
                "  \n" +
                "	/* to get total count of rows */                                 \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Deallocated_UMID, \" ) c where 1=1 and \", pWhereClause);                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;   \n" +
                "	DEALLOCATE PREPARE query1;   \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Deallocated_UMID,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , v_RowNumWhere);                                \n" +
                "	PREPARE query1 FROM @SQLStatement2;   \n" +
                "	EXECUTE query1;   \n" +
                "	DEALLOCATE PREPARE query1;   \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseIndication`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseIndication`(                                	                         \n" +
                "	pNextReleaseDate DATETIME,        \n" +
                "    pShortagePer INT    \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                                        \n" +
                "		DECLARE V_Indication LONGTEXT;                \n" +
                "		DECLARE V_ShortageIndication INT;          \n" +
                "		IF(pShortagePer!=100 AND pShortagePer!=0 AND pShortagePer <= 30 )THEN        \n" +
                "				SET V_ShortageIndication=1;         \n" +
                "			ELSE   \n" +
                "				SET V_ShortageIndication=0;         \n" +
                "		END IF;                        \n" +
                "	    IF pNextReleaseDate <= fun_DatetimetoUTCDateTime() AND V_ShortageIndication=1 THEN			        \n" +
                "			 SET V_Indication= CONCAT(DATEDIFF(fun_DatetimetoUTCDateTime(),pNextReleaseDate),' day(s) passed due and shortage is less then 30%. <br/>');        \n" +
                "		ELSEIF pNextReleaseDate <= fun_DatetimetoUTCDateTime() + INTERVAL 7 DAY AND V_ShortageIndication=1 THEN        \n" +
                "			SET V_Indication = CONCAT(DATEDIFF(pNextReleaseDate,fun_DatetimetoUTCDateTime()),' day(s) are left to release next plan and shortage is less then 30%. <br/>');		        \n" +
                "		ELSEIF pNextReleaseDate <= fun_DatetimetoUTCDateTime() THEN			        \n" +
                "			 SET V_Indication = CONCAT(DATEDIFF(fun_DatetimetoUTCDateTime(),pNextReleaseDate),' day(s) passed due. <br/>');		        \n" +
                "		ELSEIF pNextReleaseDate <= (fun_DatetimetoUTCDateTime() + INTERVAL 7 DAY) THEN        \n" +
                "			SET V_Indication = CONCAT(DATEDIFF(pNextReleaseDate,fun_DatetimetoUTCDateTime()),' day(s) are left to release next plan. <br/>');                    \n" +
                "		ELSEIF V_ShortageIndication=1 THEN        \n" +
                "			SET V_Indication= 'Shortage is less then 30%. <br/>';        \n" +
                "		ELSE         \n" +
                "			SET V_Indication= NULL;        \n" +
                "	END IF;        \n" +
                "	RETURN V_Indication;        \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4824,'2.00','V1',' User Story #32599 & Bug #34726 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4824:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "alter table workorder_serialmst modify column PreSuffix varchar(200);  \n" +
                "  \n" +
                "alter table workorder_serialmst modify column SerialNo varchar(500);  \n" +
                "  \n" +
                "alter table workorder_serialmst modify column refMFGSerialNo varchar(500);  \n" +
                "  \n" +
                "alter table workorder_serialmst modify column prefix varchar(200);  \n" +
                "  \n" +
                "alter table workorder_serialmst modify column suffix varchar(200);  \n" +
                "  \n" +
                "alter table workorder_trans_serialno modify column SerialNo varchar(500);  \n" +
                "  \n" +
                "alter table serial_number_configuration modify column prefix varchar(200);  \n" +
                "  \n" +
                "alter table serial_number_configuration modify column suffix varchar(200);  \n" +
                "  \n" +
                "alter table workorder_trans_boxserialno modify column labelPrintSN varchar(500);  \n" +
                "  \n" +
                "alter table workorder_trans_boxserialno modify column finalSN varchar(500);  \n" +
                "  \n" +
                "alter table workorder_trans_boxserialno modify column mfrSN varchar(500);  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4825,'2.00','V1','Alter table to increse SerialNo & relavent fields  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4825:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP FUNCTION IF  EXISTS fun_AddSerialNoTranscation;  \n" +
                "CREATE FUNCTION `fun_AddSerialNoTranscation`(      \n" +
                "		pWOID INT,      \n" +
                "        pOpID INT,      \n" +
                "        pWOTransID INT,      \n" +
                "        pWOOPID INT,      \n" +
                "        pProdStatus varchar(5),       \n" +
                "        pSerialNo varchar(500),      \n" +
                "        pUserId INT,      \n" +
                "        pEmployeeID INT,      \n" +
                "        pRoleId INT,      \n" +
                "        pFinalSerailNo varchar(500),      \n" +
                "        pSerialNoId int      \n" +
                "    ) RETURNS int  \n" +
                "BEGIN      \n" +
                "	UPDATE workorder_serialmst SET currwoOPID = pWOOPID, curropID = pOpID, currwoTransID = pWOTransID, currStatus = pProdStatus          \n" +
                "									,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId          \n" +
                "											WHERE SerialNo = pSerialNo AND serialType = 1 AND woID = pWOID;          \n" +
                "	INSERT INTO workorder_trans_serialno (woTransID, woID, opID, employeeID, serialNo, prodStatus, isDeleted, createdAt          \n" +
                "				, createdBy , createByRoleId          \n" +
                "				, woOPID, refwoSerialNoID)          \n" +
                "		VALUES (pWOTransID, pWOID, pOpID, pEmployeeID, pSerialNo, pProdStatus, 0, fun_DatetimetoUTCDateTime()          \n" +
                "				, pUserId, pRoleId, pWOOPID, pSerialNoId);          \n" +
                "	/* ------- If Mapped Serial Number with Final Serail No -------------*/          \n" +
                "	IF(pFinalSerailNo IS NOT NULL)          \n" +
                "	THEN          \n" +
                "		UPDATE workorder_serialmst SET currwoOPID = pWOOPID, curropID = pOpID, currwoTransID = pWOTransID, currStatus = pProdStatus          \n" +
                "					,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId          \n" +
                "					WHERE SerialNo = pFinalSerailNo AND serialType = 2 AND woID = pWOID;          \n" +
                "	END IF;        \n" +
                "RETURN 1;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4826,'2.00','V1','fun_AddSerialNoTranscation  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4826:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP  FUNCTION IF EXISTS fun_InsertCurrStatusSRNo;  \n" +
                "CREATE FUNCTION `fun_InsertCurrStatusSRNo`(      \n" +
                "	pSerialNo varchar(500),      \n" +
                "    pWoID int,    \n" +
                "    pSerialType int    \n" +
                ") RETURNS int  \n" +
                "BEGIN      \n" +
                "	DECLARE vCurrentStatus VARCHAR(5);       \n" +
                "    DECLARE vCurrOperationName VARCHAR(500);          \n" +
                "	SELECT currStatus, fun_getOperationNameByWOOPID(a.currwoOPID)       \n" +
                "		INTO vCurrentStatus, vCurrOperationName          \n" +
                "	FROM      \n" +
                "		workorder_serialmst a       \n" +
                "	WHERE a.woID = pWoID and      \n" +
                "	a.SerialNo = pSerialNo AND a.serialType = (CASE WHEN (pSerialType is null) THEN 1 else pSerialType END)    \n" +
                "	AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1;       \n" +
                "  \n" +
                "	INSERT INTO tempValidationDetail (errorCode, serialNo, prodstatus, operationName)       \n" +
                "		VALUES (1, pSerialNo, vCurrentStatus, vCurrOperationName);            \n" +
                "RETURN 1;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4827,'2.00','V1','fun_InsertCurrStatusSRNo  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4827:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_BoxSerialQty;  \n" +
                "CREATE PROCEDURE `Sproc_BoxSerialQty`(      \n" +
                "IN pWONumber VARCHAR(100),      \n" +
                "IN pWOID INT,       \n" +
                "IN pWOTransID INT,      \n" +
                "IN pQty INT,      \n" +
                "IN pSerialNoList JSON,      \n" +
                "IN pBoxSerialID INT,      \n" +
                "IN pEmployeeID INT,      \n" +
                "IN pUserId INT,      \n" +
                "IN pRoleId INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "    DECLARE vUniqueID VARCHAR(10);       \n" +
                "    DECLARE vIndexNo INT DEFAULT 0;                         \n" +
                "    DECLARE vLastWOOPId INT;      \n" +
                "    DECLARE vSerialCount INT DEFAULT 0;       \n" +
                "    DECLARE vCountPassedSRNoCount INT DEFAULT 0;          \n" +
                "    DECLARE vSerialNo VARCHAR(500);    \n" +
                "    DECLARE vFinalSerialNo VARCHAR(500);    \n" +
                "    DECLARE vSerialNoId INT;      \n" +
                "    DECLARE vFinalSerialNoId INT;     \n" +
                "    DECLARE v_IsAllowSerialMappingWO int;    \n" +
                "  		/*1 = Passed,2 = Reprocess Required,3 = Defect Observed,4 = Scrapped,5 = Rework Required          \n" +
                "			, 6=Missing Parts with Board, 7=Bypass */                 \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                \n" +
                "	BEGIN                                                \n" +
                "		ROLLBACK;                                                      \n" +
                "		RESIGNAL;                                                      \n" +
                "	END;                                                      \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                      \n" +
                "	 BEGIN                                                      \n" +
                "		ROLLBACK;                                                \n" +
                "		RESIGNAL;                                              \n" +
                "	END;                                                \n" +
                "	START TRANSACTION;                             \n" +
                "		#DROP TEMPORARY TABLE IF EXISTS serialText;                                            \n" +
                "		#CREATE TEMPORARY TABLE serialText(txt TEXT );                                            \n" +
                "		#INSERT INTO serialText VALUES(pSerialNoList);                                            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS serialNoList;                                            \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS serialNoList AS                                                                                          \n" +
                "		SELECT 	*                                                                                           \n" +
                "		FROM 	JSON_TABLE(                                                   \n" +
                "				pSerialNoList,                                                                                          \n" +
                "				\"$[*]\" COLUMNS(    			                                             \n" +
                "					`serialNo` VARCHAR(500) PATH \"$.serialNo\"  \n" +
                "				)                                                \n" +
                "			) AS WoSrNo;    \n" +
                "		#CREATE TEMPORARY TABLE serialNoList( serialNo VARCHAR(500) );                                            \n" +
                "		#SET @SQL = CONCAT(\"insert into serialNoList (serialNo) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM serialText), \",\", \"'),('\"),\"');\");                                              \n" +
                "		#PREPARE stmt1 FROM @SQL;                                            \n" +
                "		#EXECUTE stmt1;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail                            \n" +
                "					( errorCode INT(11), serialNo VARCHAR(500), prodstatus VARCHAR(255), operationName VARCHAR(500));                          \n" +
                "  \n" +
                "        select uniqueID into vUniqueID from workorder_boxserialno where id = pBoxSerialID;      \n" +
                "  \n" +
                "		SELECT COUNT(*) FROM serialNoList INTO vSerialCount;                            \n" +
                "		SET vIndexNo = 0;                        \n" +
                "  \n" +
                "		select fun_getLastWoOPIDByWoNumber(pWONumber) into vLastWOOPId;      \n" +
                "		select count(1) into v_IsAllowSerialMappingWO from workorder_operation where woID = pWOID and isAllowFinalSerialMapping = 1;    \n" +
                "  \n" +
                "		WHILE vIndexNo < vSerialCount DO                         \n" +
                "			SET vSerialNo = NULL;                        \n" +
                "			SET vUniqueID = NULL;       \n" +
                "  \n" +
                "			SELECT serialNo INTO vSerialNo FROM serialNoList LIMIT vIndexNo,1;                    \n" +
                "  \n" +
                "			/* Check  Serial No is 'MFR' or 'FINAL' */                        \n" +
                "			SELECT (CASE WHEN(a.serialType = 2) THEN a.refMFGSerialNo ELSE a.SerialNo END) ID                         \n" +
                "				,(CASE WHEN(a.serialType = 2) THEN (SELECT ID FROM workorder_serialmst ws                        \n" +
                "					WHERE a.SerialNo = a.refMFGSerialNo AND a.serialType = 1 AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                        \n" +
                "				ELSE a.ID END) SerialId    \n" +
                "                ,(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE       \n" +
                "					(SELECT ws.SerialNo FROM workorder_serialmst ws                \n" +
                "						WHERE ws.refMFGSerialNoId = a.ID and deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                \n" +
                "				END) ProductSerialNo    \n" +
                "                ,(CASE WHEN(a.serialType = 2) THEN a.ID    \n" +
                "                ELSE (SELECT ID FROM workorder_serialmst ws                        \n" +
                "					WHERE a.SerialNo = a.refMFGSerialNo AND a.serialType = 1 AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                        \n" +
                "				END) SerialId                        \n" +
                "				INTO vSerialNo, vSerialNoId, vFinalSerialNo, vFinalSerialNoId                  \n" +
                "			FROM workorder_serialmst a WHERE a.woId = pWOID AND a.deletedAt IS NULL AND a.isDeleted = 0 AND                  \n" +
                "				((a.SerialNo = vSerialNo AND a.serialType = 1) OR       \n" +
                "                (a.SerialNo = vSerialNo AND a.serialType = 2 AND a.refMFGSerialNo IS NOT NULL)) LIMIT 1;                  \n" +
                "  \n" +
                "			SELECT COUNT(1), (select uniqueID from workorder_boxserialno where id =woBoxSerialID)       \n" +
                "						INTO vCountPassedSRNoCount, vUniqueID FROM workorder_trans_boxserialno WHERE      \n" +
                "					serialID IN (vSerialNoId,vFinalSerialNoId) AND deletedAt IS NULL AND isDeleted = 0;       \n" +
                "  \n" +
                "			/* Check  Serial No is exists or not */                        \n" +
                "			IF(vCountPassedSRNoCount > 0)    \n" +
                "			THEN       \n" +
                "				INSERT INTO tempValidationDetail (errorCode, serialNo, prodstatus, operationName)         \n" +
                "					VALUES (1, vSerialNo, concat(\"Added In Packaging/Box Serial#: \", vUniqueID), null);    \n" +
                "			ELSE	         \n" +
                "				set vCountPassedSRNoCount= 0;      \n" +
                "				SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE      \n" +
                "							prodStatus = '1'    \n" +
                "						AND woOPID = (vLastWOOPId) AND deletedAt IS NULL AND isDeleted = 0     \n" +
                "                        AND (serialNo = IFNULL(vSerialNo,serialNo) or serialNo = IFNULL(vFinalSerialNo,serialNo));    \n" +
                "  \n" +
                "				if(vCountPassedSRNoCount = 0)      \n" +
                "                THEN					        \n" +
                "					SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID) INTO @tempInvalidCount;         \n" +
                "                ELSE     \n" +
                "					IF(v_IsAllowSerialMappingWO > 0 AND vFinalSerialNo is NULL)    \n" +
                "                    THEN    \n" +
                "						INSERT INTO tempValidationDetail (errorCode, serialNo, prodstatus, operationName)         \n" +
                "							VALUES (1, vSerialNo, \"Not Mapped\", null);    \n" +
                "                    ELSE    \n" +
                "						INSERT INTO workorder_trans_boxserialno      \n" +
                "							(woBoxSerialID,serialID,employeeID,createdBy,createdAt,isDeleted,createByRoleId    \n" +
                "                            ,labelPrintSN,finalSN,mfrSN)      \n" +
                "						VALUES      \n" +
                "							(pBoxSerialID,(CASE WHEN (vFinalSerialNoId is null) THEN vSerialNoId ELSE vFinalSerialNoId END)    \n" +
                "                            ,pEmployeeID,pUserId,fun_DatetimetoUTCDateTime(),0,pRoleId    \n" +
                "                            ,(CASE WHEN (vFinalSerialNo is null) THEN vSerialNo ELSE vFinalSerialNo END)    \n" +
                "                            , vFinalSerialNo, vSerialNo);      \n" +
                "					   update workorder_boxserialno set qtyPerBox = (qtyPerBox + 1)      \n" +
                "						  ,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId      \n" +
                "						   where id = pBoxSerialID;     \n" +
                "					END IF;    \n" +
                "                END IF;      \n" +
                "			END IF;                            \n" +
                "			SET vIndexNo = vIndexNo + 1;                        \n" +
                "		END WHILE;		                        \n" +
                "	SELECT * FROM tempValidationDetail;                        \n" +
                "    COMMIT;                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4828,'2.00','V1','Sproc_BoxSerialQty  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4828:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_checkDelete_workorder_trans_serialno;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_trans_serialno`(                                                                    \n" +
                "	IN tableName VARCHAR(255),                                                                    \n" +
                "	IN IDs LONGTEXT,                                                                    \n" +
                "	IN deletedBy INT,                                                                    \n" +
                "	IN entityID VARCHAR(255),                                                                    \n" +
                "	IN refrenceIDs LONGTEXT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN               \n" +
                "DECLARE vWoID1 INT(11);                                                                    \n" +
                "DECLARE vOpID1 INT(11);         \n" +
                "DECLARE vWOTransprodID INT(11);     \n" +
                "DECLARE vRefwoSerialNoID INT(11);    \n" +
                "DECLARE vSerialNo1 VARCHAR(500);                                                                    \n" +
                "DECLARE vProdStatus1 VARCHAR(5);                                                                    \n" +
                "DECLARE vWoTransID1 INT(11);                                                                    \n" +
                "DECLARE vQty1 INT(11);                                                                    \n" +
                "DECLARE vOpID2 INT(11);                                                                    \n" +
                "DECLARE vwoOpID INT(11);     \n" +
                "DECLARE vProdstatus2 VARCHAR(5);               \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;              \n" +
                "  \n" +
                "	START TRANSACTION;            \n" +
                "  \n" +
                "	SELECT  woID,opID,serialNo,prodstatus ,woTransID, woTransprodID, refwoSerialNoID    \n" +
                "			INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1, vWOTransprodID, vRefwoSerialNoID    \n" +
                "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                                                                    \n" +
                "  \n" +
                "    IF(vWOTransprodID is null)    \n" +
                "    THEN    \n" +
                "		UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy,     \n" +
                "				deleteByRoleId = pRoleID, deletedAt=fun_DatetimetoUTCDateTime()                                                                    \n" +
                "				WHERE woTransSerialID = IDs;	    \n" +
                "  \n" +
                "        IF((SELECT count(1) FROM workorder_trans_serialno                                                                     \n" +
                "			WHERE woID = vWoID1 AND refwoSerialNoID = vRefwoSerialNoID AND woTransSerialID <> IDs AND deletedAt IS NULL) > 0)    \n" +
                "		THEN    \n" +
                "			SELECT opID,prodstatus, woOPID INTO vOpID2 , vProdstatus2, vwoOpID FROM workorder_trans_serialno                                                                     \n" +
                "				WHERE woID = vWoID1  AND refwoSerialNoID = vRefwoSerialNoID  AND woTransSerialID <> IDs AND deletedAt IS NULL                                                                    \n" +
                "			ORDER BY woTransSerialID DESC LIMIT 1;      \n" +
                "  \n" +
                "            /* set last serial status accessed by operation */          \n" +
                "			UPDATE workorder_serialmst SET curropID = vOpID2, currwoOPID = vwoOpID, currStatus = vProdstatus2    \n" +
                "			WHERE woID = vWoID1 AND ID = vRefwoSerialNoID AND deletedAt IS NULL;       \n" +
                "  \n" +
                "            UPDATE workorder_serialmst SET curropID = vOpID2, currwoOPID = vwoOpID, currStatus = vProdstatus2    \n" +
                "			WHERE woID = vWoID1 AND refMFGSerialNoId = vRefwoSerialNoID AND deletedAt IS NULL;    \n" +
                "        ELSE    \n" +
                "			/* set last serial status accessed by operation */      			    \n" +
                "			UPDATE workorder_serialmst SET curropID = null, currwoOPID = null, currStatus = 'Idle'                                                                    \n" +
                "			WHERE woID = vWoID1 AND ID = vRefwoSerialNoID AND deletedAt IS NULL;    \n" +
                "  \n" +
                "            UPDATE workorder_serialmst SET curropID = null, currwoOPID = null, currStatus = 'Idle'                                                                    \n" +
                "			WHERE woID = vWoID1 AND refMFGSerialNoId = vRefwoSerialNoID AND deletedAt IS NULL;    \n" +
                "		END IF;    \n" +
                "	ELSE    \n" +
                "		SELECT 'not allowed';         \n" +
                "    END IF;    \n" +
                "	COMMIT;            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4829,'2.00','V1',' Sproc_checkDelete_workorder_trans_serialno - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4829:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GenerateSerialNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GenerateSerialNumber`(                \n" +
                "       pPrefix VARCHAR(200),      \n" +
                "       pSuffix VARCHAR(200),      \n" +
                "       pConfigurationId INT,      \n" +
                "       pStartNumber INT,      \n" +
                "       pNoofDigit INT,      \n" +
                "       pUserID INT,          \n" +
                "       pRoleId INT,      \n" +
                "       pDateCode VARCHAR(4),      \n" +
                "       pDateCodeFormat VARCHAR(4),      \n" +
                "       pCurrStatus VARCHAR(5),      \n" +
                "       pWoID INT,      \n" +
                "       pNoofSerial INT,      \n" +
                "       pCurropID INT,      \n" +
                "       pWOTransID INT,      \n" +
                "       pSerialType INT,      \n" +
                "       pIsTransferred TINYINT(1),      \n" +
                "       pRefSerialID INT(11),      \n" +
                "       pRefMFGSerialNo VARCHAR(500),     \n" +
                "       pSerialNoSeparator CHAR(5)  \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "    DECLARE vMaxNumber INT;      \n" +
                "    DECLARE vMaxLimitNumber INT;      \n" +
                "    DECLARE vRangeEndNumber INT;      \n" +
                "    DECLARE vEndNumber INT;      \n" +
                "    DECLARE vSerialNo VARCHAR(500);          \n" +
                "	DECLARE vStartIndex INT;      \n" +
                "    DECLARE vWoNumber VARCHAR(255);      \n" +
                "    DECLARE vIsConsecutiveNo TINYINT;      \n" +
                "    DECLARE vCustomerID INT;      \n" +
                "    DECLARE vDuplicate VARCHAR(255);      \n" +
                "  \n" +
                "    SELECT  woNumber, customerID      \n" +
                "			INTO vWoNumber,vCustomerID        \n" +
                "	FROM workorder a WHERE woID = pWoID;        \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail        \n" +
                "        ( errorCode INT(11), woNumber VARCHAR(255), serialNo VARCHAR(500));       \n" +
                "  \n" +
                "    #-----------------  Get Last Max Number generated base on 'ConfigurationId' or take base on Workorder Serial Number ---------------------      \n" +
                "    SET vMaxNumber = pStartNumber;      \n" +
                "  \n" +
                "    IF(pConfigurationId IS NOT NULL AND pConfigurationId > 0)      \n" +
                "	THEN      \n" +
                "		SELECT  CASE WHEN a.isConsecutiveNumber = 0       \n" +
                "					THEN pStartNumber       \n" +
                "					ELSE (CASE WHEN a.lastMaxNumber = 0 THEN (a.startNumber) ELSE (a.lastMaxNumber + 1) END)      \n" +
                "				END      \n" +
                "			,a.isConsecutiveNumber      \n" +
                "		INTO vMaxNumber, vIsConsecutiveNo       \n" +
                "			FROM serial_number_configuration a WHERE a.id = pConfigurationId;                  \n" +
                "	END IF;      \n" +
                "  \n" +
                "    SET vRangeEndNumber = (SELECT LPAD(9,pNoofDigit,9));      \n" +
                "    SET vMaxLimitNumber = (SELECT (vMaxNumber - 1) + pNoofSerial);      \n" +
                "  \n" +
                "    SET vEndNumber = vMaxLimitNumber;      \n" +
                "  \n" +
                "    #-----------------  Check validation on limit reach base on No Digit ---------------------      \n" +
                "    IF((vRangeEndNumber) < (vMaxLimitNumber))      \n" +
                "    THEN      \n" +
                "		INSERT INTO tempValidationDetail (errorCode, woNumber, serialNo) VALUES (1,vWoNumber, vRangeEndNumber + 1);      \n" +
                "        SET vEndNumber = vRangeEndNumber;      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	#-----------------  Check Duplication on Serial no Combination(CustomerId, Prefix, Suffix, serialIntVal)---------------------      \n" +
                "	INSERT INTO tempValidationDetail(errorCode, woNumber, serialNo)      \n" +
                "	SELECT 2, wo.woNumber, ws.SerialNo      \n" +
                "	FROM workorder_serialmst ws JOIN workorder wo ON ws.woID = wo.woID      \n" +
                "		WHERE IFNULL(ws.prefix,\"\") = IFNULL(pPrefix,\"\") AND IFNULL(suffix,\"\") = IFNULL(pSuffix,\"\")      \n" +
                "		AND serialIntVal BETWEEN vMaxNumber AND vEndNumber      \n" +
                "		AND ws.serialType = pSerialType       \n" +
                "		AND ws.isDeleted = 0       \n" +
                "		AND wo.customerID= vCustomerID        \n" +
                "		AND wo.isDeleted = 0;	      \n" +
                "	#-----------------  Check Duplication on Serial no new Generated---------------------      \n" +
                "	  INSERT INTO tempValidationDetail(errorCode, woNumber, serialNo)      \n" +
                "		SELECT 2, wo.woNumber, ws.SerialNo      \n" +
                "		FROM workorder_serialmst ws JOIN workorder wo ON ws.woID = wo.woID      \n" +
                "			WHERE ws.serialNo =  CONCAT(IFNULL(pPrefix , \"\"), LPAD(serialIntVal,pNoofDigit,0),pSerialNoSeparator,IFNULL(pSuffix,\"\"))   \n" +
                "			AND serialIntVal BETWEEN vMaxNumber AND vEndNumber      \n" +
                "			AND ws.serialType = pSerialType       \n" +
                "			AND ws.isDeleted = 0       \n" +
                "			AND wo.customerID= vCustomerID        \n" +
                "			AND wo.isDeleted = 0;	  \n" +
                "	#---------------- Make entry for generated serial number If not any Duplication founded ---------------------      \n" +
                "	IF (SELECT COUNT(1) FROM tempValidationDetail WHERE errorCode=2) = 0 THEN      \n" +
                "		#-----------------  Insert Serial No into Serial Master Table ---------------------      \n" +
                "		INSERT INTO workorder_serialmst      \n" +
                "				(woID,PrefixorSuffix,dateCode,noofDigit,SerialNo,curropID,currStatus,isDeleted,      \n" +
                "				 createdAt,createdBy,woTransID,serialType,isTransferred,refSerialID,refMFGSerialNo,createByRoleId,      \n" +
                "				 prefix,suffix,serialIntVal,configurationId,dateCodeFormat)      \n" +
                "		SELECT pWoID,0,pDateCode,pNoofDigit,      \n" +
                "				CONCAT(IFNULL(pPrefix , \"\"), LPAD(a.serialIntVal,pNoofDigit,0),pSerialNoSeparator,IFNULL(pSuffix,\"\")) serialNo,      \n" +
                "                pCurropID,pCurrStatus,0,      \n" +
                "				fun_DatetimetoUTCDateTime(),pUserID,pWOTransID,pSerialType,pIsTransferred,pRefSerialID,pRefMFGSerialNo,pRoleId,      \n" +
                "                pPrefix,pSuffix,a.serialIntVal,pConfigurationId,pDateCodeFormat      \n" +
                "		  FROM      \n" +
                "			(WITH RECURSIVE CTE AS (SELECT vMaxNumber start_series,vEndNumber end_series FROM DUAL      \n" +
                "										UNION ALL      \n" +
                "											SELECT start_series + 1,end_series      \n" +
                "										FROM CTE      \n" +
                "										WHERE start_series < end_series      \n" +
                "										)SELECT c.start_series serialIntVal      \n" +
                "				FROM CTE c) a;      \n" +
                "  \n" +
                "		#-----------------  Update Configuration Max number base on 'Configuration Id' ---------------------      \n" +
                "		IF(pConfigurationId IS NOT NULL AND pConfigurationId > 0)      \n" +
                "		THEN      \n" +
                "			UPDATE serial_number_configuration a SET a.lastMaxNumber = vEndNumber WHERE a.id = pConfigurationId;      \n" +
                "		END IF;      \n" +
                "	END  IF;      \n" +
                "    SELECT * FROM tempValidationDetail;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4830,'2.00','V1','Sproc_GenerateSerialNumber  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4830:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetScannedBoxSerialNoDetial;  \n" +
                "CREATE PROCEDURE `Sproc_GetScannedBoxSerialNoDetial`(          \n" +
                " IN pSerialNo varchar(500),      \n" +
                " IN pWOID INT,      \n" +
                " IN pFromBoxSRId INT      \n" +
                "     )  \n" +
                "BEGIN        \n" +
                "	DECLARE vSerialNo varchar(500);      \n" +
                "    DECLARE vFinalSerialNo varchar(500);      \n" +
                "    DECLARE vSerialNoId int;      \n" +
                "  \n" +
                "	SELECT       \n" +
                "		(CASE      \n" +
                "			WHEN (a.serialType = 2) THEN a.refMFGSerialNo      \n" +
                "			ELSE a.SerialNo      \n" +
                "		END) ID,      \n" +
                "		(CASE WHEN (a.serialType = 2)      \n" +
                "			THEN (a.refMFGSerialNoId)      \n" +
                "			ELSE a.ID      \n" +
                "		END) SerialId    \n" +
                "        ,(CASE WHEN (a.serialType = 1) THEN (SELECT SerialNo FROM workorder_serialmst ws      \n" +
                "					WHERE ws.refMFGSerialNoId= a.ID AND a.serialType = 1 AND deletedAt IS NULL AND isDeleted = 0      \n" +
                "					LIMIT 1)      \n" +
                "			ELSE a.SerialNo      \n" +
                "		END) FinalSerialNo      \n" +
                "	INTO vSerialNo , vSerialNoId, vFinalSerialNo FROM      \n" +
                "		workorder_serialmst a      \n" +
                "	WHERE      \n" +
                "		a.woId = pWOID AND a.deletedAt IS NULL      \n" +
                "			AND a.isDeleted = 0      \n" +
                "			AND ((a.SerialNo = pSerialNo      \n" +
                "			AND a.serialType = 1)      \n" +
                "			OR (a.SerialNo = pSerialNo      \n" +
                "			AND a.serialType = 2      \n" +
                "			AND a.refMFGSerialNo IS NOT NULL))      \n" +
                "	LIMIT 1;      \n" +
                "  \n" +
                "	SELECT       \n" +
                "		wbn.id      \n" +
                "		,uniqueID      \n" +
                "		,wbn.partID      \n" +
                "        ,partDet.mfgPN MfgPN      \n" +
                "        ,partDet.isCustom as isCustomPart      \n" +
                "		,partDet.PIDCode packagingMatPID              \n" +
                "		,fun_getRoHSIconByPartID(wbn.partID) AS partRohsIcon          \n" +
                "		,fun_getRoHSNameByPartID(wbn.partID) AS partRohsName       \n" +
                "		,status      \n" +
                "        ,vSerialNo SerialNo      \n" +
                "        ,vFinalSerialNo FinalSerialNo    \n" +
                "	FROM      \n" +
                "		workorder_boxserialno wbn      \n" +
                "			LEFT JOIN      \n" +
                "		component partDet ON wbn.partID = partDet.id      \n" +
                "	WHERE      \n" +
                "		wbn.id = (SELECT       \n" +
                "				woBoxSerialID      \n" +
                "			FROM      \n" +
                "				workorder_trans_boxserialno      \n" +
                "			WHERE woBoxSerialID = pFromBoxSRId and        \n" +
                "				serialID = vSerialNoId AND isDeleted = 0      \n" +
                "			LIMIT 1);      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4831,'2.00','V1','Sproc_GetScannedBoxSerialNoDetial  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4831:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetScannedWOBoxSerialNoDetial;  \n" +
                "CREATE PROCEDURE `Sproc_GetScannedWOBoxSerialNoDetial`(               \n" +
                " IN pwoID INT,    \n" +
                " IN pSerialNo varchar(500)      \n" +
                "     )  \n" +
                "BEGIN       \n" +
                "	DECLARE v_IsAllowSerialMappingWO int;    \n" +
                "    select count(1) into v_IsAllowSerialMappingWO from workorder_operation where woID = pwoID and isAllowFinalSerialMapping = 1;    \n" +
                "  \n" +
                "	SELECT  (CASE WHEN(a.serialType = 2) THEN a.refMFGSerialNo ELSE a.SerialNo END) ID          \n" +
                "			,(CASE WHEN(a.serialType = 2) THEN         \n" +
                "				(SELECT ws.SerialNo FROM workorder_serialmst ws                  \n" +
                "						WHERE ws.ID = a.refMFGSerialNoId and deletedAt IS NULL AND isDeleted = 0 LIMIT 1)         \n" +
                "				ELSE a.SerialNo END) SerialNo      \n" +
                "			,(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE       \n" +
                "					(SELECT ws.SerialNo FROM workorder_serialmst ws                \n" +
                "						WHERE ws.refMFGSerialNoId = a.ID and deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                \n" +
                "			END) ProductSerialNo    \n" +
                "			,a.currStatus        \n" +
                "			,fun_getOperationNameByWOOPID(a.currwoOPID) CurrentWoOperation    \n" +
                "			,v_IsAllowSerialMappingWO as isAllowFinalSerialMapping    \n" +
                "	FROM workorder_serialmst a WHERE a.woId = pwoID AND a.deletedAt IS NULL AND a.isDeleted = 0            \n" +
                "		and	((a.SerialNo = pSerialNo AND a.serialType = 1) OR         \n" +
                "				(a.SerialNo = pSerialNo AND a.serialType = 2 AND a.refMFGSerialNoId IS NOT NULL))    \n" +
                "	limit 1;	        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4832,'2.00','V1','Sproc_GetScannedWOBoxSerialNoDetial  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4832:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetScannedWOSerialNoDetial;  \n" +
                "CREATE PROCEDURE `Sproc_GetScannedWOSerialNoDetial`(             \n" +
                " IN pwoID INT,          \n" +
                " IN pSerialNo varchar(500),        \n" +
                " IN pSerailType tinyInt     \n" +
                ")  \n" +
                "BEGIN     \n" +
                "    if(pSerailType is null)    \n" +
                "    THEN    \n" +
                "		SELECT (CASE WHEN(a.serialType = 2) THEN a.refMFGSerialNo ELSE a.SerialNo END) ID,         \n" +
                "				(CASE WHEN(a.serialType = 2) THEN       \n" +
                "					(SELECT ws.SerialNo FROM workorder_serialmst ws                \n" +
                "							WHERE ws.ID = a.refMFGSerialNoId and deletedAt IS NULL AND isDeleted = 0 LIMIT 1)       \n" +
                "					ELSE a.SerialNo END) SerialNo,         \n" +
                "				(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE       \n" +
                "						(SELECT ws.SerialNo FROM workorder_serialmst ws                \n" +
                "							WHERE ws.refMFGSerialNoId = a.ID and deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                \n" +
                "				END) ProductSerialNo    \n" +
                "			,a.currStatus     \n" +
                "			,fun_getOperationNameByWOOPID(a.currwoOPID) CurrentWoOperation      \n" +
                "		FROM workorder_serialmst a WHERE a.woId = pwoID AND a.deletedAt IS NULL AND a.isDeleted = 0          \n" +
                "			and	((a.SerialNo = pSerialNo AND a.serialType = 1) OR       \n" +
                "					(a.SerialNo = pSerialNo AND a.serialType = 2 AND a.refMFGSerialNoId IS NOT NULL))                     \n" +
                "		limit 1;    \n" +
                "    ELSE     \n" +
                "		SELECT  a.SerialNo ID,    \n" +
                "				a.SerialNo SerialNo,         \n" +
                "				(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE       \n" +
                "						(SELECT ws.SerialNo FROM workorder_serialmst ws                \n" +
                "							WHERE ws.refMFGSerialNoId = a.ID and deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                \n" +
                "				END) ProductSerialNo    \n" +
                "			,a.currStatus     \n" +
                "			,fun_getOperationNameByWOOPID(a.currwoOPID) CurrentWoOperation      \n" +
                "		FROM workorder_serialmst a WHERE a.woId = pwoID AND a.deletedAt IS NULL AND a.isDeleted = 0          \n" +
                "			and	(a.SerialNo = pSerialNo AND a.serialType = pSerailType)                     \n" +
                "		limit 1;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4833,'2.00','V1','Sproc_GetScannedWOSerialNoDetial  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4833:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getTransPrevOpPassedSerials;  \n" +
                "CREATE PROCEDURE `Sproc_getTransPrevOpPassedSerials`(  \n" +
                "	IN pWoID INT,  \n" +
                "	IN pCurrWoOPID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE prevWoOPID INT;  \n" +
                "	DECLARE prevOpIsRework TINYINT(1);  \n" +
                "	SELECT woOPID,isRework INTO prevWoOPID,prevOpIsRework    \n" +
                "	FROM workorder_operation   \n" +
                "	WHERE deletedAt IS NULL   \n" +
                "	AND woID=pWoID   \n" +
                "	AND opNumber < (SELECT opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "			AND woID=pWoID AND woOPID = pCurrWoOPID)		  \n" +
                "	ORDER BY opNumber DESC  \n" +
                "	LIMIT 1 ;  \n" +
                "  \n" +
                "	IF(prevOpIsRework = 1) THEN  \n" +
                "  \n" +
                "  \n" +
                "		/* get prev normal operation (other than rework) passed qty serials  \n" +
                "		case : normal op --> rework op --> rework op then get normal op passed qty */  \n" +
                "		SELECT woTransSerialID,serialNo  \n" +
                "		FROM workorder_trans_serialno  \n" +
                "		WHERE deletedAt IS NULL  \n" +
                "		AND woTransID IN (  \n" +
                "				SELECT woTransID FROM workorder_trans WHERE deletedAt IS NULL  \n" +
                "				AND woID=pWoID AND woOPID = (SELECT woOPID FROM workorder_operation WHERE deletedAt IS NULL AND woID=pWoID   \n" +
                "								AND opNumber < (SELECT opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "											AND woID=pWoID AND woOPID = pCurrWoOPID)  \n" +
                "								AND isRework = 0			  \n" +
                "							    ORDER BY opNumber DESC  \n" +
                "							    LIMIT 1)  \n" +
                "				AND checkoutTime IS NOT NULL)  \n" +
                "		AND prodstatus = 1  /* here 1 - means PASSED QTY STATUS */  \n" +
                "		;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		/* get prev operation passed qty serials  \n" +
                "		case : normal op --> rework op then get normal op passed qty */  \n" +
                "  \n" +
                "		SELECT woTransSerialID,serialNo  \n" +
                "		FROM workorder_trans_serialno  \n" +
                "		WHERE deletedAt IS NULL  \n" +
                "		AND woTransID IN (  \n" +
                "				SELECT woTransID FROM workorder_trans WHERE deletedAt IS NULL  \n" +
                "				AND woID=pWoID AND woOPID = prevWoOPID  \n" +
                "				AND checkoutTime IS NOT NULL)  \n" +
                "		AND prodstatus = 1  /* here 1 - means PASSED QTY STATUS */  \n" +
                "		;  \n" +
                "  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4834,'2.00','V1','Sproc_getTransPrevOpPassedSerials  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4834:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetValidateWOBoxSerialNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetValidateWOBoxSerialNumber`(	                                    \n" +
                "	IN pWoID INT,        \n" +
                "    IN pFromSerialNo varchar(500),        \n" +
                "    IN pToSerialNo varchar(500),        \n" +
                "    IN pQty INT,        \n" +
                "    IN pSearchType varchar(10)        \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "declare v_fromserialInt int;        \n" +
                "declare v_toSerialInt int;        \n" +
                "declare v_serialNoType tinyInt;      \n" +
                "  \n" +
                "	if(pSearchType = 'Range')  then        \n" +
                "			select serialIntVal,serialType INTO v_fromserialInt, v_serialNoType from workorder_serialmst where woID = pWoID and SerialNo = pFromSerialNo and isDeleted = 0 and deletedAt is null;        \n" +
                "			select serialIntVal INTO v_toSerialInt from workorder_serialmst where woID = pWoID and SerialNo = pToSerialNo and isDeleted = 0 and deletedAt is null;        \n" +
                "  \n" +
                "			if(v_toSerialInt is not null and v_fromserialInt is not null) then        \n" +
                "				select * from workorder_serialmst         \n" +
                "				where woID = pWoID and serialType = v_serialNoType and serialIntVal between v_fromserialInt and v_toSerialInt        \n" +
                "				and isDeleted = 0 and deletedAt is null;        \n" +
                "			end if;        \n" +
                "		else         \n" +
                "			if(pSearchType = 'FromQty')  then        \n" +
                "				select serialIntVal,serialType INTO v_fromserialInt, v_serialNoType from workorder_serialmst where woID = pWoID      \n" +
                "                and SerialNo = pFromSerialNo and isDeleted = 0 and deletedAt is null;        \n" +
                "  \n" +
                "				if(v_fromserialInt is not null and pQty is not null) then        \n" +
                "					select * from workorder_serialmst         \n" +
                "					where woID = pWoID and serialType = v_serialNoType and serialIntVal >= v_fromserialInt        \n" +
                "					and isDeleted = 0 and deletedAt is null limit pQty ;        \n" +
                "				end if;        \n" +
                "			end if;        \n" +
                "		end if;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4835,'2.00','V1','Sproc_GetValidateWOBoxSerialNumber  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4835:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetValidateWOSerialNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetValidateWOSerialNumber`(	                                \n" +
                "	IN pWoID INT,    \n" +
                "    IN pSerialNoType tinyInt,    \n" +
                "    IN pFromSerialNo varchar(500),    \n" +
                "    IN pToSerialNo varchar(500),    \n" +
                "    IN pQty int,    \n" +
                "    IN pSearchType varchar(10)    \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "declare fromserialInt int(11);    \n" +
                "declare toSerialInt int(11);    \n" +
                "  \n" +
                "	if(pSearchType = 'Range')  then    \n" +
                "			select serialIntVal INTO fromserialInt from workorder_serialmst where woID = pWoID and serialType = pSerialNoType and SerialNo = pFromSerialNo and isDeleted = 0 and deletedAt is null;    \n" +
                "			select serialIntVal INTO toSerialInt from workorder_serialmst where woID = pWoID and serialType = pSerialNoType and SerialNo = pToSerialNo and isDeleted = 0 and deletedAt is null;    \n" +
                "  \n" +
                "			if(toSerialInt is not null and fromserialInt is not null) then    \n" +
                "				select * from workorder_serialmst     \n" +
                "				where woID = pWoID and serialType = pSerialNoType and serialIntVal between fromserialInt and toSerialInt    \n" +
                "				and isDeleted = 0 and deletedAt is null;    \n" +
                "			end if;    \n" +
                "		else     \n" +
                "			if(pSearchType = 'FromQty')  then    \n" +
                "				select serialIntVal INTO fromserialInt from workorder_serialmst where woID = pWoID and serialType = pSerialNoType and SerialNo = pFromSerialNo and isDeleted = 0 and deletedAt is null;    \n" +
                "  \n" +
                "				if(fromserialInt is not null and pQty is not null) then    \n" +
                "					select * from workorder_serialmst     \n" +
                "					where woID = pWoID and serialType = pSerialNoType and serialIntVal >= fromserialInt    \n" +
                "					and isDeleted = 0 and deletedAt is null limit pQty ;    \n" +
                "				end if;    \n" +
                "			end if;    \n" +
                "		end if;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4836,'2.00','V1','Sproc_GetValidateWOSerialNumber  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4836:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_MoveBoxSerialNoQty;  \n" +
                "CREATE PROCEDURE `Sproc_MoveBoxSerialNoQty`(    \n" +
                "IN pWOID INT,    \n" +
                "IN pQty INT,    \n" +
                "IN pSerialNoList JSON,    \n" +
                "IN pFromBoxSerialId INT,    \n" +
                "IN pToBoxSerialId INT,    \n" +
                "IN pEmployeeID INT,    \n" +
                "IN pUserId INT,    \n" +
                "IN pRoleId INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "    DECLARE vFromBoxUniqueID VARCHAR(10);     \n" +
                "    DECLARE vToBoxUniqueID VARCHAR(10);     \n" +
                "    DECLARE vIsStockAssyId INT DEFAULT 0;    \n" +
                "    DECLARE vIndexNo INT DEFAULT 0;          \n" +
                "    DECLARE vSerialCount INT DEFAULT 0;     \n" +
                "    DECLARE vCountPassedSRNoCount INT DEFAULT 0;        \n" +
                "    DECLARE vFromSRNoCount INT DEFAULT 0;        \n" +
                "    DECLARE vSerialNo VARCHAR(500);    \n" +
                "    DECLARE vSerialNoId INT;    \n" +
                "    DECLARE vIsTrackbySerialNo INT;    \n" +
                "    DECLARE vBoxSerialTransId INT;    \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION                                              \n" +
                "	BEGIN                                              \n" +
                "		ROLLBACK;                                                    \n" +
                "		RESIGNAL;                                                    \n" +
                "	END;                                                    \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                    \n" +
                "	 BEGIN                                                    \n" +
                "		ROLLBACK;                                              \n" +
                "		RESIGNAL;                                            \n" +
                "	END;                                              \n" +
                "	START TRANSACTION;   		    \n" +
                "		IF(pSerialNoList != '')    \n" +
                "        THEN			    \n" +
                "			#DROP TEMPORARY TABLE IF EXISTS serialText;                                          \n" +
                "			#CREATE TEMPORARY TABLE serialText(txt TEXT );                                          \n" +
                "			#INSERT INTO serialText VALUES(pSerialNoList);   \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS serialNoList;                                           \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS serialNoList AS                                                                                          \n" +
                "			SELECT 	*                                                                                           \n" +
                "			FROM 	JSON_TABLE(                                                   \n" +
                "					pSerialNoList,                                                                                          \n" +
                "					\"$[*]\" COLUMNS(    			                                             \n" +
                "						`serialNo` VARCHAR(500) PATH \"$.serialNo\"  \n" +
                "					)                                                \n" +
                "				) AS WoSrNo;    \n" +
                "			#CREATE TEMPORARY TABLE serialNoList( serialNo VARCHAR(500) );  \n" +
                "			#SET @SQL = CONCAT(\"insert into serialNoList (serialNo) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM serialText), \",\", \"'),('\"),\"');\");                                                      \n" +
                "			#PREPARE stmt1 FROM @SQL;                                          \n" +
                "			#EXECUTE stmt1;      \n" +
                "		END IF;    \n" +
                "		select fun_getWOTrackBySerialOrNotByWOId(pWOID) into vIsTrackbySerialNo;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail                          \n" +
                "					( errorCode INT(11), serialNo VARCHAR(500), prodstatus VARCHAR(255), operationName VARCHAR(500));                        \n" +
                "  \n" +
                "        select qtyPerBox, uniqueID, IFNULL(assyStockID,0) into vFromSRNoCount,vFromBoxUniqueID,vIsStockAssyId from workorder_boxserialno where id = pFromBoxSerialId;    \n" +
                "        select  uniqueID into vToBoxUniqueID  from workorder_boxserialno where id = pToBoxSerialId;    \n" +
                "		/* Update Box Serial Stock On move from Assembly Stock Case */    \n" +
                "		IF(vIsStockAssyId > 0)    \n" +
                "		THEN     \n" +
                "			update workorder_boxserialno set qtyPerBox = qtyPerBox + pQty    \n" +
                "							,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId    \n" +
                "					where id = pToBoxSerialId;    \n" +
                "			update workorder_boxserialno set qtyPerBox = (qtyPerBox - pQty)    \n" +
                "					,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId    \n" +
                "			where id = pFromBoxSerialId;    \n" +
                "		ELSE    \n" +
                "			IF(vIsTrackbySerialNo = 0 or (vIsTrackbySerialNo is null))    \n" +
                "            THEN    \n" +
                "				update workorder_boxserialno set qtyPerBox = qtyPerBox + pQty    \n" +
                "							,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId    \n" +
                "					where id = pToBoxSerialId;    \n" +
                "				update workorder_boxserialno set qtyPerBox = (qtyPerBox - pQty)    \n" +
                "						,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId    \n" +
                "				where id = pFromBoxSerialId;    \n" +
                "			ELSE    \n" +
                "				SELECT COUNT(*) FROM serialNoList INTO vSerialCount;       \n" +
                "  \n" +
                "				SET vIndexNo = 0;                   \n" +
                "				/* Update Box Serial Stock On move from Traveler SR# Stock Move Case */    \n" +
                "				WHILE vIndexNo < vSerialCount DO                       \n" +
                "					SET vSerialNo = NULL;    \n" +
                "  \n" +
                "					SELECT serialNo INTO vSerialNo FROM serialNoList LIMIT vIndexNo,1;    \n" +
                "  \n" +
                "					/* Check  Serial No is 'MFR' or 'FINAL' */                      \n" +
                "					SELECT (CASE WHEN(a.serialType = 2) THEN a.refMFGSerialNo ELSE a.SerialNo END) ID                       \n" +
                "						,(CASE WHEN(a.serialType = 2) THEN (SELECT ID FROM workorder_serialmst ws                      \n" +
                "						WHERE a.SerialNo = a.refMFGSerialNo AND a.serialType = 1 AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                      \n" +
                "					ELSE a.ID END) SerialId                      \n" +
                "						INTO vSerialNo, vSerialNoId                  \n" +
                "					FROM workorder_serialmst a WHERE a.woId = pWOID AND a.deletedAt IS NULL AND a.isDeleted = 0 AND                \n" +
                "						((a.SerialNo = vSerialNo AND a.serialType = 1) OR     \n" +
                "					(a.SerialNo = vSerialNo AND a.serialType = 2 AND a.refMFGSerialNo IS NOT NULL)) LIMIT 1;                \n" +
                "  \n" +
                "					SELECT  id, COUNT(1)    \n" +
                "							INTO vBoxSerialTransId, vCountPassedSRNoCount FROM workorder_trans_boxserialno WHERE    \n" +
                "							serialID = vSerialNoId AND woBoxSerialID = pFromBoxSerialId AND deletedAt IS NULL AND isDeleted = 0;                    \n" +
                "  \n" +
                "					/* Check  Serial No is exists or not */                      \n" +
                "					IF(vCountPassedSRNoCount = 0)                      \n" +
                "					THEN     \n" +
                "						INSERT INTO tempValidationDetail (errorCode, serialNo, prodstatus, operationName)       \n" +
                "							VALUES (1, vSerialNo, concat( \"Not Found In Box ID:\", vFromBoxUniqueID), null);    \n" +
                "					ELSE	   					    \n" +
                "						update workorder_trans_boxserialno set woBoxSerialID =pToBoxSerialId , employeeID= pEmployeeID    \n" +
                "						,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId    \n" +
                "						where id = vBoxSerialTransId;    \n" +
                "  \n" +
                "						update workorder_boxserialno set qtyPerBox = (qtyPerBox - 1)    \n" +
                "								,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId    \n" +
                "						where id = pFromBoxSerialId;    \n" +
                "  \n" +
                "						update workorder_boxserialno set qtyPerBox = (qtyPerBox + 1)    \n" +
                "								,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId, updateByRoleId= pRoleId    \n" +
                "						where id = pToBoxSerialId;    \n" +
                "					END IF;                          \n" +
                "					SET vIndexNo = vIndexNo + 1;                      \n" +
                "				END WHILE;    \n" +
                "            END IF;    \n" +
                "		END IF;    \n" +
                "    SELECT * FROM tempValidationDetail;                      \n" +
                "    COMMIT;                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4837,'2.00','V1','Sproc_MoveBoxSerialNoQty  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4837:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ProcessedSerialQty;  \n" +
                "CREATE PROCEDURE `Sproc_ProcessedSerialQty`(                     \n" +
                "IN pWOOPID INT,                       \n" +
                "IN pWOID INT,                      \n" +
                "IN pWOTransID INT,                      \n" +
                "IN pSerialNoList JSON,                      \n" +
                "IN pProdStatus VARCHAR(5),                      \n" +
                "IN pOpID INT,                \n" +
                "IN pEmployeeID INT,                      \n" +
                "IN pUserId INT,                      \n" +
                "IN pRoleId INT,    \n" +
                "IN pSerialType INT                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE vExistingSerailNo INT;                       \n" +
                "    DECLARE vIdleSerailNo INT;                      \n" +
                "    DECLARE vFinalSerailNo VARCHAR(500);                      \n" +
                "    DECLARE vScrapSerailNoCount INT;                      \n" +
                "    DECLARE vCurrentWOOPNo DECIMAL(7,3);                      \n" +
                "    DECLARE vCountClusterOP INT;                      \n" +
                "    DECLARE vCurrWOOPClusterOp INT;                       \n" +
                "    DECLARE vCurrentStatus VARCHAR(5);                      \n" +
                "    DECLARE vCurrOperationName VARCHAR(500);                     \n" +
                "    DECLARE vClusterId INT;                      \n" +
                "    DECLARE vIsRework TINYINT(1);                      \n" +
                "    DECLARE vIsLoopOperation TINYINT(1);                     \n" +
                "    DECLARE vIsTrackBySerialNo TINYINT(1);                     \n" +
                "    DECLARE vIsTrackBySerialFromWOOP TINYINT(1);                      \n" +
                "    DECLARE vIsParallelOperation TINYINT(1);                  \n" +
                "    DECLARE vPreviosWOOPID INT;                          \n" +
                "    DECLARE vPreviousIsRework TINYINT(1);                        \n" +
                "    DECLARE vPreviousIsLoopOperation TINYINT(1);                       \n" +
                "    DECLARE vPreviousWOOPNo DECIMAL(7,3);                         \n" +
                "    DECLARE vNextWOOPID INT;                      \n" +
                "    DECLARE vNextIsRework TINYINT(1);                        \n" +
                "    DECLARE vNextIsLoopOperation TINYINT(1);                       \n" +
                "    DECLARE vNextWOOPNo DECIMAL(7,3);                      \n" +
                "    DECLARE vCountPassedSRNoCount INT;                      \n" +
                "    DECLARE vCountLoopPassedSRNoCount INT;                      \n" +
                "    DECLARE vCountLoopAlreadyPassedSRNoCount INT;         \n" +
                "    DECLARE vAlreadPassedCount INT;                          \n" +
                "    DECLARE vPassedFromLoopCount INT;                     \n" +
                "    DECLARE vSerialNoExists VARCHAR(500);                          \n" +
                "    DECLARE vIndexNo INT DEFAULT 0;                      \n" +
                "    DECLARE vSerialCount INT DEFAULT 0;                      \n" +
                "    DECLARE vSerialNo VARCHAR(500);                      \n" +
                "    DECLARE vIsFirstOperation TINYINT(1);                      \n" +
                "    DECLARE vSerialNoId INT;                      \n" +
                "	DECLARE vMatchClustorWOPOIDId INT;         \n" +
                "    DECLARE v_IsAllowSerialMappingWO int;     \n" +
                "  \n" +
                "		/*1 = Passed,2 = Reprocess Required,3 = Defect Observed,4 = Scrapped,5 = Rework Required        \n" +
                "			, 6=Missing Parts with Board, 7=Bypass */               \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION                                              \n" +
                "	BEGIN                                              \n" +
                "		ROLLBACK;                                                    \n" +
                "		RESIGNAL;                                                    \n" +
                "	END;                                                    \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                    \n" +
                "	 BEGIN                                                    \n" +
                "		ROLLBACK;                                              \n" +
                "		RESIGNAL;                                            \n" +
                "	END;                                              \n" +
                "	START TRANSACTION;   \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS serialText;                                          \n" +
                "		CREATE TEMPORARY TABLE serialText(txt TEXT );                                          \n" +
                "		INSERT INTO serialText VALUES(pSerialNoList);                                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS serialNoList;                                          \n" +
                "		#CREATE TEMPORARY TABLE serialNoList( serialNo VARCHAR(500) );                                          \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS serialNoList AS                                                                                          \n" +
                "		SELECT 	*                                                                                           \n" +
                "		FROM 	JSON_TABLE(                                                   \n" +
                "				pSerialNoList,                                                                                          \n" +
                "				\"$[*]\" COLUMNS(    			                                             \n" +
                "					`serialNo` VARCHAR(500) PATH \"$.serialNo\"  \n" +
                "				)                                                \n" +
                "			) AS WoSrNo;       \n" +
                "#		SET @SQL = CONCAT(\"insert into serialNoList (serialNo) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM serialText), \",\", \"'),('\"),\"');\");                                                  \n" +
                "#		PREPARE stmt1 FROM @SQL;                                          \n" +
                "#		EXECUTE stmt1;                                          \n" +
                "  \n" +
                "		-- Idle          \n" +
                "		-- 1-Passed          \n" +
                "		-- 2-Reprocessed          \n" +
                "		-- 3-DefectObserved          \n" +
                "		-- 4-Scrapped          \n" +
                "		-- 5-ReworkRequired          \n" +
                "		-- 6-Board with Missing Parts          \n" +
                "		-- 7-Bypass          \n" +
                "  \n" +
                "		/* Get Detail of current Workorder Operation */                      \n" +
                "		SELECT opNumber, isRework, isLoopOperation, isTrackBySerialNo, isTrackBySerialFromWOOP, isAllowFinalSerialMapping                \n" +
                "			INTO vCurrentWOOPNo, vIsRework, vIsLoopOperation, vIsTrackBySerialNo, vIsTrackBySerialFromWOOP, v_IsAllowSerialMappingWO                   \n" +
                "		FROM workorder_operation WHERE woOPID =pWOOPID AND qtyControl = 1                      \n" +
                "				AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1;                      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail                          \n" +
                "					( errorCode INT(11), serialNo VARCHAR(500), prodstatus VARCHAR(255), operationName VARCHAR(500));                        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempWoOperationList;                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempWoOperationList                      \n" +
                "			(woOPID INT(11),opID INT(11), woID INT(11),opNumber DECIMAL(7,3),opName VARCHAR(255),opOrder DECIMAL(6,2)                      \n" +
                "			,operationTypeID INT(11),opStatus INT(2),isRework TINYINT(1),isLoopOperation TINYINT(1),isTrackBySerialNo TINYINT(1), isTrackBySerialFromWOOP TINYINT(1), qtyControl TINYINT(1));			                         \n" +
                "  \n" +
                "		/* Get list of Operation for Work order */                      \n" +
                "		INSERT INTO tempWoOperationList(woOPID,opID, woID,opNumber,opName,opOrder,operationTypeID,opStatus,isRework,isLoopOperation,isTrackBySerialNo, isTrackBySerialFromWOOP, qtyControl)                      \n" +
                "					SELECT woOPID,opID, woID,opNumber,opName,opOrder,operationTypeID,opStatus,isRework,isLoopOperation,isTrackBySerialNo, isTrackBySerialFromWOOP, qtyControl                      \n" +
                "				FROM workorder_operation a WHERE woID = pWOID AND qtyControl = 1 AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempClustorOPList;                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempClustorOPList                      \n" +
                "			( woOPId INT(11), clusterID INT(11));                       \n" +
                "  \n" +
                "		/* Get list of Clustor for Work order */                      \n" +
                "		INSERT INTO tempClustorOPList (woOPId, clusterID)                        \n" +
                "					SELECT woOPID, clusterID FROM workorder_operation_cluster  WHERE                       \n" +
                "											clusterID IN (SELECT clusterID FROM workorder_cluster WHERE woID = pWOID                       \n" +
                "					AND deletedAt IS NULL AND isDeleted = 0)                      \n" +
                "					AND deletedAt IS NULL AND isDeleted = 0 ORDER BY 1 DESC;                              \n" +
                "		IF(SELECT COUNT(1)FROM tempWoOperationList WHERE woID = pWOID AND qtyControl = 1 AND             \n" +
                "			opNumber > vCurrentWOOPNo ORDER BY opNumber)            \n" +
                "		THEN                    \n" +
                "			SELECT opNumber, isRework, isLoopOperation, woOPID               \n" +
                "				INTO vNextWOOPNo, vNextIsRework, vNextIsLoopOperation, vNextWOOPID FROM tempWoOperationList                  \n" +
                "				WHERE woID = pWOID AND qtyControl = 1 AND opNumber > vCurrentWOOPNo ORDER BY opNumber LIMIT 1;                  \n" +
                "		END IF;            \n" +
                "		SELECT COUNT(*) FROM serialNoList INTO vSerialCount;                          \n" +
                "		SET vIndexNo = 0;     \n" +
                "  \n" +
                "		WHILE vIndexNo < vSerialCount DO                       \n" +
                "			SET vSerialNo = NULL;                      \n" +
                "			SET vFinalSerailNo = NULL;                      \n" +
                "			SET vScrapSerailNoCount = 0;                      \n" +
                "			SET vCountPassedSRNoCount= 0;                      \n" +
                "			SET vCountLoopPassedSRNoCount= 0;            \n" +
                "			SET vCountLoopAlreadyPassedSRNoCount= 0; 			        \n" +
                "			SET vAlreadPassedCount = 0;                      \n" +
                "			SET vPassedFromLoopCount = 0;                     \n" +
                "			SET vPreviousWOOPNo = NULL;                      \n" +
                "			SET vPreviousIsRework = 0;                       \n" +
                "			SET vPreviousIsLoopOperation = 0;                      \n" +
                "			SET vPreviosWOOPID = NULL;                      \n" +
                "			SET vClusterId = NULL;                      \n" +
                "			SET vIsParallelOperation = 0;                      \n" +
                "			SET vCountClusterOP = 0;                      \n" +
                "			SET vCurrWOOPClusterOp = NULL;                      \n" +
                "			SET vIsFirstOperation = 0;			                      \n" +
                "			SET vCurrentStatus = NULL;                      \n" +
                "			SET vCurrOperationName =NULL;              \n" +
                "            SET vMatchClustorWOPOIDId = NULL;            \n" +
                "			SELECT serialNo INTO vSerialNo FROM serialNoList LIMIT vIndexNo,1;    \n" +
                "    			-- pSerialType    \n" +
                "			/* Check  Serial No is 'MFR' or 'FINAL' */             \n" +
                "            IF(pSerialType is null)    \n" +
                "            THEN    \n" +
                "				SELECT (CASE WHEN(a.serialType = 2) THEN a.refMFGSerialNo ELSE a.SerialNo END) ID,                       \n" +
                "					(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE (SELECT ws.SerialNo FROM workorder_serialmst ws                      \n" +
                "						WHERE ws.refMFGSerialNoId = a.ID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1) END) finalSerialNo ,                      \n" +
                "					(CASE WHEN(pSerialType = 2) THEN (SELECT ID FROM workorder_serialmst ws                      \n" +
                "						WHERE a.SerialNo = a.refMFGSerialNo AND a.serialType = 1 AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)                      \n" +
                "					ELSE a.ID END) SerialId                      \n" +
                "					INTO vSerialNo, vFinalSerailNo, vSerialNoId                  \n" +
                "				FROM workorder_serialmst a WHERE a.woId = pWOID AND a.deletedAt IS NULL AND a.isDeleted = 0 AND                \n" +
                "					((a.SerialNo = vSerialNo AND a.serialType = 1) OR (a.SerialNo = vSerialNo AND a.serialType = 2 AND a.refMFGSerialNo IS NOT NULL)) LIMIT 1;                \n" +
                "			ELSE    \n" +
                "				SELECT a.SerialNo ID,                       \n" +
                "					a.ID SerialId                      \n" +
                "					INTO vSerialNo, vSerialNoId                  \n" +
                "				FROM workorder_serialmst a WHERE a.woId = pWOID AND a.deletedAt IS NULL AND a.isDeleted = 0 AND                \n" +
                "					((a.SerialNo = vSerialNo AND a.serialType = pSerialType)) LIMIT 1;    \n" +
                "				SET vFinalSerailNo = case when(pSerialType = 2) then vSerialNo else NULL end;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "			/* Check  Serial No is exists or not */                      \n" +
                "			IF(vSerialNo IS NULL)                      \n" +
                "			THEN                    \n" +
                "				SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;                  \n" +
                "			ELSE         \n" +
                "				IF(pSerialType is null)    \n" +
                "                then    \n" +
                "					SET vIdleSerailNo = (SELECT ID FROM workorder_serialmst WHERE  SerialNo = vSerialNo AND                        \n" +
                "						currStatus ='Idle' AND serialType = 1 AND woID = pWOID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1);                      \n" +
                "				else    \n" +
                "					SET vIdleSerailNo = (SELECT ID FROM workorder_serialmst WHERE  SerialNo = vSerialNo AND                        \n" +
                "						currStatus ='Idle' AND serialType = pSerialType AND woID = pWOID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1);                      \n" +
                "                end if;    \n" +
                "  \n" +
                "				IF(vIdleSerailNo IS NULL)                      \n" +
                "				THEN             \n" +
                "					/* Current Serial No already 'Scrap' = 4 => 'Scrap' or not */                      \n" +
                "					SET vScrapSerailNoCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0                      \n" +
                "										AND woID = pWOID AND serialNo IN (vSerialNo) AND prodstatus = '4');                      \n" +
                "  \n" +
                "					 #-------------- Serial No already 'Scrap' or not ---------------------                      \n" +
                "					IF(vScrapSerailNoCount > 0)                      \n" +
                "					THEN                      \n" +
                "						SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;                  \n" +
                "					ELSE    \n" +
                "						-- v_IsAllowSerialMappingWO    \n" +
                "                        IF(v_IsAllowSerialMappingWO = 1 and vFinalSerailNo is null)    \n" +
                "                        THEN								    \n" +
                "							INSERT INTO tempValidationDetail (errorCode, serialNo, prodstatus, operationName)       \n" +
                "								VALUES (1, vSerialNo, 'Require mapping serial#', '');     \n" +
                "                        ELSE    \n" +
                "							SET vCountPassedSRNoCount = 0;               \n" +
                "							IF (vNextIsLoopOperation = 1) THEN              \n" +
                "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */                      \n" +
                "								SET vPassedFromLoopCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND                   \n" +
                "									woID = pWOID AND woOPID = vNextWOOPID AND serialNo IN (vSerialNo) AND prodstatus IN ('2','4'));                      \n" +
                "  \n" +
                "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */                      \n" +
                "								SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND                   \n" +
                "								woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus IN ('1','4','6','7'));                       \n" +
                "							ELSEIF (vIsLoopOperation = 1) THEN              \n" +
                "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */                      \n" +
                "								SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND                   \n" +
                "								woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus IN ('4'));                       \n" +
                "  \n" +
                "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */                      \n" +
                "								SET vPassedFromLoopCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND                   \n" +
                "								woID = pWOID AND woOPID = pWOOPID AND woTransID = pWOTransID AND serialNo IN (vSerialNo) AND prodstatus IN ('1'));                       \n" +
                "							ELSE              \n" +
                "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */                      \n" +
                "								SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND                   \n" +
                "								woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus != '2');                       \n" +
                "							END IF;                        \n" +
                "  \n" +
                "							IF((vNextIsLoopOperation = 1 AND vPassedFromLoopCount > 0) OR (vIsLoopOperation = 1 AND vPassedFromLoopCount > 0) OR vAlreadPassedCount > 0)                      \n" +
                "							THEN	                      \n" +
                "								SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;                  \n" +
                "							ELSE	                      \n" +
                "								IF(vIsTrackBySerialNo = 1) THEN          \n" +
                "									SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList WHERE isTrackBySerialFromWOOP=1 ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;                      \n" +
                "								ELSE          \n" +
                "									SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;                      \n" +
                "								END IF;          \n" +
                "  \n" +
                "								IF(vIsFirstOperation = 1)                  \n" +
                "								THEN                      \n" +
                "									SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,                  \n" +
                "											pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;								                     \n" +
                "								ELSE                   \n" +
                "									#-------------- Current Operation contain setial no as a 'Reprocess'  ---------------------                      \n" +
                "									SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0                  \n" +
                "													AND woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus = '2');                              \n" +
                "  \n" +
                "									IF(vAlreadPassedCount > 0)                      \n" +
                "									THEN                      \n" +
                "										SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,                  \n" +
                "											pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;	                      \n" +
                "									ELSE                          \n" +
                "										SELECT opNumber, isRework, isLoopOperation, woOPID                   \n" +
                "										INTO vPreviousWOOPNo, vPreviousIsRework, vPreviousIsLoopOperation, vPreviosWOOPID FROM tempWoOperationList                      \n" +
                "											 WHERE woID = pWOID AND opNumber < vCurrentWOOPNo ORDER BY opNumber DESC LIMIT 1;                      \n" +
                "  \n" +
                "										/* ---------- Check Current Operation Is Rework ----- */                      \n" +
                "										IF(vIsRework = 0)                      \n" +
                "										THEN                                                   \n" +
                "											IF(vPreviousIsRework = 1)                      \n" +
                "											THEN               \n" +
                "												IF(vPreviousIsLoopOperation = 1)                   \n" +
                "												THEN                  \n" +
                "													/* Get Before Work Order Operation of 'Rework'  */                      \n" +
                "													SELECT opNumber, woOPID INTO vPreviousWOOPNo, vPreviosWOOPID FROM tempWoOperationList                      \n" +
                "															WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1;                     \n" +
                "  \n" +
                "													IF((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID) IS NOT NULL)                      \n" +
                "													THEN                    \n" +
                "														SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;                  \n" +
                "														SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;                      \n" +
                "  \n" +
                "														/* ---------- Is cluser 'Parellel - 1' or 'Sequence - 0' ----- */                      \n" +
                "														IF(vIsParallelOperation = 1)                      \n" +
                "														THEN                      \n" +
                "															/* ---------- All Operation Passed through Cluster ----- */                      \n" +
                "															SET vMatchClustorWOPOIDId = NULL;            \n" +
                "															SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);            \n" +
                "															SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)                   \n" +
                "																THEN 1 ELSE 0 END)            \n" +
                "															INTO vCountPassedSRNoCount  FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                      \n" +
                "																	AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId)                   \n" +
                "																	AND woTransprodID IS NOT NULL                  \n" +
                "																	AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "														ELSE                      \n" +
                "															SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                        \n" +
                "																	AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL                  \n" +
                "																	AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "														END IF;                      \n" +
                "													ELSE                      \n" +
                "  \n" +
                "															/* ----------  ----- */                      \n" +
                "															SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                        \n" +
                "																	AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL                  \n" +
                "																	AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "													END IF;                      \n" +
                "												ELSEIF(vNextIsLoopOperation = 1)                  \n" +
                "												THEN												                  \n" +
                "													/* Next Work Order Operation 'Rework with Loop Operation'  */                      \n" +
                "													SELECT COUNT(1) INTO vCountLoopPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7') AND woTransprodID IS NOT NULL                      \n" +
                "																	AND woOPID = vNextWOOPID AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "													IF(vCountLoopPassedSRNoCount = 0)                      \n" +
                "													THEN                  \n" +
                "														/* Previous Work Order Operation 'Rework'  */                      \n" +
                "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7') AND woTransprodID IS NOT NULL                  \n" +
                "																	AND woOPID = vPreviosWOOPID AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "														IF(vCountPassedSRNoCount = 0)                      \n" +
                "														THEN                      \n" +
                "															/* Get Before Work Order Operation of 'Rework'  */                      \n" +
                "															SELECT opNumber, woOPID INTO vPreviousWOOPNo, vPreviosWOOPID FROM tempWoOperationList                      \n" +
                "																WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1;                      \n" +
                "															SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;                         \n" +
                "  \n" +
                "															IF(vClusterId IS NOT NULL)                      \n" +
                "															THEN                      \n" +
                "																SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;                      \n" +
                "  \n" +
                "																/* ---------- Is cluser 'Parellel - 1' or 'Sequence - 0' ----- */                      \n" +
                "																IF(vIsParallelOperation = 1)                      \n" +
                "																THEN                      \n" +
                "																	/* ---------- All Operation Passed through Cluster ----- */                \n" +
                "													SET vMatchClustorWOPOIDId = NULL;            \n" +
                "																	SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);            \n" +
                "																	SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)                   \n" +
                "																		THEN 1 ELSE 0 END)            \n" +
                "																	INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                      \n" +
                "																			AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId) AND woTransprodID IS NOT NULL                  \n" +
                "																			AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "																ELSE                      \n" +
                "																	SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                      \n" +
                "																				AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL                  \n" +
                "																				AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "																END IF;                      \n" +
                "															ELSE                      \n" +
                "																/* ----------  ----- */                      \n" +
                "																SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                       \n" +
                "																			AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL                  \n" +
                "																			AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "															END IF;                      \n" +
                "														END IF;                      \n" +
                "													ELSE                  \n" +
                "														/* ----------  ----- */                      \n" +
                "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                      \n" +
                "															AND woOPID IN (vNextWOOPID)                      \n" +
                "															AND serialNo = vSerialNo AND woTransprodID IS NOT NULL                  \n" +
                "															AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "													END IF;                  \n" +
                "												ELSE                  \n" +
                "													/* Previous Work Order Operation 'Rework'  */                      \n" +
                "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7') AND woTransprodID IS NOT NULL                     \n" +
                "																	AND woOPID = vPreviosWOOPID AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "													IF(vCountPassedSRNoCount = 0)                      \n" +
                "													THEN                      \n" +
                "														/* Get Before Work Order Operation of 'Rework'  */                      \n" +
                "														SELECT opNumber, woOPID INTO vPreviousWOOPNo, vPreviosWOOPID FROM tempWoOperationList                      \n" +
                "																WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1;                    \n" +
                "  \n" +
                "														IF((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID) IS NOT NULL)                      \n" +
                "														THEN                    \n" +
                "															SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;                       \n" +
                "															SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;                      \n" +
                "  \n" +
                "															/* ---------- Is cluser 'Parellel - 1' or 'Sequence - 0' ----- */                      \n" +
                "															IF(vIsParallelOperation = 1)                      \n" +
                "															THEN                      \n" +
                "																/* ---------- All Operation Passed through Cluster ----- */                 \n" +
                "																SET vMatchClustorWOPOIDId = NULL;            \n" +
                "																SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);            \n" +
                "																SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)                   \n" +
                "																		THEN 1 ELSE 0 END)                  \n" +
                "																INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                      \n" +
                "																		AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId) AND woTransprodID IS NOT NULL                    \n" +
                "																		AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "															ELSE                      \n" +
                "																SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                       \n" +
                "																			AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL                  \n" +
                "																			AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "															END IF;                      \n" +
                "														ELSE                      \n" +
                "															/* ---------- Not Cluster then Consider Single operation ----- */                      \n" +
                "															SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')                   \n" +
                "																		AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL                  \n" +
                "																		AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "														END IF;                      \n" +
                "													END IF;                      \n" +
                "												END IF;                  \n" +
                "											ELSE	                  \n" +
                "												/*-------------- Previous Operation Not Rework Operation ----------------- */                  \n" +
                "												/* ---------- Check Previous Operation and Current Operation Cluser ----- */                      \n" +
                "												SET vCountClusterOP = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.woOPID = vPreviosWOOPID);                      \n" +
                "  \n" +
                "												/* ----------- Current Operation into Cluser or not ---- */                      \n" +
                "												IF(((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPID = pWOOPID)) IS NOT NULL)                      \n" +
                "												THEN												                  \n" +
                "													SET vCurrWOOPClusterOp = (SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPID = pWOOPID);                   \n" +
                "  \n" +
                "													SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vCurrWOOPClusterOp;                  \n" +
                "  \n" +
                "													IF(vIsParallelOperation = 1)                  \n" +
                "													THEN                  \n" +
                "														/* ---------- Is cluser 'Parellel' or 'Sequence' ----- */                      \n" +
                "														SELECT opNumber INTO vPreviousWOOPNo FROM tempWoOperationList WHERE                   \n" +
                "															woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vCurrWOOPClusterOp)                   \n" +
                "															ORDER BY opNumber ASC LIMIT 1;                      \n" +
                "														SET vPreviosWOOPID = (SELECT woOPId FROM tempWoOperationList WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1);                    					    												                    \n" +
                "													END IF;                  \n" +
                "  \n" +
                "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID AND                   \n" +
                "															prodStatus NOT IN ('2','4') AND woOPID = vPreviosWOOPID AND woTransprodID IS NOT NULL                     \n" +
                "															AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                   \n" +
                "												ELSEIF (vCountClusterOP > 0)                      \n" +
                "												THEN                     \n" +
                "													/* ------- Previous Operation into Cluster Operation ------------------- */                  \n" +
                "													SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;                         \n" +
                "  \n" +
                "													SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;                      \n" +
                "  \n" +
                "													/* ---------- Is cluser 'Parellel' or 'Sequence' ----- */                      \n" +
                "													IF(vIsParallelOperation = 1)                  \n" +
                "													THEN                      \n" +
                "														/* ---------- All Operation Passed through Cluster ----- */                      \n" +
                "														SET vMatchClustorWOPOIDId = NULL;            \n" +
                "														SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);            \n" +
                "														SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)                   \n" +
                "																THEN 1 ELSE 0 END)                   \n" +
                "														INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID AND                  \n" +
                "																	deletedAt IS NULL AND isDeleted = 0 AND                  \n" +
                "																	prodStatus NOT IN ('2','4') AND woTransprodID IS NOT NULL                  \n" +
                "																	AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId)                   \n" +
                "																	AND serialNo = vSerialNo;                      \n" +
                "													ELSE										                      \n" +
                "														/* ---------- All Operation Passed through Cluster ----- */                      \n" +
                "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID AND                  \n" +
                "																	deletedAt IS NULL AND isDeleted = 0 AND prodStatus NOT IN ('2','4') AND woTransprodID IS NOT NULL                  \n" +
                "																	AND woOPID IN (vPreviosWOOPID) AND serialNo = vSerialNo;                      \n" +
                "													END IF;                             \n" +
                "												ELSE                      \n" +
                "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID                  \n" +
                "																	 AND deletedAt IS NULL AND isDeleted = 0 AND prodStatus NOT IN ('2','4') AND woTransprodID IS NOT NULL                  \n" +
                "																	AND woOPID IN (vPreviosWOOPID) AND serialNo = vSerialNo;							                      \n" +
                "												END IF;                         \n" +
                "											END IF;                      \n" +
                "										ELSE                   \n" +
                "											/* ---------- Check Previous Operation and Current Operation Cluser ----- */                                                          \n" +
                "											IF ((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID) IS NOT NULL)                    \n" +
                "											THEN											                  \n" +
                "												SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;                  \n" +
                "												SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;                      \n" +
                "  \n" +
                "												/* ---------- Is cluser '1 - Parellel' or '0 - Sequence' ----- */                      \n" +
                "												IF(vIsParallelOperation = 1)                      \n" +
                "												THEN                  \n" +
                "													/* ---------- All Operation contain 'Defect - 3' or 'Rework - 5' through Cluster ----- */                      \n" +
                "													SELECT COUNT(1) INTO vCountPassedSRNoCount  FROM workorder_trans_serialno WHERE (prodStatus = '5'  OR prodStatus = '3' )                      \n" +
                "														AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId)                      \n" +
                "														AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "												ELSE                      \n" +
                "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE (prodStatus = '5'  OR prodStatus = '3' )                      \n" +
                "																AND  woOPID IN (vPreviosWOOPID)                      \n" +
                "																AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;                      \n" +
                "												END IF;                   \n" +
                "											ELSE                   \n" +
                "												IF (vIsLoopOperation = 1) THEN            \n" +
                "													/* ---------- All Operation contain shoudl not passed/scrapped/bypass/missing part ----- */                        \n" +
                "													SELECT COUNT(1) INTO  vCountLoopAlreadyPassedSRNoCount FROM workorder_trans_serialno WHERE (prodStatus IN ('1','4','6','7'))           \n" +
                "															AND woOPID IN (vPreviosWOOPID) AND deletedAt IS NULL AND isDeleted = 0 AND serialNo = vSerialNo;          \n" +
                "  \n" +
                "													IF(vCountLoopAlreadyPassedSRNoCount = 0) THEN          \n" +
                "														/* ---------- All Operation contain 'Defect - 3' or 'Rework - 5' through Cluster ----- */                        \n" +
                "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE ((prodStatus = '5'  OR prodStatus = '3'))                        \n" +
                "															AND woOPID IN (vPreviosWOOPID) AND deletedAt IS NULL AND isDeleted = 0 AND serialNo = vSerialNo;                    \n" +
                "													END IF;          \n" +
                "												ELSE          \n" +
                "													/* ---------- All Operation contain 'Defect - 3' or 'Rework - 5' through Cluster ----- */                        \n" +
                "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE ((prodStatus = '5'  OR prodStatus = '3'))                        \n" +
                "														AND woOPID IN (vPreviosWOOPID) AND deletedAt IS NULL AND isDeleted = 0 AND serialNo = vSerialNo;                    \n" +
                "												END IF;          \n" +
                "											END IF;                         \n" +
                "										END IF;                      \n" +
                "  \n" +
                "										IF(vCountPassedSRNoCount > 0)                      \n" +
                "										THEN                      \n" +
                "											SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,                  \n" +
                "											pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;	                    \n" +
                "										ELSE                      \n" +
                "											SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;                  \n" +
                "										END IF;                      \n" +
                "									END IF;                   \n" +
                "								END IF;					                      \n" +
                "							END IF;    \n" +
                "						END IF;    \n" +
                "					END IF;                      \n" +
                "				ELSE                      \n" +
                "					IF(vIsTrackBySerialNo = 1) THEN          \n" +
                "						SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList WHERE isTrackBySerialFromWOOP=1 ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;                      \n" +
                "					ELSE          \n" +
                "						SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;                      \n" +
                "					END IF;          \n" +
                "  \n" +
                "					IF(vIsFirstOperation = 0)                      \n" +
                "					THEN                      \n" +
                "						SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;                  \n" +
                "					ELSE                      \n" +
                "						SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,                  \n" +
                "										pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;	                     \n" +
                "					END IF;                      \n" +
                "				END IF;                      \n" +
                "			END IF;                          \n" +
                "			SET vIndexNo = vIndexNo + 1;                      \n" +
                "		END WHILE;		                      \n" +
                "	SELECT * FROM tempValidationDetail;                      \n" +
                "    COMMIT;                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4838,'2.00','V1',' Sproc_ProcessedSerialQty - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4838:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveWoTransPackagingDetail;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWoTransPackagingDetail`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pWoID INT,    \n" +
                "	IN pOpID INT    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS Results;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT wotransdet.*,wos.SerialNo,    \n" +
                "			 (SELECT u.username FROM users u WHERE u.id=wotransdet.createdBy ) AS addedBy    \n" +
                " 				 FROM Workorder_Trans_PackagingDetail wotransdet    \n" +
                "                                 JOIN 	workorder_serialmst wos ON wos.ID=wotransdet.serialID			     \n" +
                "			         WHERE wotransdet.deletedAt IS NULL     \n" +
                "			         AND wotransdet.woID = pWoID AND wotransdet.opID = pOpID;    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"woTransPackagingDetailID DESC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4839,'2.00','V1','Sproc_RetrieveWoTransPackagingDetail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4839:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveWOTransSerialnoHistory;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWOTransSerialnoHistory`(                  \n" +
                "	IN ppageIndex INT,                  \n" +
                "	IN precordPerPage INT,                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "	IN pWhereClause VARCHAR(16383),         \n" +
                "	IN pWOSerialNoID INT         \n" +
                "	)  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "		DECLARE pOffset INT;                  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;         \n" +
                "        DECLARE serialNoType tinyint;        \n" +
                "        DECLARE vRefwoSerialNoID int ;        \n" +
                "  \n" +
                "        select serialType,refMFGSerialNoId into serialNoType,vRefwoSerialNoID from workorder_serialmst where id = pWOSerialNoID and isDeleted = 0;        \n" +
                "  \n" +
                "        if(serialNoType = 1) then        \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS Results_Sproc_RetrieveWOTransSerialnoHistory;              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results_Sproc_RetrieveWOTransSerialnoHistory AS                  \n" +
                "			SELECT distinct woTransSerialID, wts.woTransID, wts.woID, wts.opID, wts.employeeID, wts.serialNo, wts.prodStatus,   wts.woOPID,        \n" +
                "            ws.serialNo as productSerialNO,        \n" +
                "			fun_getOperationNameByWOOPID(wts.woOPID) opName,        \n" +
                "            fun_getUserNameByEmployeID(wts.employeeID) employeeName,        \n" +
                "			fun_getUserNameByID(wts.createdBy) createdBy,        \n" +
                "			fun_getUserNameByID(wts.updatedBy) updatedby,        \n" +
                "			fun_getRoleByID(wts.createByRoleId)createByRoleId,        \n" +
                "			fun_getRoleByID(wts.updateByRoleId)updatedbyRole,        \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wts.createdAt) createdAt,                  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wts.updatedAt) updatedAt        \n" +
                "			FROM workorder_trans_serialno wts        \n" +
                "            left join workorder_serialmst ws on ws.refMFGSerialNoId = wts.refwoSerialNoID         \n" +
                "			WHERE wts.`deletedAt` IS NULL and wts.isDeleted = 0           \n" +
                "			AND wts.`refwoSerialNoID` = pWOSerialNoID;                \n" +
                "  \n" +
                "  else if(serialNoType = 2) then        \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS Results_Sproc_RetrieveWOTransSerialnoHistory;              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results_Sproc_RetrieveWOTransSerialnoHistory AS                  \n" +
                "			SELECT distinct woTransSerialID, wts.woTransID, wts.woID, wts.opID, wts.employeeID, wts.serialNo, wts.prodStatus,   wts.woOPID,        \n" +
                "            ws.serialNo as productSerialNO,        \n" +
                "			fun_getOperationNameByWOOPID(wts.woOPID) opName,        \n" +
                "            fun_getUserNameByEmployeID(wts.employeeID) employeeName,        \n" +
                "			fun_getUserNameByID(wts.createdBy) createdBy,        \n" +
                "			fun_getUserNameByID(wts.updatedBy) updatedby,        \n" +
                "			fun_getRoleByID(wts.createByRoleId)createByRoleId,        \n" +
                "			fun_getRoleByID(wts.updateByRoleId)updatedbyRole,        \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wts.createdAt) createdAt,                  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wts.updatedAt) updatedAt        \n" +
                "			FROM workorder_trans_serialno wts        \n" +
                "            left join workorder_serialmst ws on ws.refMFGSerialNoId = wts.refwoSerialNoID       \n" +
                "			WHERE wts.`deletedAt` IS NULL and wts.isDeleted = 0           \n" +
                "			AND wts.`refwoSerialNoID` = vRefwoSerialNoID;    \n" +
                "		end if;        \n" +
                "	end if;        \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"woTransSerialID desc\") ;                  \n" +
                "		ELSE                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "			SET pWhereClause = '1=1' ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "		ELSE	                  \n" +
                "			SET rowNumWhere = '';                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		/* to get total count of rows */                  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM Results_Sproc_RetrieveWOTransSerialnoHistory where \", pWhereClause );                  \n" +
                "		PREPARE query1 FROM @SQLStatement1;                  \n" +
                "		EXECUTE query1;                  \n" +
                "		DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results_Sproc_RetrieveWOTransSerialnoHistory where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "		PREPARE query2 FROM @SQLStatement2;                  \n" +
                "		EXECUTE query2;                  \n" +
                "		DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "		/* to get total count of reprocessed quantity rows - id: '2', status: 'Reprocessed Qty' */                \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*) FROM  Results_Sproc_RetrieveWOTransSerialnoHistory where \", pWhereClause ,\" AND prodStatus = 2 \");                  \n" +
                "		PREPARE query3 FROM @SQLStatement3;                  \n" +
                "		EXECUTE query3;                  \n" +
                "		DEALLOCATE PREPARE query3;                  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results_Sproc_RetrieveWOTransSerialnoHistory;                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4840,'2.00','V1','Sproc_RetrieveWOTransSerialnoHistory  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4840:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(                               \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "	DECLARE pOffset INT;                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                                         \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);                 \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);               \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);                \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);               \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);              \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);                  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);               \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;                        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                               \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 	              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                  \n" +
                "	ELSE	                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                  \n" +
                "	END IF;                            \n" +
                "	IF (v_ParentWHType = 'M') THEN              \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"              \n" +
                "					SELECT 		DISTINCT c.id,               \n" +
                "							c.salesOrderDetID,                              \n" +
                "							c.refAssyId,                              \n" +
                "							c.subAssyID,                              \n" +
                "							c.plannKitNumber,                              \n" +
                "							c.poQty,                              \n" +
                "							c.poDueDate,                              \n" +
                "							c.mfrLeadTime,                              \n" +
                "							c.materialDockDate,                              \n" +
                "							c.kitReleaseQty,                              \n" +
                "							c.kitReleaseDate,                              \n" +
                "							c.feasibilityWithAllocatedQty,                   \n" +
                "							c.actualKitReleaseDate,                         \n" +
                "							c.releasedBy,                              \n" +
                "							c.releaseTimeFeasibility,                              \n" +
                "							c.kitStatus,                              \n" +
                "							c.rushJob,                              \n" +
                "							c.mismatchItem,                              \n" +
                "							c.woStatusID,                              \n" +
                "							c.refPlanId,                              \n" +
                "							c.releasedNote,                              \n" +
                "							c.releaseKitNumber,                              \n" +
                "							c.kitReturnStatus,              \n" +
                "							c.woID,              \n" +
                "							c.workorderNumber              \n" +
                "					FROM 		(                              \n" +
                "								SELECT 		id,                              \n" +
                "										salesOrderDetID,                              \n" +
                "										refAssyId,                              \n" +
                "										subAssyID,                              \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate                              \n" +
                "								FROM 		vu_release_plan_detail                               \n" +
                "								WHERE 		kitStatus = 'P'                              \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID                              \n" +
                "							) AS b                               \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id	                              \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID                               \n" +
                "								AND c.refAssyId = b.refAssyId                               \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)                              \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate              \n" +
                "			\");              \n" +
                "	ELSE              \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"              \n" +
                "					SELECT 		DISTINCT c.id,               \n" +
                "							c.salesOrderDetID,                              \n" +
                "							c.refAssyId,                              \n" +
                "							c.subAssyID,                              \n" +
                "							c.plannKitNumber,                              \n" +
                "							c.poQty,                              \n" +
                "							c.poDueDate,                              \n" +
                "							c.mfrLeadTime,                              \n" +
                "							c.materialDockDate,                              \n" +
                "							c.kitReleaseQty,                              \n" +
                "							c.kitReleaseDate,                              \n" +
                "							c.feasibilityWithAllocatedQty,                   \n" +
                "							c.actualKitReleaseDate,                         \n" +
                "							c.releasedBy,                              \n" +
                "							c.releaseTimeFeasibility,                              \n" +
                "							c.kitStatus,                              \n" +
                "							c.rushJob,                              \n" +
                "							c.mismatchItem,                              \n" +
                "							c.woStatusID,                              \n" +
                "							c.refPlanId,                              \n" +
                "							c.releasedNote,                              \n" +
                "							c.releaseKitNumber,                              \n" +
                "							c.kitReturnStatus,              \n" +
                "							c.woID,              \n" +
                "							c.workorderNumber              \n" +
                "					FROM 		(                              \n" +
                "								SELECT 		MAX(id) AS id,                              \n" +
                "										salesOrderDetID,                              \n" +
                "										refAssyId,                              \n" +
                "										subAssyID,                              \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate                              \n" +
                "								FROM 		vu_release_plan_detail                               \n" +
                "								WHERE 		kitStatus = 'R'                              \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID                              \n" +
                "							) AS b                               \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id	                              \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID                               \n" +
                "								AND c.refAssyId = b.refAssyId                               \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)                              \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate              \n" +
                "			\");              \n" +
                "	END IF;              \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN              \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN              \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");              \n" +
                "		ELSE              \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"              \n" +
                "				csd.binId IN (                          \n" +
                "						SELECT 	id                          \n" +
                "						FROM 	binmst                          \n" +
                "						WHERE 	deletedAt IS NULL                          \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'                          \n" +
                "					)              \n" +
                "			\");              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN              \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");              \n" +
                "		ELSE              \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"               \n" +
                "				ka.refUIDId IN (                          \n" +
                "					SELECT 	id                           \n" +
                "					FROM 	component_sid_stock                           \n" +
                "					WHERE 	deletedAt IS NULL                           \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'                          \n" +
                "				)              \n" +
                "			\");              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"               \n" +
                "			EXISTS (                                  \n" +
                "				SELECT 		1                           \n" +
                "				FROM 		kit_allocation ka                                  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId                                        \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id                           \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)                            \n" +
                "							AND ka.status = 'A'                          \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")                          \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")                          \n" +
                "			)              \n" +
                "		\");              \n" +
                "	ELSE              \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");              \n" +
                "	END IF;              \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");              \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	              \n" +
                "						(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"              \n" +
                "								ELSE               \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"              \n" +
                "							END              \n" +
                "						)              \n" +
                "					 \");              \n" +
                "	ELSE               \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	              \n" +
                "						(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = sd.partID              \n" +
                "								ELSE               \n" +
                "									kad.partId = kad.partId              \n" +
                "							END              \n" +
                "						)              \n" +
                "					 \");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"              \n" +
                "								ELSE 	              \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"              \n" +
                "							END              \n" +
                "						)              \n" +
                "					\");              \n" +
                "	ELSE              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = sd.partID              \n" +
                "								ELSE 	              \n" +
                "									kad.partId = kad.partId              \n" +
                "							END              \n" +
                "						)              \n" +
                "					\");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN            \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");            \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");            \n" +
                "		END IF;            \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");            \n" +
                "		END IF;            \n" +
                "	ELSE            \n" +
                "		IF (pIsCheckPRE = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN            \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";            \n" +
                "		END IF;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"               \n" +
                "		SELECT	a.*,              \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore              \n" +
                "		FROM	(              \n" +
                "			SELECT 		sd.id refSalesOrderDetID, 	              \n" +
                "					sd.kitNumber, 	              \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,               \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,              \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,              \n" +
                "					sd.partID assyMainId,	              \n" +
                "					c.mfgPN assyMainName,		              \n" +
                "					c.PIDCode assyMainPIDCode,              \n" +
                "					kad.partId assySubId,                 \n" +
                "					cs.mfgPN assySubName,		              \n" +
                "					cs.PIDCode assySubPIDCode,               \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,                   \n" +
                "					sd.kitNumber kitName,              \n" +
                "					s.id soId,  			              \n" +
                "					s.poNumber, 					              \n" +
                "					s.salesOrderNumber, 	              \n" +
                "					s.poDate, 					              \n" +
                "					sd.qty, 			              \n" +
                "					sd.kitQty,				              \n" +
                "					kad.totalAssyBuildQty,			              \n" +
                "					\", pDeptID ,\" AS deptID,	              \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,              \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,					              \n" +
                "					IFNULL(b.uidCount, 0) uidCount,				              \n" +
                "					IFNULL(b.binCount, 0) binCount,					              \n" +
                "					ka.kitReleaseStatus,              \n" +
                "					ka.totalLines,			              \n" +
                "					ka.shortageLines,				              \n" +
                "					sd.isHotJob,  			              \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  		              \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,			              \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,              \n" +
                "					ka.kitPercentage,	                 \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,		              \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,            \n" +
                "					(                              \n" +
                "						SELECT 	COUNT(1)                               \n" +
                "						FROM 	vu_release_plan_detail                               \n" +
                "						WHERE 	salesOrderDetID = sd.id              \n" +
                "								AND refAssyId = sd.partID               \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)                               \n" +
                "					) totalKitPlan,                              \n" +
                "					(                              \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)                               \n" +
                "						FROM 	vu_release_plan_detail vr                              \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id                              \n" +
                "								AND vr.refAssyId = sd.partID                               \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)                               \n" +
                "								AND vr.kitStatus = 'R'                              \n" +
                "					) totalKitReleasePlan,                     \n" +
                "					(                              \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt                              \n" +
                "						FROM 	holdunholdtrans h                               \n" +
                "						WHERE 	h.refTransId = sd.id                               \n" +
                "								AND h.refType = 'PO'                               \n" +
                "								AND h.`status` = 'H'                               \n" +
                "						ORDER BY h.id DESC                               \n" +
                "						LIMIT 1                              \n" +
                "					) poHalt,                              \n" +
                "					(                              \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt                              \n" +
                "						FROM 	(                              \n" +
                "								SELECT 	a.haltTooltip                              \n" +
                "								FROM 	(                              \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip                               \n" +
                "										FROM 	holdunholdtrans h                               \n" +
                "										WHERE 	h.refTransId = sd.id              \n" +
                "												AND h.refType = 'KR'                               \n" +
                "												AND h.`status` = 'H'                               \n" +
                "										ORDER BY h.id DESC                              \n" +
                "										LIMIT 1                              \n" +
                "								) a                              \n" +
                "								UNION                               \n" +
                "								SELECT 	b.haltTooltip                               \n" +
                "								FROM 	(                              \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip                               \n" +
                "										FROM 	holdunholdtrans h                              \n" +
                "										WHERE 	h.refTransId = sd.id              \n" +
                "												AND h.refType = 'KA'                              \n" +
                "												AND h.`status` = 'H'                               \n" +
                "										ORDER BY h.id DESC                              \n" +
                "										LIMIT 1                              \n" +
                "								) b                              \n" +
                "						) c                              \n" +
                "					) kitHalt,              \n" +
                "					p.woID,						              \n" +
                "					p.workorderNumber,              \n" +
                "					p.id AS id,			              \n" +
                "					p.salesOrderDetID,				              \n" +
                "					p.refAssyId,			              \n" +
                "					p.subAssyID,				              \n" +
                "					p.plannKitNumber,              \n" +
                "					p.poQty,				              \n" +
                "					p.poDueDate,					              \n" +
                "					p.mfrLeadTime,			              \n" +
                "					p.materialDockDate,			              \n" +
                "					p.kitReleaseQty,              \n" +
                "					p.kitReleaseDate,              \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,              \n" +
                "					p.feasibilityWithAllocatedQty,	              \n" +
                "					p.actualKitReleaseDate,	              \n" +
                "					p.releasedBy,				              \n" +
                "					p.releaseTimeFeasibility,              \n" +
                "					p.kitStatus,			              \n" +
                "					p.rushJob,						              \n" +
                "					p.mismatchItem,			              \n" +
                "					p.woStatusID,			              \n" +
                "					p.refPlanId,					              \n" +
                "					p.releasedNote,			              \n" +
                "					p.releaseKitNumber,			              \n" +
                "					p.kitReturnStatus,              \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,              \n" +
                "					fun_getKitReleaseIndication(p.kitReleaseDate, IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0)) kitReleaseIndicator,	              \n" +
                "					ka.allocationUMIDCount allocationUMIDCount              \n" +
                "			FROM 		salesorderdet sd                             \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                           \n" +
                "			INNER JOIN	component c ON sd.partID = c.id                      \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id                  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id                \n" +
                "			LEFT JOIN	(              \n" +
                "						SELECT 	a.refSalesOrderDetID, 	                              \n" +
                "							a.assyID, 	                              \n" +
                "							a.binID, 	                              \n" +
                "							COUNT(1) binCount, 	                              \n" +
                "							SUM(a.uidCount) uidCount,                              \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin                              \n" +
                "						FROM 	(                                  \n" +
                "								SELECT 		k.refSalesOrderDetID,                               \n" +
                "										k.assyID,                               \n" +
                "										csd.binID,                               \n" +
                "										COUNT(1) uidCount,                              \n" +
                "										(                              \n" +
                "											SELECT IF( EXISTS(                              \n" +
                "												SELECT 	binId                               \n" +
                "												FROM 	component_sid_stock                               \n" +
                "												WHERE 	binID = csd.binID                               \n" +
                "													AND deletedAt IS NULL                              \n" +
                "													AND id NOT IN (                              \n" +
                "														SELECT 	refUIDId                              \n" +
                "														FROM 	kit_allocation                              \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID                              \n" +
                "																AND assyID = k.assyID                              \n" +
                "																AND `status` = 'A'                              \n" +
                "													)                              \n" +
                "											), 1, 0)                              \n" +
                "										) mismatchUMIDBin                                    \n" +
                "									FROM 		kit_allocation k                                   \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId                                              \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID                                              \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID                                     \n" +
                "									WHERE		k.status = 'A'                                  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)                                  \n" +
                "												AND	csd.isDeleted = 0                                              \n" +
                "												AND	b.isDeleted = 0                                              \n" +
                "												AND	w.isDeleted = 0                                    \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID                                  \n" +
                "							) AS a                                  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID              \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)               \n" +
                "			LEFT JOIN 	(              \n" +
                "						SELECT 	k.refSalesOrderDetID, 	              \n" +
                "							k.assyID, 	              \n" +
                "							k.totalLines,              \n" +
                "							k.shortageLines,			              \n" +
                "							k.kitAllocationPercentage kitPercentage,              \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,              \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount              \n" +
                "						FROM 	(              \n" +
                "								SELECT 	k.refSalesOrderDetID, 	              \n" +
                "									k.assyID,              \n" +
                "									COUNT(1) AS totalLines,	              \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,              \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage              \n" +
                "								FROM 	(              \n" +
                "										SELECT 	refSalesOrderDetID, 	              \n" +
                "											assyID,		              \n" +
                "											(    \n" +
                "												CASE    \n" +
                "													WHEN connecterTypeID = -2 THEN    \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))    \n" +
                "													ELSE    \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))    \n" +
                "												END    \n" +
                "											 ) AS allocationPer,              \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage              \n" +
                "										FROM 	vu_kit_allocation_detail              \n" +
                "									) k              \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID              \n" +
                "							) k              \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)               \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id               \n" +
                "							AND p.refAssyId = sd.partID               \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)              \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3               \n" +
                "						AND 	s.isDeleted = 0                \n" +
                "						AND 	sd.isCancle != 1              \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")               \n" +
                "						AND 	(\", v_WhereClause ,\")              \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId              \n" +
                "		) AS a              \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")            \n" +
                "	\");              \n" +
                "	IF (v_ParentWHType = 'M') THEN              \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"               \n" +
                "			ORDER BY isHotJob DESC,               \n" +
                "				 shortageIndicatore DESC,              \n" +
                "				 kitReleaseDate ASC              \n" +
                "			\");                  \n" +
                "	ELSE              \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"               \n" +
                "			ORDER BY isHotJob DESC,               \n" +
                "				 shortageIndicatore DESC,              \n" +
                "				 actualKitReleaseDate ASC              \n" +
                "			\");                  \n" +
                "	END IF;              \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");                   \n" +
                "	PREPARE query2 FROM @SQLStatementCount;                                            \n" +
                "	EXECUTE query2;                                            \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;                     \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);        \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                        \n" +
                "	EXECUTE mainQuery;                                                                                        \n" +
                "	DEALLOCATE PREPARE mainQuery;                \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4841,'2.00','V1','Xfer Bulk Material kit procedure (gives error for refSalesorderDetID) - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4841:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "INSERT INTO `identity` (`type`,`prefix`,`maxValue`,`remark`,`systemGenerated`,`numberLength`,  \n" +
                "		`createdAt`, `createdBy`,`createByRoleId`, `updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "VALUES ('CustomerWriteOffPaymentNumber','WRTOFF',1,' Customer payment number for Write-off transaction. Next generate from this id',1,6,  \n" +
                "		fun_DatetimetoUTCDateTime(), 1,1, fun_DatetimetoUTCDateTime(), 1, 1);  \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO `identity` (`type`,`prefix`,`maxValue`,`remark`,`systemGenerated`,`numberLength`,  \n" +
                "		`createdAt`, `createdBy`,`createByRoleId`, `updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "VALUES ('CustomerPaymentWriteOffSystemID','WOFF',1,' Customer Write-off payment systemid next generate from this id',1,9,  \n" +
                "		fun_DatetimetoUTCDateTime(), 1,1, fun_DatetimetoUTCDateTime(), 1, 1);  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4842,'2.00','V1',' identity entry for Customer WriteOff PaymentNumber systemID - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4842:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "INSERT INTO `genericcategory` (`gencCategoryName`,`gencCategoryCode`,`categoryType`,`parentGencCategoryID`,  \n" +
                "		`isActive`,`systemGenerated`,`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`updatedAt`,`createdAt`)  \n" +
                "             VALUES  ('Write Off', 'WOFF', 'Payment Type Category', NULL,  \n" +
                "		TRUE, 1, 1, 1, 1, 1, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()) ;  \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO `genericcategory` (`gencCategoryName`,`gencCategoryCode`,`categoryType`,`parentGencCategoryID`,  \n" +
                "		`isActive`,`systemGenerated`,`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`updatedAt`,`createdAt`)  \n" +
                "             VALUES  ('Write Off', 'WOFF', 'Receivable Payment Method', NULL,  \n" +
                "		TRUE, 1, 1, 1, 1, 1, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()) ;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "SELECT `gencCategoryID` INTO @gcip  \n" +
                "		FROM genericcategory  \n" +
                "		WHERE categoryType = 'Payment Type Category'  \n" +
                "		AND gencCategoryName = 'Write Off' AND isDeleted = 0 ;  \n" +
                "UPDATE genericcategory  \n" +
                "		SET `paymentTypeCategoryId` = @gcip  \n" +
                "		WHERE categoryType = 'Receivable Payment Method'  \n" +
                "		AND gencCategoryName = 'Write Off'  \n" +
                "		AND isDeleted = 0 ;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4843,'2.00','V1',' genericcategory entry for CustomerWriteOffPaymentNumber - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4843:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "ALTER TABLE packingslip_invoice_payment  \n" +
                "ADD COLUMN refPaymentID INT ;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "ALTER TABLE employees  \n" +
                "ADD COLUMN defaultCustAppliedWOFFListTabID INT COMMENT '0-Summary tab , 1-Detail tab' ;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4844,'2.00','V1',' refPaymentID field in packingslip_invoice_payment and defaultCustAppliedWOFFListTabID in emp  - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4844:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE menuRoute = 'Financialmanagement.customeraccounting' AND isDeleted = 0 ;  \n" +
                "  \n" +
                /* **************************** Add Script Version -> 22-06-2021*********************************** */
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,  \n" +
                "	`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,  \n" +
                "	`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,  \n" +
                "	`updatedAt`,`createdBy`,`updatedBy`,  \n" +
                "	`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`, `isAllowAsHomePage`)  \n" +
                "VALUES ('Applied Write Off',NULL,NULL,'Financialmanagement.customeraccounting.applycustomerwriteoff','app.transaction.applycustomerwriteoff',  \n" +
                "	'/applywriteofftoinvoicelist','Applied Write Off',NULL,@pageID,0,  \n" +
                "	14.06,NULL,'icons-apply-write-off',1,fun_DatetimetoUTCDateTime(),  \n" +
                "	fun_DatetimetoUTCDateTime(),'1','1',  \n" +
                "	0,NULL,1,'Applied Write Off', 1);  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "SELECT pageID INTO @pageIDCPL FROM page_detail  \n" +
                "      WHERE pageRoute='app.transaction.applycustomerwriteoff'  \n" +
                "      AND isDeleted = 0 LIMIT 1 ;  \n" +
                "  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "      INSERT INTO page_detail (pageName,pageRoute,pageURL,  \n" +
                "		menuName,orderby,iconClass,isActive,createdBy,isDisplay,displayMenuName,isAllowAsHomePage,parentPageID,  \n" +
                "		createdAt, updatedAt)  \n" +
                "      VALUES ('Applied Write Off Summary','app.transaction.applycustomerwriteoff.summary','/summarylist',  \n" +
                "	  'Applied Write Off Summary',NULL,'icons-apply-write-off',1,1,0,'Applied Write Off Summary',1,@pageIDCPL,  \n" +
                "	  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()) ;  \n" +
                "  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "      INSERT INTO page_detail (pageName,pageRoute,pageURL,  \n" +
                "		menuName,orderby,iconClass,isActive,createdBy,isDisplay,displayMenuName,isAllowAsHomePage,parentPageID,  \n" +
                "		createdAt, updatedAt)  \n" +
                "	VALUES ('Applied Write Off Details','app.transaction.applycustomerwriteoff.detail','/detaillist',  \n" +
                "	  'Applied Write Off Details',NULL,'icons-apply-write-off',1,1,0,'Applied Write Off Details',1,@pageIDCPL,  \n" +
                "		fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()) ;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4845,'2.00','V1',' Applied Write Off entry in page detail - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4845:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "SELECT pageID INTO @pageIDCPL FROM page_detail  \n" +
                "      WHERE pageRoute='app.transaction.applycustomerwriteoff'  \n" +
                "      AND isDeleted = 0 LIMIT 1 ;  \n" +
                "  \n" +
                "      INSERT INTO page_detail (pageName,pageRoute,pageURL,menuName,orderby,  \n" +
                "		iconClass,isActive,createdBy,updatedBy,isDisplay,displayMenuName,isAllowAsHomePage,parentPageID,  \n" +
                "		`createdAt`, `updatedAt`)  \n" +
                "      VALUES('Apply Customer WOFF to Invoice Manage Main','app.transaction.applycustomerwriteoff.main','/applycustomerwriteoff','Apply Customer WOFF to Invoice Manage Main',NULL,  \n" +
                "	'icons-apply-write-off',1,'1','1',0,'Apply Customer WOFF to Invoice Manage Main',0,@pageIDCPL,  \n" +
                "	fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()) ;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "SELECT pageID INTO @pageIDCPM FROM page_detail  \n" +
                "      WHERE pageRoute='app.transaction.applycustomerwriteoff.main'  \n" +
                "      AND isDeleted=0 LIMIT 1 ;  \n" +
                "  \n" +
                "  \n" +
                "      INSERT INTO page_detail (pageName,pageRoute,pageURL,  \n" +
                "		menuName,orderby,iconClass,isActive,createdBy,updatedBy,isDisplay,displayMenuName,isAllowAsHomePage,parentPageID,  \n" +
                "		`createdAt`, `updatedAt`)  \n" +
                "      VALUES ('Apply Customer WOFF to Invoice','app.transaction.applycustomerwriteoff.main.manage','/manage/:id',  \n" +
                "	  'Apply Customer WOFF to Invoice',NULL,'icons-add-apply-write-off',1,1,1,1,'Apply Customer WOFF to Invoice',1,@pageIDCPM,  \n" +
                "	  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()) ;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "SELECT pageID INTO @pageIDCPM FROM page_detail  \n" +
                "      WHERE pageRoute='app.transaction.applycustomerwriteoff.main'  \n" +
                "      AND isDeleted=0 LIMIT 1 ;  \n" +
                "  \n" +
                "  \n" +
                "      INSERT INTO page_detail (pageName,pageRoute,pageURL,  \n" +
                "		menuName,orderby,iconClass,isActive,createdBy,updatedBy,isDisplay,displayMenuName,isAllowAsHomePage,parentPageID,  \n" +
                "		`createdAt`, `updatedAt`)  \n" +
                "      VALUES ('Apply Customer WOFF to Invoice Documents','app.transaction.applycustomerwriteoff.main.documents','/documents/:id',  \n" +
                "	  'Apply Customer WOFF to Invoice Documents',NULL,'icons-add-apply-write-off',1,1,1,1,'Apply Customer WOFF to Invoice Documents',0,@pageIDCPM,  \n" +
                "	  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()) ;  \n" +
                /* **************************** Add Script Version -> v *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4846,'2.00','V1',' Manage Write Off entry in page detail - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4846:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "UPDATE `page_detail`  \n" +
                "SET isAllowAsHomePage = 0  \n" +
                "WHERE pageName = 'Apply Customer CM to Invoice Documents' ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE `generic_transmode_mst`  \n" +
                "SET modeName = 'Write Off' , `description` = 'Write Off'  \n" +
                "WHERE modeName = 'Write-off' ;  \n" +
                /* **************************** Add Script Version -> v *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4847,'2.00','V1',' Apply Customer CM to Invoice Documents removed from Home page - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4847:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			SET vLockStatusToBe = 'NA' ;  \n" +
                "			IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "					SET vLockStatusToBe = 'RL' ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'  \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'  \n" +
                "							 ELSE paymentStatus END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pRemark, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedInvPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update invoice payment status */  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "		SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pCustomerPaymentMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND id != pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				pipd.id invPaymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL  \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL  \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.* ,  \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,  \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "			-- SELECT 'update';  \n" +
                "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustInvPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "					SELECT refCustPackingslipInvoiceID  \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "						 FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END  \n" +
                "							) ,  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate  \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),  \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,  \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "			WHERE invPaymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		IF (vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pDeleteCustInvPaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "					)  \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT refCustPackingslipInvoiceID  \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */  \n" +
                "			UPDATE packingslip_invoice_payment_det  \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "			AND isPaymentVoided = 0  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created temp table from above */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* common update for all */  \n" +
                "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)  \n" +
                "		AND (vCountExistsCheckNo = 0)) THEN  \n" +
                "  \n" +
                "		/* update invoice payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			isMarkForRefund = pisMarkForRefund ,  \n" +
                "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0 */  \n" +
                "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pRemark, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, pCustomerPaymentMstID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */  \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */  \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id = pCustomerPaymentMstID  \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;  \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET paymentAmount = pPaymentAmount,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pCustomerPaymentMstID  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  \n" +
                "				/* update customer credit memo - payment status */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'  \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'  \n" +
                "							 ELSE paymentStatus END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END  \n" +
                "			WHERE psip.id = pCustomerPaymentMstID  \n" +
                "			AND psip.lockStatus != 'LC'  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)  \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllInvoiceOfCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllInvoiceOfCustomerPayment`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pPayementID INT,  \n" +
                "	IN pInvoiceTransType VARCHAR(5),  \n" +
                "	IN pisGetOnlyPaidInvoiceFromPayment TINYINT ,  \n" +
                "	IN pIsExcludeZeroValueInv TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_isPaymentVoided TINYINT ;  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE v_paymentTermsID INT;  \n" +
                "	DECLARE v_custTermsDays INT;  \n" +
                "	SET v_custTermsDays = NULL;  \n" +
                "  \n" +
                "	SET v_isPaymentVoided = 0;  \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "	/* below fun_ApplyCommonDateFormatByParaValue not working with date as it consider date 00:00:00 so date is less than 1  \n" +
                "		so below that CONVERT_TZ manual code added */  \n" +
                "	-- SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "	SELECT CAST(CONVERT_TZ(UTC_TIMESTAMP() ,'UTC',vTimeZone) AS DATE) INTO currDateWithAppliedTimeZone ;  \n" +
                "	-- select currDateWithAppliedTimeZone	;  \n" +
                "  \n" +
                "	SELECT paymentTermsID INTO v_paymentTermsID  \n" +
                "	FROM mfgcodemst  \n" +
                "	WHERE id = pCustomerID  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF v_paymentTermsID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(termsDays,0) INTO v_custTermsDays  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE `gencCategoryID` = v_paymentTermsID  \n" +
                "		AND categoryType = 'Payment Terms'  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPayementID IS NULL OR pPayementID = '') THEN  \n" +
                "  \n" +
                "		/* add new customer payment case */  \n" +
                "		SELECT *  \n" +
                "		FROM (  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status, cps.isZeroValue ,  \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "				NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
                "				0 AS invPaidAmtFromCurrPaymentDet,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "				NULL AS appliedDate  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.customerID = pCustomerID  \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "		) tempInv  \n" +
                "		WHERE (  \n" +
                "			(  \n" +
                "				tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
                "					/* get all peding to pay inv with 0 amount */  \n" +
                "			)  \n" +
                "			OR  \n" +
                "			(  \n" +
                "				(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
                "						 /* get all peding to pay inv */  \n" +
                "			)  \n" +
                "		   )  \n" +
                "  \n" +
                "		;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* update customer payment case */  \n" +
                "  \n" +
                "		SELECT isPaymentVoided INTO v_isPaymentVoided  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pPayementID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		IF(v_isPaymentVoided = 0) THEN  \n" +
                "  \n" +
                "  \n" +
                "			IF(pisGetOnlyPaidInvoiceFromPayment = 0) THEN  \n" +
                "			/* get already paid invoices + get pending to pay invoices */  \n" +
                "  \n" +
                "				/* get already paid invoices  */  \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "					cps.status,  cps.isZeroValue ,  \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "					pipd.appliedDate  \n" +
                "				FROM customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "								 AND pipd.refPayementid = pPayementID  \n" +
                "								 AND pipd.isPaymentVoided = 0  \n" +
                "								 AND pipd.isDeleted = 0  \n" +
                "				WHERE cps.customerID = pCustomerID  \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "  \n" +
                "				UNION  \n" +
                "  \n" +
                "				/* get pending to pay invoices  */  \n" +
                "				SELECT *  \n" +
                "				FROM (  \n" +
                "					SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "					cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "						cps.status, cps.isZeroValue ,  \n" +
                "						v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "						(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "							WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "							WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "								THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "							ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "						NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
                "						0 AS invPaidAmtFromCurrPaymentDet,  \n" +
                "						(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet,  \n" +
                "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "						NULL AS appliedDate  \n" +
                "					FROM customer_packingslip cps  \n" +
                "					WHERE cps.customerID = pCustomerID  \n" +
                "					AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "					AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "					AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "					AND cps.id NOT IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refPayementid = pPayementID  \n" +
                "								AND isPaymentVoided = 0  \n" +
                "								AND isDeleted = 0 GROUP BY refCustPackingslipInvoiceID)  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "  \n" +
                "				) tempInv  \n" +
                "				WHERE  \n" +
                "				 (  \n" +
                "					(  \n" +
                "						tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
                "							/* get all peding to pay inv with 0 amount */  \n" +
                "					)  \n" +
                "					OR  \n" +
                "					(  \n" +
                "						(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
                "								 /* get all peding to pay inv */  \n" +
                "					)  \n" +
                "				   )  \n" +
                "				;  \n" +
                "  \n" +
                "			ELSEIF(pisGetOnlyPaidInvoiceFromPayment = 1) THEN  \n" +
                "  \n" +
                "				/* get already paid invoices  */  \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "					cps.status,  cps.isZeroValue ,  \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "					pipd.appliedDate  \n" +
                "				FROM customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "								 AND pipd.refPayementid = pPayementID  \n" +
                "								 AND pipd.isPaymentVoided = 0  \n" +
                "								 AND pipd.isDeleted = 0  \n" +
                "				WHERE cps.customerID = pCustomerID  \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(v_isPaymentVoided = 1) THEN  \n" +
                "  \n" +
                "			/* get already paid invoices only */  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status, cps.isZeroValue ,  \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "						THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "				pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  pipd.isPaymentVoided,  \n" +
                "				IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "				((SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  \n" +
                "				   --  + IFNULL(pipd.paymentAmount,0)  \n" +
                "				    ) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "				pipd.appliedDate  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = pPayementID  \n" +
                "							 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.customerID = pCustomerID  \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* get customer Past Due Balance >> check from current date till pending */  \n" +
                "	SELECT SUM(CASE WHEN a.paymentDueDate <= CAST(currDateWithAppliedTimeZone AS DATE) THEN a.totalOutstandingAmount ELSE 0 END) AS pastDueAmount  \n" +
                "	FROM (  \n" +
                "		SELECT customerID,  \n" +
                "			(IFNULL(totalAmount,0) - IFNULL(get_totalCustomerInvoiceReceivedAmountById(id),0)) AS totalOutstandingAmount ,  \n" +
                "				DATE_ADD(invoiceDate, INTERVAL IFNULL(v_custTermsDays,0) DAY) paymentDueDate  \n" +
                "  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE customerID = pCustomerID  \n" +
                "		AND transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "		AND isDeleted = 0  \n" +
                "	    ) a  \n" +
                "	GROUP BY a.customerID ;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSupplierInvoicePaymentDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSupplierInvoicePaymentDetails`(  \n" +
                "IN ppageIndex INT,  \n" +
                "IN pRecordPerPage INT,  \n" +
                "IN pOrderBy VARCHAR(255),  \n" +
                "IN pWhereClause VARCHAR(16383),  \n" +
                "IN pId INT,  \n" +
                "IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_JoinWithCPSForCCM VARCHAR(500);  \n" +
                "		DECLARE v_FieldsForAppliedCCM VARCHAR(500);  \n" +
                "  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET v_JoinWithCPSForCCM = '';  \n" +
                "		SET v_FieldsForAppliedCCM = '';  \n" +
                "  \n" +
                "		/* if applied credit memo or all customer payment display then display credit memo details */  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'R,CA,WOFF') THEN  \n" +
                "			SET v_JoinWithCPSForCCM = CONCAT(' LEFT JOIN `customer_packingslip` cps ON a.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "			SET v_FieldsForAppliedCCM = CONCAT(' cps.id AS creditMemoMstID , cps.creditMemoDate , cps.creditMemoNumber , ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @temp_Sproc_getSupplierInvoicePaymentDetails =  \n" +
                "		CONCAT(\"select b.id, a.id paymentId, a.paymentNumber as chequeNumber,  \n" +
                "				(CASE WHEN a.refPaymentMode = 'CA' THEN b.appliedDate ELSE a.paymentDate END) AS chequeDate ,  \n" +
                "				b.paymentAmount as  chequeAmount,  \n" +
                "				a.bankAccountMasID, a.bankAccountNo, a.bankName,  \n" +
                "				a.paymentType, g.gencCategoryName as paymentTypeName,  \n" +
                "				g.systemGenerated as systemGeneratedPaymentMethod,  \n" +
                "				a.mfgcodeID,  \n" +
                "				fun_getMfgCodeAndNameByID(a.mfgcodeID) supplierCode,  \n" +
                "				a.accountReference,  \n" +
                "				(CASE WHEN a.refPaymentMode = 'R' THEN 'Payment'  WHEN a.refPaymentMode = 'CA' THEN 'Credit Memo Applied'  \n" +
                "					WHEN a.refPaymentMode = 'WOFF' THEN 'Write Off' ELSE '' END) refPaymentModeText,  \n" +
                "				\",v_FieldsForAppliedCCM,\"  \n" +
                "				a.refPaymentMode ,  \n" +
                "				fun_getUserNameByID(a.updatedBy) updatedbyValue,  \n" +
                "				fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "				fun_getRoleByID(a.createByRoleId) createdbyRoleValue,  \n" +
                "				fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue  \n" +
                "			from packingslip_invoice_payment a  \n" +
                "					join packingslip_invoice_payment_det b ON b.refPayementid = a.id AND b.isDeleted = 0  \n" +
                "					left join genericcategory g on g.gencCategoryID = a.paymentType AND g.isDeleted = 0  \n" +
                "					\",v_JoinWithCPSForCCM,\"  \n" +
                "			where a.isDeleted = 0  \n" +
                "			and a.isPaymentVoided = 0 and b.isPaymentVoided = 0  \n" +
                "			AND FIND_IN_SET(a.refPaymentMode,'\", pRefPaymentMode,\"')  \n" +
                "			and (b.refPackingslipInvoiceID = \",pId,\" OR b.`refCustPackingslipInvoiceID` = \",pId, \")\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY id ASC\");  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_getSupplierInvoicePaymentDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_getSupplierInvoicePaymentDetails,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "            fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			(CASE WHEN (psip.isPaymentVoided = 1) THEN \"Voided\"  \n" +
                "				WHEN (IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN \"Received & Applied\"  \n" +
                "				ELSE \"Received\" END) AS isPaymentVoidedConvertedValueOfCM ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "				ELSE 'Received' END)  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(  \n" +
                "	IN pPaymentMstID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT 	psip.id,  \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
                "			psip.refGencTransModeID ,  \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  psip.isMarkForRefund , psip.agreedRefundAmt ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "					(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "						(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "					ELSE 'Received' END)  \n" +
                "			    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "		WHERE id = pPaymentMstID  \n" +
                "		AND refPaymentMode IN ('R','WOFF')  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		;  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getRefTransDetailForDocument` ;  \n" +
                "CREATE PROCEDURE `Sproc_getRefTransDetailForDocument`(  \n" +
                "	pGencFileOwnerType VARCHAR(255),  \n" +
                "    pRefTransID INT,  \n" +
                "    pIsReturnDetail TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	# This variable is used in dynamic query to update document path and each case block need set table name value  \n" +
                "	DECLARE vTableName VARCHAR(100);  \n" +
                "    # All table PK name is 'id' but in some thable it is different so set value of this variable if PK name is not 'id'  \n" +
                "    DECLARE vTableIdentityColumnName VARCHAR(50);  \n" +
                "    DECLARE vEixstingDocumentPath VARCHAR(500);  \n" +
                "    DECLARE vNewDocumentPath VARCHAR(500);  \n" +
                "    DECLARE vCreatedDate DATETIME;  \n" +
                "    DECLARE vPIDCode VARCHAR(150);  \n" +
                "	DECLARE vReplaceString VARCHAR(50);  \n" +
                "  \n" +
                "		SET vTableIdentityColumnName = 'Id';  \n" +
                "  \n" +
                "		#In below cases get already stored documentPath and generate new documentPath based on requirement  \n" +
                "		CASE pGencFileOwnerType  \n" +
                "			WHEN 'component_sid_stock' THEN  \n" +
                "				-- Comp_sid_stock/Year/{UMID}/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('UMID/', DATE_FORMAT(createdAt,'%Y'), '/', uid, '/', id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'component_sid_stock';  \n" +
                "  \n" +
                "		 WHEN 'packing_slip' THEN  \n" +
                "				-- PS/{Supplier}/Year/Month/PS#/{id}  \n" +
                "				SELECT 	p.documentPath,			CONCAT('PS/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.packingSlipNumber, '/', p.id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	packing_slip_material_receive p  \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "				WHERE 	p.id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';  \n" +
                "  \n" +
                "		WHEN 'supplier_invoice' THEN  \n" +
                "				-- Invoice/DK/2020/04/Invoice#/{id}  \n" +
                "				SELECT 	p.documentPath,			CONCAT('Invoice/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.invoiceNumber, '/', p.id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	packing_slip_material_receive p  \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "				WHERE 	p.id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';  \n" +
                "  \n" +
                "		WHEN 'credit_memo' THEN  \n" +
                "				-- CreditMemo/DK/2020/04/CreditMemo#/{id}  \n" +
                "				SELECT 	p.documentPath,			CONCAT('CreditMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.creditMemoNumber, '/', p.id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	packing_slip_material_receive p  \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "				WHERE 	p.id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';  \n" +
                "		WHEN 'debit_memo' THEN  \n" +
                "				-- DebitMemo/DK/2020/04/DebitMemo#/{id}  \n" +
                "				SELECT 	p.documentPath,			CONCAT('DebitMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.debitMemoNumber, '/', p.id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	packing_slip_material_receive p  \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "				WHERE 	p.id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';  \n" +
                "		WHEN 'supplier_rma' THEN  \n" +
                "				-- PS/{Supplier}/Year/Month/PS#/{id}  \n" +
                "				SELECT 	p.documentPath,			CONCAT('SupplierRMA/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.packingSlipNumber, '/', p.id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	packing_slip_material_receive p  \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "				WHERE 	p.id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';  \n" +
                "		WHEN 'supplier_quote' THEN  \n" +
                "				-- SupplierQuote/DK/2020/04/Quote#/{id}  \n" +
                "				SELECT 	s.documentPath,			CONCAT('SupplierQuote/', m.mfgCode , '/', DATE_FORMAT(s.createdAt,'%Y'), '/', DATE_FORMAT(s.createdAt,'%m'), '/', s.quoteNumber, '/', s.id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	supplier_quote_mst s  \n" +
                "				JOIN 	mfgcodemst m ON m.id = s.supplierID  \n" +
                "				WHERE 	s.id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'supplier_quote_mst';  \n" +
                "		WHEN 'supplier' THEN  \n" +
                "				-- emp/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('supplier/', id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	mfgcodemst  \n" +
                "				WHERE 	id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'mfgcodemst';  \n" +
                "  \n" +
                "		WHEN 'customer' THEN  \n" +
                "				-- emp/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('customer/', id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	mfgcodemst  \n" +
                "				WHERE 	id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'mfgcodemst';  \n" +
                "  \n" +
                "		WHEN 'workorder' THEN  \n" +
                "				-- WO/Year/Month/{WO}/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('WO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', woNumber, '/', woID) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	workorder  \n" +
                "				WHERE 	woID = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'workorder';  \n" +
                "				SET vTableIdentityColumnName = 'woID';  \n" +
                "  \n" +
                "		WHEN 'workorder_operation' THEN  \n" +
                "			-- WO/Year/Month/{wo}/WO_OP/{WO_OP}/{id}  \n" +
                "			SELECT wo.documentPath, CONCAT('WO/', DATE_FORMAT(w.createdAt,'%Y'), '/', DATE_FORMAT(w.createdAt,'%m'), '/', w.woNumber, '/WO_OP/', wo.opNumber, '/', wo.woOPID) newDocumentPath  \n" +
                "			INTO vEixstingDocumentPath, vNewDocumentPath  \n" +
                "			FROM workorder_operation wo  \n" +
                "			JOIN workorder w ON wo.woID = w.woID  \n" +
                "			WHERE woOPID = pRefTransID;  \n" +
                "			SET vTableName = 'workorder_operation';  \n" +
                "			SET vTableIdentityColumnName = 'woOPID';  \n" +
                "  \n" +
                "		 WHEN 'salesorder' THEN  \n" +
                "				-- SO/Year/Month/{SO}/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('SO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', salesOrderNumber, '/', id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	salesordermst  \n" +
                "				WHERE 	id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'salesordermst';  \n" +
                "		 WHEN 'operations' THEN  \n" +
                "				-- OP/Year/{OPID}/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('OP/', DATE_FORMAT(createdAt,'%Y'), '/', opNumber, '/', opID) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	operations  \n" +
                "				WHERE 	opID = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'operations';  \n" +
                "				SET vTableIdentityColumnName = 'opID';  \n" +
                "		 WHEN 'certificate_standards' THEN  \n" +
                "				-- Cert_std/Year/{certificateStandardID}  \n" +
                "				SELECT 	documentPath,			CONCAT('Cert_std/', DATE_FORMAT(createdAt,'%Y'), '/', certificateStandardID) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	certificate_standards  \n" +
                "				WHERE 	certificateStandardID = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'certificate_standards';  \n" +
                "				SET vTableIdentityColumnName = 'certificateStandardID';  \n" +
                "		 WHEN 'component' THEN  \n" +
                "			 -- Comp/Year/{PID}/{id}  \n" +
                "			 SELECT 	documentPath, CONCAT('Comp/', DATE_FORMAT(createdAt,'%Y'), '/', fun_replaceSpecialCharacters(PIDCode), '/', id) newDocumentPath  \n" +
                "			 INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "			 FROM 	COMPONENT  \n" +
                "			 WHERE 	id = pRefTransID;  \n" +
                "			 SET vTableName = 'component';  \n" +
                "		 WHEN 'eco_request' THEN  \n" +
                "				-- eco_request/year/{ecoid}/{ecoReqID}  \n" +
                "				SELECT 	documentPath,			CONCAT('eco_request/', DATE_FORMAT(createdAt,'%Y'), '/', ecoReqID) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	eco_request  \n" +
                "				WHERE 	ecoReqID = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'eco_request';  \n" +
                "				SET vTableIdentityColumnName = 'ecoReqID';  \n" +
                "		 WHEN 'component_customer_loa' THEN  \n" +
                "				-- Comp_Cust_loa/{CustomerCode},{PIDCode}/{id}  \n" +
                "				SELECT 	cloa.documentPath,			CONCAT('Comp_Cust_loa/', m.mfgCode,'/', fun_replaceSpecialCharacters(co.PIDCode) ,'/', cloa.id) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	component_customer_loa cloa  \n" +
                "				JOIN	mfgcodemst m ON m.id = cloa.customerID  \n" +
                "                JOIN COMPONENT co ON co.id = cloa.componentID  \n" +
                "				WHERE 	cloa.id = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'component_customer_loa';  \n" +
                "		 WHEN 'equipment' THEN  \n" +
                "				-- equip/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('equip/', eqpID) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	equipment  \n" +
                "				WHERE 	eqpID = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'equipment';  \n" +
                "				SET vTableIdentityColumnName = 'eqpID';  \n" +
                "		 WHEN 'equipment_task' THEN  \n" +
                "				-- equip_task/{id}  \n" +
                "				SELECT 	documentPath,			CONCAT('equip_task/', eqpTaskID) newDocumentPath  \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "				FROM 	equipment_task  \n" +
                "				WHERE 	eqpTaskID = pRefTransID;  \n" +
                "  \n" +
                "				SET vTableName = 'equipment_task';  \n" +
                "				SET vTableIdentityColumnName = 'eqpTaskID';  \n" +
                "		WHEN 'employees' THEN  \n" +
                "			-- emp/{id}  \n" +
                "			SELECT 	documentPath,			CONCAT('emp/', id) newDocumentPath  \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "			FROM 	employees  \n" +
                "			WHERE 	id = pRefTransID;  \n" +
                "  \n" +
                "			SET vTableName = 'employees';  \n" +
                "		WHEN 'bom' THEN  \n" +
                "			-- rfq/custcode/year/{Groupid}/{pid}/{id}  \n" +
                "			SELECT 	ra.documentPath,			CONCAT('rfq/', m.mfgCode , '/', DATE_FORMAT(ra.createdAt,'%Y'), '/', ra.rfqrefID, '/', c.PIDCode, '/', ra.id) newDocumentPath  \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "			FROM 	rfq_assemblies ra  \n" +
                "			JOIN 	rfqforms rf ON rf.id = ra.rfqrefID  \n" +
                "			JOIN 	mfgcodemst m ON m.id = rf.customerId  \n" +
                "			JOIN 	COMPONENT c ON c.id = ra.partID  \n" +
                "			WHERE 	ra.id = pRefTransID;  \n" +
                "  \n" +
                "			SET vTableName = 'rfq_assemblies';  \n" +
                "  \n" +
                "  \n" +
                "		 WHEN 'cust_packingslip_invoice_payment' THEN  \n" +
                "			-- CustPay/{CustomerCode}/Year/Month/CheckOrPayment#/{id}  \n" +
                "			SELECT 	pip.documentPath,			CONCAT('CustPay/', m.mfgCode , '/', DATE_FORMAT(pip.createdAt,'%Y'), '/', DATE_FORMAT(pip.createdAt,'%m'), '/', pip.paymentNumber, '/', pip.id) newDocumentPath  \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "			FROM 	packingslip_invoice_payment pip  \n" +
                "			JOIN 	mfgcodemst m ON m.id = pip.mfgcodeID  \n" +
                "			WHERE 	pip.id = pRefTransID;  \n" +
                "  \n" +
                "			SET vTableName = 'packingslip_invoice_payment';  \n" +
                "  \n" +
                "  \n" +
                "		WHEN 'apply_cust_credit_memo_to_inv' THEN  \n" +
                "			-- AppliedCCM/{CustomerCode}/Year/Month/CheckOrPayment#/{id}  \n" +
                "			SELECT 	pip.documentPath,			CONCAT('AppliedCCM/', m.mfgCode , '/', DATE_FORMAT(pip.createdAt,'%Y'), '/', DATE_FORMAT(pip.createdAt,'%m'), '/', pip.paymentNumber, '/', pip.id) newDocumentPath  \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "			FROM 	packingslip_invoice_payment pip  \n" +
                "			JOIN 	mfgcodemst m ON m.id = pip.mfgcodeID  \n" +
                "			WHERE 	pip.id = pRefTransID;  \n" +
                "  \n" +
                "			SET vTableName = 'packingslip_invoice_payment';  \n" +
                "  \n" +
                "  \n" +
                "		WHEN 'apply_cust_write_off_to_inv' THEN  \n" +
                "			-- AppliedCustWOFF/{CustomerCode}/Year/Month/CheckOrPayment#/{id}  \n" +
                "			SELECT 	pip.documentPath,			CONCAT('AppliedCustWOFF/', m.mfgCode , '/', DATE_FORMAT(pip.createdAt,'%Y'), '/', DATE_FORMAT(pip.createdAt,'%m'), '/', pip.paymentNumber, '/', pip.id) newDocumentPath  \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath  \n" +
                "			FROM 	packingslip_invoice_payment pip  \n" +
                "			JOIN 	mfgcodemst m ON m.id = pip.mfgcodeID  \n" +
                "			WHERE 	pip.id = pRefTransID;  \n" +
                "  \n" +
                "			SET vTableName = 'packingslip_invoice_payment';  \n" +
                "  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			#This is default case so if case value is not match just set table name is null  \n" +
                "			SET vTableName = NULL;  \n" +
                "  \n" +
                "		END CASE;  \n" +
                "  \n" +
                "		#If table name is null, it means no need to do anything related to document path.  \n" +
                "		IF(vTableName IS NOT NULL) THEN  \n" +
                "  \n" +
                "			# Update document path if document path in record is null or new path not match with old path  \n" +
                "			IF(vEixstingDocumentPath IS NULL OR vEixstingDocumentPath != vNewDocumentPath) THEN  \n" +
                "            	-- SET @vSQLStatement = CONCAT(\"update \", vTableName, \" set documentPath = \\\"\", vNewDocumentPath, \"\\\" where \", vTableIdentityColumnName, \" = \", pRefTransID);  \n" +
                "            	SET @vSQLStatement = CONCAT(\"update \", vTableName, \" set documentPath = '\", vNewDocumentPath, \"' where \", vTableIdentityColumnName, \" = \", pRefTransID);  \n" +
                "                PREPARE query1 FROM @vSQLStatement;  \n" +
                "				EXECUTE query1;  \n" +
                "				DEALLOCATE PREPARE query1;  \n" +
                "			END IF;  \n" +
                "            IF(pIsReturnDetail = 1)THEN  \n" +
                "				SELECT 1 isBasedOnCreatedDate, pRefTransID refTransID, pGencFileOwnerType gencFileOwnerType,  \n" +
                "					vEixstingDocumentPath oldDocumentPath, vNewDocumentPath newDocumentPath;  \n" +
                "			END IF;  \n" +
                "		ELSEIF (pGencFileOwnerType = 'textAngular') THEN  \n" +
                "			SET vCreatedDate = fun_DatetimetoUTCDateTime();  \n" +
                "            IF(pIsReturnDetail = 1)THEN  \n" +
                "			SELECT 1 isBasedOnCreatedDate, NULL refTransID, pGencFileOwnerType gencFileOwnerType, NULL oldDocumentPath,  \n" +
                "					CONCAT('textAngular/', DATE_FORMAT(vCreatedDate,'%Y'), '/', DATE_FORMAT(vCreatedDate,'%m'))newDocumentPath;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(pIsReturnDetail = 1)THEN  \n" +
                "				SELECT 0 isBasedOnCreatedDate;  \n" +
                "            END IF;  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4848,'2.00','V1',' all write off sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4848:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_page_detail_helpblog` ;  \n" +
                "CREATE TRIGGER `TRG_AI_page_detail_helpblog` AFTER INSERT ON `page_detail`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	IF NEW.pageID IS NOT NULL AND New.menuName IS NOT NULL AND NEW.pageRoute IS NOT NULL AND NEW.pageRoute != '' THEN      \n" +
                "		INSERT INTO help_blog(pageID, title, isDeleted, createdBy, updatedBy)      \n" +
                "        VALUES(NEW.pageID, New.menuName, 0, NEW.createdBy, NEW.updatedBy);      \n" +
                "    END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4849,'2.00','V1',' Help Blog Default Title Name Changes - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4849:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			SET vLockStatusToBe = 'NA' ;  \n" +
                "			IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "					SET vLockStatusToBe = 'RL' ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'  \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'  \n" +
                "							 ELSE paymentStatus END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pRemark, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update invoice payment status */  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "		SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4850,'2.00','V1',' Sproc_CreateCustomerPayment sp - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4850:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_SaveDuplicatePurchaseOrder`;  \n" +
                "	CREATE PROCEDURE `Sproc_SaveDuplicatePurchaseOrder`(                \n" +
                "		IN pPOID INT,                \n" +
                "		IN pPONumber VARCHAR(100),            \n" +
                "		IN pPODate DATE,            \n" +
                "		IN puserID VARCHAR(10),            \n" +
                "		IN puserRoleID VARCHAR(10),            \n" +
                "		IN pSerialNumber VARCHAR(50),            \n" +
                "		IN pisKeepPO TINYINT                \n" +
                "	)  \n" +
                "	BEGIN                \n" +
                "		 DECLARE vNewPOID INT;            \n" +
                "		 DECLARE vIndex INT;            \n" +
                "		 DECLARE vcount INT;            \n" +
                "		 DECLARE vOldPurchaseOrderDetID INT;            \n" +
                "		 DECLARE vNewPurchaseOrderDetID INT;            \n" +
                "		 DECLARE vmfgPartID INT;            \n" +
                "		 DECLARE vOldPODate DATE;            \n" +
                "  \n" +
                "		 -- get old po date            \n" +
                "		 SELECT poDate INTO vOldPODate FROM purchase_order_mst WHERE id=pPOID;            \n" +
                "			-- insert purchase order header detail	             \n" +
                "		INSERT INTO purchase_order_mst(supplierID,poNumber,poDate,termsID,shippingMethodID,supplierAddressID,shippingAddressID,intermediateshipmentID,freeonboardID,`status`,            \n" +
                "		pocomment,shippingComment,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,serialNumber,poRevision,carrierID,carrierAccountNumber,shippingInsurance,supplierAddress,intermediateAddress,            \n" +
                "		isBlanketPO,contactPersonEmpID,poWorkingStatus,shippingAddress)             \n" +
                "		SELECT supplierID,pPONumber,pPODate,termsID,shippingMethodID,supplierAddressID,shippingAddressID,intermediateshipmentID,freeonboardID,0,            \n" +
                "		pocomment,shippingComment,0,puserID,puserID,puserRoleID,puserRoleID,pSerialNumber,'00',carrierID,carrierAccountNumber,shippingInsurance,supplierAddress,intermediateAddress,            \n" +
                "		isBlanketPO,contactPersonEmpID,'P',shippingAddress FROM purchase_order_mst WHERE id=pPOID;            \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewPOID;              \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseOrder AS            \n" +
                "  \n" +
                "				SELECT pod.id,row_number() over (PARTITION BY pod.refPurchaseOrderID) rowNumber,pod.mfgPartID FROM purchase_order_det pod  \n" +
                "					JOIN component c on c.id = pod.mfgPartID and c.partStatus != -3  \n" +
                "					WHERE pod.refPurchaseOrderID=pPOID AND pod.isdeleted=0;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempPurchaseOrder;            \n" +
                "  \n" +
                "				SET vIndex=1;            \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO            \n" +
                "			   -- get old purchase order detail id            \n" +
                "				SELECT id,mfgPartID INTO vOldPurchaseOrderDetID,vmfgPartID FROM tempPurchaseOrder WHERE rowNumber=(vIndex);            \n" +
                "  \n" +
                "				-- insert new purchase order detail            \n" +
                "	  IF(pisKeepPO=1)THEN           \n" +
                "				INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,            \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber)            \n" +
                "  \n" +
                "			 SELECT vNewPOID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,            \n" +
                "			 lineComment,category,0,puserID,puserID,puserRoleID,puserRoleID,lineID,supplierQuoteNumber FROM purchase_order_det WHERE id=vOldPurchaseOrderDetID;            \n" +
                "	  ELSE          \n" +
                "	  INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,            \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber)            \n" +
                "  \n" +
                "			 SELECT vNewPOID,pod.mfgPartID,pod.supplierPartID,pod.packagingID,c.mfgPNDescription,pod.pcbPerArray,pod.rohsstatusID,pod.internalRef,pod.salesCommissionTo,pod.totalrelease,pod.qty,pod.price,            \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '        \n" +
                "	')  FROM componenet_inspection_requirement_det cid            \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0             \n" +
                "			   WHERE cid.partID=pod.mfgPartID AND im.requiementType='C' AND cid.category='P' AND im.isdeleted=0),pod.category,0,puserID,puserID,puserRoleID,puserRoleID,pod.lineID,pod.supplierQuoteNumber FROM purchase_order_det pod JOIN component c ON c.id=pod.mfgPartID          \n" +
                "			 WHERE pod.id=vOldPurchaseOrderDetID;           \n" +
                "			 END IF;          \n" +
                "  \n" +
                "			 -- new purchase order detail id            \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewPurchaseOrderDetID;              \n" +
                "  \n" +
                "				-- insert other charges detail for new po date            \n" +
                "				 INSERT INTO purchase_order_line_othercharges(refPurchaseOrderDetID,partID,qty,price,frequency,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)            \n" +
                "			 SELECT  vNewPurchaseOrderDetID,partID,qty,price,frequency,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_othercharges             \n" +
                "			 WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID AND isdeleted=0;            \n" +
                "  \n" +
                "			 -- check for purchase requirement             \n" +
                "			 IF(pisKeepPO=1)THEN  -- keep same requirement of po            \n" +
                "  \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)            \n" +
                "			  SELECT vNewPurchaseOrderDetID,instruction,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_requirement_det WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID            \n" +
                "			  AND isdeleted=0;            \n" +
                "  \n" +
                "			 ELSE            \n" +
                "			 -- get part requirement from part master            \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)            \n" +
                "			  SELECT vNewPurchaseOrderDetID, im.requirement,0,puserID,puserID,puserRoleID,puserRoleID             \n" +
                "			  FROM componenet_inspection_requirement_det cid  JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0            \n" +
                "			   WHERE cid.partID=vmfgPartID AND im.requiementType='R' AND cid.category='P' AND im.isdeleted=0 ;            \n" +
                "  \n" +
                "			 END IF;            \n" +
                "				  -- to save shipping details            \n" +
                "				  INSERT INTO purchase_order_line_release_det (refPurchaseOrderDetID,qty,shippingdate,promisedShipDate,releaseNumber,shippingmethodid,shippingAddressID,releaseNotes,additionalNotes,isdeleted,            \n" +
                "		 createdby,updatedby,createByRoleId,updateByRoleId,poLineWorkingStatus)            \n" +
                "  \n" +
                "		SELECT vNewPurchaseOrderDetID,pord.qty,DATE_ADD( pPODate, INTERVAL DATEDIFF(pord.shippingDate, vOldPODate) DAY),DATE_ADD(pPODate, INTERVAL DATEDIFF(pord.promisedShipDate,vOldPODate) DAY),            \n" +
                "		pord.releaseNumber,pord.shippingmethodid,pord.shippingAddressID,pord.releaseNotes,pord.additionalNotes,0,puserID,puserID,puserRoleID,puserRoleID,'P'            \n" +
                "		FROM              \n" +
                "		purchase_order_line_release_det pord             \n" +
                "		WHERE pord.isdeleted=0 AND pord.refPurchaseOrderDetID= vOldPurchaseOrderDetID;            \n" +
                "  \n" +
                "				  SET vIndex  =vIndex+1;            \n" +
                "			  END WHILE;            \n" +
                "  \n" +
                "			  SELECT   vNewPOID;            \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 23-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(  \n" +
                "	IN pSearch VARCHAR(300),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "	IN pofftheself TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF (pstrictCustomPart=1) THEN  \n" +
                "		/*<===this logic is added to compare invert rohs category */  \n" +
                "		/* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcomponent;  \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "			SELECT smm.refMfgCodeMstID  \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID  \n" +
                "			UNION  \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "			UNION  \n" +
                "			SELECT psupplierID AS refMfgCodeMstID;  \n" +
                "		ELSE  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "			SELECT psupplierID AS refMfgCodeMstID  \n" +
                "			UNION  \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "			UNION  \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "			UNION  \n" +
                "			SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;  \n" +
                "		END IF;  \n" +
                "		SELECT * FROM  \n" +
                "			(  \n" +
                "				SELECT `com`.`id`,  \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "					`com`.`mfgPN` orgMfgPN,  \n" +
                "					`com`.`packaginggroupID`,  \n" +
                "					`com`.`packagingID`,  \n" +
                "					`com`.`PIDCode`,  \n" +
                "					`com`.`isGoodPart`,  \n" +
                "					`com`.`RoHSStatusID`,  \n" +
                "					`com`.`rohsgroupID`,  \n" +
                "					`com`.`mfgcodeID`,  \n" +
                "					`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "					`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "					`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
                "					`com`.`category`,  \n" +
                "					`com`.`imageURL`,  \n" +
                "					`com`.`documentPath`,  \n" +
                "					`com`.`mfgPNDescription`,  \n" +
                "					`com`.`minOperatingTemp`,  \n" +
                "					`com`.`maxOperatingTemp`,  \n" +
                "					`com`.`value`,  \n" +
                "					`com`.`partPackage`,  \n" +
                "					`com`.`powerRating`,  \n" +
                "					`com`.`functionalCategoryID`,  \n" +
                "					`com`.`mountingTypeID`,  \n" +
                "					`com`.`connecterTypeID`,  \n" +
                "					`com`.`noOfPosition`,  \n" +
                "					`com`.`noOfRows`,  \n" +
                "					`com`.`pitch`,  \n" +
                "					`com`.`pitchMating`,  \n" +
                "					`com`.`length`,  \n" +
                "					`com`.`width`,  \n" +
                "					`com`.`height`,  \n" +
                "					`com`.`voltage`,  \n" +
                "					`com`.`weight`,  \n" +
                "					`com`.`feature`,  \n" +
                "					`com`.`color`,  \n" +
                "					`com`.`partStatus`,  \n" +
                "					`com`.`uom`,  \n" +
                "					`com`.`uomClassID`,  \n" +
                "					`com`.`unit`,  \n" +
                "					`com`.`restrictUsePermanently`,  \n" +
                "					`com`.`restrictUSEwithpermission`,  \n" +
                "					`com`.`restrictPackagingUsePermanently`,  \n" +
                "					`com`.`restrictPackagingUseWithpermission`,  \n" +
                "					`u`.`abbreviation` AS uomName,  \n" +
                "					`u`.`unitName` AS  unitName,  \n" +
                "					`r`.`rohsIcon`,  \n" +
                "					`r`.`name` AS rohsName,  \n" +
                "					`com`.`partPackageID`,  \n" +
                "					`com`.`bomLock`,  \n" +
                "					`com`.`businessRisk`,  \n" +
                "					`com`.`costCategoryID`,  \n" +
                "					`com`.`deviceMarking`,  \n" +
                "					`com`.`driverToolRequired`,  \n" +
                "					`com`.`eau`,  \n" +
                "					`com`.`epicorType`,  \n" +
                "					`com`.`functionalTestingRequired`,  \n" +
                "					`com`.`heightText`,  \n" +
                "					`com`.`isCPN`,  \n" +
                "					`com`.`isCustom`,  \n" +
                "					`com`.`leadTime`,  \n" +
                "					`com`.`matingPartRquired`,  \n" +
                "					`com`.`maxPriceLimit`,  \n" +
                "					`com`.`maxQtyonHand`,  \n" +
                "					`com`.`minimum`,  \n" +
                "					`com`.`mult`,  \n" +
                "					`com`.`packageQty`,  \n" +
                "					`com`.`partType`,  \n" +
                "					`com`.`pcbPerArray`,  \n" +
                "					`com`.`pickupPadRequired`,  \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "					`com`.`plannedValuePerBuild`,  \n" +
                "					`com`.`programingRequired`,  \n" +
                "					`com`.`rfqOnly`,  \n" +
                "					`com`.`saftyStock`,  \n" +
                "					`com`.`scrapRatePercentagePerBuild`,  \n" +
                "					`com`.`scrapValuePerBuild`,  \n" +
                "					`com`.`selfLifeDays`,  \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "					`com`.`temperatureCoefficient`,  \n" +
                "					`com`.`temperatureCoefficientUnit`,  \n" +
                "					`com`.`temperatureCoefficientValue`,  \n" +
                "					`com`.`trackSerialNumber`,  \n" +
                "					`com`.`refSupplierMfgpnComponentID`,  \n" +
                "					`com`.`refMfgPNMfgCodeId`,  \n" +
                "					`com`.`internalReference`,  \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
                "				FROM `component` AS `com`  \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`   \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`   \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0   \n" +
                "                        AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
                "				JOIN `rfq_rohsmst` AS `r`   \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
                "				JOIN  `uoms` AS `u`   \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0  \n" +
                "				WHERE `com`.`isdeleted`=0  \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
                "					AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "					AND `com`.`mfgcodeid` IN (SELECT refMfgCodeMstID FROM tempcomponent)  \n" +
                "					AND (`com`.`isGoodPart`=1)  \n" +
                "					AND `com`.`partStatus` != -3  \n" +
                "			) AS a  \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)   \n" +
                "			OR (pSearch IS NOT NULL   \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')   \n" +
                "					OR pidcode LIKE CONCAT('%', pSearch , '%')  \n" +
                "					OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	ELSEIF (pofftheself=1 AND pstrictCustomPart=0) THEN  \n" +
                "		/* this logic used in purchase order  \n" +
                "		packing slip  \n" +
                "		UMID management  \n" +
                "		Component Master  \n" +
                "		Reserve Stock  \n" +
                "		Component Assy DFM  \n" +
                "		Reports  \n" +
                "		Price Break Update  \n" +
                "		Customer Part  \n" +
                "		Good-Bad Mapping Part  \n" +
                "		Supplier Quote  \n" +
                "		Supplier RMA */  \n" +
                "		SELECT * FROM  \n" +
                "			(  \n" +
                "				SELECT `com`.`id`,  \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "					`com`.`mfgPN` orgMfgPN,  \n" +
                "					`com`.`packaginggroupID`,  \n" +
                "					`com`.`packagingID`,  \n" +
                "					`com`.`PIDCode`,  \n" +
                "					`com`.`isGoodPart`,  \n" +
                "					`com`.`RoHSStatusID`,  \n" +
                "					`com`.`rohsgroupID`,  \n" +
                "					`com`.`mfgcodeID`,  \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,  \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,  \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,  \n" +
                "					`com`.`category`,  \n" +
                "					`com`.`imageURL`,  \n" +
                "					`com`.`documentPath`,  \n" +
                "					`com`.`mfgPNDescription`,  \n" +
                "					`com`.`minOperatingTemp`,  \n" +
                "					`com`.`maxOperatingTemp`,  \n" +
                "					`com`.`value`,  \n" +
                "					`com`.`partPackage`,  \n" +
                "					`com`.`powerRating`,  \n" +
                "					`com`.`functionalCategoryID`,  \n" +
                "					`com`.`mountingTypeID`,  \n" +
                "					`com`.`connecterTypeID`,  \n" +
                "					`com`.`noOfPosition`,  \n" +
                "					`com`.`noOfRows`,  \n" +
                "					`com`.`pitch`,  \n" +
                "					`com`.`pitchMating`,  \n" +
                "					`com`.`length`,  \n" +
                "					`com`.`width`,  \n" +
                "					`com`.`height`,  \n" +
                "					`com`.`voltage`,  \n" +
                "					`com`.`weight`,  \n" +
                "					`com`.`feature`,  \n" +
                "					`com`.`color`,  \n" +
                "					`com`.`partStatus`,  \n" +
                "					`com`.`uom`,  \n" +
                "					`com`.`uomClassID`,  \n" +
                "					`com`.`unit`,  \n" +
                "					`com`.`restrictUsePermanently`,  \n" +
                "					`com`.`restrictUSEwithpermission`,  \n" +
                "					`com`.`restrictPackagingUsePermanently`,  \n" +
                "					`com`.`restrictPackagingUseWithpermission`,  \n" +
                "					`u`.`abbreviation` AS uomName,  \n" +
                "					`u`.`unitName` AS unitName,  \n" +
                "					`r`.`rohsIcon`,  \n" +
                "					`r`.`name` AS rohsName,  \n" +
                "					`com`.`partPackageID`,  \n" +
                "					`com`.`bomLock`,  \n" +
                "					`com`.`businessRisk`,  \n" +
                "					`com`.`costCategoryID`,  \n" +
                "					`com`.`deviceMarking`,  \n" +
                "					`com`.`driverToolRequired`,  \n" +
                "					`com`.`eau`,  \n" +
                "					`com`.`epicorType`,  \n" +
                "					`com`.`functionalTestingRequired`,  \n" +
                "					`com`.`heightText`,  \n" +
                "					`com`.`isCPN`,  \n" +
                "					`com`.`isCustom`,  \n" +
                "					`com`.`leadTime`,  \n" +
                "					`com`.`matingPartRquired`,  \n" +
                "					`com`.`maxPriceLimit`,  \n" +
                "					`com`.`maxQtyonHand`,  \n" +
                "					`com`.`minimum`,  \n" +
                "					`com`.`mult`,  \n" +
                "					`com`.`packageQty`,  \n" +
                "					`com`.`partType`,  \n" +
                "					`com`.`pcbPerArray`,  \n" +
                "					`com`.`pickupPadRequired`,  \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "					`com`.`plannedValuePerBuild`,  \n" +
                "					`com`.`programingRequired`,  \n" +
                "					`com`.`rfqOnly`,  \n" +
                "					`com`.`saftyStock`,  \n" +
                "					`com`.`scrapRatePercentagePerBuild`,  \n" +
                "					`com`.`scrapValuePerBuild`,  \n" +
                "					`com`.`selfLifeDays`,  \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "					`com`.`temperatureCoefficient`,  \n" +
                "					`com`.`temperatureCoefficientUnit`,  \n" +
                "					`com`.`temperatureCoefficientValue`,  \n" +
                "					`com`.`trackSerialNumber`,  \n" +
                "					`com`.`refSupplierMfgpnComponentID`,  \n" +
                "					`com`.`refMfgPNMfgCodeId`,  \n" +
                "					`com`.`internalReference`,  \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
                "				FROM `component` AS `com`  \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`   \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`   \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0   \n" +
                "						AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
                "				JOIN `rfq_rohsmst` AS `r`  \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
                "				JOIN  `uoms` AS `u`   \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0  \n" +
                "				WHERE (`com`.`isdeleted`=0)  \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)   \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "					AND `com`.`iscustom`=0   \n" +
                "                    AND `com`.`category`=2   \n" +
                "                    AND `com`.`iscpn`=FALSE  \n" +
                "					AND `com`.`partStatus` != -3  \n" +
                "			) AS a  \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)   \n" +
                "			OR (pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')   \n" +
                "				OR (pidcode LIKE CONCAT('%', pSearch , '%'))  \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	ELSE  \n" +
                "		/* this logic used in purchase order  \n" +
                "		packing slip  \n" +
                "		UMID management  \n" +
                "		Component Master  \n" +
                "		Reserve Stock  \n" +
                "		Component Assy DFM  \n" +
                "		Reports  \n" +
                "		Price Break Update  \n" +
                "		Customer Part  \n" +
                "		Good-Bad Mapping Part  \n" +
                "		Supplier Quote  \n" +
                "		Supplier RMA */  \n" +
                "		SELECT * FROM  \n" +
                "			(  \n" +
                "				SELECT `com`.`id`,  \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "					`com`.`mfgPN` orgMfgPN,  \n" +
                "					`com`.`packaginggroupID`,  \n" +
                "					`com`.`packagingID`,  \n" +
                "					`com`.`PIDCode`,  \n" +
                "					`com`.`isGoodPart`,  \n" +
                "					`com`.`RoHSStatusID`,  \n" +
                "					`com`.`rohsgroupID`,  \n" +
                "					`com`.`mfgcodeID`,  \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,  \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,  \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,  \n" +
                "					`com`.`tolerance`,  \n" +
                "					`com`.`category`,  \n" +
                "					`com`.`imageURL`,  \n" +
                "					`com`.`documentPath`,  \n" +
                "					`com`.`mfgPNDescription`,  \n" +
                "					`com`.`minOperatingTemp`,  \n" +
                "					`com`.`maxOperatingTemp`,  \n" +
                "					`com`.`value`,  \n" +
                "					`com`.`partPackage`,  \n" +
                "					`com`.`powerRating`,  \n" +
                "					`com`.`functionalCategoryID`,  \n" +
                "					`com`.`mountingTypeID`,  \n" +
                "					`com`.`connecterTypeID`,  \n" +
                "					`com`.`noOfPosition`,  \n" +
                "					`com`.`noOfRows`,  \n" +
                "					`com`.`pitch`,  \n" +
                "					`com`.`pitchMating`,  \n" +
                "					`com`.`length`,  \n" +
                "					`com`.`width`,  \n" +
                "					`com`.`height`,  \n" +
                "					`com`.`voltage`,  \n" +
                "					`com`.`weight`,  \n" +
                "					`com`.`feature`,  \n" +
                "					`com`.`color`,  \n" +
                "					`com`.`partStatus`,  \n" +
                "					`com`.`uom`,  \n" +
                "					`com`.`uomClassID`,  \n" +
                "					`com`.`unit`,  \n" +
                "					`com`.`restrictUsePermanently`,  \n" +
                "					`com`.`restrictUSEwithpermission`,  \n" +
                "					`com`.`restrictPackagingUsePermanently`,  \n" +
                "					`com`.`restrictPackagingUseWithpermission`,  \n" +
                "					`com`.`packaging`,  \n" +
                "					`u`.`abbreviation` AS uomName,  \n" +
                "					`u`.`unitName` AS unitName,  \n" +
                "					`r`.`rohsIcon`,  \n" +
                "					`r`.`name` AS rohsName,  \n" +
                "					`com`.`partPackageID`,  \n" +
                "					`com`.`bomLock`,  \n" +
                "					`com`.`businessRisk`,  \n" +
                "					`com`.`costCategoryID`,  \n" +
                "					`com`.`deviceMarking`,  \n" +
                "					`com`.`driverToolRequired`,  \n" +
                "					`com`.`eau`,  \n" +
                "					`com`.`epicorType`,  \n" +
                "					`com`.`functionalTestingRequired`,  \n" +
                "					`com`.`heightText`,  \n" +
                "					`com`.`isCPN`,  \n" +
                "					`com`.`isCustom`,  \n" +
                "					`com`.`leadTime`,  \n" +
                "					`com`.`matingPartRquired`,  \n" +
                "					`com`.`maxPriceLimit`,  \n" +
                "					`com`.`maxQtyonHand`,  \n" +
                "					`com`.`minimum`,  \n" +
                "					`com`.`mult`,  \n" +
                "					`com`.`packageQty`,  \n" +
                "					`com`.`partType`,  \n" +
                "					`com`.`pcbPerArray`,  \n" +
                "					`com`.`pickupPadRequired`,  \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "					`com`.`plannedValuePerBuild`,  \n" +
                "					`com`.`programingRequired`,  \n" +
                "					`com`.`rfqOnly`,  \n" +
                "					`com`.`saftyStock`,  \n" +
                "					`com`.`scrapRatePercentagePerBuild`,  \n" +
                "					`com`.`scrapValuePerBuild`,  \n" +
                "					`com`.`selfLifeDays`,  \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "					`com`.`temperatureCoefficient`,  \n" +
                "					`com`.`temperatureCoefficientUnit`,  \n" +
                "					`com`.`temperatureCoefficientValue`,  \n" +
                "					`com`.`trackSerialNumber`,  \n" +
                "					`com`.`refSupplierMfgpnComponentID`,  \n" +
                "					`com`.`refMfgPNMfgCodeId`,  \n" +
                "					`com`.`internalReference`,  \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
                "				FROM `component` AS `com`  \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`   \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`   \n" +
                "						AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
                "				JOIN `rfq_rohsmst` AS `r`   \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
                "				JOIN `uoms` AS `u`   \n" +
                "					ON `u`.`id`= `com`.`uom`   \n" +
                "						AND `u`.`isdeleted`=0  \n" +
                "				WHERE `com`.`isdeleted`=0  \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)   \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "					AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)  \n" +
                "					AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)  \n" +
                "					AND `com`.`partStatus` != -3  \n" +
                "			) AS a  \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)   \n" +
                "			OR (pSearch IS NOT NULL   \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')   \n" +
                "                OR (pidcode LIKE CONCAT('%', pSearch , '%'))  \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4851,'2.00','V1',' User Story 34344: Purchase Order: Active/Inactive Part Status related changes - Jay'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4851:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-05-2021 *********************************** */
                "INSERT INTO help_blog_det (title, helpBlogId, isSystemGenerated, `description`, displayorder, createdBy, updatedBy)  \n" +
                "SELECT CONCAT('<b>',title,'</b>'), id, 1 isSystemGenerated, \"<b>TEXT IS COMMING SOON</b>\", 1.00, 1, 1 FROM help_Blog   \n" +
                "WHERE isDeleted=0 AND id NOT IN (SELECT helpBlogID FROM help_blog_det WHERE isDeleted=0 AND isSystemGenerated=1); \n" +
                /* **************************** New Script -> 23-05-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_helpblog_helpblogdetail` ;  \n" +
                "CREATE TRIGGER `TRG_AI_helpblog_helpblogdetail` AFTER INSERT ON `help_blog`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	IF NEW.id IS NOT NULL AND New.title IS NOT NULL THEN      \n" +
                "		INSERT INTO help_blog_det(title, helpBlogId, isSystemGenerated, `description`, displayorder, createdBy, updatedBy)      \n" +
                "        VALUES(NEW.title, New.id, 1, \"<b>TEXT IS COMMING SOON</b>\", 1.00, NEW.createdBy, NEW.updatedBy);      \n" +
                "    END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4852,'2.00','V1','Help Blog Changes - Vaibhav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4852:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-05-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`,  \n" +
                " `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES ('Allow to Void Applied WOFF & Release Invoice Group', 1, 0, fun_DatetimetoUTCDateTime(),  \n" +
                " 1, fun_DatetimetoUTCDateTime(),1, 1, 1);  \n" +
                /* **************************** Add Script Version -> 23-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4853,'2.00','V1',' feature_mst entry for void cust write off - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4853:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRequestType VARCHAR(5),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */  \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;  \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */  \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "		ELSE  \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"  \n" +
                "	SELECT  \n" +
                "		temp_aged_details.customerID,  \n" +
                "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName,  \n" +
                "		temp_aged_details.termsDays AS custCurrTermDays,  \n" +
                "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,  \n" +
                "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,  \n" +
                "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,  \n" +
                "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,  \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,  \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,  \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,  \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,  \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,  \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,  \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,  \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,  \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,  \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,  \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,  \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (  \n" +
                "		SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)      AS `dratftCreditMemoCount`,  \n" +
                "				  -- `cid`.`DocDate`                  AS `DocDate`,  \n" +
                "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,  \n" +
                "				  `cpt`.`termsDays`                   AS `termsDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),  \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "                  FROM  \n" +
                "(  \n" +
                "	SELECT  \n" +
                "					 `a`.`customerID`                     AS `customerID`,  \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "					0                                    AS `totalUnappliedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + IFNULL(c.totalCreditMemoAppliedAmount,0)),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "                       FROM `customer_packingslip` `a`  \n" +
                "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "										      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "										    FROM (`packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "										ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "						LEFT JOIN 	(  \n" +
                "									SELECT  \n" +
                "											a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "									FROM `packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "										    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "										    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "					WHERE ((`a`.`transType` IN('I','C'))  \n" +
                "                -- AND a.paymentStatus <> 'RE'  \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "					      AND (`a`.`isDeleted` = 0))  \n" +
                "	UNION  \n" +
                "      SELECT  \n" +
                "			`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "			NULL									AS `refCustPackingslipInvoiceID`,  \n" +
                "			0                                     					AS `invoiceCount`,  \n" +
                "			0                                     					AS `unInvoiceCount`,  \n" +
                "			0                                     					AS `dratftCreditMemoCount`,  \n" +
                "			`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "			0  									AS `totalRecievedAmount`,  \n" +
                "			((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "			0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "			0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "			0                                     					AS `totalInvoicedAmount`,  \n" +
                "			0                                     					AS `totalDraftAmount`  \n" +
                "			FROM (`packingslip_invoice_payment` `a`  \n" +
                "			LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "			ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "			WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "			AND (`a`.`isPaymentVoided` = 0)  \n" +
                "			AND (`a`.`refPaymentMode` = 'R'))  \n" +
                "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount`  \n" +
                "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "                ) AS  cid  \n" +
                "                INNER JOIN `vu_customer_payment_terms` `cpt`  \n" +
                "			     ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)  \n" +
                "                     GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cpt`.`termsDays`, (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY)))  \n" +
                "                ) AS temp_aged_details  \n" +
                "		GROUP BY temp_aged_details.customerID, fun_getMfgCodeAndNameByID(temp_aged_details.customerID), temp_aged_details.termsDays  \n" +
                "		HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "            fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			(CASE WHEN (psip.isPaymentVoided = 1) THEN \"Voided\"  \n" +
                "				WHEN (IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN \"Received & Applied\"  \n" +
                "				ELSE \"Received\" END) AS isPaymentVoidedConvertedValueOfCM ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "				ELSE 'Received' END)  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* *************************** New Script -> 23-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			SET vLockStatusToBe = 'NA' ;  \n" +
                "			IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "					SET vLockStatusToBe = 'RL' ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'  \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'  \n" +
                "							 ELSE paymentStatus END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pRemark, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update invoice payment status */  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "		SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4854,'2.00','V1',' VOID cust write off sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4854:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP FUNCTION IF EXISTS  fun_checkUMIDScan;  \n" +
                "CREATE FUNCTION `fun_checkUMIDScan`(                                                                      \n" +
                "	pUMID VARCHAR(100),                                                                      \n" +
                "	ppartID INT,                                                                      \n" +
                "	pwoTransID INT,                                                                     \n" +
                "	pwoOPID INT,                                                                     \n" +
                "	pemployeeId INT,                                                                    \n" +
                "	pcheckKitAllocation VARCHAR(5000),                                                                   \n" +
                "	ptransactionType VARCHAR(1),                                                                     \n" +
                "	pFromFeeder INT,                                                                  \n" +
                "	pisVerify INT,                                                                  \n" +
                "	pwoOpEqpID INT,                                                                  \n" +
                "	pfeederLocation VARCHAR(1000),                                                     \n" +
                "	pwoID INT,                                                    \n" +
                "	pCreatedBy VARCHAR(500),                                                    \n" +
                "	pisConfirmed INT) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN                                                                                \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;                                                                           \n" +
                "	DECLARE temp_umid_comp_id INT;                                                                               \n" +
                "	DECLARE temp_umid_binID INT;                                                                           \n" +
                "    DECLARE temp_umid_sid INT;                            \n" +
                "	DECLARE temp_umid_package_id INT;                                                                   \n" +
                "	DECLARE temp_comp_alertExpiryDays INT;                                                                            \n" +
                "	DECLARE flag_isKitValid INT;                                                                                  \n" +
                "	DECLARE flag_isTeamOperation INT DEFAULT 0;                                                                                     \n" +
                "	DECLARE temp_expiryDate DATETIME;                                                                                   \n" +
                "	DECLARE temp_expiryDaysLeftValidation INT;                                                                                     \n" +
                "	DECLARE temp_expiryDaysLeftCount INT;                                                                                        \n" +
                "	DECLARE temp_config_dateFormat VARCHAR(1000);                                                                                      \n" +
                "	DECLARE temp_umid_valid INT DEFAULT 1;                                                                                       \n" +
                "	DECLARE temp_isIncludeSubassembly INT DEFAULT 0;                                                                                 \n" +
                "	DECLARE temp_recordFoundInAssembly VARCHAR (500);                                                                       \n" +
                "  \n" +
                "	DECLARE temp_comp_isGoodPart INT DEFAULT 0;                                                 \n" +
                "	DECLARE temp_comp_partLevelRestrictUsePermanently INT DEFAULT 0;                                                                                              \n" +
                "	DECLARE temp_comp_partLevelRestrictPackagingUsePermanently INT DEFAULT 0;                                                             \n" +
                "	DECLARE temp_umid_restrictFromUMID INT DEFAULT 0;                                                             \n" +
                "	DECLARE temp_comp_is_cpn INT DEFAULT 0;                                                                      \n" +
                "	DECLARE temp_parent_wo INT DEFAULT 0;                      \n" +
                "	DECLARE temp_part_cleantype VARCHAR(5) DEFAULT '';                \n" +
                "    DECLARE temp_assy_cleantype VARCHAR(5) DEFAULT '';                \n" +
                "    DECLARE temp_op_cleantype VARCHAR(5) DEFAULT 'NA';                \n" +
                "    DECLARE temp_err_text VARCHAR(2500) DEFAULT NULL;                \n" +
                "  \n" +
                "  \n" +
                "    SET temp_expiryDate = NULL;                                                                                  \n" +
                "	SET temp_expiryDaysLeftValidation = NULL;                                                                                \n" +
                "	SET temp_expiryDaysLeftCount = NULL;                        \n" +
                "  \n" +
                "  \n" +
                "    /********Get Parent WO of Revised WO***********/                    \n" +
                "    WITH RECURSIVE RevWo AS  (                    \n" +
                "			SELECT	woId,					                    \n" +
                "					1 lvl  ,                    \n" +
                "					terminateWOID                    \n" +
                "			FROM workorder                     \n" +
                "			WHERE woId = pwoID                    \n" +
                "			AND isDeleted = 0                    \n" +
                "			UNION ALL                    \n" +
                "			SELECT	wo.woID,					                    \n" +
                "					rw.lvl +1 lvl,                    \n" +
                "					wo.terminateWOID                    \n" +
                "			 FROM workorder wo                          \n" +
                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID                    \n" +
                "			 WHERE wo.isDeleted = 0	                    \n" +
                "			 )                     \n" +
                "			SELECT rev.woID  INTO temp_parent_wo                    \n" +
                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;                    \n" +
                "  \n" +
                "    IF temp_parent_wo = 0 THEN SET temp_parent_wo = NULL; END IF;                    \n" +
                "	#########################################################################################                                                                      \n" +
                "	################### NOTE: Temporaray table for error comes from sp ######################                                                                      \n" +
                "	#########################################################################################                                                                     \n" +
                "	IF(pUMID IS NOT NULL) THEN	                                                                    \n" +
                "		# step 1 - get umid details from umid                                                                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;                                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details AS                                                                        \n" +
                "		SELECT c.id, c.PIDCode, c.mfgPN,                                                                     \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode, c.mfgCodeID,                                                                  \n" +
                "			c.restrictUSEwithpermission AS partLevelRestrictUSEwithpermission,                                                                    \n" +
                "			c.restrictUsePermanently AS partLevelRestrictUsePermanently,                                                                    \n" +
                "			c.restrictPackagingUseWithpermission AS partLevelRestrictPackagingUseWithpermission,                                                                    \n" +
                "			c.restrictPackagingUsePermanently AS partLevelRestrictPackagingUsePermanently,                                                                    \n" +
                "			c.packagingGroupId,                                                                        \n" +
                "			c.rev AS rev,                                                                   \n" +
                "			c.imageURL AS imageURL,                                                                   \n" +
                "			c.documentPath,                                      \n" +
                "			c.mfgPNDescription AS mfgPNDescription,                                                                    \n" +
                "			c.roHSStatusID,                                                                   \n" +
                "			c.alertExpiryDays,                                                                  \n" +
                "			c.umidVerificationRequire,                                                                  \n" +
                "			c.uom,                                                       \n" +
                "			c.isGoodPart isGoodPart,                                                                  \n" +
                "			rr.name rohsStatus,                                                                   \n" +
                "			rr.rohsIcon rohsIcon,                                                                     \n" +
                "			css.id AS refsidid,                                                                    \n" +
                "			css.binID AS binID,                                                                        \n" +
                "			css.pkgQty AS pkgQty,                                                                            \n" +
                "			-- css.pkgCount AS pkgCount,                                                                               \n" +
                "			css.pkgUnit AS pkgUnit,                                                                                \n" +
                "			css.uom AS pkgUOM,                                                                  \n" +
                "			css.uid,                                                              \n" +
                "			fun_getUnitNameByID(c.uom) unitName,                                                                  \n" +
                "			css.isUMIDRestrict AS RestrictFromUMID,                                                                      \n" +
                "			css.expiryDate,                                                                    \n" +
                "			1 isActualComponent,                                                                         \n" +
                "			0 isPackagingAlias,                                              \n" +
                "			c.isCPN AS isCPN,                                     \n" +
                "			c.isCustom AS isCustom ,                                         \n" +
                "			CAST(NULL AS CHAR(3000)) AS refDesig,                        \n" +
                "			c.programingRequired,                                       \n" +
                "			(SELECT feederLocation FROM workorder_operation_equipment_feeder_details	                                        \n" +
                "				WHERE id IN (SELECT eqpFeederID FROM workorder_trans_umid_details                                         \n" +
                "					WHERE refsidid IN (SELECT id FROM component_sid_stock                                           \n" +
                "					WHERE uid=pUMID AND isDeleted=0) AND isDeleted=0 AND reelStatus=\"P\")                                        \n" +
                "					AND woOPID=pwoOPID) feederLocation   ,                \n" +
                "             c.isWaterSoluble, c.isNoClean  , c.isFluxNotApplicable                     \n" +
                "		FROM component c                                                                        \n" +
                "		LEFT JOIN component_sid_stock css                                                                        \n" +
                "		ON css.refcompid = c.id AND css.deletedAt IS NULL                                                                      \n" +
                "		LEFT JOIN rfq_rohsmst rr ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)                                                                  \n" +
                "		WHERE css.uid = pUMID                                                                        \n" +
                "		AND c.deletedAt IS NULL;                                                                     \n" +
                "  \n" +
                "		SELECT wop.isTeamOperation, CASE	WHEN wop.isFluxNotApplicable = 1 THEN 'NA'          \n" +
                "											WHEN wop.isNoClean = 1 AND wop.isWaterSoluble = 1 THEN 'ALL'                 \n" +
                "											WHEN wop.isNoClean = 1 AND wop.isWaterSoluble = 0 THEN 'NC'                \n" +
                "											WHEN wop.isNoClean = 0 AND wop.isWaterSoluble = 1 THEN 'WS'                \n" +
                "											ELSE 'NA'  END         \n" +
                "        INTO flag_isTeamOperation,temp_op_cleantype                 \n" +
                "        FROM workorder_operation wop WHERE woopid = pwoOpID;                                                  \n" +
                "  \n" +
                "		#check UMID already scanned in operation                                                                    \n" +
                "		IF ((pFromFeeder <> 1 AND pisVerify <> 1)) THEN                                                      \n" +
                "			-- IF(IFNULL(flag_isTeamOperation,0) = 1) THEN                                                  \n" +
                "			-- 	IF ((SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                                                     \n" +
                "			-- 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)                                                                    \n" +
                "			-- 		AND wtud.woOPID = pwoOPID AND wtud.woTransID = pwoTransID                                                              \n" +
                "			-- 		AND IFNULL(transactionType,ptransactionType)=ptransactionType) > 0) THEN                                                  \n" +
                "			-- 		-- ALREADY_IN_USE                                                                  \n" +
                "			-- 		SET temp_umid_valid = 0;                                                  \n" +
                "			-- 		SET result = fun_checkAndInsertError('UMID003', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                        \n" +
                "			-- 	END IF;                                                  \n" +
                "			-- ELSE                                                  \n" +
                "				IF (pisConfirmed = 0 AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                                                     \n" +
                "			 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)                                                                    \n" +
                "			 		AND wtud.woOPID = pwoOPID                                                         \n" +
                "			 		AND IFNULL(transactionType,ptransactionType)=ptransactionType                                        \n" +
                "			 		AND woTransID = pwoTransID) > 0) THEN                                                  \n" +
                "			 		-- ALREADY_IN_USE                                                   \n" +
                "			 		SET temp_umid_valid = 0;                                                                 \n" +
                "			 		SET result = fun_checkAndInsertError('UMID037', 0, 0, 1, 0, 0, \"DUP\", NULL, NULL);                                                        \n" +
                "			 	END IF;                                                  \n" +
                "			-- END IF;                                                   \n" +
                "		END IF;                                                      \n" +
                "		IF(temp_umid_valid = 1) THEN                                                  \n" +
                "			# check umid available in list                                                              \n" +
                "			# yes -  check for pid in bom                                                                        \n" +
                "			# no - invalid umid                                                                        \n" +
                "			## restrict to use forever - restrictUsePermanently                                                                 \n" +
                "			IF((SELECT COUNT(1) FROM temp_umid_details) > 0) THEN                                                              \n" +
                "				SELECT id,packagingGroupId,                                                          \n" +
                "					alertExpiryDays,expiryDate,                                                           \n" +
                "					IFNULL(partLevelRestrictUsePermanently,0),IFNULL(partLevelRestrictPackagingUsePermanently,0),                                                           \n" +
                "					IFNULL(RestrictFromUMID,0), isGoodPart, isCPN, binID , refsidid                                                  \n" +
                "					-- , refSalesOrderDetID                                                                    \n" +
                "				INTO temp_umid_comp_id,temp_umid_package_id,                                                           \n" +
                "					temp_comp_alertExpiryDays, temp_expiryDate,                                                          \n" +
                "					temp_comp_partLevelRestrictUsePermanently,temp_comp_partLevelRestrictPackagingUsePermanently,                                                              \n" +
                "					temp_umid_restrictFromUMID, temp_comp_isGoodPart, temp_comp_is_cpn, temp_umid_binID ,temp_umid_sid                                             \n" +
                "					-- , temp_umid_refSalesOrderDetID                                                          \n" +
                "				FROM temp_umid_details WHERE uid=pUMID;                                                           \n" +
                "  \n" +
                "				#check for part expired or not                                                                    \n" +
                "				#alertExpiryDays                                                                  \n" +
                "				#umidVerificationRequire                                              \n" +
                "				SELECT `values` INTO temp_config_dateFormat FROM systemconfigrations WHERE `key`=\"DatePickerDateFormat\";                                                      \n" +
                "				IF((IFNULL(temp_expiryDate,0) > 0) AND (fun_DatetimetoUTCDateTime() > (temp_expiryDate))) THEN                                                               \n" +
                "					-- EXPIRED_ON                                                                  \n" +
                "					SET result = fun_checkAndInsertError('UMID011', 0, 1, 0, 0, 0, temp_expiryDate, temp_config_dateFormat, NULL);                                                                  \n" +
                "				ELSEIF(temp_comp_partLevelRestrictUsePermanently = 1) THEN                                                          \n" +
                "					-- RESTRICTED_FROM_PART                                                                \n" +
                "					SET result = fun_checkAndInsertError('UMID013', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                          \n" +
                "				ELSEIF(temp_comp_partLevelRestrictPackagingUsePermanently = 1) THEN                                                          \n" +
                "					-- RESTRICTED_FROM_PART_PACKAGING                                                                  \n" +
                "					SET result = fun_checkAndInsertError('UMID022', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                           \n" +
                "				ELSEIF(temp_umid_restrictFromUMID = 1) THEN                                                          \n" +
                "					-- RESTRICTED_FROM_UMID                                                                  \n" +
                "					SET result = fun_checkAndInsertError('UMID012', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                           \n" +
                "				ELSEIF(temp_comp_isGoodPart <> 1) THEN                                                          \n" +
                "					-- RESTRICTED_INCORRECT_PART                                                                  \n" +
                "					SET result = fun_checkAndInsertError('UMID028', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                               \n" +
                "				ELSEIF((SELECT COUNT(1) FROM binmst b                                               \n" +
                "						WHERE deletedAt IS NULL                                               \n" +
                "						AND warehouseID IN                                               \n" +
                "							(SELECT id FROM warehousemst WHERE deletedAt IS NULL AND parentWHID=-2)                                               \n" +
                "						AND id=temp_umid_binID) = 0)  THEN                                              \n" +
                "					-- UMID_MUST_BE_FROM_PRODUCTION_WAREHOUSE                                                                  \n" +
                "					SET result = fun_checkAndInsertError('UMID031', 0, 1, 0, 0, 0, NULL, NULL, NULL);    	                                              \n" +
                "				ELSEIF((SELECT COUNT(1) FROM workorder_trans_umid_details ud                                               \n" +
                "						WHERE deletedAt IS NULL                                               \n" +
                "						AND reelstatus = 'P'                            \n" +
                "                        AND transactionType  = 'F'                            \n" +
                "                        AND refsidid = temp_umid_sid) > 0 AND pisVerify=0)  THEN                                              \n" +
                "					-- UMID SHOULD NOT BE ALREADY  IN FEEDER                                                                 \n" +
                "					SET result = fun_checkAndInsertError('UMID041', 0, 1, 0, 0, 0, pUMID, NULL, NULL);            \n" +
                "                ELSEIF((SELECT COUNT(1) FROM component co  \n" +
                "						WHERE co.isDeleted = 0  \n" +
                "                        AND co.partStatus = -3  \n" +
                "                        AND  co.id = ppartID) > 0  AND pisConfirmed = 0)     THEN  \n" +
                "                        -- Take confirmation for inactive part  \n" +
                "                        SET result = fun_checkAndInsertError('UMID047', 0, 0, 1, 0, 0, NULL, NULL, NULL);     \n" +
                "                        -- SET result = fun_checkAndInsertError('UMID039', 0, 0, 1, 0, 0, NULL, NULL, NULL);      \n" +
                "				ELSE                                                                               \n" +
                "					#check current umid is assigned in bom or not                                                                        \n" +
                "					#check with part available in BOM or not                                                 \n" +
                "					-- check for subassembly flag in work order and then check kit allocation case in subaasembly too.                                                \n" +
                "					SELECT IFNULL(isIncludeSubAssembly,0) INTO temp_isIncludeSubassembly FROM workorder WHERE woID=pwoID;                  \n" +
                "                    #Feeder check  case removed as  per discussed with  Vaibhav bhai            \n" +
                "                    IF pcheckKitAllocation = 'MISSINGPART' THEN   -- ADDED FOR MISSING PART AS  NO NEED TO CHECK KIT ALLOCATION                                 \n" +
                "						#SELECT 'CREATE TEMP temp_assy_part_list TABLE ';                                \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                                           \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                                          \n" +
                "						SELECT mfgpn AS mfgPN,                                                        \n" +
                "							AssemblyID AS AssemblyID,                                                                     \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                                                \n" +
                "							restrictPart AS restrictPart,                                                                      \n" +
                "							custPN AS custPN,                                                                        \n" +
                "							custPNID AS custPNID,                                                                        \n" +
                "							PIDCode,                                                                        \n" +
                "							LineID,                                                                        \n" +
                "							id AS rfqLineItemsID,                                                                        \n" +
                "							refDesig AS refDesig,                                                                        \n" +
                "							isBOMPart AS isActualComponent,                                                                        \n" +
                "							isPackagingAlias,                                                                        \n" +
                "							isCPN,                                                          \n" +
                "							isInstall,                                                          \n" +
                "							isPurchase,                                                          \n" +
                "							isBuyDNPQty,                                                          \n" +
                "							customerApprovalCPN,                                                          \n" +
                "							partLevelRestrictUSEwithpermission,                                                          \n" +
                "							partLevelRestrictUsePermanently,                                                          \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                                          \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                                          \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                                          \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                                          \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                                          \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                                                   \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                                              \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                                             \n" +
                "							lineLevelCustomerApproval,                                              \n" +
                "							RoHSStatusID,                        \n" +
                "							isNotRequiredKitAllocation                                                                        \n" +
                "						FROM vu_bom_details_with_alias WHERE                                                 \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship                                                     \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)                                                \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation                                                 \n" +
                "							WHERE refSalesOrderDetID                                                     \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                                                 \n" +
                "							WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo ,pwoID)  ) AND `status` = \"A\" AND assyID=ppartID)));                                      \n" +
                "                    ELSEIF  temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1 AND  pcheckKitAllocation = 'KITALLOCATIONNOTREQUIRED' THEN          \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                                           \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                                          \n" +
                "						SELECT mfgpn AS mfgPN,                                                        \n" +
                "							AssemblyID AS AssemblyID,                                                                     \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                                                \n" +
                "							restrictPart AS restrictPart,                                                                      \n" +
                "							custPN AS custPN,                                                                        \n" +
                "							custPNID AS custPNID,                                                                        \n" +
                "							PIDCode,                                                                        \n" +
                "							LineID,                                                                        \n" +
                "							id AS rfqLineItemsID,                                                                        \n" +
                "							refDesig AS refDesig,                                                                        \n" +
                "							isBOMPart AS isActualComponent,                                                                        \n" +
                "							isPackagingAlias,                                                                        \n" +
                "							isCPN,                                                          \n" +
                "							isInstall,                                                          \n" +
                "							isPurchase,                                                          \n" +
                "							isBuyDNPQty,                                                          \n" +
                "							customerApprovalCPN,                                                          \n" +
                "							partLevelRestrictUSEwithpermission,                                                          \n" +
                "							partLevelRestrictUsePermanently,                                                          \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                                          \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                                          \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                                          \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                                          \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                                          \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                                                   \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                                              \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                                             \n" +
                "							lineLevelCustomerApproval,                                              \n" +
                "							RoHSStatusID,                        \n" +
                "							isNotRequiredKitAllocation ,                      \n" +
                "							Qpa , programingStatus  , dnpDesigCount                                                                     \n" +
                "						FROM vu_bom_details_with_alias           \n" +
                "                        WHERE AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship                                                     \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)           \n" +
                "                           AND isDeleted = 0 ;          \n" +
                "					ELSEIF pcheckKitAllocation = 'KITALLOCATIONNOTREQUIRED' THEN          \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                                           \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                                          \n" +
                "						SELECT mfgpn AS mfgPN,                                                           \n" +
                "							AssemblyID AS AssemblyID,                                                                    \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                       \n" +
                "							restrictPart AS restrictPart,                                                                      \n" +
                "							custPN AS custPN,                                                                        \n" +
                "							custPNID AS custPNID,                                                                        \n" +
                "							PIDCode,                                                                        \n" +
                "							LineID,                                                                        \n" +
                "							id AS rfqLineItemsID,                                                                        \n" +
                "							refDesig AS refDesig,                                                                        \n" +
                "							isBOMPart AS isActualComponent,                                                                        \n" +
                "							isPackagingAlias,                                                                        \n" +
                "							isCPN,                                                          \n" +
                "							isInstall,                                                          \n" +
                "							isPurchase,                                                          \n" +
                "							isBuyDNPQty,                                                          \n" +
                "							customerApprovalCPN,                                                          \n" +
                "							partLevelRestrictUSEwithpermission,                                                          \n" +
                "							partLevelRestrictUsePermanently,                                                          \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                                          \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                                          \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                                          \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                                          \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                                          \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                                                 \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                                              \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                                               \n" +
                "							lineLevelCustomerApproval,                                              \n" +
                "							RoHSStatusID,                        \n" +
                "							isNotRequiredKitAllocation ,                      \n" +
                "							Qpa , programingStatus , dnpDesigCount                                                                      \n" +
                "						FROM vu_bom_details_with_alias                                                     \n" +
                "							WHERE AssyID = ppartID           \n" +
                "							AND isDeleted = 0   ;                 \n" +
                "					ELSEIF (temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1) THEN                                                \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                                           \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                                          \n" +
                "						SELECT mfgpn AS mfgPN,                                                        \n" +
                "							AssemblyID AS AssemblyID,                                                                     \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                                                \n" +
                "							restrictPart AS restrictPart,                                                                      \n" +
                "							custPN AS custPN,                                                                        \n" +
                "							custPNID AS custPNID,                                                                        \n" +
                "							PIDCode,                                                                        \n" +
                "							LineID,                                                                        \n" +
                "							id AS rfqLineItemsID,                                                                        \n" +
                "							refDesig AS refDesig,                                                                        \n" +
                "							isBOMPart AS isActualComponent,                                                                        \n" +
                "							isPackagingAlias,                                                                        \n" +
                "							isCPN,                                                          \n" +
                "							isInstall,                                                          \n" +
                "							isPurchase,                                                          \n" +
                "							isBuyDNPQty,                                                          \n" +
                "							customerApprovalCPN,                                                          \n" +
                "							partLevelRestrictUSEwithpermission,                                                          \n" +
                "							partLevelRestrictUsePermanently,                                                          \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                                          \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                                          \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                                          \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                                          \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                                          \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                                                   \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                                              \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                                             \n" +
                "							lineLevelCustomerApproval,                                              \n" +
                "							RoHSStatusID,                        \n" +
                "							isNotRequiredKitAllocation ,                      \n" +
                "							Qpa , programingStatus  , dnpDesigCount                                                                     \n" +
                "						FROM vu_bom_details_with_alias WHERE                                                 \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship                                                     \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)                                                \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation                                                 \n" +
                "							WHERE refSalesOrderDetID                                                     \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                                                     \n" +
                "							WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo,pwoID) ) AND `status` = \"A\" AND assyID=ppartID)));                                                           \n" +
                "					ELSE                                                         \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                                           \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                                          \n" +
                "						SELECT mfgpn AS mfgPN,                                                           \n" +
                "							AssemblyID AS AssemblyID,                                                                    \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                       \n" +
                "							restrictPart AS restrictPart,                                                                      \n" +
                "							custPN AS custPN,                                                                        \n" +
                "							custPNID AS custPNID,                                                                        \n" +
                "							PIDCode,                                                                        \n" +
                "							LineID,                                                                        \n" +
                "							id AS rfqLineItemsID,                                                                        \n" +
                "							refDesig AS refDesig,                                                                        \n" +
                "							isBOMPart AS isActualComponent,                                                                        \n" +
                "							isPackagingAlias,                                                                        \n" +
                "							isCPN,                                                          \n" +
                "							isInstall,                                                          \n" +
                "							isPurchase,                                                          \n" +
                "							isBuyDNPQty,                                                          \n" +
                "							customerApprovalCPN,                                                          \n" +
                "							partLevelRestrictUSEwithpermission,                                                          \n" +
                "							partLevelRestrictUsePermanently,                                                          \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                                          \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                                          \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                                          \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                                          \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                                          \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMStep,                                                          \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                                                 \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                                              \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                                               \n" +
                "							lineLevelCustomerApproval,                                              \n" +
                "							RoHSStatusID,                        \n" +
                "							isNotRequiredKitAllocation ,                      \n" +
                "							Qpa , programingStatus , dnpDesigCount                                                                      \n" +
                "						FROM vu_bom_details_with_alias                                                     \n" +
                "							WHERE ( AssyID  IN (SELECT assyID FROM kit_allocation                                                     \n" +
                "												WHERE refSalesOrderDetID   IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                                                   \n" +
                "																	WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo,pwoID)  )             \n" +
                "												AND `status` = \"A\" AND assyID=ppartID)                     \n" +
                "									OR AssyID IN (SELECT v1.AssyID FROM vu_bom_details_with_alias v1 WHERE v1.isDeleted = 0 AND v1.assyID = ppartID GROUP BY v1.AssyID HAVING COUNT(1) = SUM(CASE WHEN v1.isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END))            \n" +
                "									OR (mfgPnIDWithPackagingAliasID ,AssyID) IN (SELECT v2.mfgPnIDWithPackagingAliasID, v2.AssyID FROM vu_bom_details_with_alias v2 WHERE v2.assyID = ppartID AND v2.isNotRequiredKitAllocation = 1 )          \n" +
                "                                  ) AND isDeleted = 0    ;                         \n" +
                "                             -- second \"OR\" condition added for case when all BOM line items set to skip kit allocation               \n" +
                "                             -- third \"OR\" condition added to  get Part detail for SO without kit allocation and having BOM part as Kit Not Required          \n" +
                "					END IF;                                                            \n" +
                "					# if umid assigned in bom than check for feeder details available for pid		                                                                        \n" +
                "					#yes - check with umid allocated in kit or not                                                                        \n" +
                "					#no - umid not assigned in bom                                  \n" +
                "  \n" +
                "					IF((SELECT COUNT(1) FROM temp_assy_part_list                                                                         \n" +
                "						WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                               \n" +
                "						) = 0) THEN                                                                          \n" +
                "						IF (pFromFeeder = 1) THEN                                              \n" +
                "							-- UMID_NOT_ASSIGNED                                                              \n" +
                "							SET result = fun_checkAndInsertError('UMID008', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                       \n" +
                "						ELSE                                                                \n" +
                "							## Check for Supply materials and tools                                                                     \n" +
                "							IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND                                                                     \n" +
                "								wop.partID = temp_umid_comp_id AND                                                                     \n" +
                "								wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN                                                                    \n" +
                "									-- Check  UMID cleaning type with  Assembly cleaning type only for SMT parts                \n" +
                "									SELECT CASE WHEN tud.isFluxNotApplicable = 1 THEN 'NA'          \n" +
                "												WHEN tud.isNoClean = 1 AND tud.isWaterSoluble = 1 THEN 'ALL'                 \n" +
                "												WHEN tud.isNoClean = 1 AND tud.isWaterSoluble = 0 THEN 'NC'                \n" +
                "												WHEN tud.isNoClean = 0 AND tud.isWaterSoluble = 1 THEN 'WS'                \n" +
                "												ELSE ''                \n" +
                "											END INTO temp_part_cleantype                \n" +
                "									 FROM temp_umid_details tud   ;                \n" +
                "									SELECT CASE WHEN comst.isFluxNotApplicable = 1 THEN 'NA'          \n" +
                "												 WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'ALL'                 \n" +
                "												 WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'                \n" +
                "												 WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'                \n" +
                "												ELSE ''                \n" +
                "											END INTO temp_assy_cleantype                \n" +
                "                                      FROM component comst WHERE comst.id = ppartID;                \n" +
                "                                      # SET temp_err_text = 'UMID cleaning type mismatch with current operation activity or assembly cleaning type. <br/>';                \n" +
                "                                      SET temp_err_text = CONCAT(IFNULL(temp_err_text,'') ,'<label class=\"width-170\" style=\"color:black\">Assembly: </label>',      \n" +
                "											CASE WHEN temp_assy_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label> <label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'                 \n" +
                "											     WHEN temp_assy_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'                 \n" +
                "                                                                                             WHEN temp_assy_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'                 \n" +
                "                                                                                             WHEN temp_assy_cleantype = 'NA' THEN 'Flux Type-Not Applicable.'                \n" +
                "                                                                                             WHEN temp_assy_cleantype = '' THEN 'Flux Type-Not Configured.' END,'<br/>');                \n" +
                "									   SET temp_err_text = CONCAT(temp_err_text ,'<label class=\"width-170\"  style=\"color:black\">Operation activity: </label>',      \n" +
                "											CASE WHEN temp_op_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label> <label class=\"margin-2 label-box label-primary\">No-Clean</label>'                 \n" +
                "												WHEN temp_op_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'                 \n" +
                "                                                                                                  WHEN temp_op_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'                 \n" +
                "                                                                                                  WHEN temp_op_cleantype = 'NA' THEN 'Flux Type-Not Applicable.' END,'<br/>');                \n" +
                "									  SET temp_err_text = CONCAT(temp_err_text ,'<label class=\"width-170\" style=\"color:black\">UMID part: </label>',      \n" +
                "												CASE WHEN temp_part_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label> <label class=\"margin-2 label-box label-primary\"> Water-Soluble</label>'                 \n" +
                "												  WHEN temp_part_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'                 \n" +
                "                                                                                                  WHEN temp_part_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'                 \n" +
                "                                                                                                  WHEN temp_part_cleantype = 'NA' THEN 'Flux Type-Not Applicable.'                \n" +
                "                                                                                                  WHEN temp_part_cleantype = '' THEN 'Flux Type-Not Configured.' END,'<br/>');                                                                                                                  \n" +
                "									IF temp_assy_cleantype = '' THEN       										                \n" +
                "										SET result = fun_checkAndInsertError('UMID045', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);        \n" +
                "									END IF;        \n" +
                "									IF temp_part_cleantype = '' THEN       										                \n" +
                "										SET result = fun_checkAndInsertError('UMID046', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);        \n" +
                "									END IF;             \n" +
                "									IF temp_assy_cleantype = 'NA'THEN        										        \n" +
                "										IF temp_op_cleantype IN ('WS','NC') THEN											                \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                                                                             \n" +
                "										ELSEIF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC') THEN         \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                                                                             \n" +
                "										ELSEIF temp_op_cleantype = 'ALL' AND  temp_part_cleantype = 'ALL' THEN             \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                                                                             \n" +
                "										ELSE                \n" +
                "											SET result = 1;                  \n" +
                "										END IF;                \n" +
                "									ELSEIF temp_assy_cleantype = 'NC' THEN          \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN        \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                                                                             \n" +
                "										ELSEIF temp_op_cleantype IN ('WS','ALL') THEN                \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                                                                             \n" +
                "										ELSEIF temp_op_cleantype = 'NC' AND temp_part_cleantype IN ('WS','ALL') THEN                \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                \n" +
                "										ELSE                \n" +
                "											SET result = 1;                  \n" +
                "										END IF;                    \n" +
                "									ELSEIF temp_assy_cleantype = 'WS'  THEN           \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN        \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                                                                             \n" +
                "										ELSEIF temp_op_cleantype IN ('NC','ALL') THEN                \n" +
                "											SET result = fun_checkAndInsertError('MID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                \n" +
                "										ELSEIF  temp_op_cleantype = 'WS' AND temp_part_cleantype IN ('NC','ALL') THEN                \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                \n" +
                "										ELSE                 \n" +
                "											SET result = 1;                  \n" +
                "										END IF;                    \n" +
                "									  ELSEIF temp_assy_cleantype = 'ALL' THEN          \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN        \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                \n" +
                "										ELSEIF temp_op_cleantype = 'NC' AND  temp_part_cleantype IN ('WS','ALL') THEN	                \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);                \n" +
                "										ELSEIF temp_op_cleantype = 'WS' AND  temp_part_cleantype IN ('NC','ALL') THEN	                \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);        \n" +
                "										ELSEIF temp_op_cleantype = 'ALL' AND  temp_part_cleantype IN ('ALL') THEN	                \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);             \n" +
                "										ELSE                 \n" +
                "											SET result = 1;                  \n" +
                "										END IF;                \n" +
                "									ELSE                                                         \n" +
                "										SET result = 1;                    \n" +
                "									END IF;                     \n" +
                "								## Check for packaging part for umid.                                                                   \n" +
                "								ELSEIF((SELECT COUNT(1) FROM component_packagingalias cp WHERE cp.aliasgroupID = temp_umid_package_id                                                                  \n" +
                "									AND cp.componentID = temp_umid_comp_id AND cp.deletedAt IS NULL AND cp.aliasgroupID IN (SELECT c.packagingGroupId FROM component c                                                  \n" +
                "												WHERE c.id IN (SELECT woop.partID FROM workorder_operation_part woop WHERE woop.woID=pwoID AND woop.woOPID=pwoOPID AND woop.deletedAt IS NULL)                                                   \n" +
                "												AND c.deletedAt IS NULL))  > 0) THEN                                                               \n" +
                "									SET result = 1;                                              \n" +
                "								ELSE                                                                    \n" +
                "									-- UMID_NOT_IN_WORKORDER_OR_KIT                                                             \n" +
                "									SET result = fun_checkAndInsertError('UMID007', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                             \n" +
                "								END IF;                                                                      \n" +
                "						END IF;                                             \n" +
                "					ELSE                                            \n" +
                "						SET result = 1;                                                         \n" +
                "					END IF;                                                           \n" +
                "				END IF;                                                          \n" +
                "			ELSE                                                                      \n" +
                "				-- INVALID                                                                \n" +
                "				SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  	                                                              \n" +
                "			END IF;                                                                     \n" +
                "		END IF;                                                                       \n" +
                "	ELSE                                                                         \n" +
                "		-- REQUIRED                                                                  \n" +
                "		SET result = fun_checkAndInsertError('UMID005', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                          \n" +
                "	END IF;                                                                        \n" +
                "	RETURN result;                                                                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4855,'2.00','V1','fun_checkUMIDScan  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4855:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAllOtherComponentList;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(	              \n" +
                "    )  \n" +
                "BEGIN                       \n" +
                "      DECLARE pmfgCodeID INT;              \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';      \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;              \n" +
                "  \n" +
                "      select group_concat(refMfgCodeMstID) into vMfgCodeIds       \n" +
                "      From supplier_mapping_mst       \n" +
                "      where supplierID  = pmfgCodeID and isDeleted =0 ;      \n" +
                "  \n" +
                "      #get component having mfg as iscompany and part type other               \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,      \n" +
                "      cp.name AS packagingName,          \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus        \n" +
                "      FROM component c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID           \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId          \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom        \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid         \n" +
                "      WHERE c.partType=4       \n" +
                "      AND c.isdeleted=0      \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR find_in_set(c.mfgcodeid ,vMfgCodeIds))    \n" +
                "      AND c.isGoodPart  = 1;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4856,'2.00','V1','Sproc_GetAllOtherComponentList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4856:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyPartList;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyPartList`(                                                              \n" +
                "	IN ppartID INT(11)                              \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "SELECT mfgpn AS mfgPN,                 \n" +
                "	mfgPnIDWithPackagingAliasID AS mfgPNID,                \n" +
                "	custPN AS custPN,                \n" +
                "	custPNID AS custPNID,                \n" +
                "	CPN AS CPN,                  \n" +
                "	custPIDCode AS custPIDCode,          \n" +
                "    custProductionPN,    \n" +
                "	PIDCode,                \n" +
                "    productionPn ,    \n" +
                "	LineID,                \n" +
                "	id AS rfqLineItemsID,                \n" +
                "	refDesig AS refDesig,                \n" +
                "	isBOMPart AS isActualComponent,                \n" +
                "	isPackagingAlias,                \n" +
                "	isCPN,              \n" +
                "	(SELECT logicalGroupID FROM component_logicalgroup_detail WHERE rfqMountingTypeID = mountingTypeID AND deletedAt IS NULL) AS logicalGroupID  ,        \n" +
                "    fun_getMountingTypeNameByID(mountingTypeID) mountingTypeName ,        \n" +
                "    IFNULL( (select name from component_logicalgroup where id in  (SELECT logicalGroupID FROM component_logicalgroup_detail         \n" +
                "				WHERE rfqMountingTypeID = mountingTypeID AND deletedAt IS NULL) ),'') AS logicalGroupName,  \n" +
                "     partStatus             \n" +
                "	FROM vu_bom_details_with_alias WHERE AssyID = ppartID AND isDeleted=0 AND deletedAt IS NULL;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4857,'2.00','V1',' Sproc_GetAssemblyPartList - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4857:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssyCompListForCustomerPackingSlipMISC;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(                                      \n" +
                "	IN pCustomerID INT,        \n" +
                "	IN pSearch VARCHAR(300),        \n" +
                "	IN pPartID INT,    \n" +
                "	IN pisFromSO TINYINT      \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (        \n" +
                "		customerID INT        \n" +
                "    );         \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/        \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN                               \n" +
                "		SET pCustomerID = NULL;                                  \n" +
                "	END IF;                               \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/        \n" +
                "    IF 	pCustomerID IS NOT NULL THEN        \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;        \n" +
                "        INSERT INTO temp_Customers        \n" +
                "		SELECT buyTo AS customerID        \n" +
                "		FROM acquireCustomers;        \n" +
                "        INSERT INTO temp_Customers        \n" +
                "        SELECT smm.refMfgCodeMstID AS customerID        \n" +
                "		FROM supplier_mapping_mst smm        \n" +
                "		WHERE smm.supplierID = pCustomerID        \n" +
                "        AND smm.isDeleted = 0;         \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/        \n" +
                "	SELECT *       \n" +
                "    FROM (      \n" +
                "		SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,        \n" +
                "				co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,        \n" +
                "				ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,        \n" +
                "				co.mfgcodeID,		FUN_GETMFGCODEANDNAMEBYID(co.mfgcodeID) mfgName,					cst.standards,        \n" +
                "				mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,        \n" +
                "				cst.componentStandardList,					co.rfqOnly,			co.partStatus       \n" +
                "		FROM 	component co        \n" +
                "		INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id         \n" +
                "												AND mfg.isDeleted = 0         \n" +
                "												AND mfg.mfgType = 'MFG'        \n" +
                "												-- and mfg.id = (case when co.iscustom = 1 then ifnull(pCustomerID, mfg.id) else mfg.id end)        \n" +
                "												AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)         \n" +
                "														THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = mfg.id))        \n" +
                "														ELSE 1 = 1        \n" +
                "													END)        \n" +
                "		INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0        \n" +
                "		INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0        \n" +
                "		LEFT JOIN (        \n" +
                "			SELECT 	csd.componentID,        \n" +
                "					GROUP_CONCAT(cs.fullName) componentStandardList,        \n" +
                "					GROUP_CONCAT(CASE WHEN csd.classID IS NULL        \n" +
                "											THEN cs.fullName        \n" +
                "										ELSE        \n" +
                "											(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))        \n" +
                "											FROM standard_class s        \n" +
                "											WHERE s.classID = csd.classID AND isDeleted = 0)        \n" +
                "								END                \n" +
                "								ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC                \n" +
                "								SEPARATOR ', ') standards        \n" +
                "			FROM component_standard_details csd        \n" +
                "			INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0        \n" +
                "			WHERE csd.isDeleted = 0        \n" +
                "			GROUP BY csd.componentID        \n" +
                "		) cst ON co.id = cst.componentID        \n" +
                "		WHERE co.id > 0         \n" +
                "		AND co.id = IFNULL(pPartID, co.id)        \n" +
                "		AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)    \n" +
                "		AND co.isDeleted = 0        \n" +
                "		AND co.isGoodPart = 1        \n" +
                "		AND co.partType != 4        \n" +
                "    ) AS co      \n" +
                "    WHERE (CASE WHEN pSearch IS NOT NULL      \n" +
                "				THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))      \n" +
                "				ELSE 1 = 1      \n" +
                "		END);        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4858,'2.00','V1','Sproc_GetAssyCompListForCustomerPackingSlipMISC  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4858:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingCustomerSalesDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingCustomerSalesDetails`(                                  \n" +
                "	IN psalesorderID INT ,                                \n" +
                "	IN packingSlipID INT                                 \n" +
                "    )  \n" +
                "BEGIN                                   \n" +
                " SELECT                     \n" +
                "        sd.id,                    \n" +
                "        IFNULL(sd.custPOLineNumber,1) custPOLineNumber,                    \n" +
                "        sd.tentativeBuild,                    \n" +
                "        sd.qty AS poQty,                    \n" +
                "        sd.partID,                    \n" +
                "        sd.price,                    \n" +
                "        sd.lineID,                       \n" +
                "	CONCAT(c.pidcode,' | ',IFNULL(sd.custPOLineNumber,1)) soDets,                    \n" +
                "	(SELECT CASE WHEN SUM(cpd.shipQty)>=sd.qty THEN TRUE ELSE FALSE END                    \n" +
                "		FROM customer_packingslip_det cpd                   \n" +
                "		WHERE cpd.refsalesorderDetid=sd.id AND cpd.isDeleted = 0                  \n" +
                "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip                   \n" +
                "						WHERE isDeleted = 0                   \n" +
                "						AND transType = 'P')) isShipped  ,                  \n" +
                "	sd.partCategory,          \n" +
                "    c.partType    ,      \n" +
                "    c.rfqOnly,      \n" +
                "    c.PIDCode  ,  \n" +
                "    c.partStatus  \n" +
                "	FROM salesorderdet sd                           \n" +
                "		LEFT JOIN COMPONENT c ON c.id=sd.partid                                  \n" +
                "	WHERE sd.refsalesOrderID=psalesorderID                   \n" +
                "	AND sd.isdeleted=0 AND sd.isCancle=0                  \n" +
                "	AND sd.partCategory IN (2,3)  	          \n" +
                "    AND c.partType != 4;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4859,'2.00','V1','Sproc_GetPendingCustomerSalesDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4859:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(                                                            \n" +
                "	IN pCustomerID INT(11),                    \n" +
                "	IN pPartID INT(11)  ,                    \n" +
                "	IN psubAssyID INT(11) ,    \n" +
                "    IN pSearchObj VARCHAR(200),    \n" +
                "    IN pSalesOrderDetID INT     \n" +
                ")  \n" +
                "BEGIN                                                            \n" +
                "	DECLARE mfgCodeID INT(11);                              \n" +
                "	DECLARE whereClause VARCHAR(500);                                                       \n" +
                "	DECLARE partStatusID INT(11);                                  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);    \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;    \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";                                          \n" +
                "	SET whereClause = \" a.partCategory = 3 \";                                                 \n" +
                "  \n" +
                "	-- fca then default get all assy                    \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN                       \n" +
                "		SET pCustomerID=NULL;                      \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN                            \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);                       \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in       \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")) and      \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")      \n" +
                "		)\");                                         \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);                                                \n" +
                "	END IF;                 \n" +
                "  -- Added to search  Sales order number     \n" +
                "    IF pSearchObj IS NOT NULL THEN     \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");            \n" +
                "    END IF;    \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN    \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);    \n" +
                "    END IF;    \n" +
                "	IF(pPartID IS NOT NULL) THEN                    \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");                    \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,                            \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,                \n" +
                "		c.partStatus, c.isGoodPart,                             \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,    \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,    \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,                     \n" +
                "		(SELECT  perAssyBuildQty                      \n" +
                "			FROM 	kit_allocation_assy_detail                      \n" +
                "			WHERE 	refSalesorderdetid = sd.id                       \n" +
                "		AND 	partId = \",pPartID,\"                     \n" +
                "			AND 	isDeleted = 0) AS qpaa,                              \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,    \n" +
                "        sd.partCategory  \n" +
                "		FROM salesorderdet sd                            \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)                            \n" +
                "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)              \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)                                    \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)                            \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0                            \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1               \n" +
                "			AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');                        \n" +
                "	        -- SELECT @SQLStatement2;       \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",    \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);    \n" +
                "		-- 	 SELECT @SQLStatement2;  				    \n" +
                "	ELSE                   \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,                            \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,                            \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,    \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,    \n" +
                "			1 AssyType,                      \n" +
                "			(SELECT  perAssyBuildQty                      \n" +
                "				FROM 	kit_allocation_assy_detail                      \n" +
                "				WHERE 	refSalesorderdetid = sd.id                       \n" +
                "			AND 	partId = sd.partID                      \n" +
                "				AND 	isDeleted = 0) AS qpaa,                              \n" +
                "			CASE c.partStatus                              \n" +
                "			WHEN \", partStatusID, \" THEN FALSE                              \n" +
                "			ELSE TRUE                              \n" +
                "			END AS isActive ,    \n" +
                "            sd.partCategory , c.partStatus         \n" +
                "			FROM salesorderdet sd                            \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)                                   \n" +
                "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)              \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)                                    \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)                            \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0                            \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3              \n" +
                "				AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');                                       \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",    \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);    \n" +
                "			-- SELECT @SQLStatement2;      \n" +
                "	END IF;                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                      \n" +
                "	EXECUTE query2;                                                      \n" +
                "	DEALLOCATE PREPARE query2;                                                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4860,'2.00','V1','Sproc_GetSOPIDList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4860:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSuppliesMaterialsAndToolsNotAddedInWoOp;  \n" +
                "CREATE PROCEDURE `Sproc_GetSuppliesMaterialsAndToolsNotAddedInWoOp`(                                  \n" +
                "	IN ppageIndex INT,                                  \n" +
                "	IN precordPerPage INT,                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                     \n" +
                "	IN pwoOPID INT,                                      \n" +
                "	IN pAttributesSearch VARCHAR(255),                   \n" +
                "	IN ppartID INT    \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_wo_op_component;                       \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                  \n" +
                "		SET pWhereClause = '1=1' ;                                  \n" +
                "	END IF;	                     \n" +
                "  \n" +
                "	IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                              \n" +
                "		 SET @SQLStAttrbSearch =                     \n" +
                "		  	CONCAT( \"                     \n" +
                "		  	AND (co.mfgPNDescription LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR co.specialNote LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "		  	OR functionalCategoryText LIKE  '%\", pAttributesSearch ,\"%'                     \n" +
                "			OR pt.partTypeName LIKE  '%\", pAttributesSearch ,\"%'            		  	                    \n" +
                "		  	OR mountingTypeText LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR mt.name LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR operatingTemp LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR minOperatingTemp LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR maxOperatingTemp LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR connectorTypeText LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR rct.name LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR noOfPosition LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR noOfRows LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR pitch LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR pitchMating LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR sizeDimension LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR LENGTH LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR width LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR heightText LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR height LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR tolerance LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR voltage LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR VALUE LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR partPackage LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR powerRating LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR weight LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR feature LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR co.PIDCode LIKE  '%\", pAttributesSearch ,\"%'                                \n" +
                "			OR co.mfgPN LIKE  '%\", pAttributesSearch ,\"%'                      \n" +
                "			OR gc.gencCategoryName LIKE  '%\", pAttributesSearch ,\"%'   )                    \n" +
                "		     \");                     \n" +
                "  \n" +
                "	ELSE                     \n" +
                "		SET @SQLStAttrbSearch = '' ;	                                 \n" +
                "	END IF;                     \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLPrepStatement1 = CONCAT(\"                      \n" +
                "	CREATE TEMPORARY TABLE temp_wo_op_component                       \n" +
                "	SELECT co.id, co.PIDCode, co.mfgPN, co.rev ,                  \n" +
                "	co.restrictUSEwithpermission , co.restrictPackagingUseWithpermission , co.restrictUsePermanently , co.restrictPackagingUsePermanently ,                  \n" +
                "	(CASE WHEN (SELECT COUNT(rlap.restrictUseInBOMWithPermissionStep) FROM rfq_lineitems_alternatepart rlap                   \n" +
                "		WHERE rlap.deletedAt IS NULL                  \n" +
                "		AND rlap.mfgPNID = co.id AND partID = \",ppartID ,                  \n" +
                "		\" AND rlap.restrictUseInBOMWithPermissionStep = 1) > 0 THEN 1                  \n" +
                "		ELSE 0 END) restrictUseInBOMWithPermissionStep,                  \n" +
                "	(CASE WHEN (SELECT COUNT(rlap.restrictUseInBOMStep) FROM rfq_lineitems_alternatepart rlap                   \n" +
                "		WHERE rlap.deletedAt IS NULL                  \n" +
                "		AND rlap.mfgPNID = co.id AND partID = \", ppartID ,                  \n" +
                "		\" AND rlap.restrictUseInBOMStep = 1) > 0 THEN 1                  \n" +
                "		ELSE 0 END) restrictUseInBOMStep,                  \n" +
                "	co.imageURL,            \n" +
                "	co.documentPath,            \n" +
                "	co.mfgPNDescription  , co.isCustom ,                      \n" +
                "	pt.partTypeName functionalCategoryName, mt.name mountingTypeName,                              \n" +
                "	rr.name rohsStatus, rr.rohsIcon rohsIcon , gc.gencCategoryName AS partStatusValue ,              \n" +
                "	(CASE WHEN rr.id = -1 THEN 1 ELSE 0 END ) AS isTBDROHSPart,    \n" +
                "    co.isFluxNotApplicable, co.isNoClean, co.isWaterSoluble , co.partStatus   \n" +
                "	FROM component co                          \n" +
                "	LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND co.deletedAt IS NULL AND rr.isDeleted =0                      \n" +
                "	LEFT JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                                  \n" +
                "	LEFT JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                              \n" +
                "	LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus                              \n" +
                "	LEFT JOIN rfq_connectertypemst rct ON co.connecterTypeID = rct.id                    \n" +
                "  \n" +
                "	WHERE mountingTypeID IN (SELECT id FROM rfq_mountingtypemst rm                          \n" +
                "				WHERE id IN     (SELECT cld.rfqmountingTypeID FROM component_logicalgroup_detail cld                        \n" +
                "						WHERE cld.logicalgroupID IN ('-1','-2','-3')                         \n" +
                "						AND cld.deletedAt IS NULL AND cld.isDeleted =0)                        \n" +
                "				AND rm.deletedAt IS NULL AND rm.isDeleted =0)                         \n" +
                "	AND co.deletedAt IS NULL                   \n" +
                "	AND co.isGoodPart = 1            \n" +
                "	AND co.isCustom != 1          \n" +
                "	AND co.partType = 2  /* 2 - component only */         \n" +
                "	AND co.mfgCodeID IN (SELECT id FROM mfgcodemst WHERE deletedAt IS NULL AND mfgType = 'MFG')                 \n" +
                "	AND co.isDeleted=0                     \n" +
                "	AND co.id NOT IN (SELECT wop.partID FROM workorder_operation_part wop                     \n" +
                "					WHERE wop.woOPID = \",pwoOPID,\"                     \n" +
                "					AND wop.deletedAt IS NULL AND wop.isDeleted=0)	                    \n" +
                "	 \", @SQLStAttrbSearch , \" and \" , pWhereClause);                      \n" +
                "  \n" +
                "  \n" +
                "	PREPARE prepQuery1 FROM @SQLPrepStatement1;                       \n" +
                "	EXECUTE prepQuery1;                            \n" +
                "	DEALLOCATE PREPARE prepQuery1;                    \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN ASC\") ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                  \n" +
                "	-- SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM temp_wo_op_component where \", pWhereClause );                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM temp_wo_op_component \" );                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  temp_wo_op_component \" , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_wo_op_component;                     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4861,'2.00','V1','Sproc_GetSuppliesMaterialsAndToolsNotAddedInWoOp  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4861:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "drop view if exists vu_bom_details_with_alias;  \n" +
                "CREATE VIEW `vu_bom_details_with_alias` AS  \n" +
                "    SELECT   \n" +
                "        `rl`.`id` AS `id`,  \n" +
                "        `rl`.`partID` AS `AssyId`,  \n" +
                "        FUN_GETASSYNAMEBYID(`rl`.`partID`) AS `AssyName`,  \n" +
                "        FUN_GETASSYPIDCODEBYID(`rl`.`partID`) AS `AssemblyID`,  \n" +
                "        `rl`.`lineID` AS `LineID`,  \n" +
                "        `rl`.`qpa` AS `Qpa`,  \n" +
                "        `rl`.`refDesig` AS `refDesig`,  \n" +
                "        `rl`.`custPN` AS `CustPn`,  \n" +
                "        `rl`.`customerRev` AS `customerRev`,  \n" +
                "        `rl`.`custPNID` AS `custPNID`,  \n" +
                "        FUN_GETCOMPONENTPRODUCTIONPN(`rl`.`custPNID`) AS `custProductionPN`,  \n" +
                "        FUN_GETASSYPIDCODEBYID(`rl`.`custPNID`) AS `custPIDCode`,  \n" +
                "        `rl`.`restrictCPNUseInBOMStep` AS `restrictCPNUseInBOMStep`,  \n" +
                "        (CASE  \n" +
                "            WHEN (IFNULL(`rl`.`restrictCPNUseInBOMStep`, 0) = 1) THEN 1  \n" +
                "            ELSE `pkg`.`restrictUseInBOMStep`  \n" +
                "        END) AS `restrictPart`,  \n" +
                "        FUN_GETASSYNAMEBYID(`rl`.`custPNID`) AS `CPN`,  \n" +
                "        `rl`.`uomID` AS `uomid`,  \n" +
                "        `rl`.`isInstall` AS `isinstall`,  \n" +
                "        `rl`.`isPurchase` AS `isPurchase`,  \n" +
                "        `rl`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
                "        `rl`.`customerApprovalForPopulateStep` AS `customerApprovalForPopulateStep`,  \n" +
                "        `rl`.`customerApprovalCPN` AS `customerApprovalCPN`,  \n" +
                "        `pkg`.`mfgPN` AS `mfgpn`,  \n" +
                "        `pkg`.`mfgPnIDWithPackagingAliasID` AS `mfgPnIDWithPackagingAliasID`,  \n" +
                "        `pkg`.`restrictUseInBOMStep` AS `restrictUseInBOMStep`,  \n" +
                "        `pkg`.`isBOMPart` AS `isBOMPart`,  \n" +
                "        `c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`packaginggroupID` AS `packagingGroupId`,  \n" +
                "        `c`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        IFNULL(`c`.`RoHSStatusID`, `pkg`.`RoHSStatusID`) AS `RoHSStatusID`,  \n" +
                "        IFNULL(`c`.`isCustom`, `pkg`.`isCustom`) AS `isCustom`,  \n" +
                "        FUN_GETROHSICONBYID(IFNULL(`c`.`RoHSStatusID`, `pkg`.`RoHSStatusID`)) AS `rohsIcon`,  \n" +
                "        FUN_GETROHSNAMEBYID(IFNULL(`c`.`RoHSStatusID`, `pkg`.`RoHSStatusID`)) AS `rohsName`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`c`.`packaginggroupID` IS NULL) THEN 0  \n" +
                "            ELSE 1  \n" +
                "        END) AS `isPackagingAlias`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`rl`.`custPNID` IS NOT NULL) THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END) AS `isCPN`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`c`.`restrictUSEwithpermission` = 1) THEN 0  \n" +
                "            ELSE IFNULL(`pkg`.`restrictUseWithPermissionStep`, 1)  \n" +
                "        END) AS `restrictUseWithPermissionStep`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`c`.`restrictUsePermanently` = 1) THEN 0  \n" +
                "            ELSE IFNULL(`pkg`.`restrictUsePermanentlyStep`, 1)  \n" +
                "        END) AS `restrictUsePermanentlyStep`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `partLevelRestrictUSEwithpermission`,  \n" +
                "        `c`.`restrictUsePermanently` AS `partLevelRestrictUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `partLevelRestrictPackagingUseWithpermission`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `partLevelRestrictPackagingUsePermanently`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `rl`.`restrictCPNUseInBOMStep` AS `rfqLevelRestrictCPNUseInBOMStep`,  \n" +
                "        `rl`.`restrictCPNUseWithPermissionStep` AS `rfqLevelRestrictCPNUseWithPermissionStep`,  \n" +
                "        `rl`.`restrictCPNUsePermanentlyStep` AS `rfqLevelRestrictCPNUsePermanentlyStep`,  \n" +
                "        `pkg`.`restrictUseWithPermissionStep` AS `lineLevelRestrictUseWithPermissionStep`,  \n" +
                "        `pkg`.`restrictUsePermanentlyStep` AS `lineLevelRestrictUsePermanentlyStep`,  \n" +
                "        `pkg`.`restrictUseInBOMStep` AS `lineLevelRestrictUseInBOMStep`,  \n" +
                "        `pkg`.`restrictUseInBOMWithPermissionStep` AS `lineLevelRestrictUseInBOMWithPermissionStep`,  \n" +
                "        `pkg`.`restrictUseInBOMExcludingAliasStep` AS `lineLevelrestrictUseInBOMExcludingAliasStep`,  \n" +
                "        `pkg`.`restrictUseInBOMExcludingAliasWithPermissionStep` AS `lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                "        `pkg`.`customerApproval` AS `lineLevelCustomerApproval`,  \n" +
                "        `rl`.`isDeleted` AS `isDeleted`,  \n" +
                "        `rl`.`deletedAt` AS `deletedAt`,  \n" +
                "        `rl`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
                "        `rl`.`programingStatus` AS `programingStatus`,  \n" +
                "        `rl`.`dnpDesigCount` AS `dnpDesigCount`,  \n" +
                "        `c`.`partStatus` AS `partStatus`  \n" +
                "    FROM  \n" +
                "        ((`rfq_lineitems` `rl`  \n" +
                "        LEFT JOIN (SELECT   \n" +
                "            FUN_GETCOMPONENTNAMEBYID(IFNULL(`cp`.`componentID`, `rla`.`mfgPNID`)) AS `mfgPN`,  \n" +
                "                `rla`.`mfgPNID` AS `bommfgpnid`,  \n" +
                "                IFNULL(`cp`.`componentID`, `rla`.`mfgPNID`) AS `mfgPnIDWithPackagingAliasID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`rla`.`mfgPNID` <> `cp`.`componentID`) THEN 0  \n" +
                "                    ELSE 1  \n" +
                "                END) AS `isBOMPart`,  \n" +
                "                `rla`.`rfqLineItemsID` AS `rfqLineItemsID`,  \n" +
                "                `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `c`.`isCustom` AS `isCustom`,  \n" +
                "                `rla`.`restrictUseWithPermissionStep` AS `restrictUseWithPermissionStep`,  \n" +
                "                `rla`.`restrictUsePermanentlyStep` AS `restrictUsePermanentlyStep`,  \n" +
                "                `rla`.`restrictUseInBOMStep` AS `restrictUseInBOMStep`,  \n" +
                "                `rla`.`restrictUseInBOMWithPermissionStep` AS `restrictUseInBOMWithPermissionStep`,  \n" +
                "                `rla`.`restrictUseInBOMExcludingAliasStep` AS `restrictUseInBOMExcludingAliasStep`,  \n" +
                "                `rla`.`restrictUseInBOMExcludingAliasWithPermissionStep` AS `restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                "                `rla`.`customerApproval` AS `customerApproval`  \n" +
                "        FROM  \n" +
                "            ((`rfq_lineitems_alternatepart` `rla`  \n" +
                "        JOIN `component` `c` ON ((`rla`.`mfgPNID` = `c`.`id`)))  \n" +
                "        LEFT JOIN `component_packagingalias` `cp` ON ((`cp`.`aliasgroupID` = `c`.`packaginggroupID`)))  \n" +
                "        WHERE  \n" +
                "            ((`rla`.`isDeleted` = 0)  \n" +
                "                AND (IFNULL(`cp`.`isDeleted`, 0) = 0))) `pkg` ON ((`rl`.`id` = `pkg`.`rfqLineItemsID`)))  \n" +
                "        LEFT JOIN `component` `c` ON ((`pkg`.`mfgPnIDWithPackagingAliasID` = `c`.`id`)));  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4862,'2.00','V1','vu_bom_details_with_alias  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4862:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckUsedPartInTransaction`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckUsedPartInTransaction`(  \n" +
                "	IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	-- Sales Order Data ('In Progress' Status)  \n" +
                "	select   \n" +
                "			sod.refSalesOrderID as refId  \n" +
                "            ,sdm.salesOrderNumber  as transNumber  \n" +
                "            ,'SO' tranctionType  \n" +
                "            ,'' cancellationConfirmPending  \n" +
                "    from salesorderdet as sod  \n" +
                "		join salesordermst sdm on sdm.id = sod.refSalesOrderID where  \n" +
                "        sod.partID = pPartId and (sod.isCancle = 0 and sod.salesOrderDetStatus = 1) and sdm.isDeleted = 0  \n" +
                "	UNION ALL  \n" +
                "    -- Material Receipt Data ('Not Paid' Status & Not Generated Invoice )  \n" +
                "	select 	psm.id as refId  \n" +
                "            ,psm.packingSlipNumber as transNumber  \n" +
                "            ,'PS' tranctionType	   \n" +
                "            ,'' cancellationConfirmPending  \n" +
                "	from packing_slip_material_receive as psm   \n" +
                "		join packing_slip_material_receive_det as psd on  psd.refPackingSlipMaterialRecID = psm.id  \n" +
                "		left join packing_slip_material_receive ird on ird.id = psm.refPackingSlipNumberForInvoice and ird.status != 'P'  \n" +
                "	where psd.partID = pPartId and psm.isDeleted = 0 AND psm.receiptType = 'P'  \n" +
                "    UNION ALL  \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )  \n" +
                "	select	 pm.id as refId  \n" +
                "			,pm.poNumber as transNumber  \n" +
                "            ,'PO' tranctionType	   \n" +
                "            ,'' cancellationConfirmPending  \n" +
                "    from purchase_order_mst as pm   \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID  \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id  \n" +
                "	where pm.poWorkingStatus = 'P' and pd.mfgPartID = pPartId  \n" +
                "    group by pm.id,pm.poNumber   \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )  \n" +
                "    UNION ALL  \n" +
                "	select	 pm.id as refId  \n" +
                "			,pm.poNumber as transNumber  \n" +
                "            ,'PO' tranctionType	   \n" +
                "            ,pm.poWorkingStatus cancellationConfirmPending  \n" +
                "    from purchase_order_mst as pm   \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID  \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id  \n" +
                "	where pm.poWorkingStatus = 'C' and pm.cancellationConfirmed = 0 and pd.mfgPartID = pPartId  \n" +
                "    group by pm.id,pm.poNumber,pm.poWorkingStatus;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4863,'2.00','V1',' User Story 34343: Part Master: Active/Inactive Part Status related changes - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4863:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_replaceSpecialCharacters`;  \n" +
                "CREATE FUNCTION `fun_replaceSpecialCharacters`(     \n" +
                "pSourceString varchar(150)     \n" +
                ") RETURNS varchar(150) CHARSET utf8mb4  \n" +
                "BEGIN     \n" +
                "declare vReplaceString varchar(10);     \n" +
                "declare vDestinationString varchar(150);     \n" +
                " set vDestinationString = pSourceString;     \n" +
                "  \n" +
                " select replace(vDestinationString, \"/\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \":\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"*\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"?\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"\\\"\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"<\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \">\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"|\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, '\\\\\', \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"#\", \"+\") into vDestinationString;     \n" +
                " select replace(vDestinationString, \"'\", \"+\") into vDestinationString;     \n" +
                "  \n" +
                " return vDestinationString;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAcquisitionDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAcquisitionDetails`(          \n" +
                "	IN buyToId INT,          \n" +
                "	IN puserID VARCHAR(50),    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	DECLARE v_finished INTEGER DEFAULT 0;          \n" +
                "	DECLARE v_buyTo INT;          \n" +
                "    DECLARE v_acquisition LONGTEXT;          \n" +
                "  \n" +
                "    DECLARE mfg_cursor CURSOR FOR           \n" +
                "	SELECT * FROM temp_Sproc_UpdateAcquisitionDetails;          \n" +
                "  \n" +
                "     -- declare NOT FOUND handler          \n" +
                "	DECLARE CONTINUE HANDLER           \n" +
                "        FOR NOT FOUND SET v_finished = 1;          \n" +
                "  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_Sproc_UpdateAcquisitionDetails;         \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_UpdateAcquisitionDetails AS          \n" +
                "	WITH RECURSIVE cte AS          \n" +
                "		(SELECT buyto          \n" +
                "		   FROM who_bought_who w          \n" +
                "		   WHERE w.buyto = buyToId  and w.isDeleted = 0        \n" +
                "		  UNION ALL          \n" +
                "		SELECT w.buyto          \n" +
                "		  FROM who_bought_who w          \n" +
                "		  JOIN cte parent ON parent.buyTo = w.buyBy          \n" +
                "          where w.isDeleted = 0  \n" +
                "		)          \n" +
                "	SELECT * FROM cte;          \n" +
                "  \n" +
                "    OPEN mfg_cursor;          \n" +
                "    get_mfg: LOOP          \n" +
                "  \n" +
                "    FETCH mfg_cursor INTO v_buyTo;          \n" +
                "     IF v_finished = 1 THEN          \n" +
                "		LEAVE get_mfg;          \n" +
                "	 END IF;          \n" +
                "  \n" +
                "     SET v_acquisition = NULL;          \n" +
                "     SELECT fun_getAcquisitionDetails(v_buyTo) INTO v_acquisition;          \n" +
                "     UPDATE mfgcodemst          \n" +
                "		SET acquisitionDetail = v_acquisition,          \n" +
                "			updatedBy = puserID,    \n" +
                "            updateByRoleId = pRoleID    \n" +
                "	  WHERE id = v_buyTo;          \n" +
                "  \n" +
                "    END LOOP get_mfg;           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAcquisitionDetails`;  \n" +
                "CREATE FUNCTION `fun_getAcquisitionDetails`(buyToId INT) RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE result LONGTEXT;      \n" +
                "	WITH RECURSIVE fun_cte AS        \n" +
                "		(SELECT bt.mfgName buyToName, bb.mfgName buyByName, w.buyDate, w.buyBy, w.buyTo        \n" +
                "		   FROM who_bought_who w        \n" +
                "		   JOIN mfgcodemst bb ON bb.id = w.buyby        \n" +
                "		   JOIN mfgcodemst bt ON bt.id = w.buyto        \n" +
                "		  WHERE w.buyto = buyToId  and w.isDeleted = 0    \n" +
                "		  UNION ALL        \n" +
                "		SELECT bt.mfgName buyToName, bb.mfgName buyByName, w.buyDate, w.buyBy, w.buyTo        \n" +
                "		  FROM who_bought_who w        \n" +
                "		  JOIN mfgcodemst bb ON bb.id = w.buyby        \n" +
                "		  JOIN mfgcodemst bt ON bt.id = w.buyto        \n" +
                "		  JOIN fun_cte parent ON parent.buyBy = w.buyTo    \n" +
                "          where w.isDeleted = 0    \n" +
                "	)      \n" +
                "	SELECT GROUP_CONCAT(      \n" +
                "			CONCAT(buyToName , ' was acquired by ', buyByName, ' on ', DATE_FORMAT(buyDate,'%M %d, %Y')) ORDER BY buyDate SEPARATOR'  \n" +
                "'      \n" +
                "			) INTO result      \n" +
                "	  FROM fun_cte      \n" +
                "	 ORDER BY buyDate;      \n" +
                "  \n" +
                "     RETURN result;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Uti_RemoveAcquisitionWrongEntry`;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_RemoveAcquisitionWrongEntry`(  \n" +
                " in pBuyTo int,  \n" +
                " in pBuyBy int  \n" +
                ")  \n" +
                "BEGIN        \n" +
                "declare vRoleID int;  \n" +
                "declare vUserID int;  \n" +
                "	select id into vRoleID from roles where name = 'Super Admin';  \n" +
                "	select id into vUserID from users where username = 'ADMIN';  \n" +
                "	# Remove wrong Entry from Table   \n" +
                "		update who_bought_who  \n" +
                "		set isdeleted = 1,  \n" +
                "			deletedBy = vUserID,  \n" +
                "			deletedAt = utc_timestamp(),  \n" +
                "			deleteByRoleId = vRoleID  \n" +
                "		where buyto = pBuyTo and buyBy = pBuyBy;  \n" +
                "	# Remove old Acquisition detail from Manufacturer  \n" +
                "		update mfgcodemst set acquisitionDetail = null where id = pBuyTo;  \n" +
                "  \n" +
                "	# update new Acquisition detail from Manufacturer  \n" +
                "		CALL Sproc_UpdateAcquisitionDetails (pBuyTo,vUserID,vRoleID);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4864,'2.00','V1','Bug 34853: Mergers & Acquisitions: MFR Name is missing and need to give the hyperlink to open the respected MFR - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4864:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "DROP VIEW IF EXISTS vu_rfq_lineitem_count;  \n" +
                "CREATE VIEW `vu_rfq_lineitem_count` AS  \n" +
                "    SELECT   \n" +
                "        `rfq_lineitems`.`partID` AS `partID`,  \n" +
                "        COUNT(1) AS `lineCount`  \n" +
                "    FROM  \n" +
                "        `rfq_lineitems`  \n" +
                "    WHERE  \n" +
                "        (`rfq_lineitems`.`isDeleted` = 0)  \n" +
                "    GROUP BY `rfq_lineitems`.`partID`;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(                                                  \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pIsMFG TINYINT,    \n" +
                "    IN pMfgCodeIDs LONGTEXT,    \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,    \n" +
                "    IN pPackagingIDs LONGTEXT,    \n" +
                "    IN pPackageIDs LONGTEXT,    \n" +
                "    IN pPartStatusIDs LONGTEXT,    \n" +
                "    IN pMountingTypeIDs LONGTEXT,    \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,    \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,    \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,    \n" +
                "    IN pAttributesSearchHeader LONGTEXT,    \n" +
                "    IN pAttributesSearch LONGTEXT,    \n" +
                "    IN pPackagingAlias TEXT,    \n" +
                "    IN pAlternatePart TEXT,    \n" +
                "    IN pRoHSAlternatePart TEXT,    \n" +
                "    IN pPartUsedInAssembly TEXT,    \n" +
                "    IN pMultiplePartNumbers LONGTEXT,    \n" +
                "    IN pStockQuantity TEXT,    \n" +
                "    IN pPartTypeIDs LONGTEXT,    \n" +
                "    IN pCertificateStandardsIds LONGTEXT,    \n" +
                "    IN pStandardsClassIds LONGTEXT,    \n" +
                "    IN pAssemblyIds LONGTEXT,    \n" +
                "    IN pAssemblyTypeIds LONGTEXT,    \n" +
                "    IN pRohsIds LONGTEXT,    \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,    \n" +
                "    IN pOperationalAttributeIds LONGTEXT,    \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,    \n" +
                "    IN pComponentOrdering TEXT,    \n" +
                "    IN pComponentUsageCriteria TEXT,    \n" +
                "    IN pIsRefreshMasterFilters TINYINT,    \n" +
                "    IN pFromDate DATE,    \n" +
                "    IN pToDate DATE,    \n" +
                "    IN pIsReversal TINYINT,    \n" +
                "    IN pIsBOMActivityStarted TINYINT,    \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,    \n" +
                "    IN pIsSearchFromHeader TINYINT,    \n" +
                "    IN pIsExportControl TINYINT,    \n" +
                "    IN pObsoleteDate DATE,    \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,    \n" +
                "    IN pFromCreatedOnDate DATE,    \n" +
                "    IN pToCreatedOnDate DATE,    \n" +
                "    IN pIsIdenticalMfrPN TINYINT,    \n" +
                "    IN pIsProductionPNEmpty TINYINT,    \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,    \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,    \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),    \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,    \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,    \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,    \n" +
                "    IN pIsRestrictUsePermanently TINYINT,    \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT    \n" +
                "    )  \n" +
                "BEGIN                                                  \n" +
                "	DECLARE pOffset INT;                                                   \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                              \n" +
                "    DECLARE attributeSearchString LONGTEXT;                                                              \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;                                                              \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                              \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                                                              \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);                                                              \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);                                                              \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                 \n" +
                "    DECLARE vTimeZone VARCHAR(50);          \n" +
                "    DECLARE vCurrentSession datetime;    \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;         \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                        \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;      \n" +
                "  \n" +
                "  SET @SQLStatement1=\"                                                                      \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode    \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink    \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock    \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit    \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating    \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp    \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently    \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt    \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean    \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,                                                   \n" +
                "		(case when isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,                                                  \n" +
                "        gc.displayOrder parStatusDisplayOrder,                                                  \n" +
                "		mf.mfgType \";                                                      \n" +
                "	IF pIsMFG = TRUE THEN                                                  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                      \n" +
                "			null AliasMFGPN,                                                      \n" +
                "			null AliasMFGCode,                                                  \n" +
                "			null AliasMFGCodeID,                                                  \n" +
                "			null AliascompID,                                                  \n" +
                "			null AliasMFGName,                                                  \n" +
                "            null AliasMFGDisplayOrder\");                                                   \n" +
                "    ELSE                                                  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                      \n" +
                "		(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,                                                      \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,                                                  \n" +
                "        mfc.id AliasMFGCodeID,                                                  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,                                                  \n" +
                "        mfc.mfgName as AliasMFGName,                                                  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");                                                   \n" +
                "	END IF;                                                      \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                      \n" +
                "		ro.name AS `rohsComplientConvertedValue`,                                                    \n" +
                "        ro.displayOrder rohsDisplayOrder,                                                  \n" +
                "		ro.rohsIcon AS `rohsIcon`,                                                      \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'                                                      \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'                                                      \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'                                                      \n" +
                "					ELSE '' END) AS `isGoodPartValue`,                                                      \n" +
                "		case when co.isCustom = 1 then                                                  \n" +
                "				'Yes'                                                  \n" +
                "			else 'No' end as isCustomValue,                                                       \n" +
                "		case when co.isCPN = 1 then                                                  \n" +
                "				'Yes'                                                  \n" +
                "			else 'No' end as isCPNValue,                                                  \n" +
                "		pt.partTypeName functionalCategoryName,                                                      \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,                                                  \n" +
                "		mt.name mountingTypeName,                                                      \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,                                                  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,                                                      \n" +
                "		u.unitName,                                                      \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,                                                      \n" +
                "		pck.name packagingName,                                                      \n" +
                "        pck.displayOrder packagingDisplayOrder,                                                  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'                                                      \n" +
                "					ELSE 'No' END) AS `reversalPart`, 	        \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,        \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,    \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,     \n" +
                "		rc.name as createdbyRoleValue,    \n" +
                "		ru.name as updatedbyRoleValue,            \n" +
                "        co.createdAt,    \n" +
                " 		co.updatedAt,    \n" +
                "        co.updatedAtApi,         \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'                                                      \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,                                                      \n" +
                "        pct.name packageCaseTypeValue,                                                      \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,                                                      \n" +
                "		case when co.category = 3 then                                                      \n" +
                "			fun_getSamplePicturesUploadCount(co.id)                                                      \n" +
                "		end uploadedSamplePicturesCount,                                                      \n" +
                "		case when co.category = 3 then                                                      \n" +
                "			vurfass.count                                                     \n" +
                "		end assemblyCount,                                                      \n" +
                "		case when co.category = 3 then                                                      \n" +
                "			 vurline.lineCount                                                \n" +
                "		end bomLineCount,                                                      \n" +
                "		case when co.category = 3 then                                                      \n" +
                "			vurfass.quoteProgress                                                      \n" +
                "		end quoteProgress,                                                \n" +
                "		CASE when co.category = 3 then                                                      \n" +
                "		 	vurfass.id    \n" +
                "		END rfqAssyID,                                                  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,                                                      \n" +
                "		case when co.isActivityStart=true then                                                      \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')                                                      \n" +
                "			else null end activityStartTime,                                                      \n" +
                "		rat.name assemblyTypeName,                            \n" +
                "		CASE when co.frequency = 1 then                                                      \n" +
                "		 	'Every' when    co.frequency = 2 then                               \n" +
                "		 	'First' when  co.frequency = 3 then                             \n" +
                "		 	'Last' else ''                                                     \n" +
                "		END frequencyName,                                  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,                          \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,              \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,            \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,            \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,      \n" +
                "        vucomstd.certificatelist\");                                                      \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN                                                      \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");                                                      \n" +
                "	ELSE                                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");                                                      \n" +
                "	END IF;                                                      \n" +
                "    IF pComponentOrdering = 'USAGE' THEN                                                      \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");                                \n" +
                "	ELSE                                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");                                \n" +
                "	END IF;                                                      \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN                                                      \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)                                                      \n" +
                "													  from eco_request ec                                                      \n" +
                "													 where ec.isdeleted = 0                                                      \n" +
                "													   and ec.finalstatus = 'P'                                                      \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");                                \n" +
                "	ELSE                                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");                                \n" +
                "	END IF;                                                 \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN                                                      \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");                                \n" +
                "	END IF;                                \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");                                \n" +
                "	END IF;                                \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"                                                      \n" +
                "	FROM component co           \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType                                                      \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id                                                          \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus                                                          \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id                                                          \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                                                          \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                                                          \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID                                  \n" +
                " 		JOIN uoms u ON u.id = co.uom                                                      \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID                                                      \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID                                                      \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy                                                      \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType                                                      \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID             \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId            \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId                \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id    \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy    \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy                                                            \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId      \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId          \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id    \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");                                                   \n" +
                "    IF pIsMFG = FALSE THEN                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId \");                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                \n" +
                "    WHERE co.isdeleted = 0 \");                                                \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN                                                \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');                                                \n" +
                "    ELSE                                                \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');                                                \n" +
                "    END IF;                                                \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')                    \n" +
                "    THEN                    \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')                    \n" +
                "        THEN                      \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');                    \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')                    \n" +
                "        THEN                    \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');                    \n" +
                "		ELSE                            \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');                    \n" +
                "        END IF;                    \n" +
                "    END IF;                        \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                \n" +
                "		IF pComponentOrdering = 'MFG' THEN                                                \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);                                                \n" +
                "            END IF;                                                \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN                                                \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);                                                \n" +
                "			END IF;                                                \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN                                                \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);                                                \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN                                                \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);                                                \n" +
                "		END IF;                                                \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                \n" +
                "	ELSE                                                \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                      \n" +
                "		SET pWhereClause = '1=1' ;                                                                      \n" +
                "	END IF;                                                                      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "	ELSE                                                  \n" +
                "		SET rowNumWhere = '';                                                  \n" +
                "	END IF;                                                  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN                                                  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');                                                  \n" +
                "    END IF;                                                  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN                                                  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');                                                  \n" +
                "    END IF;                                                  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND packagingID in (', pPackagingIDs, ' )');                                                                      \n" +
                "    END IF;                      \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partPackageID in (', pPackageIDs, ' )');                                                                      \n" +
                "    END IF;                        \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partStatus in (', pPartStatusIDs, ' )');                                                                      \n" +
                "    END IF;                                                                      \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');                                                                      \n" +
                "    END IF;                                                                      \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeText in (', pExternalMountingTypeValues, ' )');                                                                      \n" +
                "    END IF;                                                                      \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');                                                                      \n" +
                "    END IF;                                                                      \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');                                                                      \n" +
                "    END IF;                                                                      \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN                                                                      \n" +
                "		IF pIsMFG = TRUE THEN                                                                      \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                                    \n" +
                "																OR exists (select 1 from component_otherpn cp                                                                    \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                    \n" +
                "																)');                                                                      \n" +
                "		ELSE                                                                      \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                                      \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID                                                    \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                    \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))                                                                    \n" +
                "                                                                OR exists (select 1 from component_otherpn cp                                                                    \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                    \n" +
                "                                                                )');                                                                      \n" +
                "        END IF;                                                                      \n" +
                "    END IF;                                                                      \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partType in (', pPartTypeIDs, ' )');                                                                      \n" +
                "    END IF;                                                                      \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND                                                                      \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                      \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');                                                                      \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                      \n" +
                "    END IF;                                                                      \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                          \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                          \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');                                                          \n" +
                "    END IF;                                                          \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');                                                          \n" +
                "    END IF;                                                          \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');                                                                      \n" +
                "    END IF;                                        \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');                                                                      \n" +
                "    END IF;                                        \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN                                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');                                                            \n" +
                "    END IF;                                        \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN                                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');                                                            \n" +
                "    END IF;                                        \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');                                        \n" +
                "    END IF;                                        \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");                                                              \n" +
                "    END IF;                                  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN                                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');                                                            \n" +
                "    END IF;          \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                        \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');                                  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                  \n" +
                "    END IF;                                  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');                                \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd                                                                     \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false                                                                     \n" +
                "														 and cd.deletedat is null                                                                     \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');                                                                    \n" +
                "    END IF;                              \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd                              \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false                              \n" +
                "														 and cd.deletedat is null                              \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');                              \n" +
                "    END IF;                              \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN                                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca                                                                    \n" +
                "														  where ca.isdeleted = false                                                                    \n" +
                "															and ca.deletedat is null                                                                    \n" +
                "															and ca.refComponentID = co.id                                                                    \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');                                                                    \n" +
                "    END IF;                                                                      \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE || pIsRestrictPackagingUseWithpermission = true || pIsRestrictUsePermanently = true || pIsRestrictPackagingUsePermanently = true)      \n" +
                "    THEN            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');      \n" +
                "        set @restricStatement = '';      \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN                                                            \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN                                                            \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');      \n" +
                "		END IF;      \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN                                                            \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');      \n" +
                "		END IF;      \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN                                                            \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');                                                        \n" +
                "		END IF;      \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');      \n" +
                "    END IF;      \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                \n" +
                "																		AND isdeleted = 0                                                               \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                                \n" +
                "																		AND isdeleted = 0                                                              \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfPosition like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfRows like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR length like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR width like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR height like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                                                                    \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');                                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          IF pIsMFG = FALSE THEN                                                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc                                                                     \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID                                                     \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                     \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )                                                                    \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))                                                                    \n" +
                "																		');                                                                      \n" +
                "          END IF;                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');                   \n" +
                "    END IF;                                                              \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                                                              \n" +
                "		SET attributeSearchString = pAttributesSearch;                                                              \n" +
                "       do_this:                                                              \n" +
                "	  LOOP                                                              \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);                        \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);                        \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);                        \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);                        \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                \n" +
                "																		AND isdeleted = 0                        \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                        \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                               \n" +
                "																		AND  isdeleted = 0                        \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                        \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');                        \n" +
                "          /*IF pIsMFG = FALSE THEN                        \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');                        \n" +
                "          END IF;  */                        \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN                        \n" +
                "		  LEAVE do_this;                        \n" +
                "		END IF;                        \n" +
                "	  END LOOP do_this;                        \n" +
                "    END IF;                        \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN                        \n" +
                "		IF (pPackagingAlias = '1') THEN                        \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');                        \n" +
                "		ELSE                        \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');                        \n" +
                "		END IF;                        \n" +
                "	END IF;                        \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN                        \n" +
                "			IF (pAlternatePart = '1') THEN                        \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');                        \n" +
                "			ELSE                                                                      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');                        \n" +
                "			END IF;                        \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');                        \n" +
                "		END IF;                        \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN                        \n" +
                "			IF (pRoHSAlternatePart = '1') THEN                        \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');                        \n" +
                "			ELSE                        \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');                        \n" +
                "			END IF;                        \n" +
                "		END IF;                        \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN                        \n" +
                "			SET vPartUsedInAssemblyExists = \" \";                        \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";                        \n" +
                "			IF (pPartUsedInAssembly = '1') THEN                        \n" +
                "				SET vPartUsedInAssemblyExists = \" \";                        \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";                        \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN                        \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";                        \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";                        \n" +
                "            END IF;                        \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2                        \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                        \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                        \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');                        \n" +
                "  \n" +
                "		END IF;                                \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);                                \n" +
                "	END IF;                                \n" +
                "   IF pIsExportControl = 1 THEN                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');                                \n" +
                "   END IF;                                \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');                    \n" +
                "	END IF;    \n" +
                "    DROP TABLE IF EXISTS tempComponentListData;    \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData    \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,        \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,                                                \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,                                                \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue        \n" +
                "									from ( \", @SQLStatement1,\" ) c                                \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);                                \n" +
                "    /*main query create temp table*/     \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;       \n" +
                "  \n" +
                "  /* to get total count of rows */                                \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);                        \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");         \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                                 \n" +
                "	DEALLOCATE PREPARE query2;  */       \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");                                \n" +
                "    /*main query create temp table*/     \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;             \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN                                \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,                                \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                \n" +
                "											partType,categoryName,                                \n" +
                "											functionalCategoryText,                                \n" +
                "											mountingTypeText,                                \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                \n" +
                "											  rohsText,                                \n" +
                "                                            AliasMFGCodeID,                                \n" +
                "                                            AliasMFGCode,                                \n" +
                "                                            AliasMFGName,                                \n" +
                "                                            AliasMFGDisplayOrder,                                                                \n" +
                "                                            packageCaseTypeValue,                    \n" +
                "                                            partPackageID                    \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"                                \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,                                \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                \n" +
                "											partType,categoryName,                                \n" +
                "											functionalCategoryText,                                \n" +
                "											mountingTypeText,                                \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                \n" +
                "											  rohsText,                                                  \n" +
                "                                            AliasMFGCodeID,                                                  \n" +
                "                                            AliasMFGCode,                                                  \n" +
                "                                            AliasMFGName,                                                  \n" +
                "                                            AliasMFGDisplayOrder,                    \n" +
                "                                            packageCaseTypeValue,                    \n" +
                "                                            partPackageID\");                                     \n" +
                "		 PREPARE query3 FROM @SQLStatement2;                                                      \n" +
                "		EXECUTE query3;                                                      \n" +
                "		DEALLOCATE PREPARE query3;                                            \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )                                                      \n" +
                "									select * from                                                      \n" +
                "										(select case when stdc.classID is not null then                                                      \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)                                                      \n" +
                "													else cs.certificateStandardID end certificateStandardID,                                                      \n" +
                "												case when stdc.classID is not null then                                                      \n" +
                "													concat(cs.fullName,' ',stdc.classname)                                                      \n" +
                "													else cs.fullName end fullName,                                                      \n" +
                "												cs.displayOrder                                                      \n" +
                "										  from certificate_standards cs                                                      \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID                                                      \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID                                                      \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)                                                      \n" +
                "										) a group by certificateStandardID, fullName, displayOrder                                                      \n" +
                "										order by displayOrder,fullName\");                                                      \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                      \n" +
                "		EXECUTE query3;                                                      \n" +
                "		DEALLOCATE PREPARE query3;  */                                                    \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName                                                      \n" +
                "					  from component_acceptable_shipping_countries casc                                                      \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid                                                      \n" +
                "					 where casc.isdeleted = false                                                      \n" +
                "					   and casc.deletedat is null                                                      \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                      \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )                                                      \n" +
                "                                    order by cm.countryName\");                                                      \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                      \n" +
                "		EXECUTE query3;                                                      \n" +
                "		DEALLOCATE PREPARE query3;  */                                                    \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName                                                      \n" +
                "					  from component_dynamic_attribute_mapping_part cdam                                                      \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID                                                      \n" +
                "					 where cdam.isdeleted = false                                                      \n" +
                "					   and cdam.deletedat is null                                                      \n" +
                "					   and cda.isdeleted = false                                                      \n" +
                "					   and cda.deletedat is null                                                      \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                      \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )                                                      \n" +
                "                                     order by cda.attributeName\");                                                      \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                      \n" +
                "		EXECUTE query3;                                                      \n" +
                "		DEALLOCATE PREPARE query3;  */                                                    \n" +
                "    END IF;                                                      \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN                                                      \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/                                                      \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,                                                      \n" +
                "											null groupNameText,                                                      \n" +
                "											functionalCategoryID, mountingTypeID,                                                      \n" +
                "											count(1) recCount                                                      \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,                                                      \n" +
                "										' group by functionalCategoryName,mountingTypeName,                                  \n" +
                "													functionalCategoryID, mountingTypeID                                                      \n" +
                "											order by groupName, groupNameText, recCount desc');                                                      \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;                                                      \n" +
                "			EXECUTE query3;                                                      \n" +
                "			DEALLOCATE PREPARE query3;                                                      \n" +
                "        END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4865,'2.00','V1',' BUG - 34803 - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4865:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "            fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			(CASE WHEN (psip.isPaymentVoided = 1) THEN \"Voided\"  \n" +
                "				WHEN (IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN \"Received & Applied\"  \n" +
                "				ELSE \"Received\" END) AS isPaymentVoidedConvertedValueOfCM ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	/* ELSE  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NULL ');  */  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "				ELSE 'Received' END)  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromInvoiceDate DATE,  \n" +
                "	IN pToInvoiceDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(500);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "	ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cpscm ON psip.refCustCreditMemoID = cpscm.id AND cpscm.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cpscm.creditMemoDate , cpscm.creditMemoNumber ,  \n" +
                "			cpscm.totalAmount AS creditMemoAmount ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id AS paymentMstID ,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		psip.refPaymentMode ,  \n" +
                "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,  \n" +
                "		cps.totalAmount AS invoiceOrgAmount ,  \n" +
                "		psipd.paymentAmount AS invoiceDepositAmount ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		psipd.appliedDate ,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
                "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "		\" ,v_TypeOfPaymentWhereClause, \"  \n" +
                "            AND psip.isPaymentVoided = 0  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY appliedDate DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(  \n" +
                "	IN pPaymentMstID INT ,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SELECT 	psip.id,  \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
                "			psip.refGencTransModeID ,  \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  psip.isMarkForRefund , psip.agreedRefundAmt ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "				(CASE WHEN psip.refPaymentMode = 'R' THEN  \n" +
                "					(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "							(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "						ELSE 'Received' END)  \n" +
                "				ELSE NULL END)  \n" +
                "			    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue ,  \n" +
                "			 (CASE WHEN psip.refPaymentID IS NULL THEN NULL  \n" +
                "				ELSE (SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = psip.refPaymentID AND isDeleted = 0)  \n" +
                "					END) AS refPaymentNumFromTransInitiate ,  \n" +
                "			psip.refPaymentID  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "		WHERE psip.id = pPaymentMstID  \n" +
                "		AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		;  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4866,'2.00','V1',' customer payment manage and list sps  - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4866:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "UPDATE page_detail  \n" +
                "SET iconClass = 'icons-customer-pmt'  \n" +
                "WHERE pageName = 'Manage Customer Payment Documents' ;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4867,'2.00','V1',' updated customer payment doc icon - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4867:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getDeallocatedUIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_getDeallocatedUIDList`(    \n" +
                "	IN pPageIndex INT,     \n" +
                "	IN pRecordPerPage INT,     \n" +
                "	IN pOrderBy VARCHAR(255),     \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "	IN pRefSalesOrderID INT,    \n" +
                "	IN pAssyID INT,     \n" +
                "    IN pPartIDs LONGTEXT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_Offset INT;     \n" +
                "	DECLARE v_RowNumWhere VARCHAR(255);     \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "    DECLARE v_mfgPnIds LONGTEXT;    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;     \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS        \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId      \n" +
                "	FROM 		component c        \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0        \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartIDs)        \n" +
                "				AND c.isDeleted = 0        \n" +
                "	GROUP BY 	mfrPNId;        \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN     \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;     \n" +
                "	ELSE     \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";     \n" +
                "	END IF;     \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN     \n" +
                "		SET pWhereClause = ' 1=1';     \n" +
                "	END IF;     \n" +
                "  \n" +
                "    SET v_mfgPnIds = (SELECT GROUP_CONCAT(m.mfrPNId) FROM temp_mainPartAndPackagingAliesPart m);    \n" +
                "  \n" +
                "    IF(v_mfgPnIds IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND partID IN (\" ,v_mfgPnIds , \")\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN     \n" +
                "		SET v_Offset = (pPageIndex -1) * pRecordPerPage;     \n" +
                "		SET v_RowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , v_Offset) ;                                                                            \n" +
                "	ELSE     \n" +
                "		SET v_RowNumWhere = '';     \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @temp_Sproc_Deallocated_UMID = CONCAT(\" SELECT	    \n" +
                "				cst.id,			cst.uid,				cst.refcompid,		cst.dateCode, 	   kl.lineID,     \n" +
                "				cst.rohsStatusID UMIDRohsStatusID, 		cst.binID,				cst.uom,     \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate, 	    \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus, 		ka.refBOMLineID,    \n" +
                "				c.PIDCode,		c.mfgPN, 		c.RoHSStatusID rohsID, 		ka.refSalesOrderDetID, 		ka.assyID,    \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 				c.isCustom,     \n" +
                "                fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,     \n" +
                "                c.restrictUsePermanently,			c.restrictUSEwithpermission,     \n" +
                "                c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,     \n" +
                "                cst.isUMIDRestrict, 	ka.partID,        \n" +
                "                ka.allocatedQty, 		ka.allocatedUnit, 		(IFNULL(ka.allocatedUnit, 0) * IFNULL(c.noOfPosition, 0)) allocatedPins,     \n" +
                "                cst.pkgUnit,			cst.pkgQty, 			(IFNULL(cst.pkgUnit, 0) * IFNULL(c.noOfPosition, 0)) currentPins,     \n" +
                "				fun_getBinNameByID(cst.binID) binName,   \n" +
                "                c.noOfPosition,    \n" +
                "                ka.remark,  \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,     \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,     \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,     \n" +
                "                fun_getUserNameByID(ka.updatedBy) updatedBy,                               \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ka.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt     \n" +
                "		FROM 		component_sid_stock cst                          \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  AND c.isDeleted = 0                                             \n" +
                "		INNER JOIN  kit_allocation ka ON cst.id = ka.refUIDId AND ka.status = 'D'    \n" +
                "		INNER JOIN 	kit_allocation_lineitems kl ON kl.refRfqLineitem = ka.refBOMLineID AND kl.refSalesOrderDetID = \", pRefSalesOrderID ,\"    \n" +
                "		WHERE 		ka.refSalesOrderDetID = \", pRefSalesOrderID ,\"    \n" +
                "					AND ka.assyID = IFNULL(\", pAssyID ,\",ka.assyID)     \n" +
                "					AND ka.status = 'D'     \n" +
                "					AND cst.isDeleted = 0     \n" +
                "		GROUP BY ka.id    \n" +
                "			\");                          \n" +
                "  \n" +
                "	/* to get total count of rows */                                   \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Deallocated_UMID, \" ) c where 1=1 and \", pWhereClause);                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;     \n" +
                "	DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Deallocated_UMID,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , v_RowNumWhere);                                  \n" +
                "	PREPARE query1 FROM @SQLStatement2;     \n" +
                "	EXECUTE query1;     \n" +
                "	DEALLOCATE PREPARE query1;     \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getDeallocatedUIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_getDeallocatedUIDList`(    \n" +
                "	IN pPageIndex INT,     \n" +
                "	IN pRecordPerPage INT,     \n" +
                "	IN pOrderBy VARCHAR(255),     \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "	IN pRefSalesOrderID INT,    \n" +
                "	IN pAssyID INT,     \n" +
                "    IN pPartIDs LONGTEXT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_Offset INT;     \n" +
                "	DECLARE v_RowNumWhere VARCHAR(255);     \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "    DECLARE v_mfgPnIds LONGTEXT;    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;     \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS        \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId      \n" +
                "	FROM 		component c        \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0        \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartIDs)        \n" +
                "				AND c.isDeleted = 0        \n" +
                "	GROUP BY 	mfrPNId;        \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN     \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;     \n" +
                "	ELSE     \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";     \n" +
                "	END IF;     \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN     \n" +
                "		SET pWhereClause = ' 1=1';     \n" +
                "	END IF;     \n" +
                "  \n" +
                "    SET v_mfgPnIds = (SELECT GROUP_CONCAT(m.mfrPNId) FROM temp_mainPartAndPackagingAliesPart m);    \n" +
                "  \n" +
                "    IF(v_mfgPnIds IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND partID IN (\" ,v_mfgPnIds , \")\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN     \n" +
                "		SET v_Offset = (pPageIndex -1) * pRecordPerPage;     \n" +
                "		SET v_RowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , v_Offset) ;                                                                            \n" +
                "	ELSE     \n" +
                "		SET v_RowNumWhere = '';     \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @temp_Sproc_Deallocated_UMID = CONCAT(\" SELECT	    \n" +
                "				cst.id,			cst.uid,				cst.refcompid,		cst.dateCode, 	   kl.lineID,     \n" +
                "				cst.rohsStatusID UMIDRohsStatusID, 		cst.binID,				cst.uom,     \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate, 	    \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus, 		ka.refBOMLineID,    \n" +
                "				c.PIDCode,		c.mfgPN, 		c.RoHSStatusID rohsID, 		ka.refSalesOrderDetID, 		ka.assyID,    \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 				c.isCustom,     \n" +
                "                fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,     \n" +
                "                c.restrictUsePermanently,			c.restrictUSEwithpermission,     \n" +
                "                c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,     \n" +
                "                cst.isUMIDRestrict, 	ka.partID,        \n" +
                "                ka.allocatedQty, 		ka.allocatedUnit, 		(IFNULL(ka.allocatedUnit, 0) * IFNULL(c.noOfPosition, 0)) allocatedPins,     \n" +
                "                cst.pkgUnit,			cst.pkgQty, 			(IFNULL(cst.pkgUnit, 0) * IFNULL(c.noOfPosition, 0)) currentPins,     \n" +
                "				fun_getBinNameByID(cst.binID) binName,   \n" +
                "                c.noOfPosition,    \n" +
                "                ka.remark,  \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,     \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,     \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,     \n" +
                "                fun_getUserNameByID(ka.updatedBy) updatedBy,                               \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ka.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt     \n" +
                "		FROM 		component_sid_stock cst                          \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  AND c.isDeleted = 0                                             \n" +
                "		INNER JOIN  kit_allocation ka ON cst.id = ka.refUIDId AND ka.status = 'D'    \n" +
                "		INNER JOIN 	kit_allocation_lineitems kl ON kl.refRfqLineitem = ka.refBOMLineID AND kl.refSalesOrderDetID = \", pRefSalesOrderID ,\"    \n" +
                "		WHERE 		ka.refSalesOrderDetID = \", pRefSalesOrderID ,\"    \n" +
                "					AND ka.assyID = IFNULL(\", pAssyID ,\",ka.assyID)     \n" +
                "					AND ka.status = 'D'     \n" +
                "					AND cst.isDeleted = 0     \n" +
                "		GROUP BY ka.id    \n" +
                "			\");                          \n" +
                "  \n" +
                "	/* to get total count of rows */                                   \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Deallocated_UMID, \" ) c where 1=1 and \", pWhereClause);                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;     \n" +
                "	DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Deallocated_UMID,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , v_RowNumWhere);                                  \n" +
                "	PREPARE query1 FROM @SQLStatement2;     \n" +
                "	EXECUTE query1;     \n" +
                "	DEALLOCATE PREPARE query1;     \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4868,'2.00','V1',' User Story #32599 & Bug #34831 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4868:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(    \n" +
                "	IN pPageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pRequestType VARCHAR(5),    \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,    \n" +
                "	IN pDueDate DATE ,    \n" +
                "	IN pAdditionalDays INT,    \n" +
                "	IN pTermsAndAboveDays INT  ,    \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */    \n" +
                "	DECLARE vDueDate DATE;    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);    \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);    \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */    \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */    \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;    \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */    \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN    \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;    \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;    \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);    \n" +
                "		ELSE    \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);    \n" +
                "		END IF;    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"    \n" +
                "	SELECT    \n" +
                "		temp_aged_details.customerID,    \n" +
                "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName,    \n" +
                "		temp_aged_details.termsDays AS custCurrTermDays,    \n" +
                "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,    \n" +
                "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,    \n" +
                "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,    \n" +
                "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,    \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,    \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,    \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,    \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,    \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,    \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,    \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,    \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,    \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,    \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,    \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,    \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,    \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,    \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (    \n" +
                "		SELECT    \n" +
                "				  `cid`.`customerID`                  AS `customerID`,    \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,    \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,    \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,    \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)      AS `dratftCreditMemoCount`,    \n" +
                "				  -- `cid`.`DocDate`                  AS `DocDate`,    \n" +
                "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,    \n" +
                "				  `cpt`.`termsDays`                   AS `termsDays`,    \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) AS `DueDaysDiff`,    \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,    \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,    \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,    \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,    \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,    \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,    \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,    \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),    \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,    \n" +
                "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,    \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,    \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,    \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,    \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,    \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,    \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,    \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount    \n" +
                "                  FROM    \n" +
                "(    \n" +
                "	SELECT    \n" +
                "					 `a`.`customerID`                     AS `customerID`,    \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,    \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,    \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,    \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,    \n" +
                "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,    \n" +
                "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,    \n" +
                "					0                                    AS `totalUnappliedAmount`,    \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + IFNULL(c.totalCreditMemoAppliedAmount,0)),0) AS `totalUnappliedCreditMemoAmount`,    \n" +
                "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,    \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,    \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`    \n" +
                "                       FROM `customer_packingslip` `a`    \n" +
                "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,    \n" +
                "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,    \n" +
                "										      0									  	AS `totalCreditMemoAppliedAmount`,    \n" +
                "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`    \n" +
                "										    FROM (`packingslip_invoice_payment` `a`    \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`    \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))    \n" +
                "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)    \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)    \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))    \n" +
                "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b    \n" +
                "										ON a.id = b.refCustPackingslipInvoiceID    \n" +
                "  \n" +
                "						LEFT JOIN 	(    \n" +
                "									SELECT    \n" +
                "											a.`refCustCreditMemoID` AS refCustCreditMemoID,    \n" +
                "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`    \n" +
                "									FROM `packingslip_invoice_payment` `a`    \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`    \n" +
                "											 ON (`b`.`refPayementid` = `a`.`id`)    \n" +
                "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)    \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)    \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA'))    \n" +
                "										    GROUP BY `a`.`refCustCreditMemoID`    \n" +
                "										    ) c  ON a.id = c.refCustCreditMemoID    \n" +
                "					WHERE ((`a`.`transType` IN('I','C'))    \n" +
                "                -- AND a.paymentStatus <> 'RE'    \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)    \n" +
                "					      AND (`a`.`isDeleted` = 0))    \n" +
                "	UNION    \n" +
                "      SELECT    \n" +
                "			`a`.`mfgcodeID`                       					AS `customerID`,    \n" +
                "			NULL									AS `refCustPackingslipInvoiceID`,    \n" +
                "			0                                     					AS `invoiceCount`,    \n" +
                "			0                                     					AS `unInvoiceCount`,    \n" +
                "			0                                     					AS `dratftCreditMemoCount`,    \n" +
                "			`a`.`paymentDate`                     					AS `DocDate`,    \n" +
                "			0  									AS `totalRecievedAmount`,    \n" +
                "			((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1)) 	AS `totalUnappliedAmount`,    \n" +
                "			0                                     					AS `totalUnappliedCreditMemoAmount`,    \n" +
                "			0									AS `totalCreditMemoAppliedAmount`,    \n" +
                "			0                                     					AS `totalInvoicedAmount`,    \n" +
                "			0                                     					AS `totalDraftAmount`    \n" +
                "			FROM (`packingslip_invoice_payment` `a`    \n" +
                "			LEFT JOIN `packingslip_invoice_payment_det` `b`    \n" +
                "			ON ((`b`.`refPayementid` = `a`.`id`)))    \n" +
                "			WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)    \n" +
                "			AND (`a`.`isPaymentVoided` = 0)    \n" +
                "			AND (`a`.`refPaymentMode` = 'R'))    \n" +
                "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount`    \n" +
                "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0    \n" +
                "                ) AS  cid    \n" +
                "                INNER JOIN `vu_customer_payment_terms` `cpt`    \n" +
                "			     ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)    \n" +
                "                     GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cpt`.`termsDays`, (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY)))    \n" +
                "                ) AS temp_aged_details    \n" +
                "		GROUP BY temp_aged_details.customerID, fun_getMfgCodeAndNameByID(temp_aged_details.customerID), temp_aged_details.termsDays    \n" +
                "		HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)   \n" +
                "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0    \n" +
                "	\");    \n" +
                "  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"    \n" +
                "			SELECT 	c.*    \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c    \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);    \n" +
                "	-- SELECT @SQLStatement2;    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4869,'2.00','V1','Script changes for Aged Recievable case - VS '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4869:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckUsedPartInTransaction`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckUsedPartInTransaction`(    \n" +
                "	IN pPartId INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	-- Sales Order Data ('In Progress' Status)    \n" +
                "	select     \n" +
                "			sod.refSalesOrderID as refId    \n" +
                "            ,sdm.salesOrderNumber  as transNumber    \n" +
                "            ,'SO' tranctionType    \n" +
                "            ,'' cancellationConfirmPending    \n" +
                "    from salesorderdet as sod    \n" +
                "		join salesordermst sdm on sdm.id = sod.refSalesOrderID where    \n" +
                "        sod.partID = pPartId and (sod.isCancle = 0 and sod.salesOrderDetStatus = 1) and sdm.isDeleted = 0    \n" +
                "	UNION ALL    \n" +
                "    -- Material Receipt Data ('Not Paid' Status & Not Generated Invoice )    \n" +
                "	select 	psm.id as refId    \n" +
                "            ,psm.packingSlipNumber as transNumber    \n" +
                "            ,'PS' tranctionType	     \n" +
                "            ,'' cancellationConfirmPending    \n" +
                "	from packing_slip_material_receive as psm     \n" +
                "		join packing_slip_material_receive_det as psd on  psd.refPackingSlipMaterialRecID = psm.id    \n" +
                "		left join packing_slip_material_receive ird on ird.id = psm.refPackingSlipNumberForInvoice and ird.status != 'P'    \n" +
                "	where psd.partID = pPartId and psm.isDeleted = 0 AND psm.receiptType = 'P'    \n" +
                "    UNION ALL    \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )    \n" +
                "	select	 pm.id as refId    \n" +
                "			,pm.poNumber as transNumber    \n" +
                "            ,'PO' tranctionType	     \n" +
                "            ,'' cancellationConfirmPending    \n" +
                "    from purchase_order_mst as pm     \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID    \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id    \n" +
                "	where pm.poWorkingStatus = 'P' and pd.mfgPartID = pPartId    \n" +
                "    group by pm.id,pm.poNumber     \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )    \n" +
                "    UNION ALL    \n" +
                "	select	 pm.id as refId    \n" +
                "			,pm.poNumber as transNumber    \n" +
                "            ,'PO' tranctionType	     \n" +
                "            ,pm.poWorkingStatus cancellationConfirmPending    \n" +
                "    from purchase_order_mst as pm     \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID    \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id    \n" +
                "	where pm.poWorkingStatus = 'CA' and pm.cancellationConfirmed = 0 and pd.mfgPartID = pPartId    \n" +
                "    group by pm.id,pm.poNumber,pm.poWorkingStatus;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4870,'2.00','V1',' User Story 34343: [Main Branch] ]Part Master: Active/Inactive Part Status related changes - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4870:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveHelpBlogHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveHelpBlogHistory`(                                                      	                                                          \n" +
                "	IN ppageIndex INT,                                                                \n" +
                "	IN precordPerPage INT,                                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN phelpBlogDetId INT,      \n" +
                "    IN phelpBlogId INT      \n" +
                ")  \n" +
                "BEGIN                                                          \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);           \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                             \n" +
                "	DECLARE vTimeZone VARCHAR(50);            \n" +
                "	DECLARE vCustPSDetIdWhrClause VARCHAR(100);        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;          \n" +
                "  \n" +
                "	IF (phelpBlogDetId IS NULL) THEN    \n" +
                "	SET @temp_Sproc_HelpBlogChangeHistory = CONCAT(\"              \n" +
                "		SELECT 	da.ID,      \n" +
                "				da.Tablename,  \n" +
                "				hbdt.title sectionTitle,      \n" +
                "				da.RefTransID,      \n" +
                "				da.Colname,      \n" +
                "				da.Oldval,      \n" +
                "				da.Newval,        \n" +
                "				fun_getUserNameByID(da.Updatedby) updatedby,              \n" +
                "				fun_getUserNameByID(da.createdBy) createdby,              \n" +
                "				fun_getRoleByID(da.createByRoleId) createdbyRole,              \n" +
                "				fun_getRoleByID(da.updateByRoleId) updatedbyRole,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt          \n" +
                "		FROM dataentrychange_auditlog da  \n" +
                "				INNER JOIN help_blog_det hbdt  \n" +
                "				ON hbdt.id = da.RefTransID  \n" +
                "				WHERE RefTransID in (select id from help_blog_det where helpBlogId =\",phelpBlogId,\" )    \n" +
                "				AND (da.Tablename = 'HELPBLOG' OR da.Tablename = 'HELPBLOGDET')     \n" +
                "  \n" +
                "         \");    \n" +
                "         ELSE    \n" +
                "            SET @temp_Sproc_HelpBlogChangeHistory = CONCAT(\"              \n" +
                "		SELECT 	da.ID,      \n" +
                "				da.Tablename,      \n" +
                "				(select title from help_blog_det where id =\",phelpBlogDetId,\" ) sectionTitle,    \n" +
                "				da.RefTransID,      \n" +
                "				da.Colname,      \n" +
                "				da.Oldval,      \n" +
                "				da.Newval,        \n" +
                "				fun_getUserNameByID(da.Updatedby) updatedby,              \n" +
                "				fun_getUserNameByID(da.createdBy) createdby,              \n" +
                "				fun_getRoleByID(da.createByRoleId) createdbyRole,              \n" +
                "				fun_getRoleByID(da.updateByRoleId) updatedbyRole,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt          \n" +
                "		FROM dataentrychange_auditlog da         \n" +
                "				WHERE RefTransID = \",phelpBlogDetId,\" AND (da.Tablename = 'HELPBLOG' OR da.Tablename = 'HELPBLOGDET')    \n" +
                "  \n" +
                "         \");       \n" +
                "         END IF;    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */                         \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HelpBlogChangeHistory,\" ) c where 1=1 and \", pWhereClause);                        \n" +
                "		PREPARE query2 FROM @SQLStatement2;               \n" +
                "		EXECUTE query2;                        \n" +
                "		DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HelpBlogChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "		PREPARE query1 FROM @SQLStatement2;                        \n" +
                "		EXECUTE query1;     	                   \n" +
                "		DEALLOCATE PREPARE query1;           \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 25-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4871,'2.00','V1','Bug 34836: Help Blog related issues and improvement points during internal demo - Purav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4871:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_KitRelease`;  \n" +
                "CREATE PROCEDURE `Sproc_KitRelease`(                                        \n" +
                "	IN pRefSalesOrderDetID INT,                               \n" +
                "	IN pAssyID INT,                                               \n" +
                "	IN pSubAssyID INT,                                   \n" +
                "	IN pPlanDetID INT,                                         \n" +
                "	IN pWOID INT,      \n" +
                "	IN pToDeptId INT,                        \n" +
                "	IN pDescription VARCHAR(1000),                       \n" +
                "	IN pCreatedBy VARCHAR(255),                                  \n" +
                "	IN pCreateByRoleId INT,                      \n" +
                "	IN pIsReRelease TINYINT,  \n" +
                "    IN pIsMainKitRelease TINYINT,  \n" +
                "    IN pIsCurrentKitRelease TINYINT,  \n" +
                "    IN pPlanKitNumber TINYINT  \n" +
                ")  \n" +
                "BEGIN                                 \n" +
                "  \n" +
                "    DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);                     \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);                                  \n" +
                "	DECLARE vNickname VARCHAR(50);                                \n" +
                "	DECLARE vReleaseKitNumber VARCHAR(60);                                \n" +
                "	DECLARE vTotalPlan INT;                                \n" +
                "	DECLARE vReleasedPlan INT;                                    \n" +
                "	DECLARE vKitQty INT;                                \n" +
                "	DECLARE vIsReleaseKit TINYINT;                              \n" +
                "	DECLARE vPlanExists INT;               \n" +
                "    DECLARE vActualKitReleaseDate DATETIME;     \n" +
                "    DECLARE vSubAssyPlanExists INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                                        \n" +
                "	BEGIN                                        \n" +
                "		ROLLBACK;                                        \n" +
                "		RESIGNAL;                                        \n" +
                "	END;                                        \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                        \n" +
                "	BEGIN                                        \n" +
                "		ROLLBACK;                                        \n" +
                "		RESIGNAL;                  \n" +
                "	END;                                        \n" +
                "	START TRANSACTION;                                        \n" +
                "  \n" +
                "    SET vActualKitReleaseDate = fun_DatetimetoUTCDateTime();    \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO vPlanExists                       \n" +
                "        FROM 	salesorder_plan_detailsmst                             \n" +
                "        WHERE 	id = pPlanDetID                         \n" +
                "			AND kitStatus = 'R'                         \n" +
                "			AND salesOrderDetID = pRefSalesOrderDetID                             \n" +
                "			AND refAssyId = pAssyID                         \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);     \n" +
                "  \n" +
                "	IF (pSubAssyID IS nOT NULL) THEN  \n" +
                "	SELECT 	COUNT(1) INTO vSubAssyPlanExists                       \n" +
                "        FROM 	salesorder_plan_detailsmst                             \n" +
                "        WHERE 	id = pPlanDetID   \n" +
                "			AND salesOrderDetID = pRefSalesOrderDetID                             \n" +
                "			AND refAssyId = pAssyID                         \n" +
                "			AND subAssyID = pSubAssyID;     \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPlanExists = 1 AND pIsReRelease = 0) THEN                            \n" +
                "		UPDATE 	salesorder_plan_detailsmst                                  \n" +
                "		SET 	woID = pWOID,                                   \n" +
                "			releasedNote = pDescription,                                \n" +
                "			updatedBy = pCreatedBy,                                        \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime(),                                  \n" +
                "			updateByRoleId = pCreateByRoleId                             \n" +
                "		WHERE 	id = pPlanDetID;                                  \n" +
                "  \n" +
                "		SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isUpdateRelease;                          \n" +
                "	ELSE                             \n" +
                "		SET vIsReleaseKit = 1;                                \n" +
                "  \n" +
                "		SELECT 	(      \n" +
                "					CASE      \n" +
                "						WHEN connecterTypeID = -2 THEN     \n" +
                "							ROUND(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)), 8)                                  \n" +
                "						ELSE     \n" +
                "							ROUND(MIN(allocatedunit/qpaWithDnp), 8)          \n" +
                "					END     \n" +
                "				)          \n" +
                "			INTO 	vFeasibilityWithAllocatedQty                                  \n" +
                "			FROM 	vu_kit_allocation_detail                           \n" +
                "			WHERE 	refSalesorderdetid = pRefSalesOrderDetID        \n" +
                "					AND assyID = IFNULL(pSubAssyID, pAssyID);                                  \n" +
                "  \n" +
                "            # get nickname of assembly selected for release kit which is used further to generate kit release number                                \n" +
                "			SELECT nickname INTO vNickname FROM component WHERE id = IFNULL(pSubAssyID, pAssyID);                                  \n" +
                "  \n" +
                "			# generate release kit number based on nickname i.e., <nickname>-<auto increment number which is left padded with 0 upto 5 digit>                                \n" +
                "			# e.g., CA277-00001                                \n" +
                "			SELECT 		CONCAT(vNickname, '-', LPAD((COUNT(DISTINCT s.id) + 1), 5, \"0\"))  INTO vReleaseKitNumber                                 \n" +
                "			FROM 		salesorder_plan_detailsmst s                                \n" +
                "			INNER JOIN 	component c ON s.subassyid = c.id OR s.refAssyId = c.id                                \n" +
                "			WHERE  		c.nickname = vNickname                                 \n" +
                "						AND s.kitStatus = 'R'                                \n" +
                "						AND s.isDeleted = 0;     \n" +
                "  \n" +
                "	IF(pIsMainKitRelease = 1 OR pIsCurrentKitRelease = 1) THEN   \n" +
                "			IF(pIsMainKitRelease = 1) THEN   \n" +
                "				# Update release detail in case Re-Release [Maintain Current Kit Planning] for Selected plan                          \n" +
                "				UPDATE salesorder_plan_detailsmst                                  \n" +
                "				SET actualKitReleaseDate = vActualKitReleaseDate,                                  \n" +
                "					releasedBy = pCreatedBy,                                  \n" +
                "					releaseTimeFeasibility = vFeasibilityWithAllocatedQty,                                  \n" +
                "					kitStatus = 'R',                                  \n" +
                "					woID = pWOID,                                   \n" +
                "					releasedNote = pDescription,                           \n" +
                "					kitReturnStatus = 'NR',                        \n" +
                "					kitReturnDate = NULL,                        \n" +
                "					kitReturnBy = NULL,                            \n" +
                "					updatedBy = pCreatedBy,                                        \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime(),                                  \n" +
                "					updateByRoleId = pCreateByRoleId,                                \n" +
                "					releaseKitNumber = vReleaseKitNumber                                \n" +
                "				WHERE 	plannKitNumber = pPlanKitNumber  \n" +
                "					AND salesOrderDetID = pRefSalesOrderDetID                             \n" +
                "					AND refAssyId = pAssyID                         \n" +
                "					AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);    \n" +
                "  \n" +
                "                # Update release detail in case of Re-Release [Maintain Current Kit Planning] for Subsequent plans       \n" +
                "				UPDATE salesorder_plan_detailsmst                                  \n" +
                "				SET kitStatus = 'P',                               \n" +
                "					kitReturnDate = NULL,                        \n" +
                "					kitReturnBy = NULL,      \n" +
                "                    woID = NULL,                                   \n" +
                "					releasedNote = NULL,                           \n" +
                "					kitReturnStatus = 'NA',                              \n" +
                "					updatedBy = pCreatedBy,   \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime(),                                  \n" +
                "					updateByRoleId = pCreateByRoleId,   \n" +
                "					releaseKitNumber = NULL,   \n" +
                "                    actualKitReleaseDate = NULL,  \n" +
                "                    releaseTimeFeasibility = NULL,  \n" +
                "                    releasedBy = NULL  \n" +
                "				WHERE 	plannKitNumber > pPlanKitNumber  \n" +
                "					AND salesOrderDetID = pRefSalesOrderDetID                             \n" +
                "					AND refAssyId = pAssyID                         \n" +
                "					AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);  \n" +
                "  \n" +
                "				SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isUpdateRelease;   \n" +
                "  \n" +
                "                # Transfer inventory from Main Material Warehouse to Main Production Warehouse                                \n" +
                "				CALL Sproc_transfer_stock('Department Transfer', NULL, NULL, NULL ,NULL, NULL, pCreatedBy, pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), NULL, pToDeptId, 'M', NULL, NULL, NULL, NULL, NULL, NULL, 'Kit Transfer', 'Release Kit (Kit Allocation)', NULL, TRUE, pDescription, NULL, NULL,NULL);   \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF(pIsCurrentKitRelease = 1) THEN   \n" +
                "			     # Update release detail in case of Re-Release [Allow to Change Current Kit Planning]                            \n" +
                "				UPDATE salesorder_plan_detailsmst                                  \n" +
                "				SET kitStatus = 'P',                            \n" +
                "					kitReturnStatus = 'NA',                        \n" +
                "					kitReturnDate = NULL,                        \n" +
                "					kitReturnBy = NULL,      \n" +
                "                    woID = NULL,   \n" +
                "					releasedNote = NULL,                           \n" +
                "					kitReturnDate = NULL,                        \n" +
                "					kitReturnBy = NULL,   \n" +
                "					updatedBy = pCreatedBy,   \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime(),                                  \n" +
                "					updateByRoleId = pCreateByRoleId,   \n" +
                "                    releaseKitNumber = NULL,   \n" +
                "                    actualKitReleaseDate = NULL,  \n" +
                "                    releaseTimeFeasibility = NULL,  \n" +
                "                    releasedBy = NULL  \n" +
                "				WHERE 	plannKitNumber >= pPlanKitNumber  \n" +
                "					AND salesOrderDetID = pRefSalesOrderDetID                             \n" +
                "					AND refAssyId = pAssyID                         \n" +
                "					AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);  \n" +
                "  \n" +
                "				SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isCurrentKitPlan;   \n" +
                "			END IF;  \n" +
                "		ELSE   \n" +
                "			# add plan details for sub assembly only if plan not exists                           \n" +
                "			IF(pSubAssyID IS NOT NULL AND vSubAssyPlanExists <> 1) THEN                                  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSubAssyPlanDet;                                  \n" +
                "  \n" +
                "				# get qpa for sub assembly to calculate kit qty and PO qty                                \n" +
                "				SELECT  perAssyBuildQty                                  \n" +
                "				INTO 	vSubAssyQPA                                  \n" +
                "				FROM 	kit_allocation_assy_detail                                  \n" +
                "				WHERE 	refSalesorderdetid = pRefSalesOrderDetID                                  \n" +
                "						AND partId = pSubAssyID                                  \n" +
                "						AND isDeleted = 0;                                  \n" +
                "  \n" +
                "				# For sub-assembly we will make entry for release plan based on main assembly plan                                \n" +
                "				INSERT INTO salesorder_plan_detailsmst                                  \n" +
                "				(	salesOrderDetID, 				refAssyId, 			subAssyID, 		poQty, 						poDueDate, 				                                  \n" +
                "					materialDockDate,				kitReleaseQty, 						mfrLeadTime, 				kitReleaseDate,                                   \n" +
                "					plannKitNumber,                                   \n" +
                "					actualKitReleaseDate, 			releasedBy, 		releaseTimeFeasibility, 					kitStatus, 		                                  \n" +
                "					woID, 							refPlanId, 			releasedNote,	 releaseKitNumber,			isDeleted, 				                                \n" +
                "					createdAt,   					createdBy, 			updatedAt, 									updatedBy, 		                                  \n" +
                "					createByRoleId, 				updateByRoleId                                  \n" +
                "				)  \n" +
                "				SELECT                                   \n" +
                "					pRefSalesOrderDetID, 			pAssyID, 			pSubAssyID, 		(vSubAssyQPA * poQty), 	poDueDate, 				                                  \n" +
                "					materialDockDate,				(vSubAssyQPA * kitReleaseQty), 			mfrLeadTime, 			kitReleaseDate,                                   \n" +
                "					plannKitNumber,                                   \n" +
                "					vActualKitReleaseDate, 	pCreatedBy, 		vFeasibilityWithAllocatedQty, 				'R', 		                                  \n" +
                "					pWOID, 							pPlanDetID, 		pDescription,	vReleaseKitNumber,			0, 						                                \n" +
                "					fun_DatetimetoUTCDateTime(),   	pCreatedBy, 		fun_DatetimetoUTCDateTime(), 				pCreatedBy, 		                                  \n" +
                "					pCreateByRoleId, 				pCreateByRoleId                                  \n" +
                "				FROM 	salesorder_plan_detailsmst                                  \n" +
                "				WHERE 	id = pPlanDetID;   \n" +
                "			ELSE         \n" +
                "				# Update release detail for assembly plan - Release Case                             \n" +
                "				UPDATE salesorder_plan_detailsmst                                  \n" +
                "				SET actualKitReleaseDate = vActualKitReleaseDate,                                  \n" +
                "					releasedBy = pCreatedBy,                                  \n" +
                "					releaseTimeFeasibility = vFeasibilityWithAllocatedQty,                                  \n" +
                "					kitStatus = 'R',                                  \n" +
                "					woID = pWOID,                                   \n" +
                "					releasedNote = pDescription,                           \n" +
                "					kitReturnStatus = NULL,                        \n" +
                "					kitReturnDate = NULL,                        \n" +
                "					kitReturnBy = NULL,                        \n" +
                "					initiateReturnBy = NULL,                        \n" +
                "					initiateReturnAt = NULL,                             \n" +
                "					updatedBy = pCreatedBy,                                        \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime(),                                  \n" +
                "					updateByRoleId = pCreateByRoleId,                                \n" +
                "					releaseKitNumber = vReleaseKitNumber                                \n" +
                "				WHERE 	id = pPlanDetID;   \n" +
                "            END IF;                                  \n" +
                "  \n" +
                "			# Transfer inventory from Main Material Warehouse to Main Production Warehouse                                \n" +
                "			CALL Sproc_transfer_stock('Department Transfer', NULL, NULL, NULL ,NULL, NULL, pCreatedBy, pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), NULL, pToDeptId, 'M', NULL, NULL, NULL, NULL, NULL, NULL, 'Kit Transfer', 'Release Kit (Kit Allocation)', NULL, TRUE, pDescription, NULL, NULL,NULL);                                  \n" +
                "		END IF;   \n" +
                "	END IF;  \n" +
                "	COMMIT;                                        \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReturnStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReturnStatus`(                \n" +
                "	pRefSalesOrderDetID INT,      \n" +
                "	pAssyID INT,                \n" +
                "	pMainAssyID INT,               \n" +
                "	pIsConsolidated TINYINT(1)           \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE vKitReturnStatus VARCHAR(50);                \n" +
                "	DECLARE vPendingReleaseCount INT;               \n" +
                "	DECLARE vReleasedNotReturnedCount INT;                 \n" +
                "	DECLARE vReturnedCount INT;             \n" +
                "	DECLARE vReadyToReturnCount INT;             \n" +
                "  \n" +
                "	SELECT  SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,            \n" +
                "			SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,        \n" +
                "            SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,        \n" +
                "            SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount        \n" +
                "	INTO 	vPendingReleaseCount,	vReleasedNotReturnedCount,	vReturnedCount,vReadyToReturnCount            \n" +
                "	FROM 	vu_release_plan_release_return_status_det      \n" +
                "	WHERE 	salesOrderDetID = pRefSalesOrderDetID           \n" +
                "    AND 	refAssyId = pMainAssyID AND            \n" +
                "			(CASE 	WHEN (pIsConsolidated = 1) THEN 1 = 1            \n" +
                "					WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID             \n" +
                "					ELSE subAssyID IS NULL           \n" +
                "			END);            \n" +
                "  \n" +
                "	IF (vPendingReleaseCount = 0 AND  vReleasedNotReturnedCount = 0 AND vReturnedCount > 0) THEN              \n" +
                "		SET vKitReturnStatus = 'Fully Returned';              \n" +
                "	ELSEIF (vReturnedCount > 0) THEN              \n" +
                "		SET vKitReturnStatus = 'Partially Returned';              \n" +
                "	ELSEIF (vReleasedNotReturnedCount > 0) THEN              \n" +
                "		SET vKitReturnStatus = 'Not Returned';            \n" +
                "	ELSEIF (vReadyToReturnCount > 0) THEN              \n" +
                "		SET vKitReturnStatus = 'Ready To Return';                    \n" +
                "	ELSE            \n" +
                "		SET vKitReturnStatus = 'N/A';             \n" +
                "	END IF;            \n" +
                "  \n" +
                "	RETURN vKitReturnStatus;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4872,'2.00','V1','User Story 34796: Kit Released And Return Flow changes for Re-released Kit Plan - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4872:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_who_bought_who`;  \n" +
                "CREATE TRIGGER `Trg_AI_who_bought_who` AFTER INSERT ON `who_bought_who` FOR EACH ROW BEGIN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "	VALUES('WHOBOUGHTWHO',CAST(NEW.id AS CHAR),'Acquired',CAST(fun_getMfgCodeAndNameByID(NEW.buyTo) AS CHAR), CAST(fun_getMfgCodeAndNameByID(NEW.buyBy) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId),  \n" +
                "	('WHOBOUGHTWHO',CAST(NEW.id AS CHAR),'Acquisition Date',NULL, CAST(NEW.buyDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_who_bought_who`;  \n" +
                "CREATE TRIGGER `TRG_AU_who_bought_who` AFTER UPDATE ON `who_bought_who` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.buyDate,0) != IFNULL(NEW.buyDate,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('WHOBOUGHTWHO',CAST(NEW.id AS CHAR),'Acquisition Date',CAST(OLD.buyDate AS CHAR), CAST(NEW.buyDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_mfgcodealias`;  \n" +
                "CREATE TRIGGER `Trg_AI_mfgcodealias` AFTER INSERT ON `mfgcodealias` FOR EACH ROW BEGIN     \n" +
                "    DECLARE v_serialNumber   VARCHAR(20);    \n" +
                "    DECLARE v_custSerialNumber VARCHAR(20) DEFAULT NULL;    \n" +
                "    SELECT mfgtype,iscustordisty,systemID,customerSystemID INTO @mfgtype,@iscustordisty,@systemID,@customerSystemID FROM mfgcodemst WHERE id=new.mfgcodeid;    \n" +
                "    IF(@systemID IS NULL)THEN    \n" +
                "    IF(@mfgtype='DIST')THEN    \n" +
                "    SELECT CONCAT('SUP',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber      \n" +
                "         FROM identity WHERE `type`='SupplierSystemID';    \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='SupplierSystemID';    \n" +
                "    ELSE    \n" +
                "    SELECT CONCAT('MFR',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber    \n" +
                "         FROM identity WHERE `type`='MFRSystemID';    \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='MFRSystemID';    \n" +
                "    END IF;    \n" +
                "    UPDATE mfgcodemst      \n" +
                "        SET systemID=  v_serialNumber    \n" +
                "	  WHERE id = new.mfgcodeid;     \n" +
                "    END IF;    \n" +
                "    IF(@mfgtype<>'DIST' AND @iscustordisty=1 AND @customerSystemID IS NULL)THEN    \n" +
                "    SELECT mfgcode INTO @v_mfgcode FROM mfgcodemst WHERE iscompany=1 ;    \n" +
                "    SELECT CONCAT(@v_mfgcode,'C',LPAD(`maxvalue`,5,'0'))  INTO v_custSerialNumber      \n" +
                "         FROM identity WHERE `type`='CustSystemID';    \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustSystemID';    \n" +
                "  \n" +
                "         UPDATE mfgcodemst      \n" +
                "        SET customerSystemID = v_custSerialNumber    \n" +
                "	  WHERE id = new.mfgcodeid;      \n" +
                "    END IF;    \n" +
                "  \n" +
                "    INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "	VALUES('MFGCODEALIAS',CAST(NEW.id AS CHAR),'Added Alias',NULL, CAST(NEW.alias AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodealias`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodealias` AFTER UPDATE ON `mfgcodealias` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEALIAS',CAST(NEW.id AS CHAR),'Removed Alias',CAST(OLD.alias AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4873,'2.00','V1',' Bug 34885: QA Testing findings for User Story : Maintain Change History of supplier /customer / MFR master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4873:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_supplier_mapping_mst`;  \n" +
                "CREATE TRIGGER `TRG_AI_supplier_mapping_mst` AFTER INSERT ON `supplier_mapping_mst` FOR EACH ROW BEGIN  \n" +
                "	SELECT mfgtype,iscustordisty INTO @mfgtype,@iscustordisty FROM mfgcodemst WHERE id=NEW.supplierid;  \n" +
                "  \n" +
                "	IF @mfgtype='DIST' THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "		VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Added Manufacturer Mapping',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgcodemstid) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSE  \n" +
                "		IF @iscustordisty=1 THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "			VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Added Customer Mapping',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgcodemstid) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_supplier_mapping_mst`;  \n" +
                "CREATE TRIGGER `TRG_AU_supplier_mapping_mst` AFTER UPDATE ON `supplier_mapping_mst` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN    \n" +
                "		SELECT mfgtype,iscustordisty INTO @mfgtype,@iscustordisty FROM mfgcodemst WHERE id=NEW.supplierid;  \n" +
                "		IF @mfgtype='DIST' THEN    \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "			VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Manufacturer Mapping',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgcodemstid) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "		ELSE   \n" +
                "			IF @iscustordisty=1 THEN  \n" +
                "				INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "				VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Customer Mapping',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgcodemstid) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "			END IF;   \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_invalid_mfgmappingmst`;  \n" +
                "CREATE TRIGGER `Trg_AI_invalid_mfgmappingmst` AFTER INSERT ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Add Map Manufacturer',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgCodeID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_invalid_mfgmappingmst`;  \n" +
                "CREATE TRIGGER `Trg_AU_invalid_mfgmappingmst` AFTER UPDATE ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Remove Map Manufacturer',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgCodeID) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN    \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN    \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR), CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4874,'2.00','V1',' Bug 34885: QA Testing findings for User Story : Maintain Change History of supplier /customer / MFR master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4874:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_HistoryByTableName`;  \n" +
                "CREATE PROCEDURE `Sproc_HistoryByTableName`(    \n" +
                "	IN pID INT,    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pTableName VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "	SET @temp_Sproc_HistoryByTableName = CONCAT(\"SELECT    \n" +
                "		ID,    \n" +
                "        Tablename,    \n" +
                "        RefTransID,    \n" +
                "        Colname,    \n" +
                "        Oldval,    \n" +
                "        Newval,    \n" +
                "		fun_getUserNameByID(updatedBy) updatedby,    \n" +
                "		fun_getUserNameByID(createdBy) createdby,    \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,    \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt    \n" +
                "		FROM dataentrychange_auditlog WHERE (RefTransID='\",pID,\"' AND Tablename='\",pTableName,\"')    \n" +
                "	\");    \n" +
                "  \n" +
                "    /*This logic configure for supplier/manufacturer/customer page*/  \n" +
                "    IF pTableName = 'MFGCODEMST' THEN  \n" +
                "		SET @temp_Sproc_HistoryByTableName = CONCAT(@temp_Sproc_HistoryByTableName,  \n" +
                "			\"UNION  \n" +
                "			SELECT    \n" +
                "				ID,    \n" +
                "				Tablename,    \n" +
                "				RefTransID,    \n" +
                "				Colname,    \n" +
                "				Oldval,    \n" +
                "				Newval,    \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,    \n" +
                "				fun_getUserNameByID(createdBy) createdby,    \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,    \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt    \n" +
                "			FROM dataentrychange_auditlog   \n" +
                "            WHERE (RefTransID IN (SELECT id FROM mfgcodealias WHERE mfgcodeId='\",pID,\"')   \n" +
                "				AND Tablename='MFGCODEALIAS')    \n" +
                "  \n" +
                "			UNION  \n" +
                "			SELECT    \n" +
                "				ID,    \n" +
                "				Tablename,    \n" +
                "				RefTransID,    \n" +
                "				Colname,    \n" +
                "				Oldval,    \n" +
                "				Newval,    \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,    \n" +
                "				fun_getUserNameByID(createdBy) createdby,    \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,    \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt    \n" +
                "			FROM dataentrychange_auditlog   \n" +
                "            WHERE (RefTransID IN (SELECT id FROM who_bought_who WHERE buyTo='\",pID,\"')   \n" +
                "				AND Tablename='WHOBOUGHTWHO')   \n" +
                "  \n" +
                "            UNION  \n" +
                "			SELECT    \n" +
                "				ID,    \n" +
                "				Tablename,    \n" +
                "				RefTransID,    \n" +
                "				Colname,    \n" +
                "				Oldval,    \n" +
                "				Newval,    \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,    \n" +
                "				fun_getUserNameByID(createdBy) createdby,    \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,    \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt    \n" +
                "			FROM dataentrychange_auditlog   \n" +
                "            WHERE (RefTransID IN (SELECT id FROM supplier_mapping_mst WHERE supplierID='\",pID,\"')   \n" +
                "				AND Tablename='SUPPLIERMAPPINGMST')  \n" +
                "  \n" +
                "			UNION  \n" +
                "			SELECT    \n" +
                "				ID,    \n" +
                "				Tablename,    \n" +
                "				RefTransID,    \n" +
                "				Colname,    \n" +
                "				Oldval,    \n" +
                "				Newval,    \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,    \n" +
                "				fun_getUserNameByID(createdBy) createdby,    \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,    \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt    \n" +
                "			FROM dataentrychange_auditlog    \n" +
                "            WHERE (RefTransID IN (SELECT id FROM invalid_mfgmappingmst WHERE refmfgCodeID='\",pID,\"')   \n" +
                "				AND Tablename='INVALIDMFGMAPPINGMST')   \n" +
                "		\");  \n" +
                "    END IF;  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";    \n" +
                "	END IF;   \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HistoryByTableName,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HistoryByTableName,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4875,'2.00','V1',' Bug 34885: QA Testing findings for User Story : Maintain Change History of supplier /customer / MFR master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4875:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetBOMPartAndPackagingAliasByAssembly`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMPartAndPackagingAliasByAssembly`(	                                                      \n" +
                "	IN pPartID INT,                    \n" +
                "	IN pSalesOrderDetailId INT                                                  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_BOMAssyIds VARCHAR(10000);                    \n" +
                "		SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailId;			                    \n" +
                "  \n" +
                "		SELECT 		*              \n" +
                "		FROM 		(              \n" +
                "			SELECT 		rml.rfqLineItemsID, 		cp.componentID AS mfgPNID, 		fun_getMFGPNByID(cp.componentID) AS mfgPN, 		rml.partID,       \n" +
                "					fun_getAssyPIDCodeByID(cp.componentID) AS PIDCode, 			rml.restrictUseInBOMStep, 				rml.restrictUseInBOMWithPermissionStep,       \n" +
                "					rml.restrictUseInBOMExcludingAliasStep, 				rml.restrictUseInBOMExcludingAliasWithPermissionStep, 	rl.restrictCPNUseInBOMStep,       \n" +
                "					fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus, 					      \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,        c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,                   \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description, 							rml.customerApproval,       \n" +
                "					rl.customerApprovalCPN, 	TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 						fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,       \n" +
                "					rml.id AS lineitemAlternatePartId, 					rml.partID AS assyId,    				rml.mismatchMountingTypeStep,       \n" +
                "					rml.uomMismatchedStep, 		rml.mismatchFunctionalCategoryStep, rml.approvedMountingType                                       \n" +
                "			FROM 		component_packagingalias cp                                              \n" +
                "			LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                              \n" +
                "			LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid = c.id                                         \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                          \n" +
                "			WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0                                        \n" +
                "			UNION                                              \n" +
                "			SELECT 		rla.rfqLineItemsID, 		rla.mfgPNID, 				rla.mfgPN, 						rla.partID,       \n" +
                "					c.PIDCode, 			rla.restrictUseInBOMStep, 		rla.restrictUseInBOMWithPermissionStep, 		rla.restrictUseInBOMExcludingAliasStep,       \n" +
                "					rla.restrictUseInBOMExcludingAliasWithPermissionStep, 			rl.restrictCPNUseInBOMStep, 				fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,       \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,      c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,   \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,       \n" +
                "					rla.customerApproval, 		rl.customerApprovalCPN, 		TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 	fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,       \n" +
                "					rla.id AS lineitemAlternatePartId,  rla.partID AS assyId,          \n" +
                "					rla.mismatchMountingTypeStep, 	rla.uomMismatchedStep, 			rla.mismatchFunctionalCategoryStep ,rla.approvedMountingType                                      \n" +
                "			FROM 		rfq_lineitems_alternatepart rla   \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                             \n" +
                "			INNER JOIN	component c ON c.id = rla.mfgPNID                                             \n" +
                "			WHERE 	 	FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0                                          \n" +
                "			UNION                        \n" +
                "			SELECT 		rla.rfqLineItemsID, 		custPNID AS mfgPNID, 			custPN AS mfgPN, 					rla.partID,       \n" +
                "					c.PIDCode, 			rla.restrictUseInBOMStep, 		rla.restrictUseInBOMWithPermissionStep, 		rla.restrictUseInBOMExcludingAliasStep,       \n" +
                "					rla.restrictUseInBOMExcludingAliasWithPermissionStep, 			rl.restrictCPNUseInBOMStep, 				fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,       \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,           c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,                \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description, 							rla.customerApproval,       \n" +
                "					rl.customerApprovalCPN, 	TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 						fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,       \n" +
                "					rla.id AS lineitemAlternatePartId, 					rla.partID AS assyId,          \n" +
                "					rla.mismatchMountingTypeStep, 	rla.uomMismatchedStep, 			rla.mismatchFunctionalCategoryStep, rla.approvedMountingType                                       \n" +
                "			FROM 		rfq_lineitems_alternatepart rla                                      \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                             \n" +
                "			INNER JOIN	component c ON c.id = rla.mfgPNID                                             \n" +
                "			WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND custPNID IS NOT NULL AND rla.isDeleted = 0                \n" +
                "			GROUP BY 	custPNID, rla.partID              \n" +
                "		) a GROUP BY a.bomLineItemId, a.assyId, a.mfgPN;                      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4876,'2.00','V1','Bug 34831: If Functional/Mounting Type is TBD then restrict user to Allocate to Kit while UMID Creation - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4876:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustInvoiceDetForVoidPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustInvoiceDetForVoidPayment`(  \n" +
                "	IN pVoidCustPaymentMstID INT,  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(10),  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "		SELECT refCustPackingslipInvoiceID  \n" +
                "		FROM packingslip_invoice_payment_det  \n" +
                "		WHERE refPayementid = pVoidCustPaymentMstID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy AS  \n" +
                "			SELECT refCustPackingslipInvoiceID  \n" +
                "			FROM temp_DB_ChangeStatus_CustInvoiceMstIDs ;  \n" +
                "  \n" +
                "  \n" +
                "	UPDATE customer_packingslip cps  \n" +
                "		LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			 FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND isPaymentVoided = 0  \n" +
                "			AND isDeleted = 0  \n" +
                "			GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "		 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "	SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "				   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "					cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "				   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "					cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "				   ELSE cps.paymentStatus END  \n" +
                "				) ,  \n" +
                "		cps.updatedBy = pUserID,  \n" +
                "		cps.updateByRoleId = pUserRoleID ,  \n" +
                "		cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "	WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy)  \n" +
                "	AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "  \n" +
                "	/* if Applied Credit Memo void then change payment status >> PE - pending  \n" +
                "		as only one time entry of applied CM as payment */  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'CA') THEN  \n" +
                "  \n" +
                "		UPDATE customer_packingslip  \n" +
                "		SET paymentStatus = 'PE'  \n" +
                "		WHERE id = (SELECT refCustCreditMemoID FROM packingslip_invoice_payment  \n" +
                "				WHERE id = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0  \n" +
                "	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromInvoiceDate DATE,  \n" +
                "	IN pToInvoiceDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "	ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cpscm ON psip.refCustCreditMemoID = cpscm.id AND cpscm.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cpscm.creditMemoDate , cpscm.creditMemoNumber ,  \n" +
                "			cpscm.totalAmount AS creditMemoAmount ,  \n" +
                "			');  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id AS paymentMstID ,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		psip.refPaymentMode ,  \n" +
                "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,  \n" +
                "		cps.totalAmount AS invoiceOrgAmount ,  \n" +
                "		psipd.paymentAmount AS invoiceDepositAmount ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		psipd.appliedDate ,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
                "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "		\" ,v_TypeOfPaymentWhereClause, \"  \n" +
                "            AND psip.isPaymentVoided = 0  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY appliedDate DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "            fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			(CASE WHEN (psip.isPaymentVoided = 1) THEN \"Voided\"  \n" +
                "				WHEN (IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN \"Received & Applied\"  \n" +
                "				ELSE \"Received\" END) AS isPaymentVoidedConvertedValueOfCM ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "				ELSE 'Received' END)  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4877,'2.00','V1',' void payment sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4877:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-06-2021 *********************************** */
                "UPDATE feature_mst SET featureName='Allow to Enable/Disable Supplier API Request for All Users' WHERE  \n" +
                "featureName='Allow to Enable/Disable Supplier for External API Request';  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "UPDATE page_detail SET displayMenuName='Supplier API Request Usage',menuName='Supplier API Request Usage' WHERE pageName='Supplier Call Limits';  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "INSERT INTO systemconfigrations(`key`,`values`,clusterName,isActive,createdBy,isEditable,description,displayName) VALUES  \n" +
                "('MouserAPIRequestsLimit',1000,'Mouser',1,1,1,'The text which is mentioned in the value field is a per day limit for MouserApiKey.','Mouser API Requests Limit'),  \n" +
                "('NewarkAPIRequestsLimit',1000,'Newark',1,1,1,'The text which is mentioned in the value field is a per day limit for NewarkApiKey.','Newark API Requests Limit');  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveExternalKeySettings` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveExternalKeySettings`(            \n" +
                "	IN ppageIndex INT,            \n" +
                "	IN precordPerPage INT,            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383)            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "		DECLARE pOffset INT;            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS externalKey AS            \n" +
                "			SELECT id,clientID,secretID,specialPriceCustomerID,perCallRecordCount,appID,`Version`,dkCallLimit          \n" +
                "			FROM `external_api_configuration_settings`;            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY id ASC\") ;            \n" +
                "		ELSE            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "			SET pWhereClause = '1=1' ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "		ELSE	            \n" +
                "			SET rowNumWhere = '';            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		/* to get total count of rows */            \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM externalKey where \", pWhereClause );            \n" +
                "		PREPARE query1 FROM @SQLStatement1;            \n" +
                "		EXECUTE query1;            \n" +
                "		DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  externalKey where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "		PREPARE query2 FROM @SQLStatement2;            \n" +
                "		EXECUTE query2;            \n" +
                "		DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE externalKey;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4878,'2.00','V1',' User Story 29912: Disabled Supplier External API request without disturb other business logic. - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4878:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-06-2021 *********************************** */
                "CREATE TABLE `salesorderdet_commission_attribute_mstdet` (  \n" +
                "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
                "  `refSalesOrderDetID` int NOT NULL,  \n" +
                "  `unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `commissionPercentage` decimal(16,6) DEFAULT NULL,  \n" +
                "  `commissionValue` decimal(16,6) DEFAULT NULL,  \n" +
                "  `quoted_commissionPercentage` decimal(16,6) DEFAULT NULL,  \n" +
                "  `quoted_commissionValue` decimal(16,6) DEFAULT NULL,  \n" +
                "  `quoted_unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `poQty` int DEFAULT NULL,  \n" +
                "  `quotedQty` int DEFAULT NULL,  \n" +
                "  `type` int DEFAULT NULL COMMENT '1-From Part Master,2-From RFQ,3-MISC',  \n" +
                "  `commissionCalculateFrom` int DEFAULT NULL COMMENT '1-Sales Price Matrix,2-RFQ Quote Summary,3-Manual',  \n" +
                "  `refComponentSalesPriceBreakID` int DEFAULT NULL,  \n" +
                "  `partID` int DEFAULT NULL,  \n" +
                "  `salesCommissionNotes` varchar(1000) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(10) NOT NULL,  \n" +
                "  `updatedBy` varchar(10) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(10) DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int DEFAULT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  `rfqAssyID` int DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_salesorderdet_commission_attribute_mstdet_refSalesOrderDetID` (`refSalesOrderDetID`),  \n" +
                "  KEY `FK_salesorderdet_commission_attribute_mstdet_partID` (`partID`),  \n" +
                "  KEY `FK_salesorderdet_commission_mstdet_refComponentSalesPriceBreakID` (`refComponentSalesPriceBreakID`),  \n" +
                "  CONSTRAINT `FK_salesorderdet_commission_attribute_mstdet_partID` FOREIGN KEY (`partID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_salesorderdet_commission_attribute_mstdet_refSalesOrderDetID` FOREIGN KEY (`refSalesOrderDetID`) REFERENCES `salesorderdet` (`id`),  \n" +
                "  CONSTRAINT `FK_salesorderdet_commission_mstdet_refComponentSalesPriceBreakID` FOREIGN KEY (`refComponentSalesPriceBreakID`) REFERENCES `component_price_break_details` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "ALTER TABLE salesorderdet_commission_attribute ADD COLUMN refSalesCommissionID INT AFTER refSalesorderdetID;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "ALTER TABLE salesorderdet_commission_attribute  \n" +
                "ADD CONSTRAINT FK_salesorderdet_commission_attribute_refSalesCommissionID  \n" +
                "FOREIGN KEY (refSalesCommissionID) REFERENCES salesorderdet_commission_attribute_mstdet(id);  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "CREATE TABLE `customer_packingslip_commission_attribute_mstdet` (  \n" +
                "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
                "  `refCustPackingSlipDetID` int NOT NULL,  \n" +
                "  `unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `commissionPercentage` decimal(16,6) DEFAULT NULL,  \n" +
                "  `commissionValue` decimal(16,6) DEFAULT NULL,  \n" +
                "  `quoted_commissionPercentage` decimal(16,6) DEFAULT NULL,  \n" +
                "  `quoted_commissionValue` decimal(16,6) DEFAULT NULL,  \n" +
                "  `quoted_unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `poQty` int DEFAULT NULL,  \n" +
                "  `quotedQty` int DEFAULT NULL,  \n" +
                "  `type` int DEFAULT NULL COMMENT '1-From Part Master,2-From RFQ,3-MISC',  \n" +
                "  `commissionCalculateFrom` int DEFAULT NULL COMMENT '1-Sales Price Matrix,2-RFQ Quote Summary,3-Manual',  \n" +
                "  `refComponentSalesPriceBreakID` int DEFAULT NULL,  \n" +
                "  `partID` int DEFAULT NULL,  \n" +
                "  `salesCommissionNotes` varchar(1000) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(10) NOT NULL,  \n" +
                "  `updatedBy` varchar(10) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(10) DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int DEFAULT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  `rfqAssyID` int DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_customer_packingslip_mstdet_refCustPackingSlipDetID` (`refCustPackingSlipDetID`),  \n" +
                "  KEY `FK_customer_packingslip_commission_attribute_mstdet_partID` (`partID`),  \n" +
                "  KEY `FK_customer_packingslip_mstdet_refComponentSalesPriceBreakID` (`refComponentSalesPriceBreakID`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_commission_attribute_mstdet_partID` FOREIGN KEY (`partID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_mstdet_refComponentSalesPriceBreakID` FOREIGN KEY (`refComponentSalesPriceBreakID`) REFERENCES `component_price_break_details` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_mstdet_refCustPackingSlipDetID` FOREIGN KEY (`refCustPackingSlipDetID`) REFERENCES `customer_packingslip_det` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "ALTER TABLE customer_packingslip_commission_attribute ADD COLUMN refcustInvoiceCommissionID INT AFTER refCustPackingSlipDetID;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "ALTER TABLE customer_packingslip_commission_attribute  \n" +
                "ADD CONSTRAINT FK_customer_packingslip_commission_refcustInvoiceCommissionID  \n" +
                "FOREIGN KEY (refcustInvoiceCommissionID) REFERENCES customer_packingslip_commission_attribute_mstdet(id);  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4879,'2.00','V1',' User Story 34753: Implement Sales Commission Changes Suggested by JV  - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4879:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetails`(        \n" +
                "	IN psalesDetId INT,        \n" +
                "	IN ppartID INT,        \n" +
                "    IN pQuoteFrom INT,        \n" +
                "    IN pQuoteGroupId INT,        \n" +
                "    IN pQuoteNumber VARCHAR(50),        \n" +
                "    IN pPOQty INT,        \n" +
                "    IN pTurnTimeID INT,        \n" +
                "    IN pPrice DECIMAL(18,5)    ,    \n" +
                "    IN pTransType CHAR,    \n" +
                "    IN pRefId INT    \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pAssyID INT;        \n" +
                "    DECLARE prefQuoteID INT;        \n" +
                "	DECLARE pmaterialUnitPrice DECIMAL(16,6);        \n" +
                "	DECLARE plaborUnitPrce DECIMAL(16,6);        \n" +
                "	DECLARE v_overheadUnitPrice DECIMAL(16,6);        \n" +
                "  \n" +
                "  IF psalesDetId IS NOT NULL THEN        \n" +
                "	   SELECT sc.id,sc.refSalesorderdetID,sc.unitPrice,sc.org_unitPrice,sc.commissionPercentage,sc.commissionValue, (sc.commissionValue*d.qty) extendedCommissionValue,        \n" +
                "				sc.org_commissionPercentage, sc.org_commissionValue, (sc.org_commissionValue*d.qty) extendedOrgCommissionValue,        \n" +
                "				IFNULL(qd.fieldName,'Assembly Sales Price Matrix') fieldName,        \n" +
                "				sc.category, d.qty        \n" +
                "		FROM salesorderdet_commission_attribute sc        \n" +
                "		JOIN salesorderdet d ON d.id = sc.refSalesorderdetID        \n" +
                "		LEFT JOIN quotecharges_dynamic_fields_mst qd ON sc.refQuoteAttributeId = qd.id        \n" +
                "	   WHERE sc.refSalesorderdetID = psalesDetId        \n" +
                "		 AND sc.partid = ppartID        \n" +
                "		 AND sc.isDeleted = 0        \n" +
                "		 AND d.isDeleted = 0;    \n" +
                "  ELSEIF pTransType IS NOT NULL AND pTransType = 'I' AND pRefId IS NOT NULL THEN    \n" +
                "  SELECT cpc.id,cpc.refCustPackingSlipDetID,cpc.unitPrice,cpc.quoted_unitPrice,cpc.commissionPercentage,cpc.commissionValue,        \n" +
                "				cpc.quoted_commissionPercentage, cpc.quoted_commissionValue,cpc.poQty AS qty,cpc.quotedQty, cpc.type,cpc.commissionCalculateFrom,cpc.rfqAssyID    \n" +
                "		FROM customer_packingslip_commission_attribute_mstdet cpc  \n" +
                "	   WHERE cpc.refCustPackingSlipDetID = pRefId        \n" +
                "		 AND cpc.partid = ppartID        \n" +
                "		 AND cpc.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT cpc.id,cpc.refCustPackingSlipDetID,cpc.unitPrice,cpc.org_unitPrice,cpc.commissionPercentage,cpc.commissionValue, (cpc.commissionValue*d.shipQty) extendedCommissionValue,        \n" +
                "				cpc.org_commissionPercentage, cpc.org_commissionValue, (cpc.org_commissionValue*d.shipQty) extendedOrgCommissionValue,        \n" +
                "				IFNULL(qd.fieldName,'Sales Commission') fieldName,        \n" +
                "				cpc.category, d.shipQty,cpc.refcustInvoiceCommissionID        \n" +
                "		FROM customer_packingslip_commission_attribute cpc        \n" +
                "		JOIN customer_packingslip_det d ON d.id = cpc.refCustPackingSlipDetID        \n" +
                "		LEFT JOIN quotecharges_dynamic_fields_mst qd ON cpc.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0       \n" +
                "	   WHERE cpc.refCustPackingSlipDetID = pRefId        \n" +
                "		 AND cpc.partid = ppartID        \n" +
                "		 AND cpc.isDeleted = 0        \n" +
                "		 AND d.isDeleted = 0;    \n" +
                "  ELSE        \n" +
                "	 IF pQuoteFrom = 1 THEN /*From RFQ*/        \n" +
                "		  SELECT ra.id INTO pAssyID        \n" +
                "			FROM rfq_assemblies ra        \n" +
                "		   WHERE ra.partID = ppartID        \n" +
                "             AND ra.rfqrefID = pQuoteGroupId        \n" +
                "             AND ra.isDeleted = 0;        \n" +
                "			SELECT id, unitprice, laborunitPrice, overheadUnitPrice INTO prefQuoteID, pmaterialUnitPrice, plaborUnitPrce, v_overheadUnitPrice        \n" +
                "              FROM rfq_assy_quotations        \n" +
                "			 WHERE rfqAssyID = pAssyID        \n" +
                "               AND rfqAssyQtyTurnTimeID = pTurnTimeID        \n" +
                "               AND isDeleted = 0        \n" +
                "               ORDER BY id DESC LIMIT 1;        \n" +
                "		/*get sales commission calculations from RFQ quotation*/        \n" +
                "		 IF(prefQuoteID IS NOT NULL) THEN        \n" +
                "               DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;        \n" +
                "               CREATE TEMPORARY TABLE temp_salesCommission(        \n" +
                "									unitPrice DECIMAL(16,6),        \n" +
                "                                    refQuoteAttributeId INT,        \n" +
                "									commissionPercentage DECIMAL(16,6),        \n" +
                "                                    commissionValue DECIMAL(16,6),        \n" +
                "                                    category VARCHAR(100));        \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf               \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN              \n" +
                "  \n" +
                "					IF(pmaterialUnitPrice IS NOT NULL AND pmaterialUnitPrice>0) THEN        \n" +
                "  \n" +
                "                        INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)        \n" +
                "						SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType         \n" +
                "                        FROM rfq_assy_quotations_additionalcost rad               \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid         \n" +
                "                        WHERE rad.rfqAssyquoteid=prefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;              \n" +
                "  \n" +
                "					END IF;              \n" +
                "				END IF;              \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf               \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID              \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1               \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN              \n" +
                "  \n" +
                "					INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)        \n" +
                "					SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID)        \n" +
                "					  FROM rfq_assy_quotations_additionalcost rad         \n" +
                "                     INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID        \n" +
                "					 WHERE rad.rfqAssyquoteid = prefQuoteID AND qdf.iscommission = 1        \n" +
                "					   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;        \n" +
                "  \n" +
                "				END IF;              \n" +
                "				 IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf               \n" +
                "				 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN              \n" +
                "  \n" +
                "                    IF(v_overheadUnitPrice IS NOT NULL AND v_overheadUnitPrice > 0) THEN        \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)        \n" +
                "						SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType         \n" +
                "						FROM rfq_assy_quotations_additionalcost rad           \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid         \n" +
                "						WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;              \n" +
                "  \n" +
                "				 	END IF;              \n" +
                "				 END IF;              \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf               \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN              \n" +
                "  \n" +
                "                    IF(plaborUnitPrce IS NOT NULL AND plaborUnitPrce>0)THEN              \n" +
                "  \n" +
                "                        INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)        \n" +
                "                        SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType         \n" +
                "                        FROM rfq_assy_quotations_additionalcost rad               \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid         \n" +
                "                        WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;              \n" +
                "  \n" +
                "					END IF;              \n" +
                "				END IF;              \n" +
                "                IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf               \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN              \n" +
                "  \n" +
                "					INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)        \n" +
                "                    SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType        \n" +
                "                      FROM rfq_assy_quotations_additionalcost rad               \n" +
                "					 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid         \n" +
                "                     WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;        \n" +
                "				END IF;        \n" +
                "  \n" +
                "            SELECT sc.refQuoteAttributeId, sc.unitPrice, sc.unitPrice org_unitPrice, sc.commissionPercentage, sc.commissionValue, (sc.commissionValue*pPOQty/*d.qty*/) extendedCommissionValue,        \n" +
                "					sc.commissionPercentage org_commissionPercentage, sc.commissionValue org_commissionValue,         \n" +
                "					(sc.commissionValue*pPOQty/*d.qty*/) extendedOrgCommissionValue,        \n" +
                "					qd.fieldName, sc.category, pPOQty qty/*d.qty*/ , pAssyID rfqAssyID       \n" +
                "			FROM temp_salesCommission sc        \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qd ON sc.refQuoteAttributeId = qd.id;        \n" +
                "  \n" +
                "		END IF;        \n" +
                "	 ELSE        \n" +
                "		/*get sales commission calculations from assembly sales price matrix*/        \n" +
                "		 SELECT a.unitPrice, a.unitPrice quoted_unitPrice, a.id refComponentSalesPriceBreakID,        \n" +
                "				a.commissionPercentage, a.commissionValue, (a.commissionValue*pPOQty) extendedCommissionValue,        \n" +
                "				a.commissionPercentage quoted_commissionPercentage, (a.commissionValue*a.priceBreak) extendedQuotedCommissionValue,        \n" +
                "				a.commissionValue quoted_commissionValue,a.priceBreak AS quotedQty,        \n" +
                "				a.mfgPNID AS partID,category AS salesCommissionNotes, pPOQty qty/*qty*/, 'Sales Price Matrix' fieldName,1 AS commissionCalculateFrom,'From Part Master' typeName,1 AS `type`        \n" +
                "		  FROM (SELECT pPrice/*price*/ unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,        \n" +
                "						ROUND((pPrice/*price*/ * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,        \n" +
                "						IFNULL(cp.salesCommissionNotes,'All') category ,cp.priceBreak       \n" +
                "				  FROM component_price_break_details cp        \n" +
                "				 WHERE cp.`type` = 2        \n" +
                "                 	AND cp.isHistory = 0    \n" +
                "				   AND cp.mfgPNID = ppartID        \n" +
                "				   AND cp.id = pTurnTimeID        \n" +
                "				   AND cp.isDeleted = 0) a;        \n" +
                "     END IF;        \n" +
                "  END IF;        \n" +
                "  \n" +
                "   DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerPackingSlipSalesCommission` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerPackingSlipSalesCommission`(    \n" +
                "	IN pTransType VARCHAR(5),                      	    \n" +
                "	IN pInvoiceID INT,              	                              \n" +
                "        IN pInvData JSON,                              \n" +
                "	IN puserID INT,                                        \n" +
                "	IN puserRoleID INT ,    \n" +
                "        IN pDeletedIds VARCHAR(100),    \n" +
                "        IN pInvDetId INT,  \n" +
                "        IN pInvChildData JSON    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                        \n" +
                "BEGIN                                        \n" +
                "	ROLLBACK;                                        \n" +
                "	RESIGNAL;                                        \n" +
                "END;                                        \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                        \n" +
                "  BEGIN                                        \n" +
                "	ROLLBACK;                                        \n" +
                "	RESIGNAL;                                        \n" +
                "END;    	    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_salescommission_det;                                                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_det AS                                                                          \n" +
                "	SELECT 	*                                                                           \n" +
                "	FROM 	JSON_TABLE(                                   \n" +
                "			pInvData,                                                                          \n" +
                "			\"$[*]\" COLUMNS(    			    \n" +
                "				`id` INT PATH \"$.id\",    \n" +
                "				`refCustPackingSlipDetID` INT PATH \"$.refCustPackingSlipDetID\",                              \n" +
                "				`salesCommissionNotes`VARCHAR(1000) PATH \"$.salesCommissionNotes\",                               \n" +
                "                                 `commissionCalculateFrom` INT PATH \"$.commissionCalculateFrom\",   \n" +
                "                                  `type` INT PATH \"$.type\",               \n" +
                "                                   `poQty` INT PATH \"$.poQty\",       \n" +
                "                                   `quotedQty` INT PATH \"$.quotedQty\",                                                                                                    \n" +
                "				`unitPrice` DECIMAL(16,6) PATH \"$.unitPrice\",                              \n" +
                "				`commissionPercentage` DECIMAL(16,6) PATH \"$.commissionPercentage\",                              \n" +
                "				`commissionValue` DECIMAL(16,6) PATH \"$.commissionValue\",    \n" +
                "				`quoted_unitPrice` DECIMAL(16,6) PATH \"$.quoted_unitPrice\",                               \n" +
                "				`quoted_commissionPercentage`  DECIMAL(16,6) PATH \"$.quoted_commissionPercentage\",                                                                          \n" +
                "				`quoted_commissionValue`  DECIMAL(16,6) PATH \"$.quoted_commissionValue\",     \n" +
                "                `partId` INT PATH \"$.partId\",    \n" +
                "                `refComponentSalesPriceBreakID` INT PATH \"$.refComponentSalesPriceBreakID\" ,  \n" +
                "                 `rfqAssyID` INT PATH \"$.rfqAssyID\"   \n" +
                "			)                                \n" +
                "		) AS CustInv_JT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_salescommissionchild_det;                                                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommissionchild_det AS                                                                          \n" +
                "	SELECT 	*                                                                           \n" +
                "	FROM 	JSON_TABLE(                                   \n" +
                "			pInvChildData,                                                                          \n" +
                "			\"$[*]\" COLUMNS(    			    \n" +
                "				`id` INT PATH \"$.id\",    \n" +
                "				`refCustPackingSlipDetID` INT PATH \"$.refCustPackingSlipDetID\",                              \n" +
                "				`refcustInvoiceCommissionID`INT PATH \"$.refcustInvoiceCommissionID\",  \n" +
                "				`unitPrice` DECIMAL(16,6) PATH \"$.unitPrice\",                                 \n" +
                "                                 `refQuoteAttributeId` INT PATH \"$.refQuoteAttributeId\",  \n" +
                "                                 `commissionPercentage` DECIMAL(16,6) PATH \"$.commissionPercentage\",                              \n" +
                "				`commissionValue` DECIMAL(16,6) PATH \"$.commissionValue\",   \n" +
                "				`org_unitPrice` DECIMAL(16,6) PATH \"$.org_unitPrice\",                               \n" +
                "				`org_commissionPercentage`  DECIMAL(16,6) PATH \"$.org_commissionPercentage\",                                                                          \n" +
                "				`org_commissionValue`  DECIMAL(16,6) PATH \"$.org_commissionValue\",       \n" +
                "                                  `category` VARCHAR(100) PATH \"$.category\",  \n" +
                "  \n" +
                "                `partId` INT PATH \"$.partId\",    \n" +
                "                `refComponentSalesPriceBreakID` INT PATH \"$.refComponentSalesPriceBreakID\"  \n" +
                "			)                                \n" +
                "		) AS CustInvChild_JT;   \n" +
                "		-- Add new commission entry	    \n" +
                "		IF (SELECT COUNT(1) FROM temp_salescommission_det WHERE (id IS NULL OR id < 0) ) > 0 THEN    \n" +
                "			INSERT INTO  customer_packingslip_commission_attribute_mstdet     \n" +
                "				(refCustPackingSlipDetID , salesCommissionNotes,commissionCalculateFrom,unitPrice,`type`,poQty,quotedQty,commissionPercentage,commissionValue,    \n" +
                "					quoted_unitPrice,quoted_commissionPercentage,quoted_commissionValue, partId,refComponentSalesPriceBreakID,    \n" +
                "                    createdBy, createdAt,createByRoleId,rfqAssyID)    \n" +
                "            SELECT refCustPackingSlipDetID , salesCommissionNotes,commissionCalculateFrom,unitPrice,`type`,poQty,quotedQty,commissionPercentage,commissionValue,    \n" +
                "					quoted_unitPrice,quoted_commissionPercentage,quoted_commissionValue, partId,refComponentSalesPriceBreakID,    \n" +
                "                    puserID, fun_DatetimetoUTCDateTime(),puserRoleID,rfqAssyID    \n" +
                "            FROM temp_salescommission_det tmp    \n" +
                "            WHERE (tmp.id IS NULL OR tmp.id < 0);    \n" +
                "  \n" +
                "           END IF;   \n" +
                "           -- Add new child commission entry	    \n" +
                "		IF (SELECT COUNT(1) FROM temp_salescommissionchild_det WHERE (id IS NULL OR id < 0) ) > 0 THEN   \n" +
                "		INSERT INTO  customer_packingslip_commission_attribute     \n" +
                "				(refCustPackingSlipDetID , refcustInvoiceCommissionID,unitPrice,commissionPercentage,commissionValue,    \n" +
                "					org_unitPrice,org_commissionPercentage,org_commissionValue, partId,refComponentSalesPriceBreakID,    \n" +
                "                    createdBy, createdAt,createByRoleId,refQuoteAttributeId,category)    \n" +
                "            SELECT tmp.refCustPackingSlipDetID , (SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=tmp.refCustPackingSlipDetID AND `type`=2 AND isdeleted=0 LIMIT 1),tmp.unitPrice,tmp.commissionPercentage,tmp.commissionValue,    \n" +
                "					tmp.org_unitPrice,tmp.org_commissionPercentage,tmp.org_commissionValue, tmp.partId,tmp.refComponentSalesPriceBreakID,    \n" +
                "                    puserID, fun_DatetimetoUTCDateTime(),puserRoleID,tmp.refQuoteAttributeId,tmp.category    \n" +
                "            FROM temp_salescommissionchild_det tmp   \n" +
                "            WHERE (tmp.id IS NULL OR tmp.id < 0);    \n" +
                "  \n" +
                "           END IF;   \n" +
                "		-- Update existing commission entry	    \n" +
                "		IF (SELECT COUNT(1) FROM temp_salescommission_det WHERE (id IS NOT NULL AND id > 0)) > 0 THEN    \n" +
                "			UPDATE 	customer_packingslip_commission_attribute_mstdet cpd     \n" +
                "			  JOIN 	temp_salescommission_det temp ON temp.id = cpd.id     \n" +
                "               SET  cpd.unitPrice = temp.unitPrice,    \n" +
                "		    cpd.commissionPercentage = temp.commissionPercentage,   \n" +
                "		    cpd.salesCommissionNotes=temp.salesCommissionNotes,   \n" +
                "                    cpd.commissionValue = temp.commissionValue,   \n" +
                "                    cpd.updatedAt = fun_DatetimetoUTCDateTime(),    \n" +
                "                    cpd.updatedBy = puserID,    \n" +
                "                    cpd.updateByRoleId =  puserRoleID    \n" +
                "             WHERE	cpd.isDeleted = 0     \n" +
                "             AND 	temp.id IS NOT NULL     \n" +
                "             AND 	temp.id > 0;      \n" +
                "             -- Update existingc child commission entry  \n" +
                "             UPDATE 	customer_packingslip_commission_attribute cpd     \n" +
                "			  JOIN 	temp_salescommissionchild_det temp ON temp.id = cpd.id     \n" +
                "               SET  cpd.unitPrice = temp.unitPrice,    \n" +
                "		    cpd.commissionPercentage = temp.commissionPercentage,   \n" +
                "                    cpd.commissionValue = temp.commissionValue,   \n" +
                "                    cpd.updatedAt = fun_DatetimetoUTCDateTime(),    \n" +
                "                    cpd.updatedBy = puserID,    \n" +
                "                    cpd.updateByRoleId =  puserRoleID    \n" +
                "             WHERE	cpd.isDeleted = 0     \n" +
                "             AND 	temp.id IS NOT NULL     \n" +
                "             AND 	temp.id > 0;                \n" +
                "        END IF;    \n" +
                "		-- Delete case    \n" +
                "		IF pDeletedIds IS NOT NULL THEN     \n" +
                "			UPDATE customer_packingslip_commission_attribute_mstdet    \n" +
                "            SET isDeleted = 1,    \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),    \n" +
                "                deletedBy = puserID,    \n" +
                "                deleteByRoleId = puserRoleID    \n" +
                "			WHERE FIND_IN_SET(id , pDeletedIds);    \n" +
                "  \n" +
                "			-- Delete Child  \n" +
                "			UPDATE customer_packingslip_commission_attribute    \n" +
                "            SET isDeleted = 1,    \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),    \n" +
                "                deletedBy = puserID,    \n" +
                "                deleteByRoleId = puserRoleID    \n" +
                "			WHERE FIND_IN_SET(refcustInvoiceCommissionID , pDeletedIds);    \n" +
                "        END IF;    \n" +
                "        -- return  success    \n" +
                "       SELECT cca.id,    \n" +
                "				cca.refCustPackingSlipDetID,    \n" +
                "				cca.unitPrice,    \n" +
                "				cca.commissionPercentage,    \n" +
                "				cca.commissionValue,    \n" +
                "				cca.quoted_commissionPercentage,    \n" +
                "				cca.quoted_commissionValue,    \n" +
                "				cca.partId,    \n" +
                "				cca.refComponentSalesPriceBreakID,    \n" +
                "				cca.quoted_unitPrice,  \n" +
                "				cca.type,  \n" +
                "				cca.commissionCalculateFrom,  \n" +
                "				cca.rfqAssyID,  \n" +
                "				cca.quotedQty,  \n" +
                "				cca.poQty,   \n" +
                "				cca.salesCommissionNotes  \n" +
                "			FROM customer_packingslip_commission_attribute_mstdet cca     \n" +
                "			 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID     \n" +
                "			 WHERE  cca.isdeleted=0    \n" +
                "             AND cpd.refCustPackingSlipId = pInvoiceId     \n" +
                "             AND cpd.id = pInvDetId;  \n" +
                "  \n" +
                "             SELECT cca.id,          \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,          \n" +
                "                    cca.unitPrice,          \n" +
                "                    cca.refQuoteAttributeId,          \n" +
                "                    cca.commissionPercentage,          \n" +
                "                    cca.commissionValue,          \n" +
                "                    cca.org_commissionPercentage,          \n" +
                "                    cca.org_commissionValue,          \n" +
                "                    cca.category,          \n" +
                "                    cca.partId,          \n" +
                "                    cca.refComponentSalesPriceBreakID,          \n" +
                "                    cca.org_unitPrice,          \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,          \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,          \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName          \n" +
                "				FROM customer_packingslip_commission_attribute cca          \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0          \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0          \n" +
                "                 WHERE cpd.refCustPackingSlipId = pInvoiceId          \n" +
                "                 AND cca.isdeleted=0;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(          \n" +
                "	IN invoiceID INT      ,          \n" +
                "    IN pTransType VARCHAR(5)          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);          \n" +
                "	DECLARE vTimeZone VARCHAR(50);          \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;          \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;          \n" +
                "	                 SELECT inv.id,   inv.transType,          \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,          \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,          \n" +
                "                        cps.id packingSlipID,          \n" +
                "						inv.refSalesOrderId  ,          \n" +
                "                        inv.systemID,          \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,          \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,          \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,          \n" +
                "						inv.soNumber,inv.soDate,          \n" +
                "                        inv.packingSlipType,inv.`status`,          \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,          \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,          \n" +
                "						inv.invoiceNumber,inv.invoiceDate,          \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,          \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,          \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,          \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,          \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,          \n" +
                "                        inv.intermediateShipmentId ,          \n" +
                "						inv.billingAddress,          \n" +
                "						inv.shippingAddress,          \n" +
                "						inv.intermediateAddress,          \n" +
                "                        inv.isLocked,          \n" +
                "                        inv.subStatus,          \n" +
                "                        inv.paymentStatus,          \n" +
                "                        inv.packingSlipType,          \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,          \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,          \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,       \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,          \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,          \n" +
                "                        inv.isZeroValue,          \n" +
                "                        inv.revision,          \n" +
                "                        cps.subStatus packingSlipSubStatus,          \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))          \n" +
                "						ELSE '' END) materialStatus ,          \n" +
                "                        inv.isAlreadyPublished ,          \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,          \n" +
                "            cps.revision packingSlipVersion,        \n" +
                "            (CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)         \n" +
                "				WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)        \n" +
                "                ELSE NULL END) receivedAmount,    \n" +
                "                (SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'      \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID        \n" +
                "		FROM customer_packingslip inv          \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'          \n" +
                "                 WHERE inv.id = invoiceID          \n" +
                "                 AND inv.transType = pTransType;          \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,          \n" +
                "					cpd.id,          \n" +
                "                    cpd.refCustPackingSlipID,          \n" +
                "					cpd.custPOLineID,          \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,          \n" +
                "                    cpd.lineID,          \n" +
                "                    co.PIDCode,          \n" +
                "                    co.mfgcodeID,          \n" +
                "                    ss.releaseNumber,          \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,          \n" +
                "					co.mfgpn,          \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,          \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,          \n" +
                "                    cpd.partId,          \n" +
                "                    cpd.refChargesTypeID,          \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,          \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,          \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,          \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,          \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,          \n" +
                "                    othercharges AS lineOtherCharges,          \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,          \n" +
                "					cpd.shippingNotes,          \n" +
                "                    cpd.internalComment,          \n" +
                "                    cpd.assyDescription,          \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,          \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,          \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,          \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,          \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,          \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,          \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,          \n" +
                "                    co.partType,          \n" +
                "                    vu.packingLineID,          \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,          \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,          \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert          \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID          \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,          \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,          \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,          \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'          \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'          \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )          \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn          \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0          \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,          \n" +
                "                    cpd.isZeroValue,          \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted          \n" +
                "				 FROM customer_packingslip_det cpd          \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0          \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0          \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId          \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0          \n" +
                "                 ORDER BY cpd.lineID ASC;          \n" +
                "  \n" +
                "                 SELECT cpOther.id,          \n" +
                "						cpOther.refCustomerPackingSlipDetID,          \n" +
                "						cpOther.partID,          \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,          \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,          \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,          \n" +
                "                        cpOther.qty,          \n" +
                "                        cpOther.price,          \n" +
                "                        cpOther.lineComment,          \n" +
                "                         cpOther.lineInternalComment,          \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,          \n" +
                "                        cpOther.frequency ,          \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'          \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'          \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'          \n" +
                "								ELSE ''          \n" +
                "						END) AS frequencyName          \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther          \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0          \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID          \n" +
                "                 AND cpOther.isdeleted=0;          \n" +
                "  \n" +
                "                  --  Tracking Number          \n" +
                "                SELECT id,trackNumber          \n" +
                "                FROM customer_packing_slip_track_number          \n" +
                "                WHERE refCustPackingSlipID = invoiceID          \n" +
                "                AND isDeleted = 0;          \n" +
                "  \n" +
                "                -- sales commission attribute    \n" +
                "                SELECT cca.id,          \n" +
                "		    cca.refCustPackingSlipDetID,          \n" +
                "                    cca.unitPrice,       \n" +
                "                    cca.commissionPercentage,          \n" +
                "                    cca.commissionValue,          \n" +
                "                    cca.quoted_commissionPercentage,          \n" +
                "                    cca.quoted_commissionValue,          \n" +
                "                    cca.poQty,          \n" +
                "                    cca.partId,  \n" +
                "                    cca.quotedQty,  \n" +
                "                    cca.type,  \n" +
                "                    cca.rfqAssyID,  \n" +
                "                    cca.commissionCalculateFrom,  \n" +
                "                    cca.salesCommissionNotes,          \n" +
                "                    cca.refComponentSalesPriceBreakID,          \n" +
                "                    cca.quoted_unitPrice      \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca          \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID          \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "                 -- sales commission child attribute        \n" +
                "                SELECT cca.id,          \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,          \n" +
                "                    cca.unitPrice,          \n" +
                "                    cca.refQuoteAttributeId,          \n" +
                "                    cca.commissionPercentage,          \n" +
                "                    cca.commissionValue,          \n" +
                "                    cca.org_commissionPercentage,          \n" +
                "                    cca.org_commissionValue,          \n" +
                "                    cca.category,          \n" +
                "                    cca.partId,          \n" +
                "                    cca.refComponentSalesPriceBreakID,          \n" +
                "                    cca.org_unitPrice,          \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,          \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,          \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName          \n" +
                "				FROM customer_packingslip_commission_attribute cca          \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0          \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0          \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID          \n" +
                "                 AND cca.isdeleted=0;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                                  \n" +
                "	IN pTransType VARCHAR(5),                                          \n" +
                "	IN pInvoiceType VARCHAR(1),                                              \n" +
                "	IN pInvoiceID INT,              	                                              \n" +
                "    IN pInvData JSON,                                              \n" +
                "    IN pPackingSlipID INT,                                              \n" +
                "	IN puserID INT,                                                        \n" +
                "	IN puserRoleID INT ,                                                    \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),                  \n" +
                "    IN pSystemId VARCHAR(20)  ,                \n" +
                "    IN pPackingSlipType INT                \n" +
                ")  \n" +
                "BEGIN                                                               \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                            \n" +
                "	DECLARE v_prefix VARCHAR(20);                                                    \n" +
                "	DECLARE vTermsDays INT ;   \n" +
                "	DECLARE v_incrementI INT;    \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                          \n" +
                "	SELECT 	*                                                                                           \n" +
                "	FROM 	JSON_TABLE(                                                   \n" +
                "			pInvData,                                                                                          \n" +
                "			\"$[*]\" COLUMNS(    			                                             \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                              \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                              \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                               \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                                              \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                                          \n" +
                "				`status` INT PATH \"$.status\",                                              \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                              \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                          \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                          \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                               \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                          \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                                  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                                \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                                \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                                \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                                \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                                \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                              \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                              \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                              \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                              \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                              \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                              \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                                              \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                              \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                              \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                              \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                              \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                              \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                          \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                                \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                           \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                                \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                           \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                          \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\",              \n" +
                "                `revision` VARCHAR(10) PATH \"$.revision\",              \n" +
                "                `isZeroValue` TINYINT PATH \"$.isZeroValue\",            \n" +
                "                `isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",         \n" +
                "                `poRevision` VARCHAR(50) PATH \"$.poRevision\" ,    \n" +
                "                `isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",    \n" +
                "                `agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\"    \n" +
                "			)                                                \n" +
                "		) AS CustInv_JT;                        \n" +
                "  \n" +
                "		SELECT  termsDays INTO 	vTermsDays                                              \n" +
                "		FROM genericCategory gc                                               \n" +
                "		WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                              \n" +
                "		AND categoryType = 'Payment Terms';                 \n" +
                "	  IF(pInvoiceID IS NULL)THEN                \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                                    \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                                    \n" +
                "			FROM `identity`                                                    \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                                   \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                    \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                    \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                    \n" +
                "				packingSlipComment,headerComment,sorevision,                                                    \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                                    \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                                  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                               \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                                  \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,              \n" +
                "                contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision)                                                         \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                    \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                    \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                               \n" +
                "					packingSlipComment,headerComment,sorevision,                                                    \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                                   \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                                  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                              \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                                  \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,              \n" +
                "                    contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision                            \n" +
                "			FROM temp_customerInvoice ;			                                              \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                                      \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                                     \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                                     \n" +
                "		 WHERE id= pPackingSlipID;                                                        \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN             \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order            \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                                    \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                                  \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                                    \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                                    \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,              \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                        \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                                    \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,          \n" +
                "                    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),            \n" +
                "                    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                                 \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,          \n" +
                "                    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                                  \n" +
                "					puserRoleID,puserRoleID,          \n" +
                "                    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                                    \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,          \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),          \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),          \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),          \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),              \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),          \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,           \n" +
                "                    cpd.isZeroValue                                                  \n" +
                "			FROM customer_packingslip_det   cpd                  \n" +
                "            LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0          \n" +
                "            LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0          \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                                     \n" +
                "			AND cpd.isDeleted = 0;                      \n" +
                "  \n" +
                "            IF pPackingSlipType = 2 THEN -- PO/SO INV    \n" +
                "            INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                    \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,                    \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,                    \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)                    \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,                  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,                    \n" +
                "							sca.quoted_commissionValue, sca.poQty, sca.partId, sca.refComponentSalesPriceBreakID,                    \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes                     \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca                    \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                      \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;     \n" +
                "					-- child records              \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                    \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                    \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                    \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                    \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,                    \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                    \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                    \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                     \n" +
                "					FROM salesorderdet_commission_attribute sca                    \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                      \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;                      \n" +
                "  \n" +
                "             ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV           \n" +
                "					-- SP to generate line wise sales commission.                \n" +
                "                    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);                \n" +
                "  -- Sales Price details for Part master  \n" +
                "                    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                    \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                    \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                    \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                    \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,                    \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                    \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                    \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                     \n" +
                "					FROM temp_salesCommission sca                 \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                      \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;    \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;                                                                                \n" +
                "	                     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS    \n" +
                "	                       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca   \n" +
                "	                       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                      \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;  \n" +
                "			SET v_incrementI=0;  \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO  \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;  \n" +
                "  \n" +
                "				SELECT SUM(unitPrice),SUM(commissionValue) INTO @totalUnitPrice,@totalCommissionValue FROM   \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				SET v_commissionPercentage=(@totalCommissionValue*100)/(@totalUnitPrice);  \n" +
                "				SET @totalCommissionValue=ROUND((v_commissionPercentage * @totalUnitPrice)/100,5);  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                    \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                    \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                    \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)                    \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,                    \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                    \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,                    \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID                     \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;  \n" +
                "					-- sales commission child details  \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;  \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                    \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                    \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                    \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                    \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,                    \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                    \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                    \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                     \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;   \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;  \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;    \n" +
                "             END IF;                       \n" +
                "		END IF;                                              \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                \n" +
                "        /*        \n" +
                "		UPDATE `identity`                                                    \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                                    \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                    \n" +
                "		*/        \n" +
                "	  ELSE                                                    \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                              \n" +
                "			UPDATE customer_packingslip cp                                              \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                              \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                                              \n" +
                "				cp.`status`= tci.status,  			                                                    \n" +
                "				cp.subStatus = tci.subStatus,                                              \n" +
                "                cp.headerComment= tci.headerComment,                                              \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                              \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,                                    \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "                cp.updatedBy = puserID,                                    \n" +
                "                cp.updateByRoleId = puserRoleID  ,                          \n" +
                "                cp.billingAddress= tci.billingAddress,                                              \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                              \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                          \n" +
                "                cp.contactPersonId = tci.contactPersonId,                          \n" +
                "                cp.billToId = tci.billToId,                                \n" +
                "                cp.shipToId  = tci.shipToId,                                \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,              \n" +
                "                cp.revision = LPAD(tci.revision,2,'0'),              \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,            \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),        \n" +
                "                cp.poRevision = tci.poRevision        \n" +
                "			WHERE cp.id=pInvoiceID            \n" +
                "            AND cp.transType = pTransType;                                                 \n" +
                "        ELSE                                                \n" +
                "        # in case of tariff invoice & credit memo update all other field                                              \n" +
                "			UPDATE customer_packingslip  cp                                                \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                              \n" +
                "			SET	cp.status= tci.status,                                              \n" +
                "				cp.subStatus= tci.subStatus,                                              \n" +
                "				cp.poNumber= tci.poNumber,                                              \n" +
                "				cp.poDate= tci.poDate,                                              \n" +
                "				cp.soNumber= tci.soNumber,                                              \n" +
                "				cp.soDate= tci.soDate,                                              \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                                              \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                                              \n" +
                "				cp.invoiceDate= tci.invoiceDate,                                              \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                                              \n" +
                "				cp.headerComment= tci.headerComment,                                              \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                              \n" +
                "				cp.billingAddress= tci.billingAddress,                                              \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                              \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                              \n" +
                "				cp.totalAmount= IFNULL(tci.totalAmount,0),                                              \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                                              \n" +
                "				cp.termsId= tci.termsId,               \n" +
                "                cp.termsDays = vTermsDays,              \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                                          \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                          \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                                    \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "                cp.updatedBy = puserID,                                    \n" +
                "                cp.updateByRoleId = puserRoleID,                                  \n" +
                "                cp.rmaNumber= tci.rmaNumber,                                \n" +
                "                cp.billToId = tci.billToId,                                \n" +
                "                cp.shipToId  = tci.shipToId,                                \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,                              \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,                          \n" +
                "                cp.contactPersonId = tci.contactPersonId,              \n" +
                "                cp.revision =  LPAD(tci.revision,2,'0'),              \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0),            \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),        \n" +
                "                cp.poRevision = tci.poRevision ,    \n" +
                "                cp.isMarkForRefund = tci.isMarkForRefund,     \n" +
                "                cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0)    \n" +
                "			 WHERE cp.id = pInvoiceID            \n" +
                "             AND cp.transType = pTransType;                                                 \n" +
                "  \n" +
                "            END IF;                                              \n" +
                "  \n" +
                "	  END IF;                                                       \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                                        \n" +
                "       -- detail Id                                                \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                                \n" +
                "      FROM customer_packingslip_det                                                 \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                                 \n" +
                "      AND isDeleted = 0;                                                \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4880,'2.00','V1',' User Story 34753: Implement Sales Commission Changes Suggested by JV - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4880:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponents`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveWhereUsedComponents`(              \n" +
                "	IN pPageIndex INT,              \n" +
                "	IN pRecordPerPage INT,              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pPartID INT            \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT;              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);              \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;              \n" +
                "	set @temp_Sproc_RetriveWhereUsedComponents1 = concat(\"            \n" +
                "		select id, rfqLineItemsID, mfgPN, PIDCode, nickname, partID, refDesig, qpa,dnpQty, dnpDesig, MID, mfgCode, mfgType, partStatus, partStatusValue, totalUsage, annualUsage, rohsIcon, rohsName, whereUsed, isBOM, isCustom            \n" +
                "			from            \n" +
                "			(SELECT 	rla.id id, 		rla.rfqLineItemsID,              \n" +
                "						c.mfgPN , 		c.PIDCode ,		c.nickname,              \n" +
                "						rla.partID, 	rl.refDesig,	IFNULL(rl.qpa,0) qpa, IFNULL(rl.dnpQty,0) dnpQty, rl.dnpDesig ,          \n" +
                "						m.id MID, 		m.mfgCode,		m.mfgType,              \n" +
                "						c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,              \n" +
                "						0 totalUsage,              \n" +
                "						0 annualUsage,              \n" +
                "						ro.rohsIcon,              \n" +
                "						ro.name rohsName,              \n" +
                "						'Bill of Material                                 ' whereUsed,              \n" +
                "						true isBOM,              \n" +
                "						c.isCustom,            \n" +
                "                        rank() over(partition by rla.rfqLineItemsID, c.id, rla.partID, rl.refDesig order by rla.id) rnk            \n" +
                "				FROM rfq_lineitems_alternatepart AS rla              \n" +
                "				inner JOIN rfq_lineitems AS rl ON rl.id = rla.rfqLineItemsID              \n" +
                "				inner JOIN component AS c ON c.id = rla.partID AND c.isDeleted = 0            \n" +
                "				inner JOIN mfgCodemst AS m ON m.id = c.mfgcodeID AND  m.isDeleted = 0            \n" +
                "				inner JOIN rfq_rohsmst ro ON ro.id = c.RoHSStatusID    \n" +
                "				WHERE (rla.mfgPNID = \",pPartID,\"  OR              \n" +
                "					  rla.distMfgPNID = \",pPartID,\"  OR              \n" +
                "                      rl.custPNID = \",pPartID,\" OR      \n" +
                "					  exists (            \n" +
                "							SELECT 1            \n" +
                "							FROM rfq_lineitems_alternatepart AS cassy              \n" +
                "							WHERE cassy.partID = rla.mfgPNID            \n" +
                "							AND 	(cassy.mfgPNID = \",pPartID,\" OR  cassy.distMfgPNID = \",pPartID,\")            \n" +
                "							AND  	cassy.isDeleted = 0            \n" +
                "					  ))            \n" +
                "					AND  rla.isDeleted = 0      \n" +
                "                    and rl.isDeleted = 0) a            \n" +
                "			where rnk = 1\");            \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE componentResult AS              \n" +
                "							\",@temp_Sproc_RetriveWhereUsedComponents1,\" \");              \n" +
                "    PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "    UPDATE componentResult c              \n" +
                "		SET c.totalUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)            \n" +
                "										FROM	workorder w              \n" +
                "										WHERE	w.partID = c.partID            \n" +
                "										AND 	w.isDeleted = 0            \n" +
                "										), 0));            \n" +
                "  \n" +
                "	UPDATE 	componentResult c              \n" +
                "		SET c.annualUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)             \n" +
                "									FROM (            \n" +
                "                                    SELECT 	w.buildQty, TIMESTAMPDIFF(MONTH, w.createdAt, fun_DatetimetoUTCDateTime()) createdBefore            \n" +
                "									FROM	workorder w              \n" +
                "									WHERE	w.partID = c.partID            \n" +
                "									AND 	w.isDeleted = 0            \n" +
                "                                    ) w WHERE w.createdBefore <= 12), 0));          \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsed ASC\") ;              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN              \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE                \n" +
                "		SET rowNumWhere = '';                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	/* to get total count of rows */                \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentResult where \", pWhereClause );                \n" +
                "	PREPARE query4 FROM @SQLStatement4;                \n" +
                "	EXECUTE query4;                \n" +
                "	DEALLOCATE PREPARE query4;                \n" +
                "  \n" +
                "	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query5 FROM @SQLStatement5;                \n" +
                "	EXECUTE query5;                \n" +
                "	DEALLOCATE PREPARE query5;                \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4881,'2.00','V1',' Fetch DNP RefDes/QPA from BOM list - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4881:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD COLUMN `markedForRefund` TINYINT NOT NULL DEFAULT '0',  \n" +
                "ADD COLUMN `markedForRefundAmt` decimal(18,8) NULL;  \n" +
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "ADD COLUMN `acctId` INT NULL AFTER `refPaymentID`,  \n" +
                "ADD INDEX `FK_packingslip_invoice_payment_acctId_idx` (`acctId` ASC) VISIBLE;  \n" +
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "ADD CONSTRAINT `FK_packingslip_invoice_payment_acctId`  \n" +
                "  FOREIGN KEY (`acctId`)  \n" +
                "  REFERENCES `acct_acctmst` (`acct_id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4882,'2.00','V1','User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4882:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE isDeleted = 0 AND pageName = 'Supplier Accounting';  \n" +
                "INSERT INTO `page_detail`(`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Refund', '0', '0', 'Financialmanagement.supplieraccounting.refund', 'app.transaction.invoicerefund', '/supplierinvoice/refund', 'Refund', @pageID, '0', '13.61', 'icons-supplier-refund', '1', '1', '0', '1', 'Supplier Refund', '1', '0', '0', '0');  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE isDeleted = 0 AND pageName = 'Refund';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                " VALUES ('Manage Supplier Refund', '0', '0', 'app.transaction.managerefund', '/managerefund', 'Manage Supplier Refund', @pageID, '0', 'icons-add-supplier-refund', '1', '1', '0', '0', 'Supplier Refund / Discount', '0', '0', '0', '0');  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE isDeleted = 0 AND pageName = 'Manage Supplier Refund';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                " VALUES ('Manage Supplier Refund Detail', '0', '0', 'app.transaction.managerefund.detail', '/detail/:id', 'Manage Supplier Refund Detail', @pageID, '0', 'icons-add-supplier-refund', '1', '1', '0', '1', 'Supplier Refund / Discount', '1', '0', '0', '0');  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE isDeleted = 0 AND pageName = 'Manage Supplier Refund';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                " VALUES ('Manage Supplier Refund Document', '0', '0', 'app.transaction.managerefund.document', '/documents/:id', 'Manage Supplier Refund Document', @pageID, '0', 'icons-add-supplier-refund', '1', '1', '0', '1', 'Supplier Refund / Discount', '0', '0', '0', '0');  \n" +
                "INSERT INTO identity(`type`, `prefix`, `maxvalue`, `numberLength`, remark, isdeleted, createdby, updatedBy,createByRoleId,updateByRoleId, systemGenerated)  \n" +
                "VALUES ('SupplierRefundSystemID','SR',1,8,'Supplier Refund Transaction SystemID max value',0,1,1,1,1,1);  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4883,'2.00','V1','User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4883:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "drop procedure if exists `Sproc_GetOldCreditDebitMemoData`;  \n" +
                "CREATE PROCEDURE `Sproc_GetOldCreditDebitMemoData`(      \n" +
                "    IN pPackingSlipMasId INT,      \n" +
                "    IN pPackingSlipDetId INT,      \n" +
                "    IN pReceiptType varchar(1)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	SELECT 	a.id,      \n" +
                "			SUM(a.extendedPrice) extendedPrice,              \n" +
                "			a.refPackingSlipMaterialRecID,              \n" +
                "			a.refPackingSlipDetId,              \n" +
                "			GROUP_CONCAT(a.approveNote SEPARATOR '###') approveNote,              \n" +
                "			b.id packingSlipId,              \n" +
                "			b.status,              \n" +
                "			b.receiptType,              \n" +
                "			b.packingSlipNumber,              \n" +
                "			b.packingSlipDate,              \n" +
                "			b.creditMemoNumber,             \n" +
                "			b.creditMemoDate,             \n" +
                "			b.debitMemoNumber,              \n" +
                "			b.debitMemoDate,            \n" +
                "            b.refSupplierCreditMemoNumber,      \n" +
                "			(SELECT COUNT(1) FROM (SELECT id FROM packing_slip_material_receive_det c WHERE c.refPackingSlipMaterialRecID = b.id AND c.isDeleted = 0 GROUP BY c.refPackingSlipDetId) a) noOfLineInPackingSlip,          \n" +
                "            b.lockStatus,        \n" +
                "            h1.status haltStatus,      \n" +
                "            inv_det.packingSlipSerialNumber,    \n" +
                "            (select count(1) from packingslip_invoice_payment_det det    \n" +
                "			  where det.isPaymentVoided = 0    \n" +
                "			    and exists (select 1 from packingslip_invoice_payment a where a.id = det.refPayementid and a.refPaymentMode = 'P' )    \n" +
                "			    and det.refPackingslipInvoiceID = a.refPackingSlipMaterialRecID) totalPaymentCount,  \n" +
                "			b.markedForRefund  \n" +
                "	   FROM packing_slip_material_receive_det a               \n" +
                "	LEFT JOIN packing_slip_material_receive b ON a.refPackingSlipMaterialRecID = b.id AND b.isDeleted = 0              \n" +
                "    left join packing_slip_material_receive_det inv_det ON inv_det.id = a.refPackingSlipDetId      \n" +
                "    left join holdunholdtrans h1 ON h1.refTransId = a.refPackingSlipMaterialRecID and h1.status = 'H' and h1.refType in ('SDM','SCM')        \n" +
                "	  WHERE b.refParentCreditDebitInvoiceno = ifnull(pPackingSlipMasId, b.refParentCreditDebitInvoiceno)      \n" +
                "		AND a.refPackingSlipDetId = ifnull(pPackingSlipDetId, a.refPackingSlipDetId)      \n" +
                "        and b.receiptType = ifnull(pReceiptType, b.receiptType)      \n" +
                "		and a.isDeleted = 0      \n" +
                "	GROUP BY a.id, a.packingSlipSerialNumber, a.refPackingSlipMaterialRecID, a.refPackingSlipDetId, b.id, b.status, b.receiptType, b.packingSlipNumber,      \n" +
                "			b.packingSlipDate, b.creditMemoNumber, b.creditMemoDate, b.debitMemoNumber, b.debitMemoDate, b.refSupplierCreditMemoNumber,      \n" +
                "            b.lockStatus, h1.status      \n" +
                "	order by inv_det.packingSlipSerialNumber;      \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "    DECLARE vCurrentDate DATE;    \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;    \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                                      \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                          \n" +
                "			SELECT 		p.id,                                        \n" +
                "					p.systemId,                                    \n" +
                "					p.poNumber,                                          \n" +
                "                    p.poDate,        \n" +
                "                    p.refPurchaseOrderID poId,                    \n" +
                "					p.mfgCodeID,                                          \n" +
                "					p.supplierSONumber,                                          \n" +
                "                    p.soDate,        \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,                \n" +
                "					p.packingSlipDate,                                          \n" +
                "					p.invoiceNumber,                                          \n" +
                "                    p.lockStatus invoiceLockStatus,                \n" +
                "					p.invoiceDate,                              \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                              \n" +
                "					p.creditMemoNumber,                \n" +
                "                    p.lockStatus creditMemoLockStatus,                \n" +
                "					p.creditMemoDate,                                          \n" +
                "					p.debitMemoNumber,                                          \n" +
                "                    p.refSupplierCreditMemoNumber,        \n" +
                "                    p.lockStatus debitMemoLockStatus,                \n" +
                "					p.debitMemoDate,                                          \n" +
                "					p.receiptDate,                                          \n" +
                "					p.description,                                          \n" +
                "					p.billToAddress,                                          \n" +
                "					p.shipToAddress,                                          \n" +
                "					p.poVersion,    \n" +
                "					p.isDeleted,    \n" +
                "					p.receiptType,    \n" +
                "					p.`status`,    \n" +
                "					p.applyDate,    \n" +
                "					p.refParentCreditDebitInvoiceno,    \n" +
                "					p.refPackingSlipNumberForInvoice,    \n" +
                "					p.invoiceTotalDue,    \n" +
                "					p.isTariffInvoice,    \n" +
                "					p.creditMemoType,    \n" +
                "                    (    \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN    \n" +
                "								'Invoice Credit Memo (Auto)'    \n" +
                "							WHEN p.creditMemoType = 'MC' THEN    \n" +
                "								'MISC Credit Memo'    \n" +
                "							WHEN p.creditMemoType = 'RC' THEN    \n" +
                "								'RMA Credit Memo'    \n" +
                "							WHEN p.creditMemoType = 'ID' THEN    \n" +
                "								'Invoice Debit Memo (Auto)'    \n" +
                "							WHEN p.creditMemoType = 'MD' THEN    \n" +
                "								'MISC Debit Memo'    \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN    \n" +
                "								'Invoice'    \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN    \n" +
                "								'MISC Invoice'    \n" +
                "						END    \n" +
                "					) subTypeValue,    \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,    \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,    \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,    \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                            \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                                     \n" +
                "                    fun_getMfgNameByID(p.mfgCodeID) supplierName,                      \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,                        \n" +
                "					fun_getMfgCodeByID(p.mfgCodeID) supplierCodeName,                                          \n" +
                "					(                                                \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                              \n" +
                "						FROM 	vu_genericfilescount g                                                 \n" +
                "						WHERE 	g.refTransID = p.id                                                 \n" +
                "								AND                                               \n" +
                "								(                                              \n" +
                "									CASE                                               \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15                                              \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16                                                \n" +
                "										ELSE g.entityID = -13                                              \n" +
                "									END                                              \n" +
                "								)                                       \n" +
                "					) invoiceDocCount,                                                \n" +
                "					(                                                \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                                 \n" +
                "						FROM 	vu_genericfilescount g                                                 \n" +
                "						WHERE 	g.refTransID = psm.id                                     \n" +
                "								AND g.entityID = -14                                       \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'                                           \n" +
                "					) packingSlipDocCount,                                                                 \n" +
                "					pd.itemReceived,                                                                      \n" +
                "					pd.otherChargesItemReceived,                                                                            \n" +
                "					pd.itemDisapproved,                                          \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,                                          \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,                                          \n" +
                "					ps.status parentInvoiceStatus,                                          \n" +
                "					ps.invoiceNumber refInvoiceNumber,                \n" +
                "                    ps.lockStatus refInvoiceLockStatus,                \n" +
                "					ps.creditMemoType parentCreditMemoType,                                          \n" +
                "					pd.totalExtendedAmount,                            \n" +
                "                    pd.totalDiscount,                            \n" +
                "					pe.totalCreditAmount,                                          \n" +
                "					pe.totalDebitAmount,                                          \n" +
                "					(                                          \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                                          \n" +
                "					) amountToPay,            \n" +
                "                    pd.totalExtendedReceivedPrice,            \n" +
                "					pd.packingDetailNote,                                          \n" +
                "					pd.approveLineCount,                                          \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN                                                  \n" +
                "											p.debitMemoDate                                                  \n" +
                "										WHEN p.receiptType = 'C' THEN                                                  \n" +
                "											p.creditMemoDate                                                  \n" +
                "										ELSE p.invoiceDate                                                          \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,                                          \n" +
                "					g.gencCategoryName paymentTermName,                                          \n" +
                " 					m.paymentTermsID paymentTermsID,                                          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "					get_totalSupplierInvoicePaidAmountById(p.id) paidAmount,  \n" +
                "                    get_totalSupplierInvoiceRefundAmountById(p.id) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					p.invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))            \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,          \n" +
                "					h1.refType as haltRefType,          \n" +
                "                    h1.status as haltStatus,          \n" +
                "                    (CASE WHEN h1.status = 'H' THEN          \n" +
                "								'Halted'      \n" +
                "							ELSE ''          \n" +
                "						END          \n" +
                "					) AS haltStatusText,       \n" +
                "                    (CASE          \n" +
                "							WHEN h1.status = 'H' THEN          \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))          \n" +
                "							ELSE ''          \n" +
                "						END          \n" +
                "					) AS haltReason,          \n" +
                "                    psh1.refType as haltRefTypeRefInv,          \n" +
                "                    psh1.status as haltStatusRefInv,          \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN          \n" +
                "								'Halted'      \n" +
                "							ELSE ''          \n" +
                "						END          \n" +
                "					) AS haltReasonRefInvText,      \n" +
                "                    (CASE          \n" +
                "							WHEN psh1.status = 'H' THEN          \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))          \n" +
                "							ELSE ''          \n" +
                "						END          \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 1 then 'Yes'  \n" +
                "						else 'No' end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p                \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID              \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id          \n" +
                "								and h1.id = (select max(h2.id)          \n" +
                "											 from holdunholdtrans h2          \n" +
                "											where h2.refTransId = h1.refTransId          \n" +
                "											  and h2.refType in ('SINV','SCM','SDM')          \n" +
                "											  and h2.isDeleted = 0)          \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID              \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0          \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno          \n" +
                "								and psh1.id = (select max(h2.id)          \n" +
                "											 from holdunholdtrans h2          \n" +
                "											where psh1.refTransId = h2.refTransId          \n" +
                "											  and h2.refType in ('SINV')          \n" +
                "											  and h2.isDeleted = 0)          \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                                          \n" +
                "			left join (          \n" +
                "							select 	a.refPackingSlipMaterialRecID,          \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,          \n" +
                "								sum(a.itemReceived) itemReceived,          \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,          \n" +
                "								sum(a.itemDisapproved) itemDisapproved,          \n" +
                "								sum(a.approveLineCount) approveLineCount,          \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,          \n" +
                "                                sum(discount) totalDiscount,          \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice          \n" +
                "							from 	(            \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,          \n" +
                "										psm.packingSlipSerialNumber,          \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,          \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,          \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/                  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,                  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,                  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                          \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                          \n" +
                "										extendedPrice,                            \n" +
                "                                        discount,            \n" +
                "										extendedReceivedPrice            \n" +
                "									FROM 	packing_slip_material_receive_det psm                                          \n" +
                "									WHERE 	psm.isDeleted = 0                                          \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                          \n" +
                "								) a                                                                              \n" +
                "							group by a.refPackingSlipMaterialRecID                                                                    \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                                                              \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(get_totalSupplierInvoiceRefundAmountById(ps.id)) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isDeleted = 0  \n" +
                "							   and pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4884,'2.00','V1','User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4884:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(10),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);                \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "  		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;                                             \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');                \n" +
                "	END IF;	                                     \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND            \n" +
                "			EXISTS (select 1            \n" +
                "					   from packing_slip_material_receive psd            \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id            \n" +
                "					  where psd.isDeleted = 0            \n" +
                "						and pdet.refPayementid = inv.id            \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"            \n" +
                "				)'              \n" +
                "		);                \n" +
                "	END IF;	                                     \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');                \n" +
                "	END IF;	                                         \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                \n" +
                "	ELSEIF (pFromDate IS NOT NULL AND pToDate IS NULL) THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                                          \n" +
                "	ELSEIF (pToDate IS NOT NULL AND pFromDate IS NULL) THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                                          \n" +
                "	END IF;                                         \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"                \n" +
                "		SELECT		inv.id,            \n" +
                "				inv.systemId,          \n" +
                "				inv.mfgcodeID,                \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,              \n" +
                "				fun_getMfgCodeAndNameByID(inv.mfgcodeID) supplierCodeName,                \n" +
                "				inv.isPaymentVoided,                        \n" +
                "				case 	when inv.isPaymentVoided = 0 then                        \n" +
                "						'Paid'                        \n" +
                "					else 	              \n" +
                "						'Voided'               \n" +
                "				end isPaymentVoidedConvertedValue,                        \n" +
                "				inv.voidPaymentReason,                        \n" +
                "				inv.refVoidedPaymentNumber,    \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c     \n" +
                "					where c.refPaymentMode = 'P' and c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,    \n" +
                "				inv.paymentNumber,                                          \n" +
                "				inv.bankName,                                          \n" +
                "				inv.bankAccountNo,                                          \n" +
                "				inv.paymentType,                                          \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,                                    \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,                                    \n" +
                "				inv.paymentDate,                                    \n" +
                "				invdet.invoiceAmount,                                    \n" +
                "				inv.paymentAmount,                                    \n" +
                "				inv.payToAddress payToAddress,                                                   \n" +
                "				inv.payToName,                  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'    \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'    \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'    \n" +
                "					else null end    \n" +
                "				) lockStatusValue,    \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,    \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "        PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                "drop function if exists `get_totalSupplierInvoiceRefundAmountById`;  \n" +
                "CREATE FUNCTION `get_totalSupplierInvoiceRefundAmountById`(pPackingSlipId INT) RETURNS decimal(18,8)  \n" +
                "BEGIN  \n" +
                "	DECLARE vAmount DECIMAL(18,8);  \n" +
                "		/*get total paid amount from detail transaction table*/  \n" +
                "		select ifnull(sum(b.paymentAmount),0) into vAmount  \n" +
                "		  from packingslip_invoice_payment_det b  \n" +
                "		 where b.refPackingslipInvoiceID = pPackingSlipId  \n" +
                "           and exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'RR')  \n" +
                "           and b.isPaymentVoided = 0  \n" +
                "           and b.isDeleted = 0  \n" +
                "           and b.refCustPackingslipInvoiceID is null;  \n" +
                "    return vAmount;  \n" +
                "end;  \n" +
                "drop FUNCTION if exists `get_totalSupplierInvoicePaidAmountById`;  \n" +
                "CREATE FUNCTION `get_totalSupplierInvoicePaidAmountById`(pPackingSlipId INT) RETURNS decimal(18,8)  \n" +
                "BEGIN        \n" +
                "	DECLARE vAmount DECIMAL(18,8);        \n" +
                "		/*get total paid amount from detail transaction table*/    \n" +
                "		select ifnull(sum(b.paymentAmount),0) into vAmount    \n" +
                "		  from packingslip_invoice_payment_det b    \n" +
                "		 where b.refPackingslipInvoiceID = pPackingSlipId    \n" +
                "		   and exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'P')  \n" +
                "           and b.isPaymentVoided = 0    \n" +
                "           and b.isDeleted = 0    \n" +
                "           and b.refCustPackingslipInvoiceID is null;    \n" +
                "    return vAmount;        \n" +
                "end;  \n" +
                "drop procedure if exists `Sproc_GetPackingSlipInvoiceHeaderSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoiceHeaderSearch`(    \n" +
                "	pReceiptType varchar(2),    \n" +
                "    pSearchQery varchar(1000)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	if pReceiptType in ('SP','RR') then /*SP = supplier payment, rr = Supplier Refund (refund receivable)*/  \n" +
                "		Select a.*  \n" +
                "		from (  \n" +
                "				Select 	p.id,  \n" +
                "						(Case when (pReceiptType in ('SP','RR')) then  \n" +
                "									concat(p.paymentNumber, ' | ', fun_ApplyCommonDateFormat(p.paymentDate), ' | ', fun_getMfgCodeAndNameByID(mfgcodeID)) /*Supplier Payment and Refund: PAY# | Payment Date | Supplier (Code) Name */  \n" +
                "								else  \n" +
                "									null  \n" +
                "						end) formattedTransNumber  \n" +
                "				from	packingslip_invoice_payment p  \n" +
                "				Where 	p.refPaymentMode = case when pReceiptType = 'SP' then 'P'  \n" +
                "												else pReceiptType end  \n" +
                "				and 	p.isDeleted = 0  \n" +
                "			) as a    \n" +
                "			where (case when pSearchQery is not null then    \n" +
                "							a.formattedTransNumber like concat('%', pSearchQery, '%')    \n" +
                "						else 1 = 0    \n" +
                "					end);    \n" +
                "    else /*Supplier packing slip, invoice, CM, DM, RMA*/  \n" +
                "		Select a.*     \n" +
                "		from (    \n" +
                "				Select 	p.id,    \n" +
                "						(Case 	when (pReceiptType = 'P') then     \n" +
                "									concat(p.packingSlipNumber, ' | ', p.poNumber, ' | (', m.mfgCode, ') ', m.mfgName) /*Material Receipt: PS# | PO# | Supplier (Code) Name */    \n" +
                "								when (pReceiptType = 'I') then     \n" +
                "									concat(p.invoiceNumber, ' | ', p.packingSlipNumber, ' | ', p.poNumber, ' | (', m.mfgCode, ') ', m.mfgName) /*Supplier Invoice: INV# | PS# | PO# | Supplier (Code) Name*/    \n" +
                "								when (pReceiptType = 'C') then     \n" +
                "									concat(p.creditMemoNumber, ' | ', p.poNumber, ' | (', m.mfgCode, ') ', m.mfgName) /*Supplier Credit Memo: CM# | PO# | Supplier (Code) Name */    \n" +
                "								when (pReceiptType = 'D') then     \n" +
                "									concat(p.debitMemoNumber, ' | ', p.poNumber, ' | (', m.mfgCode, ') ', m.mfgName) /*Supplier Debit Memo: DM# | PO# | Supplier (Code) Name */    \n" +
                "								when (pReceiptType = 'R') then     \n" +
                "									concat(p.poNumber, ' | ', p.packingSlipNumber, ' | (', m.mfgCode, ') ', m.mfgName) /*Supplier RMA: RMA# | PS# | Supplier (Code) Name */    \n" +
                "								else    \n" +
                "									null    \n" +
                "						end) formattedTransNumber    \n" +
                "				from	packing_slip_material_receive p    \n" +
                "				inner join mfgCodeMst m on p.mfgCodeID = m.id    \n" +
                "				Where 	p.receiptType = pReceiptType    \n" +
                "				and 	p.isDeleted = 0    \n" +
                "		) as a    \n" +
                "		where (case when pSearchQery is not null then    \n" +
                "						a.formattedTransNumber like concat('%', pSearchQery, '%')    \n" +
                "					else 1 = 0    \n" +
                "				end);    \n" +
                "	end if;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetAllSupplierMemoListForRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllSupplierMemoListForRefund`(  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vIsPaymentVoided tinyint;  \n" +
                "    DECLARE vMfgCodeID int;  \n" +
                "	if pPaymentID is not null then  \n" +
                "		select isPaymentVoided, mfgCodeID into vIsPaymentVoided, vMfgCodeID  \n" +
                "          from packingslip_invoice_payment x  \n" +
                "         where x.id = pPaymentID;  \n" +
                "  \n" +
                "		select true isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "			  from (select pid.id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "									else '' end memoType,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "									else '' end memoNumber,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "									else '' end memoDate,  \n" +
                "							a.markedForRefundAmt,  \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,  \n" +
                "                            paymentAmount paymentAmountForSelectedInvoice  \n" +
                "					  from packing_slip_material_receive a  \n" +
                "					  JOIN packingslip_invoice_payment_det pid ON pid.refPackingslipInvoiceID = a.id        \n" +
                "					 where a.receiptType in ('C','D')  \n" +
                "					   and a.mfgCodeID = vMfgCodeID  \n" +
                "					   and pid.refPayementid = pPaymentID  \n" +
                "					   and exists (SELECT 1 FROM packingslip_invoice_payment X WHERE x.id = pid.refPayementid AND x.refPaymentMode = 'RR')  \n" +
                "					   and a.markedForRefund = 1  \n" +
                "					   and a.isDeleted = 0  \n" +
                "                       and pid.isDeleted = 0) a  \n" +
                "		union all  \n" +
                "		select false isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "			  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "									else '' end memoType,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "									else '' end memoNumber,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "									else '' end memoDate,  \n" +
                "							a.markedForRefundAmt,  \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,  \n" +
                "                            0 paymentAmountForSelectedInvoice  \n" +
                "					  from packing_slip_material_receive a  \n" +
                "					 where a.receiptType in ('C','D')  \n" +
                "					   and a.mfgCodeID = vMfgCodeID  \n" +
                "					   and not exists (select 1  \n" +
                "										 from packingslip_invoice_payment x  \n" +
                "										 join packingslip_invoice_payment_det pid ON pid.refPayementid = x.id  \n" +
                "										where pid.refPackingslipInvoiceID = a.id  \n" +
                "										  AND x.refPaymentMode = 'RR'  \n" +
                "										  and x.isPaymentVoided = 0  \n" +
                "                                          and x.isDeleted = 0  \n" +
                "                                          and pid.isDeleted=0)  \n" +
                "					   and a.markedForRefund = 1  \n" +
                "					   /*bellow case added to ignore new rows if payment is voided*/  \n" +
                "					   and case when vIsPaymentVoided = 0 then  \n" +
                "									1=1  \n" +
                "								when vIsPaymentVoided = 1 then  \n" +
                "									1=2  \n" +
                "								end  \n" +
                "					   and a.isDeleted = 0) a  \n" +
                "					 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;  \n" +
                "		select id, systemId, mfgcodeID, fun_getMfgCodeAndNameByID(mfgcodeID) mfgName,  \n" +
                "				paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID, bankAccountNo, bankName, remark, isPaymentVoided, voidPaymentReason, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode, documentPath, depositBatchNumber, offsetAmount, refGencTransModeID, acctId  \n" +
                "		 from packingslip_invoice_payment  \n" +
                "		where id = pPaymentID;  \n" +
                "    else  \n" +
                "		select a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "		  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "						case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "							when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "								else '' end memoType,  \n" +
                "						case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "							when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "								else '' end memoNumber,  \n" +
                "						case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "							when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "								else '' end memoDate,  \n" +
                "						a.markedForRefundAmt,  \n" +
                "						get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount  \n" +
                "				  from packing_slip_material_receive a  \n" +
                "				 where a.receiptType in ('C','D')  \n" +
                "                   and a.mfgCodeID = pMfgcodeID  \n" +
                "				   and a.markedForRefund = 1  \n" +
                "				   and a.isDeleted = 0) a  \n" +
                "				 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;  \n" +
                "	end if;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4885,'2.00','V1','User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4885:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_packingslip_invoice_payment_det`;  \n" +
                "CREATE TRIGGER `Trg_BI_packingslip_invoice_payment_det` BEFORE INSERT ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN    \n" +
                "	DECLARE v_receiptType VARCHAR(1);    \n" +
                "	DECLARE v_invoiceTotal DECIMAL(18,8);    \n" +
                "	DECLARE v_totalPayment DECIMAL(18,8);    \n" +
                "	DECLARE v_isTariffInvoice TINYINT;    \n" +
                "	DECLARE v_refPaymentMode VARCHAR(5);    \n" +
                "	DECLARE vMessage VARCHAR(500);    \n" +
                "  \n" +
                "	SELECT 	a.refPaymentMode    \n" +
                "	INTO 	v_refPaymentMode    \n" +
                "	FROM 	packingslip_invoice_payment a    \n" +
                "	WHERE 	a.isDeleted = 0    \n" +
                "		   AND a.isPaymentVoided = 0    \n" +
                "		   AND a.id = NEW.refPayementid LIMIT 1;    \n" +
                "  \n" +
                "	IF v_refPaymentMode = 'P' THEN    \n" +
                "		/*getting invoice amount and type*/    \n" +
                "		SELECT 	a.receiptType,  \n" +
                "				(IFNULL(SUM(b.extendedPrice),0)+IFNULL(sum(a.markedForRefundAmt),0)),  \n" +
                "				a.isTariffInvoice    \n" +
                "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice    \n" +
                "		FROM 	packing_slip_material_receive a    \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id    \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID    \n" +
                "				AND a.isDeleted = 0    \n" +
                "				AND b.isDeleted = 0    \n" +
                "		GROUP BY a.receiptType, a.isTariffInvoice;    \n" +
                "  \n" +
                "		/*getting total payment amount including new added payment */    \n" +
                "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))    \n" +
                "			INTO 	v_totalPayment    \n" +
                "			FROM 	packingslip_invoice_payment_det b    \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID    \n" +
                "				AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'P')  \n" +
                "                AND b.isPaymentVoided = 0    \n" +
                "                AND b.isDeleted = 0    \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;    \n" +
                "  \n" +
                "		IF v_receiptType IN ('D', 'C') THEN    \n" +
                "			IF IFNULL(NEW.paymentAmount,0) >= 0 THEN    \n" +
                "			/*in case of debit/credit memo payment amount must be less then zero*/    \n" +
                "				SET vMessage = CONCAT('Debit or Credit Memo payment must be less than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));    \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;    \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) > 0 THEN    \n" +
                "			/*in case of debit/credit memo outstanding amount must be less or equal to zero*/    \n" +
                "				SET vMessage = CONCAT('Total payment amount for Debit or Credit Memo must be less or equal to zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));    \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;    \n" +
                "			/*ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  */  \n" +
                "			/*in case of debit/credit memo now if outstanding amount is zero then update debit/credit memo status to paid*/    \n" +
                "				/*UPDATE 	packing_slip_material_receive    \n" +
                "				SET 	`status` = 'P',    \n" +
                "					updatedBy = NEW.updatedBy,    \n" +
                "					updatedAt = NEW.updatedAt,    \n" +
                "					updateByRoleId = NEW.updateByRoleId    \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;  */  \n" +
                "			END IF;    \n" +
                "		ELSEIF v_receiptType = 'I' THEN    \n" +
                "			IF IFNULL(NEW.paymentAmount,0) <= 0 AND IFNULL(v_invoiceTotal,0) != 0 THEN    \n" +
                "			/*invoice payment amount must not negetive, if invoice amount is not zero*/    \n" +
                "				SET vMessage = CONCAT('Invoice Payment amount must be greater than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));    \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;    \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) < 0 THEN    \n" +
                "			/*invoice outstanding amount must not negetive*/    \n" +
                "				SET vMessage = CONCAT('Total payment amount for an Invoice can not less than zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));    \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;    \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN    \n" +
                "            /*if invoice outstanding amount zero then update invoice status to paid*/    \n" +
                "				UPDATE 	packing_slip_material_receive    \n" +
                "				SET 	`status` = 'P',    \n" +
                "					updatedBy = NEW.updatedBy,    \n" +
                "					updatedAt = NEW.updatedAt,    \n" +
                "					updateByRoleId = NEW.updateByRoleId    \n" +
                "				 WHERE 	id = NEW.refPackingslipInvoiceID;    \n" +
                "  \n" +
                "				 IF v_isTariffInvoice = FALSE THEN    \n" +
                "					/*in case of non tariff invoice update packing slip status to paid*/    \n" +
                "					UPDATE 	packing_slip_material_receive    \n" +
                "					SET 	`status` = 'P',    \n" +
                "						updatedBy = NEW.updatedBy,    \n" +
                "						updatedAt = NEW.updatedAt,    \n" +
                "						updateByRoleId = NEW.updateByRoleId    \n" +
                "					WHERE 	refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;    \n" +
                "				 END IF;    \n" +
                "			END IF;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "    ELSEIF v_refPaymentMode = 'RR' THEN  \n" +
                "		/*getting invoice amount and type*/    \n" +
                "		SELECT 	a.receiptType,  \n" +
                "				IFNULL(sum(a.markedForRefundAmt),0),  \n" +
                "				a.isTariffInvoice    \n" +
                "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice    \n" +
                "		FROM 	packing_slip_material_receive a    \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id    \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID    \n" +
                "				AND a.isDeleted = 0    \n" +
                "				AND b.isDeleted = 0    \n" +
                "		GROUP BY a.receiptType, a.isTariffInvoice;    \n" +
                "  \n" +
                "        /*getting total payment amount including new added payment */    \n" +
                "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))    \n" +
                "			INTO 	v_totalPayment    \n" +
                "			FROM 	packingslip_invoice_payment_det b    \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID    \n" +
                "				AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'RR')  \n" +
                "                AND b.isPaymentVoided = 0    \n" +
                "                AND b.isDeleted = 0    \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;    \n" +
                "  \n" +
                "		IF v_totalPayment > v_invoiceTotal THEN  \n" +
                "			/*in case of debit/credit memo payment amount must be less then zero*/    \n" +
                "			SET vMessage = CONCAT('Debit or Credit Memo Refund must be lessa or equal to Marked for Refund Amount. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2),', Marked for Refund Amount is: ',IFNULL(v_invoiceTotal,0));  \n" +
                "			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;    \n" +
                "        END IF;  \n" +
                "    END IF;    \n" +
                "  \n" +
                "    if v_refPaymentMode in ('P','RR') then /*update status to paid*/  \n" +
                "		/*getting invoice amount and type*/    \n" +
                "		SELECT 	a.receiptType,  \n" +
                "				IFNULL(SUM(b.extendedPrice),0)  \n" +
                "		INTO 	v_receiptType, v_invoiceTotal  \n" +
                "		FROM 	packing_slip_material_receive a    \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id    \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID    \n" +
                "				AND a.isDeleted = 0    \n" +
                "				AND b.isDeleted = 0    \n" +
                "		GROUP BY a.receiptType;    \n" +
                "  \n" +
                "		/*getting total payment amount including new added payment */    \n" +
                "		SELECT 	(IFNULL(sum(case when b.paymentAmount > 0 then (b.paymentAmount *-1) else b.paymentAmount end),0) +   \n" +
                "				 IFNULL(sum(case when NEW.paymentAmount > 0 then (NEW.paymentAmount *-1) else NEW.paymentAmount end),0))  \n" +
                "			INTO 	v_totalPayment    \n" +
                "			FROM 	packingslip_invoice_payment_det b    \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID    \n" +
                "                AND b.isPaymentVoided = 0    \n" +
                "                AND b.isDeleted = 0    \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;    \n" +
                "  \n" +
                "		IF v_receiptType IN ('D', 'C') THEN  \n" +
                "			IF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  \n" +
                "				UPDATE 	packing_slip_material_receive    \n" +
                "				SET `status` = 'P',    \n" +
                "					updatedBy = NEW.updatedBy,    \n" +
                "					updatedAt = NEW.updatedAt,    \n" +
                "					updateByRoleId = NEW.updateByRoleId    \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;   \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "    end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4886,'2.00','V1','User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4886:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(                \n" +
                "	IN ppageIndex INT,                \n" +
                "	IN precordPerPage INT,                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pUserId INT,              \n" +
                "	IN pRoleId INT,        \n" +
                "	IN isShowDefault INT        \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT;                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;              \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;              \n" +
                "  \n" +
                " 	IF (isShowDefault = 1) THEN              \n" +
                " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS              \n" +
                " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,          \n" +
                " 			`pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`    \n" +
                " 			FROM `rolepagedetail` AS `rp`              \n" +
                " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`              \n" +
                " 			WHERE `rp`.`roleID` = pRoleId           \n" +
                " 			AND `rp`.`deletedAt` IS NULL           \n" +
                " 			AND `pd`.`deletedAt` IS NULL           \n" +
                " 			AND `pd`.`isActive` = 1;              \n" +
                "  \n" +
                " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)              \n" +
                " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass           \n" +
                " 			FROM page_detail           \n" +
                " 			WHERE deletedAt IS NULL           \n" +
                " 			AND isActive = 1           \n" +
                " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail           \n" +
                " 			WHERE roleID = pRoleId AND deletedAt IS NULL);              \n" +
                " 	ELSE              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS              \n" +
                "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,           \n" +
                "			`up`.`IsShortcut`, `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`    \n" +
                "			FROM `userpagedetail` AS `up`              \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`              \n" +
                "			WHERE `up`.`userID` = pUserId           \n" +
                "			AND `up`.`roleID` = pRoleId           \n" +
                "			AND `up`.`deletedAt` IS NULL           \n" +
                "			AND `pd`.`deletedAt` IS NULL           \n" +
                "			AND `pd`.`isActive` = 1;              \n" +
                "  \n" +
                "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)              \n" +
                "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass              \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);              \n" +
                " 	END IF;              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");                \n" +
                "	ELSE                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "	ELSE	                \n" +
                "		SET rowNumWhere = '';                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	/* to get total count of rows */                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4887,'2.00','V1','updated to previous Sproc_GetPermissionsPageListByRole  - purav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4887:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_cofcdocumentcount` ;  \n" +
                "CREATE VIEW `vu_cofcdocumentcount` AS  \n" +
                "    SELECT   \n" +
                "        COUNT(1) AS `cofcCount`,  \n" +
                "        `g`.`refTransID` AS `refTransID`,  \n" +
                "        `g`.`gencFileOwnerType` AS `gencFileOwnerType`  \n" +
                "    FROM  \n" +
                "        (`genericfiles` `g`  \n" +
                "        JOIN `genericcategory` `gc` ON (((`g`.`fileGroupBy` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0)  \n" +
                "            AND (`gc`.`gencCategoryName` IN ('COFC' , 'Packing Slip With COFC')))))  \n" +
                "    WHERE  \n" +
                "        ((`g`.`isDeleted` = 0)  \n" +
                "            AND (`g`.`gencFileOwnerType` IN ('component_sid_stock' , 'packing_slip')))  \n" +
                "    GROUP BY `g`.`refTransID` , `g`.`gencFileOwnerType`;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_umidcofcdetail` ;  \n" +
                "CREATE VIEW `vu_umidcofcdetail` AS  \n" +
                "    SELECT   \n" +
                "        `cspd`.`refComponentSidStockID` AS `refComponentSidStockID`,  \n" +
                "        `mcm`.`mfgCode` AS `mfgCode`,  \n" +
                "        `ps`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `mcm`.`mfgName` AS `mfgName`,  \n" +
                "        `ps`.`id` AS `packingSlipId`,  \n" +
                "        `ps`.`mfgCodeID` AS `packingSlipSupplierId`,  \n" +
                "        `g`.`cofcCount` AS `cofcCount`   \n" +
                "    FROM  \n" +
                "        ((((`component_sid_stock_packing_detail` `cspd`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` FORCE INDEX (PRIMARY) ON (((`cspd`.`refPackingSlipDetailID` = `psd`.`id`)  \n" +
                "            AND (`psd`.`isDeleted` = 0))))  \n" +
                "        JOIN `packing_slip_material_receive` `ps` FORCE INDEX (PRIMARY) ON (((`psd`.`refPackingSlipMaterialRecID` = `ps`.`id`)  \n" +
                "            AND (`ps`.`isDeleted` = 0))))  \n" +
                "        JOIN `mfgcodemst` `mcm` ON (((`mcm`.`id` = `ps`.`mfgCodeID`)  \n" +
                "            AND (`mcm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `vu_cofcdocumentcount` `g` ON (((`g`.`refTransID` = `ps`.`id`)  \n" +
                "            AND (`g`.`gencFileOwnerType` = 'packing_slip'))))  \n" +
                "    GROUP BY `cspd`.`refComponentSidStockID` , `mcm`.`mfgCode` , `ps`.`packingSlipNumber` , `mcm`.`mfgName` , `ps`.`id`;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    In pInnerQueryWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;                                                    \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;                                                    \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                    \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;               \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);      \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*left join filter*/  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	deletedAt IS NULL  \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		   id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,   \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomName,				orgPkgUnit,  \n" +
                "							orgQty, 			packaginggroupID,	packaging,				packagingName,  		printStatus, 			tentativePrice,  \n" +
                "							costScrapQty,		costCategoryID,		costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,    	  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin, 		   \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName, 	  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,		  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,	  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,	                \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,	  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,    \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly, 	  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCode, 		 	refCPNMFGPNID,	       	cpnMFGPN, 		  \n" +
                "							refSupplierPartId,	supplierMFGCode,	supplieMFGPN,			totalScrapUnit,			perScrapQty,       \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt, 		   \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt, 		          \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,    	  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId  \n" +
                "		FROM 		(		                                                                                                    \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,	  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'                                                    \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,                                                    \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL                                                    \n" +
                "								END) displayStockInventoryType,        \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,				  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,					  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,				  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,					  \n" +
                "								css.pkgUnit,				css.uom,					u.unitName uomName,			IFNULL(css.orgPkgUnit, 0) orgPkgUnit,  \n" +
                "								css.orgQty,					c.packaginggroupID,			css.packaging,				cp.name packagingName,		css.printStatus,		  \n" +
                "								IFNULL(c.price, 0) tentativePrice,						((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,    \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,     \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,                                                                                                                       \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,                                                                                                    \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,				                                                                                                               \n" +
                "								css.refCPNMFGPNID,		CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								cssh.scrappedUnit totalScrapUnit,                          \n" +
                "								null isTransit,                                 \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,                          \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,   \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					                          \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,                \n" +
                "								null packingSupplierName,                     \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId                 \n" +
                "					FROM 		component_sid_stock css   \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)   \n" +
                "						' else '' end),  \n" +
                "					\"                   \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id   \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id    \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id    \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case   \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')   \n" +
                "                            else ''   \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id   \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit    \n" +
                "								FROM 		component_sid_stock_history cssh    \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isCustom = 1  and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,   \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname	                    \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)                  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3                   \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                    \n" +
                "						INNER JOIN	component c ON k.assyID = c.id                    \n" +
                "						WHERE 		k.status = 'A'                \n" +
                "						GROUP BY 	k.refUIDId     \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')   \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')  \n" +
                "									end)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	# select @temp_component_sid_stock;  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for paremt documents    \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';    \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  CONCAT(ps.mfgCode, ps.packingSlipNumber) ,                \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),                     \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)   \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI')  \n" +
                "	and		(ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t   \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null   \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data                             \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',   \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(createdBy)   \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end)  \n" +
                "    order by s.id desc;  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                \n" +
                "	EXECUTE query1;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                \n" +
                "	EXECUTE query2;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE query2;                             \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);    \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                \n" +
                "	EXECUTE mainQuery;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4888,'2.00','V1','Refactor Procedure Sproc_GetReceivingMaterial  - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4888:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP function IF EXISTS `fun_getUMIDTransitStatus`;  \n" +
                "CREATE FUNCTION `fun_getUMIDTransitStatus`(        \n" +
                "	puid VARCHAR(50)) RETURNS varchar(10) CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE result VARCHAR(10);        \n" +
                "	SELECT CASE WHEN MAX(isInTransit) = 1 THEN 'Yes' ELSE '' END   \n" +
                "    INTO result   \n" +
                "    FROM smartcarttransaction   \n" +
                "    WHERE reelBarCode = puid   \n" +
                "    AND transactionid IS NOT NULL;      \n" +
                "  \n" +
                "	RETURN result;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP function IF EXISTS `fun_getUserNameByID`;  \n" +
                "CREATE FUNCTION `fun_getUserNameByID`(            \n" +
                "	pUserID varchar(50)          \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN            \n" +
                "	DECLARE vUserName VARCHAR(50);  \n" +
                "    if pUserID = 'Auto' then    \n" +
                "		set vUserName = pUserID;    \n" +
                "    else    \n" +
                "		SELECT emp.initialName INTO vUserName       \n" +
                "		FROM users u      \n" +
                "		join employees emp on emp.id = u.employeeID      \n" +
                "		WHERE u.id = pUserID;           \n" +
                "	end if;    \n" +
                "	RETURN vUserName;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP function IF EXISTS `fun_getUMIDTransitUserName`;  \n" +
                "CREATE FUNCTION `fun_getUMIDTransitUserName`(          \n" +
                "	puid VARCHAR(50)) RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "	DECLARE result varchar(50);       \n" +
                "  \n" +
                "	SELECT 	CASE 	    \n" +
                "			WHEN messagetype = 104 THEN     \n" +
                "				fun_getUserNameByID(createdBy)     \n" +
                "			ELSE 'Unauthorized'     \n" +
                "		END     \n" +
                "	INTO 	result     \n" +
                "	FROM 	smartcarttransaction     \n" +
                "	WHERE 	reelBarCode = puid     \n" +
                "			AND isintransit = 1     \n" +
                "			AND transactionid IS NOT NULL     \n" +
                "			AND (messagetype = 104 OR messagetype = 1001);        \n" +
                "  \n" +
                "	RETURN result;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP function IF EXISTS `fun_getMFRDateCodeFormatByID`;  \n" +
                "CREATE FUNCTION `fun_getMFRDateCodeFormatByID`(                  \n" +
                "	pMFRDateCodeId INT(11)    \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN                  \n" +
                "	DECLARE result VARCHAR(50);     \n" +
                "  \n" +
                "	SELECT 	dateCodeFormat     \n" +
                "	INTO 	result     \n" +
                "	FROM 	dateCodeFormatMst WHERE  id = pMFRDateCodeId    \n" +
                "			AND isDeleted = 0;    \n" +
                "	RETURN result;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP function IF EXISTS `fun_getRoleByID`;  \n" +
                "CREATE FUNCTION `fun_getRoleByID`(            \n" +
                "	pRoleID INT         \n" +
                ") RETURNS varchar(255) CHARSET utf8mb4  \n" +
                "BEGIN     \n" +
                "	DECLARE vUserRole VARCHAR(255);           \n" +
                "	select `name` INTO vUserRole from roles where id = pRoleID;      \n" +
                "	RETURN vUserRole;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP function IF EXISTS `fun_getUserCodeByID`;  \n" +
                "CREATE FUNCTION `fun_getUserCodeByID`(              \n" +
                "	pUserID VARCHAR(50)            \n" +
                ") RETURNS varchar(255) CHARSET utf8mb4  \n" +
                "BEGIN              \n" +
                "	DECLARE vUserCode varchar(255);             \n" +
                "	IF pUserID = 'Auto' THEN      \n" +
                "		SET vUserCode = pUserID;  \n" +
                "	ELSE      \n" +
                "		SELECT u.username INTO vUserCode         \n" +
                "		FROM users u        \n" +
                "		WHERE u.id = pUserID;             \n" +
                "	END IF;      \n" +
                "	RETURN vUserCode;         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4889,'2.00','V1','Refactor function as return type and return value data type mismatched  - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4889:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderShippingReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderShippingReportDetails`(	                  \n" +
                "	IN pSDetID INT(11)                \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "	-- Get shiiping details                \n" +
                "	SELECT sh.sDetID AS sDetID,sh.shippingAddressID,                \n" +
                "	sh.qty,                \n" +
                "	sh.shippingDate,                \n" +
                "	gctsm.gencCategoryName AS shippingMethod,sh.promisedShipDate,              \n" +
                "	sh.description,sh.releaseNotes,sh.requestedDockDate,      \n" +
                "	IFNULL(fun_getUOMAbbreviationByID(sd.uom),'EA') uom,  \n" +
                "	sh.customerReleaseLine,           \n" +
                "	 CASE                 \n" +
                "        WHEN sh.shippingAddressID IS NOT NULL THEN                        \n" +
                "	(                        \n" +
                "	SELECT CONCAT(                \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                             \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))                            \n" +
                "	FROM customer_addresses ca                            \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                            \n" +
                "	WHERE ca.id = sh.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                         \n" +
                "	) END AS shippingAddress                \n" +
                "        FROM salesshippingmst sh                \n" +
                "        LEFT JOIN salesorderdet sd ON sd.id=sh.sDetID AND sd.isDeleted=0 AND sd.partCategory=3                 \n" +
                "        LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sh.shippingMethodID AND gctsm.deletedAt IS NULL)                   \n" +
                "        WHERE sh.deletedAt IS NULL AND sh.sDetID = pSDetID ;                 \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(	                                                \n" +
                "	IN pid INT(11)                                      \n" +
                "    )  \n" +
                "BEGIN                                                \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,                                        \n" +
                "		sm.soDate,                                              \n" +
                "		sm.status,  \n" +
                "		sm.serialNumber,                  \n" +
                "		sm.shippingComment,                                              \n" +
                "		mfg.mfgName AS customer,                                              \n" +
                "		gctsm.gencCategoryName AS shippingMethod,                                              \n" +
                "		gctpm.gencCategoryName AS paymentMethod,                    \n" +
                "		-- get intermediate shipment address                    \n" +
                "		CASE                                               \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN                                                      \n" +
                "	(                                                      \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                              \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                           \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                   \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                   \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                          \n" +
                "	FROM customer_addresses ca                                                          \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                          \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0                                                       \n" +
                "	) END AS intermediateShippingAddress,                    \n" +
                "  \n" +
                "        -- get shipping detils of customer                                                       \n" +
                "        CASE                                               \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN                                                      \n" +
                "	(                                                      \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                              \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                           \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                   \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                   \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                          \n" +
                "	FROM customer_addresses ca                                                          \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                          \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                                                       \n" +
                "	) END AS shippingAddress,                                              \n" +
                "	-- get billing Address                                              \n" +
                "	CASE                                               \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN                                                      \n" +
                "	(                                                      \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                           \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),                                  \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                   \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                          \n" +
                "	FROM customer_addresses ca                                                          \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID                                                          \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'                                                     \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,                                 \n" +
                "    '1.00' docNumber    \n" +
                "  \n" +
                "	FROM salesordermst sm                                                \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)                                              \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)                                                \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0                                  \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId                                    \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo                                            \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);                                            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT                       \n" +
                "    sd.lineID,                      \n" +
                "    c.PIDCode,                      \n" +
                "    sd.id AS sDetID,                      \n" +
                "    (CONCAT(CASE                      \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN                      \n" +
                "        ELSE c.custAssyPN                      \n" +
                "    END)) mfgPN,                      \n" +
                "    c.rev revision,               \n" +
                "    CONCAT(IFNULL(sd.partDescription, ''), '<br/>',                                 \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),                                    \n" +
                "            IFNULL(CONCAT(', ',                                    \n" +
                "                            fun_getCertificationByPartID(sd.partID)),                                    \n" +
                "                    ''),                                    \n" +
                "            IFNULL(CONCAT(', Quote#', CASE                      \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                      \n" +
                "        ELSE sd.quoteNumber                      \n" +
                "    END), ''),                                    \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                    \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                     \n" +
                "    sd.qty,                      \n" +
                "    sd.price,                      \n" +
                "    sd.qty * sd.price AS extPrice,                      \n" +
                "    sd.materialTentitiveDocDate,                  \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,                     \n" +
                "    CASE                      \n" +
                "        WHEN sd.partCategory = 2 THEN NULL                      \n" +
                "        ELSE sd.shippingQty                      \n" +
                "    END shippingQty,                      \n" +
                "    ro.rohsIcon AS rohsIcon,                      \n" +
                "    ro.name AS rohsStatus,                      \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,                      \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,      \n" +
                "    su.emailAddress,                      \n" +
                "    sd.custPOLineNumber,                      \n" +
                "    CASE                      \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                      \n" +
                "        ELSE sd.quoteNumber                      \n" +
                "    END quoteNumber,                      \n" +
                "    sd.remark,                      \n" +
                "    emp.phExtension,                \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser                      \n" +
                "FROM                      \n" +
                "    salesorderdet sd                      \n" +
                "        JOIN                      \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id                      \n" +
                "        AND sm.deletedAt IS NULL)                      \n" +
                "        JOIN                      \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)                      \n" +
                "        JOIN                      \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id                      \n" +
                "        AND ro.deletedAt IS NULL)                      \n" +
                "        LEFT JOIN                      \n" +
                "    users su ON su.id = sm.updatedBy                      \n" +
                "        LEFT JOIN                      \n" +
                "    employees emp ON emp.id = su.employeeID                      \n" +
                "        LEFT JOIN                      \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                      \n" +
                "        LEFT JOIN                      \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                      \n" +
                "        AND ra.partID = sd.partID                      \n" +
                "        LEFT JOIN                      \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                      \n" +
                "WHERE                      \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)                      \n" +
                "        AND sm.id = pid                      \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;	                                  \n" +
                "  \n" +
                "        -- get salesorder level total details for                                  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                  \n" +
                "	SELECT SUM(sd.qty * sd.price) totalLinePrice,                                  \n" +
                "	(SELECT SUM(sod.qty * sod.price) FROM salesorder_otherexpense_details sod WHERE sod.refSalesOrderDetID IN (SELECT s.id FROM salesorderdet s JOIN component c ON c.id=s.partID AND c.isdeleted=0 WHERE s.refsalesorderID=pid              \n" +
                "                	AND s.isDeleted=0 ) AND sod.isdeleted=0) totalLineMiscPrice,                                  \n" +
                "	(SELECT SUM(ssd.qty * ssd.price) FROM salesorderdet ssd JOIN component c ON c.id=ssd.partID AND c.isdeleted=0  WHERE ssd.refsalesorderID=pid AND c.partType=4 AND ssd.isdeleted=0) totalSOMiscPrice                                \n" +
                "                	FROM salesorderdet sd  JOIN component c ON c.id=sd.partID AND c.isdeleted=0                               \n" +
                "                	WHERE sd.refsalesorderID=pid  AND sd.isdeleted=0;                       \n" +
                "  \n" +
                "	SELECT                       \n" +
                "    IFNULL(totalLinePrice,0) totalLinePrice,                      \n" +
                "    IFNULL(totalLineMiscPrice, 0) totalLineMiscPrice,                     \n" +
                "    (IFNULL(totalLinePrice,0) + IFNULL(totalLineMiscPrice, 0)) totalSOPrice                      \n" +
                "FROM                      \n" +
                "    tempTotalPrice;                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "ALTER TABLE salesorderdet ADD isCustomerConsign TINYINT NOT NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4890,'2.00','V1',' User Story 34847: Sales Order - Improvement Points Suggested by client - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4890:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "UPDATE `page_detail`  \n" +
                "SET pageName = 'Write Offs' , menuName = 'Write Offs' ,  \n" +
                "	displayMenuName = 'Write Offs' ,  \n" +
                "	updatedBy = 1, updateByRoleId = 1 , updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "WHERE pageName = 'Applied Write Off'  \n" +
                "AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE `page_detail`  \n" +
                "SET  displayMenuName = 'Apply Write Off to Invoice' ,  \n" +
                "		pageName = 'Apply Customer Write Off to Invoice' ,  \n" +
                "		menuName = 'Apply Customer Write Off to Invoice' ,  \n" +
                "	updatedBy = 1, updateByRoleId = 1 , updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "WHERE pageName = 'Apply Customer WOFF to Invoice'  \n" +
                "AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE `page_detail`  \n" +
                "SET  displayMenuName = 'Apply Write Off to Invoice Documents' ,  \n" +
                "		pageName = 'Apply Customer Write Off to Invoice Documents' ,  \n" +
                "		menuName = 'Apply Customer Write Off to Invoice Documents' ,  \n" +
                "	updatedBy = 1, updateByRoleId = 1 , updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "WHERE pageName = 'Apply Customer WOFF to Invoice Documents'  \n" +
                "AND isDeleted = 0 ;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4891,'2.00','V1',' write off page detail entry update - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4891:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "	SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "            fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			(CASE WHEN (psip.isPaymentVoided = 1) THEN \"Voided\"  \n" +
                "				WHEN (IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN \"Received & Applied\"  \n" +
                "				ELSE \"Received\" END) AS isPaymentVoidedConvertedValueOfCM ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "				ELSE 'Received' END)  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause , v_IsIncludeVoidedTransWhereClause ,\"  \n" +
                "             AND psip.isDeleted = 0 \"  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllInvoiceOfCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllInvoiceOfCustomerPayment`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pPayementID INT,  \n" +
                "	IN pInvoiceTransType VARCHAR(5),  \n" +
                "	IN pisGetOnlyPaidInvoiceFromPayment TINYINT ,  \n" +
                "	IN pIsExcludeZeroValueInv TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_isPaymentVoided TINYINT ;  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE v_paymentTermsID INT;  \n" +
                "	DECLARE v_custTermsDays INT;  \n" +
                "	SET v_custTermsDays = NULL;  \n" +
                "  \n" +
                "	SET v_isPaymentVoided = 0;  \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "	/* below fun_ApplyCommonDateFormatByParaValue not working with date as it consider date 00:00:00 so date is less than 1  \n" +
                "		so below that CONVERT_TZ manual code added */  \n" +
                "	-- SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "	SELECT CAST(CONVERT_TZ(UTC_TIMESTAMP() ,'UTC',vTimeZone) AS DATE) INTO currDateWithAppliedTimeZone ;  \n" +
                "	-- select currDateWithAppliedTimeZone	;  \n" +
                "  \n" +
                "	SELECT paymentTermsID INTO v_paymentTermsID  \n" +
                "	FROM mfgcodemst  \n" +
                "	WHERE id = pCustomerID  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF v_paymentTermsID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(termsDays,0) INTO v_custTermsDays  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE `gencCategoryID` = v_paymentTermsID  \n" +
                "		AND categoryType = 'Payment Terms'  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPayementID IS NULL OR pPayementID = '') THEN  \n" +
                "  \n" +
                "		/* add new customer payment case */  \n" +
                "		SELECT *  \n" +
                "		FROM (  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status, cps.isZeroValue ,  \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "				NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
                "				0 AS invPaidAmtFromCurrPaymentDet,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "				NULL AS appliedDate  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.customerID = pCustomerID  \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "		) tempInv  \n" +
                "		WHERE (  \n" +
                "			(  \n" +
                "				tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
                "					/* get all peding to pay inv with 0 amount */  \n" +
                "			)  \n" +
                "			OR  \n" +
                "			(  \n" +
                "				(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
                "						 /* get all peding to pay inv */  \n" +
                "			)  \n" +
                "		   )  \n" +
                "  \n" +
                "		;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* update customer payment case */  \n" +
                "  \n" +
                "		SELECT isPaymentVoided INTO v_isPaymentVoided  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pPayementID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		IF(v_isPaymentVoided = 0) THEN  \n" +
                "  \n" +
                "  \n" +
                "			IF(pisGetOnlyPaidInvoiceFromPayment = 0) THEN  \n" +
                "			/* get already paid invoices + get pending to pay invoices */  \n" +
                "  \n" +
                "				/* get already paid invoices  */  \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "					cps.status,  cps.isZeroValue ,  \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "					pipd.appliedDate  \n" +
                "				FROM customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "								 AND pipd.refPayementid = pPayementID  \n" +
                "								 AND pipd.isPaymentVoided = 0  \n" +
                "								 AND pipd.isDeleted = 0  \n" +
                "				WHERE cps.customerID = pCustomerID  \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "  \n" +
                "				UNION  \n" +
                "  \n" +
                "				/* get pending to pay invoices  */  \n" +
                "				SELECT *  \n" +
                "				FROM (  \n" +
                "					SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "					cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "						cps.status, cps.isZeroValue ,  \n" +
                "						v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "						(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "							WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "							WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "								THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "							ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "						NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
                "						0 AS invPaidAmtFromCurrPaymentDet,  \n" +
                "						(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet,  \n" +
                "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "						NULL AS appliedDate  \n" +
                "					FROM customer_packingslip cps  \n" +
                "					WHERE cps.customerID = pCustomerID  \n" +
                "					AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "					AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "					AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "					AND cps.id NOT IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refPayementid = pPayementID  \n" +
                "								AND isPaymentVoided = 0  \n" +
                "								AND isDeleted = 0 GROUP BY refCustPackingslipInvoiceID)  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "  \n" +
                "				) tempInv  \n" +
                "				WHERE  \n" +
                "				 (  \n" +
                "					(  \n" +
                "						tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
                "							/* get all peding to pay inv with 0 amount */  \n" +
                "					)  \n" +
                "					OR  \n" +
                "					(  \n" +
                "						(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
                "								 /* get all peding to pay inv */  \n" +
                "					)  \n" +
                "				   )  \n" +
                "				;  \n" +
                "  \n" +
                "			ELSEIF(pisGetOnlyPaidInvoiceFromPayment = 1) THEN  \n" +
                "  \n" +
                "				/* get already paid invoices  */  \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "					cps.status,  cps.isZeroValue ,  \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "					pipd.appliedDate  \n" +
                "				FROM customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "								 AND pipd.refPayementid = pPayementID  \n" +
                "								 AND pipd.isPaymentVoided = 0  \n" +
                "								 AND pipd.isDeleted = 0  \n" +
                "				WHERE cps.customerID = pCustomerID  \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(v_isPaymentVoided = 1) THEN  \n" +
                "  \n" +
                "			/* get already paid invoices only */  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status, cps.isZeroValue ,  \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "						THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))  \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "				pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  pipd.isPaymentVoided,  \n" +
                "				IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "				((SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  \n" +
                "				   --  + IFNULL(pipd.paymentAmount,0)  \n" +
                "				    ) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "				pipd.appliedDate  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = pPayementID  \n" +
                "							 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.customerID = pCustomerID  \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* get customer Past Due Balance >> check from current date till pending */  \n" +
                "	SELECT SUM(CASE WHEN a.paymentDueDate <= CAST(currDateWithAppliedTimeZone AS DATE) THEN a.totalOutstandingAmount ELSE 0 END) AS pastDueAmount  \n" +
                "	FROM (  \n" +
                "		SELECT customerID,  \n" +
                "			(IFNULL(totalAmount,0) - IFNULL(get_totalCustomerInvoiceReceivedAmountById(id),0)) AS totalOutstandingAmount ,  \n" +
                "				DATE_ADD(invoiceDate, INTERVAL IFNULL(v_custTermsDays,0) DAY) paymentDueDate  \n" +
                "  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE customerID = pCustomerID  \n" +
                "		AND transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "		AND isDeleted = 0  \n" +
                "	    ) a  \n" +
                "	GROUP BY a.customerID ;  \n" +
                "  \n" +
                "	/* get customer current Terms Days from master */  \n" +
                "	SELECT v_custTermsDays AS custCurrentTermsDays;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			SET vLockStatusToBe = 'NA' ;  \n" +
                "			IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "					SET vLockStatusToBe = 'RL' ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'  \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'  \n" +
                "							 ELSE paymentStatus END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update invoice payment status */  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "		SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "		-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pCustomerPaymentMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND id != pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				pipd.id invPaymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL  \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL  \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.* ,  \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,  \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "			-- SELECT 'update';  \n" +
                "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustInvPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "					SELECT refCustPackingslipInvoiceID  \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "						 FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END  \n" +
                "							) ,  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate  \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),  \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,  \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "			WHERE invPaymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		IF (vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pDeleteCustInvPaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "					)  \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT refCustPackingslipInvoiceID  \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */  \n" +
                "			UPDATE packingslip_invoice_payment_det  \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "			AND isPaymentVoided = 0  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created temp table from above */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* common update for all */  \n" +
                "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)  \n" +
                "		AND (vCountExistsCheckNo = 0)) THEN  \n" +
                "  \n" +
                "		/* update invoice payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			isMarkForRefund = pisMarkForRefund ,  \n" +
                "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0 */  \n" +
                "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */  \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */  \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id = pCustomerPaymentMstID  \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;  \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET paymentAmount = pPaymentAmount,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pCustomerPaymentMstID  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  \n" +
                "				/* update customer credit memo - payment status */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'  \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'  \n" +
                "							 ELSE paymentStatus END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END  \n" +
                "			WHERE psip.id = pCustomerPaymentMstID  \n" +
                "			AND psip.lockStatus != 'LC'  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)  \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4892,'2.00','V1',' write off sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4892:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_mfgcodemst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;   \n" +
                "	IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;     \n" +
                "	IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR), CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4893,'2.00','V1',' Alter trigger mfgcodemst - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4893:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pWHId INT,    \n" +
                "	IN pBinId INT,    \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),    \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),    \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),    \n" +
                "	IN pAssyIDs VARCHAR(16383),    \n" +
                "	IN pRestrictPart TINYINT,    \n" +
                "	IN pExpireMaterial TINYINT,    \n" +
                "	IN pPartId INT,    \n" +
                "	IN pIsShowPackagingAlias TINYINT,    \n" +
                "	IN pStandardIDs VARCHAR(16383),    \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),    \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),    \n" +
                "	IN pDateCode VARCHAR(16383),    \n" +
                "	IN pIsAvailableToSell TINYINT,    \n" +
                "	IN pIsRestrictedUMID TINYINT,    \n" +
                "	IN pIsInternalStock TINYINT,    \n" +
                "	IN pIsCustomerStock TINYINT,    \n" +
                "	IN pdepartmentIDs VARCHAR(16383),    \n" +
                "	IN pwarehouseType VARCHAR(255),    \n" +
                "	IN pWarehouse VARCHAR(16383),    \n" +
                "	IN pExpiredDay INT,    \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),    \n" +
                "	IN pCustomerId INT,    \n" +
                "	IN pFromDate DATE,    \n" +
                "	IN pToDate DATE,    \n" +
                "	IN pSearchTextAttribute LONGTEXT,    \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),    \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),    \n" +
                "	IN pInventoryType VARCHAR(255),    \n" +
                "    In pInnerQueryWhereClause VARCHAR(16383)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	DECLARE attributeSearchString LONGTEXT;                                                      \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;                                                      \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                      \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                 \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);        \n" +
                "    DECLARE v_ExpiryDate datetime;    \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);    \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "	SET v_DescriptionWhereClause = '';    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "		SET pWhereClause = ' 1=1';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/*left join filter*/    \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');    \n" +
                "	END IF;    \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN    \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN    \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))    \n" +
                "            into	v_PartIDs    \n" +
                "			FROM 	component c    \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0    \n" +
                "			WHERE 	c.id = pPartId    \n" +
                "			AND 	c.isDeleted = 0;    \n" +
                "		ELSE    \n" +
                "			select pPartId into v_PartIDs;    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/*below query need to refactor*/    \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN    \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;    \n" +
                "		SET attributeSearchString = pSearchTextAttribute;    \n" +
                "		do_this:    \n" +
                "		LOOP    \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);    \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);    \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);    \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);    \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');    \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');    \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN    \n" +
                "				LEAVE do_this;    \n" +
                "			END IF;    \n" +
                "		END LOOP do_this;    \n" +
                "	END IF;    \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN    \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs    \n" +
                "		FROM 	kit_allocation_assy_detail    \n" +
                "		WHERE 	deletedAt IS NULL    \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);    \n" +
                "	END IF;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);    \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN    \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)    \n" +
                "		SELECT 	k.refUIDId    \n" +
                "		FROM 	kit_allocation k    \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)    \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)    \n" +
                "		AND	k.status = 'A';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;    \n" +
                "    CREATE temporary table temp_component_sid_stock(    \n" +
                "		   id int NOT NULL DEFAULT '0',    \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,    \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,    \n" +
                "		  uid varchar(15) DEFAULT NULL,    \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,    \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,    \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,    \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,    \n" +
                "		  fromUIDId int DEFAULT NULL,    \n" +
                "		  fromUID varchar(15) DEFAULT NULL,    \n" +
                "		  parentUIDId int DEFAULT NULL,    \n" +
                "		  parentUID varchar(15) DEFAULT NULL,    \n" +
                "		  mfgcodeID int NOT NULL,    \n" +
                "		  mfg text,    \n" +
                "		  refcompid int DEFAULT NULL,    \n" +
                "		  mfgPN varchar(100) NOT NULL,    \n" +
                "		  PIDCode varchar(109) NOT NULL,    \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,    \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,    \n" +
                "		  RoHSStatusID int NOT NULL,    \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,    \n" +
                "		  rohsName varchar(50) DEFAULT NULL,    \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',    \n" +
                "		  spq decimal(18,8) DEFAULT NULL,    \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,    \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,    \n" +
                "		  uom int DEFAULT NULL,    \n" +
                "		  uomName varchar(100) NOT NULL,    \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',    \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,    \n" +
                "		  packaginggroupID int DEFAULT NULL,    \n" +
                "		  packaging int DEFAULT NULL,    \n" +
                "		  packagingName varchar(100) NOT NULL,    \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',    \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',    \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,    \n" +
                "		  costCategoryID int DEFAULT NULL,    \n" +
                "		  costCategory varchar(147) DEFAULT NULL,    \n" +
                "		  lotCode varchar(255) DEFAULT NULL,    \n" +
                "		  dateCode varchar(10) DEFAULT NULL,    \n" +
                "		  UMIDrohsStatusID int NOT NULL,    \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,    \n" +
                "		  binID int DEFAULT NULL,    \n" +
                "		  location varchar(110) DEFAULT NULL,    \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',    \n" +
                "		  warehouseID int DEFAULT NULL,    \n" +
                "		  warehouse varchar(50) NOT NULL,    \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,    \n" +
                "		  department varchar(50) NOT NULL,    \n" +
                "		  departmentID int NOT NULL DEFAULT '0',    \n" +
                "		  fromBin int DEFAULT NULL,    \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,    \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',    \n" +
                "		  fromWarehouse int DEFAULT NULL,    \n" +
                "		  fromWHName varchar(50) NOT NULL,    \n" +
                "		  fromDepartment int DEFAULT NULL,    \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,    \n" +
                "		  orgRecBin int DEFAULT NULL,    \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,    \n" +
                "		  orgRecWarehouse int DEFAULT NULL,    \n" +
                "		  orgRecWHName varchar(50) NOT NULL,    \n" +
                "		  orgRecDepartment int DEFAULT NULL,    \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,    \n" +
                "		  expiryDate date DEFAULT NULL,    \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,    \n" +
                "		  pcbPerArray int DEFAULT NULL,    \n" +
                "		  nickName varchar(50) DEFAULT NULL,    \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,    \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,    \n" +
                "		  woNumber varchar(255) DEFAULT NULL,    \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,    \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,    \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',    \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',    \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,    \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,    \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,    \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,    \n" +
                "		  mountingTypeID int NOT NULL,    \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,    \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,    \n" +
                "		  partPackage varchar(50) DEFAULT NULL,    \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,    \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',    \n" +
                "		  detailDescription text,    \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',    \n" +
                "		  customerID int DEFAULT NULL,    \n" +
                "		  customer text,    \n" +
                "		  assyID int DEFAULT NULL,    \n" +
                "		  assembly varchar(109),    \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  cpnMFGCode text,    \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,    \n" +
                "		  cpnMFGPN varchar(100),    \n" +
                "		  refSupplierPartId int DEFAULT NULL,    \n" +
                "		  supplierMFGCode text,    \n" +
                "		  supplieMFGPN varchar(100),    \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,    \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,    \n" +
                "		  isTransit varchar(10) DEFAULT NULL,    \n" +
                "		  searchUser varchar(50) DEFAULT NULL,    \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,    \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,    \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,    \n" +
                "		  createdAt varchar(50) DEFAULT NULL,    \n" +
                "		  createdBy varchar(255) NOT NULL,    \n" +
                "		  createdByName varchar(50) DEFAULT NULL,    \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,    \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,    \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,    \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,    \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,    \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,    \n" +
                "		  allocatedToKit text,    \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,    \n" +
                "		  packingSupplierName text,    \n" +
                "		  packingSlipId int DEFAULT NULL,    \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,     \n" +
                "          cocDocumentCount int default 0,    \n" +
                "          parentCofCDocumentCount int default 0,    \n" +
                "          createByRoleId int default null,    \n" +
                "          updateByRoleId int default null    \n" +
                "		);    \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock    \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)    \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,    \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,    \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,    \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,    \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomName,				orgPkgUnit,    \n" +
                "							orgQty, 			packaginggroupID,	packaging,				packagingName,  		printStatus, 			tentativePrice,    \n" +
                "							costScrapQty,		costCategoryID,		costCategory,			lotCode,    \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,    	    \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin, 		     \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName, 	    \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,		    \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,	    \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,	                  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,	    \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,      \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly, 	    \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCode, 		 	refCPNMFGPNID,	       	cpnMFGPN, 		    \n" +
                "							refSupplierPartId,	supplierMFGCode,	supplieMFGPN,			totalScrapUnit,			perScrapQty,         \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt, 		     \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt, 		            \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,    	    \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId    \n" +
                "		FROM 		(		                                                                                                      \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,	    \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'                                                      \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'    \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'    \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'    \n" +
                "										ELSE NULL    \n" +
                "								END) displayReceiveMaterialType,    \n" +
                "								css.stockInventoryType,                                                      \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'    \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'    \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'    \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'    \n" +
                "										ELSE NULL                                                      \n" +
                "								END) displayStockInventoryType,          \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,				    \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,					    \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,				    \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,					    \n" +
                "								css.pkgUnit,				css.uom,					u.unitName uomName,			IFNULL(css.orgPkgUnit, 0) orgPkgUnit,    \n" +
                "								css.orgQty,					c.packaginggroupID,			css.packaging,				cp.name packagingName,		css.printStatus,		    \n" +
                "								IFNULL(c.price, 0) tentativePrice,						((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,    \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,      \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,    \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,    \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,    \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,    \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,    \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,    \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,       \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,    \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,    \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,    \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,    \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,    \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,    \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,    \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,    \n" +
                "								css.assyID,					assy.PIDCode assembly,    \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,                                                                                                                         \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,                                                                                                      \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,				                                                                                                                 \n" +
                "								css.refCPNMFGPNID,		CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,    \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,    \n" +
                "								cssh.scrappedUnit totalScrapUnit,                            \n" +
                "								null isTransit,                                   \n" +
                "								null searchUser,    \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,                            \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				    \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,     \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,    \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					                            \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,    \n" +
                "								kit.kitname allocatedToKit,    \n" +
                "								null packingSlipName,                  \n" +
                "								null packingSupplierName,                       \n" +
                "								null packingSlipId,    \n" +
                "								null packingSlipSupplierId                   \n" +
                "					FROM 		component_sid_stock css     \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",    \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),    \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),    \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),    \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),    \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN    \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')    \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN    \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')    \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN    \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')    \n" +
                "								else ''    \n" +
                "                        end),    \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),    \n" +
                "                        /*below query need to refactor*/    \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN    \n" +
                "							' AND not exists (    \n" +
                "									SELECT 	1    \n" +
                "									FROM 	rfq_lineitems_alternatepart a    \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id    \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0    \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)    \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0    \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)    \n" +
                "								)     \n" +
                "						' else '' end),    \n" +
                "					\"                     \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id     \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id      \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id      \n" +
                "					inner join uoms u on css.uom = u.id    \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id    \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id    \n" +
                "					inner join binmst b on css.binID = b.id \" ,    \n" +
                "						(Case     \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')    \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')    \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')     \n" +
                "                            else ''     \n" +
                "						end),    \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",    \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),    \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",    \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),    \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id    \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id    \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id    \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id    \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id    \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id    \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id    \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id     \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0    \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'    \n" +
                "					left join (    \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit      \n" +
                "								FROM 		component_sid_stock_history cssh      \n" +
                "								where 		cssh.scrappedUnit > 0    \n" +
                "								GROUP BY 	cssh.refUIDId    \n" +
                "					) cssh on css.id = cssh.refUIDId    \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0    \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0    \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isCustom = 1  and cpn_comp.isDeleted = 0    \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0    \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0    \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0    \n" +
                "					left join (    \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict    \n" +
                "						from (    \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,    \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict    \n" +
                "							from component_sid_stock_restrict_umid rest_umid    \n" +
                "						) css_rst where css_rst.rnk = 1    \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id    \n" +
                "					left join (    \n" +
                "						SELECT 		k.refUIDId,     \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname	                      \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)                    \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3                     \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                      \n" +
                "						INNER JOIN	component c ON k.assyID = c.id                      \n" +
                "						WHERE 		k.status = 'A'                  \n" +
                "						GROUP BY 	k.refUIDId       \n" +
                "					) kit  ON kit.refUIDId = css.id    \n" +
                "					WHERE 	css.isdeleted = 0\",    \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN    \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')    \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN    \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')    \n" +
                "							  when (pCustomerId IS NOT NULL) then    \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')     \n" +
                "                            else ''    \n" +
                "						end),    \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),    \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),    \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),    \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),    \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),    \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),    \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),    \n" +
                "                        (case when (pExpireMaterial = 1) THEN    \n" +
                "									(case when (pExpiredDay = 0) THEN    \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')    \n" +
                "									ELSE    \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')    \n" +
                "									end)    \n" +
                "							  else ''    \n" +
                "						end),    \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN    \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')    \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN    \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')    \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN    \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')    \n" +
                "							 else ''    \n" +
                "                        end),    \n" +
                "						v_DescriptionWhereClause,    \n" +
                "                        pInnerQueryWhereClause,    \n" +
                "				\") As tempUMID\"    \n" +
                "			);    \n" +
                "	# select @temp_component_sid_stock;    \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;    \n" +
                "	EXECUTE tempSQLQuery;    \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;    \n" +
                "  \n" +
                "    # Update count for self documents    \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g    \n" +
                "	set t.cocDocumentCount = g.cofcCount    \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';    \n" +
                "  \n" +
                "	# Update count for paremt documents      \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g    \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount    \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';   \n" +
                "  \n" +
                "    # Update CofC detail    \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps    \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)   \n" +
                "										else null  \n" +
                "								  end),                  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),                       \n" +
                "			t.packingSlipId = ps.packingSlipId,    \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)     \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');    \n" +
                "  \n" +
                "	# Update CofC detail    \n" +
                "	Update 	temp_component_sid_stock t     \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)    \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')    \n" +
                "	and		t.packingSlipId is null     \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);    \n" +
                "  \n" +
                "    # Update created by role    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join roles r on r.id = t.createByRoleId    \n" +
                "	set t.createdbyRole = r.name;    \n" +
                "  \n" +
                "    # Update updated by role    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join roles r on r.id = t.updateByRoleId    \n" +
                "	set t.updatedbyRole = r.name;    \n" +
                "  \n" +
                "    # Update created by name   \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join users u on u.id = t.createdBy    \n" +
                "    inner join employees emp on emp.id = u.employeeID    \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;    \n" +
                "  \n" +
                "    # Update updated by name    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join users u on  u.id = t.updatedBy    \n" +
                "    inner join employees emp  on emp.id = u.employeeID    \n" +
                "	set t.umidModifiedBy = emp.initialName ;    \n" +
                "  \n" +
                "    # Update MFR Date Code Format    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID    \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;    \n" +
                "  \n" +
                "    # Update In Transit Data                               \n" +
                "	Update temp_component_sid_stock t    \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL    \n" +
                "	set t.isTransit = 'Yes',     \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)     \n" +
                "							when (messagetype = 1001) then 'Unauthorized'    \n" +
                "							else ''    \n" +
                "                        end);    \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                  \n" +
                "	EXECUTE query1;                                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                  \n" +
                "	EXECUTE query2;                                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query2;                               \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);      \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                  \n" +
                "	EXECUTE mainQuery;                                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE mainQuery;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4894,'2.00','V1','Refactor Procedure Sproc_GetReceivingMaterial  - Dharmishtha'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4894:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-06-2021 *********************************** */
                "UPDATE page_Detail  \n" +
                "SET pageroute = \"app.transaction.invoicerefund.managerefund\"   \n" +
                "WHERE pageroute = \"app.transaction.managerefund\";  \n" +
                "  \n" +
                "UPDATE page_Detail  \n" +
                "SET pageroute = \"app.transaction.invoicerefund.managerefund.detail\"   \n" +
                "WHERE pageroute = \"app.transaction.managerefund.detail\";  \n" +
                "  \n" +
                "UPDATE page_Detail  \n" +
                "SET pageroute = \"app.transaction.invoicerefund.managerefund.document\"   \n" +
                "WHERE pageroute = \"app.transaction.managerefund.document\";  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4895,'2.00','V1','Resolved Issue for breadcrumb on supplier refund page - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4895:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(                          \n" +
                "	IN pGoodPart VARCHAR(100),                                \n" +
                "	IN pSearch VARCHAR(500),                                \n" +
                "	IN pId INT,            \n" +
                "	IN pMfgType VARCHAR(50),   \n" +
                "	IN pRoHSStatusID VARCHAR(100),                                \n" +
                "	IN pMfgCodeId INT,   \n" +
                "	IN pMountingType VARCHAR(50),                                \n" +
                "	IN pMountingTypeId INT,                                \n" +
                "	IN pCategoryID INT,                                \n" +
                "	IN pIsContainCPN TINYINT,                                \n" +
                "	IN pRohsMainCategoryID INT,                                \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,                        \n" +
                "	IN prefSupplierMfgpnComponentID INT ,                        \n" +
                "	IN ppackagingID INT,                        \n" +
                "	IN pstrictCustomPart TINYINT,                        \n" +
                "	IN psupplierID INT,          \n" +
                "    IN pPartType int,    \n" +
                "    IN pExcludeStatus INT    \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "	DECLARE vRohsMainCategoryID INT;                                \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;                                \n" +
                "	/*===>this logic is added to compare invert rohs category*/                                \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN                                \n" +
                "		IF pRohsMainCategoryID = -1 THEN                                 \n" +
                "			SET vRohsMainCategoryID = -2;                                    \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN                                    \n" +
                "			SET vRohsMainCategoryID = -1;                                    \n" +
                "		END IF;                                    \n" +
                "	END IF;                            \n" +
                "	/*<===this logic is added to compare invert rohs category*/                        \n" +
                "	/* this logic used in purchase order when supplier is strictly custom part */                       \n" +
                "	IF(pstrictCustomPart = 1)THEN                \n" +
                "		SELECT *             \n" +
                "		FROM                                            \n" +
                "		(                                            \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,                                            \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,                              \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,                                \n" +
                "					c.mfgcodeID,            \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,            \n" +
                "					c.category,								c.imageURL,						c.documentPath,                        \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,                                \n" +
                "					c.value,								c.partPackage,					c.powerRating,                                \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,                                \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,                                \n" +
                "					c.pitchMating,							c.length,						c.width,                                \n" +
                "					c.height,								c.voltage,						c.weight,                                \n" +
                "					c.feature,								c.color,						c.partStatus,                                \n" +
                "					c.uom,									c.uomClassID,					c.unit,                                \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,	            \n" +
                "					c.restrictPackagingUseWithpermission,       \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,    \n" +
                "					r.rohsIcon,								r.name AS rohsName,                                \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,                                \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,                                \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,                                      \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,                                      \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,                                      \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,                                      \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,                                      \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,                                      \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,                                      \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,                                      \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,    \n" +
                "                    c.maxShelfLifeAcceptanceDays,			c.maxShelfListDaysThresholdPercentage,   \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,                                      \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,                          \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,            \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,                \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ            \n" +
                "			FROM 	component c            \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)            \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID            \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0            \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId            \n" +
                "			WHERE 	c.isdeleted = 0             \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)            \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                          \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                          \n" +
                "			AND 	c.id = IFNULL(pId, c.id)             \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)               \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)       \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)     \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)                         \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)                        \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)                         \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID             \n" +
                "									FROM supplier_mapping_mst smm            \n" +
                "									WHERE smm.isdeleted = 0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR                         \n" +
                "					c.mfgcodeid IN (SELECT mc.id             \n" +
                "										FROM mfgcodemst mc             \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR                        \n" +
                "					c.mfgcodeid IN (SELECT mc.id             \n" +
                "										FROM mfgcodemst mc             \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)                        \n" +
                "			)            \n" +
                "			AND c.category != 3            \n" +
                "			AND c.iscustom = 1            \n" +
                "		) AS a            \n" +
                "		WHERE (            \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                                        \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR             \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn             \n" +
                "													WHERE opn.refcomponentid = a.id             \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')            \n" +
                "											)            \n" +
                "										)            \n" +
                "				)                                                        \n" +
                "		)                                      \n" +
                "		ORDER BY mfgPN;        \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN                          \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,            \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */                                         \n" +
                "		SELECT * FROM                                            \n" +
                "		(                                            \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,             \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,             \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,             \n" +
                "					c.mfgcodeID,					            \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,             \n" +
                "					c.category,							c.imageURL,								c.documentPath,                        \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,            \n" +
                "					c.value,							c.partPackage,							c.powerRating,            \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,            \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,            \n" +
                "					c.pitchMating,        				c.length,								c.width,            \n" +
                "					c.height,        					c.voltage,								c.weight,            \n" +
                "					c.feature,        					c.color,								c.partStatus,            \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,                    \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,                                                \n" +
                "					c.restrictPackagingUseWithpermission,                                         \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,                    \n" +
                "					r.rohsIcon,							r.name AS rohsName,                                \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,                                \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,                                \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,                                      \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,                                       \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,                                      \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,                                      \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,                                      \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,                                      \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,                                      \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,                                      \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,                                      \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,                            \n" +
                "					c.refMfgPNMfgCodeId,                c.maxShelfLifeAcceptanceDays,			c.maxShelfListDaysThresholdPercentage,          \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,                \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,                \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ      \n" +
                "			FROM 	component c            \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))                       \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType                              \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID                       \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0            \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId            \n" +
                "			WHERE 	c.isdeleted = 0                       \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)                          \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                          \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                          \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)                          \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)                         \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)                          \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)              \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)     \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)     \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)                        \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)            \n" +
                "		) AS a                                                        \n" +
                "		WHERE (            \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                                        \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR             \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn             \n" +
                "													WHERE opn.refcomponentid = a.id             \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')            \n" +
                "											)            \n" +
                "										)            \n" +
                "				)                                                        \n" +
                "		)                                      \n" +
                "		ORDER BY mfgPN;             \n" +
                "  \n" +
                "	ELSE         \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,             \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/            \n" +
                "  \n" +
                "		select *             \n" +
                "		from            \n" +
                "		(            \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,            \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,            \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,            \n" +
                "					c.mfgcodeID,            \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,            \n" +
                "					c.tolerance,				c.category,							c.imageURL,            \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,            \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,            \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,            \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,            \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,            \n" +
                "					c.width,            		c.height,							c.voltage,            \n" +
                "					c.weight,            		c.feature,            				c.color,            \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,            \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,            \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,            \n" +
                "					c.packagingID,				c.packaging,        				    \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,                 \n" +
                "					r.rohsIcon,					r.name AS rohsName,            \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,            \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,            \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,            \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,            \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,            \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,            \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,            \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,            \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,            \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,            \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,				            \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,            \n" +
                "					c.refMfgPNMfgCodeId,          		c.maxShelfLifeAcceptanceDays,			c.maxShelfListDaysThresholdPercentage,   \n" +
                "					vu.mfgName  supplierPartMfgName,            \n" +
                "					vu.mfgPN supplierPartMfgPn,            \n" +
                "					vu.mfgCode supplierPartMfgCode,            \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,            \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ      \n" +
                "			from component c            \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)            \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0            \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0            \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId            \n" +
                "			WHERE 	c.isdeleted = 0            \n" +
                "			AND 	c.id = IFNULL(pId, c.id)            \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)            \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)            \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)            \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)            \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)            \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)            \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)            \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)     \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)    \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)            \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)            \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)        \n" +
                "		) AS a            \n" +
                "		WHERE (            \n" +
                "				(pSearch IS NULL AND 1 = 1) OR             \n" +
                "				(pSearch IS NOT NULL AND             \n" +
                "					(            \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR             \n" +
                "						EXISTS( SELECT  1            \n" +
                "								FROM 	component_otherpn opn            \n" +
                "								WHERE 	opn.refcomponentid = a.id            \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))            \n" +
                "					)            \n" +
                "				)            \n" +
                "			)            \n" +
                "		ORDER BY mfgPN;                        \n" +
                "	END IF;                                \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4896,'2.00','V1','User Story 34072: UMID Creation Life Acceptance threshold logic change - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4896:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-06-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_invalid_mfgmappingmst`;  \n" +
                "CREATE TRIGGER `Trg_AI_invalid_mfgmappingmst` AFTER INSERT ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN    \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "	VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Added Map Manufacturer',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgCodeID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-06-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_invalid_mfgmappingmst`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_AU_invalid_mfgmappingmst` AFTER UPDATE ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN    \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)    \n" +
                "        VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Map Manufacturer',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgCodeID) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-06-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN        \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;     \n" +
                "	IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),    \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;       \n" +
                "	IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR), CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Display Order',CAST(OLD.displayOrder AS CHAR), CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4897,'2.00','V1','Update history field lable and maintain display order - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4897:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`,`RO`, `RW`, `menuRoute`, `pageRoute`,  `pageURL`, `menuName`,   \n" +
                "`parentPageRoute`, `parentPageID`, `hasChild`,   \n" +
                "`orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`,  `updatedAt`,  `createdBy`,  `updatedBy`,   \n" +
                "`isDeleted`, `parentTabID`, `isDisplay`,  `displayMenuName`, `isAllowAsHomePage`,  \n" +
                " `createByRoleId`, `updateByRoleId`,  `isPopup`, `popupFunName`,  `isHideFromMenuList`, `paramDet`,  `isReadOnlyDeveloped`)   \n" +
                "values  \n" +
                "('CPN Parts', 0, 0, 'setting.partmaintenance.Assemblies.cpnparts', 'app.cpnparts', '/cpnparts/:customerID', 'CPN Parts',  \n" +
                " NULL, 175, 0,   \n" +
                " '32.80000000', 1, 'icons-cpn', 1, utc_timestamp(), utc_timestamp(),1, 1,   \n" +
                " 0, NULL, 1, 'CPN Parts', 0,  \n" +
                " 1, 1,  0, NULL, 0, NULL, 0);  \n" +
                "  \n" +
                " INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`)  \n" +
                "VALUES  \n" +
                "(1,(select pageID from page_detail where pageName = \"CPN Parts\"),0,0,1,0,utc_timestamp(),utc_timestamp(),1,1,0,1,0,1);  \n" +
                "  \n" +
                " INSERT INTO `rfq_lineitems_errorcode`  \n" +
                "(`logicID`,`errorCode`,`errorColor`,`description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,  \n" +
                "`isDeleted`,`displayName`,`org_description`,`notes`,`narrative`,`isExternalIssue`,`displayOrder`,`isResearchStatus`,  \n" +
                "`isAssemblyLevelError`,`createByRoleId`,`updateByRoleId`,`isAllowToEngrApproved`)  \n" +
                "VALUES  \n" +
                "(85, 'MPNNOTADDEDINCPN', '#99f6f2', '<% MPN %> not Mapped in CPN <% CPN %> Rev <% CPN Rev %>.', '<% MFR %>,<% MPN %>,<% CPN %>,<% CPN Rev %>',  \n" +
                " 1, utc_timestamp(),1, utc_timestamp(), 0, 'MPN not Mapped in CPN', '<% MPN %> not Mapped in CPN <% CPN %> Rev <% CPN Rev %>.', null,null,  \n" +
                " 0, 85.00, 0, 0,1,1,2);  \n" +
                "  \n" +
                "INSERT INTO `feature_mst`  \n" +
                "(`featureName`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`unqDate`)  \n" +
                "VALUES  \n" +
                "('Allow to delete CPN mapping', 1, 0, utc_timestamp(), 1, utc_timestamp(), 1, 1, 1, utc_timestamp());  \n" +
                "  \n" +
                "  \n" +
                "UPDATE `rfq_lineitems_headers` SET `name` = 'MPN' WHERE (`field` = 'mfgPN');  \n" +
                "UPDATE `rfq_lineitems_headers` SET `name` = 'SPN' WHERE (`field` = 'distPN');  \n" +
                "  \n" +
                "update rfq_lineitems_errorcode  set description = replace(description, 'MFR PN', 'MPN') where (`description` like '%MFR PN%');    \n" +
                "update rfq_lineitems_errorcode  set systemVariable = replace(systemVariable, 'MFR PN', 'MPN') where (`systemVariable` like '%MFR PN%');    \n" +
                "update rfq_lineitems_errorcode  set org_description = replace(org_description, 'MFR PN', 'MPN') where (`org_description` like '%MFR PN%');   \n" +
                "  \n" +
                "update rfq_lineitems_errorcode  set description = replace(description, 'Supplier PN', 'SPN') where (`description` like '%Supplier PN%');    \n" +
                "update rfq_lineitems_errorcode  set systemVariable = replace(systemVariable, 'Supplier PN', 'SPN') where (`systemVariable` like '%Supplier PN%');    \n" +
                "update rfq_lineitems_errorcode  set org_description = replace(org_description, 'Supplier PN', 'SPN') where (`org_description` like '%Supplier PN%');    \n" +
                "  \n" +
                "update rfq_lineitems_errorcode  set org_description = replace(org_description, '<% Rev %>', '<% CPN Rev %>') where (`org_description` like '%<% Rev %>%');  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4898,'2.00','V1','User Story 34040: CPN Master GUI Modification & give option to Delete MFR PN part from CPN mapping - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4898:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "alter table rfq_lineitems_alternatepart  \n" +
                "Add Column isMPNAddedinCPN tinyint default 1;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(            \n" +
                "IN ppartID INT            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;            \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS            \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,                  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,                  \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,       \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'             \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'             \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'             \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'             \n" +
                "        WHEN a.programingStatus = 5 THEN 'Who Will Program'             \n" +
                "        ELSE 'N/A' END) AS programingStatus,            \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,            \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,            \n" +
                "a.description, a.numOfPosition, a.numOfRows, a.customerRev,                  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,            \n" +
                "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,            \n" +
                "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,            \n" +
                "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,            \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,            \n" +
                "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,            \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'             \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'             \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'             \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,              \n" +
                "a.isObsoleteLine,            \n" +
                "a.customerApprovalForQPAREFDESStep,            \n" +
                "a.customerApprovalForBuyStep,            \n" +
                "a.customerApprovalForPopulateStep,            \n" +
                "a.dnpQPARefDesStep,            \n" +
                "a.customerApprovalForDNPQPAREFDESStep,            \n" +
                "a.customerApprovalForDNPBuyStep,            \n" +
                "a.customerApprovalCPN,            \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,            \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,              \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,            \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,             \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,            \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,            \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,            \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,              \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,            \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,            \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,            \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,            \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,            \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,              \n" +
                "ac.description AS additionalComment,            \n" +
                "ac.id AS additionalCommentId            \n" +
                "FROM rfq_lineitems a            \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0            \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0            \n" +
                "WHERE a.isDeleted = 0 AND a.partID = ppartID;               \n" +
                "  \n" +
                "SELECT b.id,                  \n" +
                "b.lineID,            \n" +
                "b.cust_lineID,            \n" +
                "b.qpa,            \n" +
                "b.refDesig,            \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,            \n" +
                "a.mfgCodeID,            \n" +
                "mcm.acquisitionDetail,            \n" +
                "a.mfgPN,            \n" +
                "a.mfgPNID,            \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,	            \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,            \n" +
                "a.distMfgCodeID,            \n" +
                "a.distPN,            \n" +
                "a.distMfgPNID,            \n" +
                "b.custPN,            \n" +
                "b.custPNID,            \n" +
                "b.isCustPN,            \n" +
                "b.uomID,            \n" +
                "b.programingStatus,            \n" +
                "b.substitutesAllow,            \n" +
                "b.allocatedInKit,            \n" +
                "a.description descriptionAlternate,            \n" +
                "b.description,            \n" +
                "b.numOfPosition,            \n" +
                "b.numOfRows,            \n" +
                "b.customerRev,                      \n" +
                "b.isCustPNProgrammingRequire,                    \n" +
                "b.customerDescription,            \n" +
                "b.customerPartDesc,            \n" +
                "b.isInstall,            \n" +
                "b.isPurchase,               \n" +
                "b.isNotRequiredKitAllocation,            \n" +
                "b.isSupplierToBuy,              \n" +
                "b.dnpQty,            \n" +
                "b.dnpDesig,            \n" +
                "a.id AS rfqAlternatePartID,            \n" +
                "b.qpaDesignatorStep,           \n" +
                "b.duplicateCPNStep,            \n" +
                "b.restrictCPNUseWithPermissionStep,            \n" +
                "b.restrictCPNUsePermanentlyStep,            \n" +
                "b.restrictCPNUseInBOMStep,            \n" +
                "b.requireMountingTypeStep,            \n" +
                "b.requireFunctionalTypeStep,              \n" +
                "b.requireMountingTypeError,            \n" +
                "b.requireFunctionalTypeError,            \n" +
                "b.isBuyDNPQty,            \n" +
                "b.isObsoleteLine,            \n" +
                "b.customerApprovalForQPAREFDESStep,            \n" +
                "b.customerApprovalForBuyStep,            \n" +
                "b.customerApprovalForPopulateStep,              \n" +
                "b.dnpQPARefDesStep,            \n" +
                "b.customerApprovalForDNPQPAREFDESStep,            \n" +
                "b.customerApprovalForDNPBuyStep,            \n" +
                "b.customerApprovalCPN,            \n" +
                "b.qpaCustomerApprovalComment,              \n" +
                "b.dnpqpaCustomerApprovalComment,            \n" +
                "b.buyCustomerApprovalComment,              \n" +
                "b.buyDNPCustomerApprovalComment,            \n" +
                "b.populateCustomerApprovalComment,            \n" +
                "b.cpnCustomerApprovalComment,              \n" +
                "b.isCustomerApprovedQPA,             \n" +
                "b.isCustomerApprovedBuy,            \n" +
                "b.isCustomerApprovedDNPQPA,            \n" +
                "b.isCustomerApprovedBuyDNP,            \n" +
                "b.isCustomerApprovedPopulate,            \n" +
                "b.isCustomerApprovedCPN,                 \n" +
                "b.kitAllocationNotRequiredComment,            \n" +
                "b.isNotRequiredKitAllocationApproved,            \n" +
                "a.mfgVerificationStep,            \n" +
                "a.mfgDistMappingStep,            \n" +
                "a.mfgCodeStep,            \n" +
                "a.customerApproval,            \n" +
                "a.isCustomerUnAppoval,            \n" +
                "a.org_mfgCode,            \n" +
                "a.org_mfgPN,            \n" +
                "a.org_distributor,            \n" +
                "a.org_distPN,            \n" +
                "a.distVerificationStep,            \n" +
                "a.distCodeStep,            \n" +
                "a.getMFGPNStep,            \n" +
                "a.obsoletePartStep,            \n" +
                "a.mfgGoodPartMappingStep,            \n" +
                "a.mfgPNStep,            \n" +
                "a.distPNStep,            \n" +
                "a.badMfgPN,            \n" +
                "a.distGoodPartMappingStep,            \n" +
                "a.nonRohsStep,            \n" +
                "a.epoxyStep,            \n" +
                "a.invalidConnectorTypeStep,            \n" +
                "a.duplicateMPNInSameLineStep,            \n" +
                "a.mismatchMountingTypeStep,            \n" +
                "a.mismatchFunctionalCategoryStep,            \n" +
                "a.mismatchFunctionalCategoryStep,            \n" +
                "a.restrictUseWithPermissionStep,            \n" +
                "a.restrictUsePermanentlyStep,            \n" +
                "a.partPinIsLessthenBOMPinStep,               \n" +
                "a.mismatchRequiredProgrammingStep,                     \n" +
                "a.mappingPartProgramStep,                       \n" +
                "a.exportControlledStep,            \n" +
                "a.tbdPartStep,            \n" +
                "a.userData1,            \n" +
                "a.userData2,            \n" +
                "a.userData3,            \n" +
                "a.userData4,            \n" +
                "a.userData5,            \n" +
                "a.userData6,            \n" +
                "a.userData7,            \n" +
                "a.userData8,            \n" +
                "a.userData9,            \n" +
                "a.userData10,            \n" +
                "a.pickupPadRequiredStep,            \n" +
                "a.matingPartRquiredStep,                 \n" +
                "a.suggestedGoodPartStep,                   \n" +
                "a.suggestedGoodDistPartStep,            \n" +
                "a.driverToolsRequiredStep,            \n" +
                "a.functionalTestingRequiredStep,            \n" +
                "a.mismatchCustomPartStep,            \n" +
                "a.mismatchValueStep,                   \n" +
                "a.approvedMountingType,            \n" +
                "a.mismatchPackageStep,            \n" +
                "a.mismatchPowerStep,            \n" +
                "a.mismatchToleranceStep,            \n" +
                "a.mismatchTempratureStep,            \n" +
                "a.mismatchNumberOfRowsStep,            \n" +
                "a.uomMismatchedStep,            \n" +
                "a.programingRequiredStep,            \n" +
                "a.mismatchProgrammingStatusStep,            \n" +
                "a.mismatchColorStep,            \n" +
                "a.restrictUseInBOMStep,            \n" +
                "a.restrictUseInBOMWithPermissionStep,            \n" +
                "a.restrictUseInBOMExcludingAliasStep,            \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,                   \n" +
                "a.restrictUseExcludingAliasStep,            \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,                   \n" +
                "a.unknownPartStep,            \n" +
                "a.defaultInvalidMFRStep,            \n" +
                "a.isUnlockApprovedPart,             \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                       \n" +
                "cpnPart.partTypeName                    \n" +
                "ELSE                       \n" +
                "part.partTypeName END) AS parttypeID,                     \n" +
                "a.parttypeID AS functionalID,              \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                       \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                       \n" +
                "cpnMount.name                   \n" +
                "ELSE                       \n" +
                "mount.name END) AS mountingtypeID,	                    \n" +
                "a.mountingtypeID AS mountingID,            \n" +
                "cat.categoryname partcategoryID,            \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,            \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,            \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,            \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,            \n" +
                "CASE WHEN            \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR            \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)            \n" +
                "THEN 1 ELSE 0 END isObsolete,            \n" +
                "co.PIDCode,             \n" +
                "co.mfgPNDescription,            \n" +
                "co.pitch,            \n" +
                "co.noOfRows,            \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,            \n" +
                "co.value,            \n" +
                "co.tolerance,            \n" +
                "co.voltage,                    \n" +
                "co.isCustom,            \n" +
                "co.packaging,            \n" +
                "co.deviceMarking,            \n" +
                "co.powerRating,            \n" +
                "co.minOperatingTemp,            \n" +
                "co.maxOperatingTemp,            \n" +
                "co.connecterTypeID,            \n" +
                "co.driverToolRequired,             \n" +
                "co.matingPartRquired,             \n" +
                "co.pickupPadRequired,             \n" +
                "co.programingRequired,             \n" +
                "co.dataSheetLink,                      \n" +
                "co.isCPN,                      \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,             \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,                  \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,              \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,            \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,            \n" +
                "co.isTemperatureSensitive,            \n" +
                "co.noOfPosition AS componentLead,            \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,            \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,            \n" +
                "co.createdBy,            \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,            \n" +
                "co.color,            \n" +
                "co.uom AS partUOMID,                  \n" +
                "co.serialNumber,                \n" +
                "CASE WHEN                  \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c                  \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0                  \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1                  \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,                    \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,            \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,        \n" +
                "b.additionalComment ,            \n" +
                "b.additionalCommentId,              \n" +
                "a.suggestedByApplicationMsg,              \n" +
                "a.suggestedByApplicationStep,  \n" +
                "a.isMPNAddedinCPN  \n" +
                "FROM rfq_lineitems_alternatepart a            \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id            \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0            \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0            \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0            \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id                 \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id                      \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id                 \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id                 \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0            \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id            \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id                     \n" +
                "WHERE a.isDeleted = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMIconList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMIconList`(                                   \n" +
                "IN pPartID INT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE totalCount INT DEFAULT 0;        \n" +
                "	DECLARE vDriveToolTotalCount INT DEFAULT 0;        \n" +
                "	DECLARE vPickUpPadTotalCount INT DEFAULT 0;        \n" +
                "	DECLARE vMattingTotalCount INT DEFAULT 0;        \n" +
                "	DECLARE vObsoleteTotalCount INT DEFAULT 0;        \n" +
                "	DECLARE vCustomPartTotalCount INT DEFAULT 0;        \n" +
                "	DECLARE vProgrammingPartTotalCount INT DEFAULT 0;        \n" +
                "	DECLARE vBadPartTotalCount INT DEFAULT 0;        \n" +
                "	DECLARE vBadSupplierPartTotalCount INT DEFAULT 0;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_IconList;        \n" +
                "	CREATE TEMPORARY TABLE temp_IconList(iconType VARCHAR(200), icon VARCHAR(500), tooltip VARCHAR(500));        \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)        \n" +
                "	select 'RoHS', IFNULL(ro.rohsIcon, 'noimage.png'), ro.`name`        \n" +
                "	from rfq_lineitems_alternatepart rla        \n" +
                "	Inner join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "	Inner Join rfq_rohsmst ro on ro.id = com.RoHsStatusID and ro.isdeleted = 0        \n" +
                "	where rla.partID = pPartID and rla.mfgPNID is not null and rla.isDeleted = 0        \n" +
                "	group by ro.rohsIcon,ro.`name`;        \n" +
                "  \n" +
                "	select COUNT(cs.isExportControlled) INTO totalCount from rfq_lineitems_alternatepart rla        \n" +
                "    Inner join component c on c.id = rla.mfgPNID and c.isdeleted = 0        \n" +
                "    Inner Join component_standard_details csd ON csd.componentID = c.id AND csd.isDeleted = 0        \n" +
                "    Inner JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1        \n" +
                "    WHERE rla.partID = pPartID AND rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0;        \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ExportControl', NULL, 'Export Conrolled');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET totalCount = 0;        \n" +
                "  \n" +
                "			select sum(com.driverToolRequired), sum(com.pickupPadRequired), sum(com.matingPartRquired),        \n" +
                "					sum(com.programingRequired),sum((case when com.isCustom = 1 or ifnull(disCom.isCustom,0) = 1 then 1 else 0 end)),        \n" +
                "					sum((case when (com.eolDate IS NOT NULL AND com.eolDate < fun_DatetimetoUTCDateTime()) OR cps.name <> 'Active' then 1 else 0 end)),        \n" +
                "					sum((case when com.isGoodPart = 2  then 1 else 0 end)),        \n" +
                "                    sum((case when disCom.isGoodPart = 2 then 1 else 0 end))        \n" +
                "					INTO vDriveToolTotalCount, vPickUpPadTotalCount, vMattingTotalCount, vProgrammingPartTotalCount,        \n" +
                "						vCustomPartTotalCount, vObsoleteTotalCount, vBadPartTotalCount ,vBadSupplierPartTotalCount        \n" +
                "            from rfq_lineitems_alternatepart rla        \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "			join component_partstatusmst cps on cps.id = com.partStatus        \n" +
                "			left join component disCom on disCom.id = rla.distMfgPNID and disCom.isdeleted = 0        \n" +
                "			where rla.partID = pPartID and rla.isdeleted = 0;        \n" +
                "  \n" +
                "	IF(vBadPartTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadPart', NULL, 'Incorrect Part');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "    IF(vBadSupplierPartTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadSupplierPart', NULL, 'Incorrect Supplier Part');        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF(vDriveToolTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('DriverTool', NULL, 'Require Drive Tools');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(vMattingTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('matingPart', NULL, 'Require Mating Part');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(vPickUpPadTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('pickupPad', NULL, 'Require Pickup Pad');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(vProgrammingPartTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('programing', NULL, 'Require Programing');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET totalCount = 0;        \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND (mismatchMountingTypeStep = 0)) ;        \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchMountingType', NULL, 'Mismatched Mounting Type');        \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET totalCount = 0;        \n" +
                "	SELECT COUNT(1) INTO totalCount FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mismatchFunctionalCategoryStep = 0 AND mfgPNID IS NOT NULL AND isDeleted = 0;    \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchFunctionalType', NULL, 'Mismatched Functional Type');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    SET totalCount = 0;        \n" +
                "	SELECT COUNT(1) INTO totalCount FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND isMPNAddedinCPN = 0 AND mfgPNID IS NOT NULL AND isDeleted = 0;    \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MPNNotMappedInCPN', NULL, 'MPN not Mapped in CPN');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET totalCount = 0;        \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND  approvedMountingType = 1) ;        \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ApproveMountingType', NULL, 'Approved Mounting Type');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* SET totalCount = 0;        \n" +
                "	SELECT MAX(CASE WHEN (co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR        \n" +
                "		EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name <> 'Active' AND cp.isDeleted = 0)        \n" +
                "		THEN 1 ELSE 0 END) INTO totalCount        \n" +
                "	FROM component co WHERE co.id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);        \n" +
                "  */        \n" +
                "	IF(vObsoleteTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('obsolete', NULL, 'Obsolete');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET totalCount = 0;        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (        \n" +
                "		SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0        \n" +
                "	) AND id NOT IN (        \n" +
                "		SELECT c.refComponentID FROM component_temperature_sensitive_data c WHERE c.deletedAt IS NULL AND c.refComponentID IN (        \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0        \n" +
                "			)        \n" +
                "		) AND functionalCategoryID IN (SELECT id FROM rfq_parttypemst WHERE isTemperatureSensitive = 1);        \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxWarn', NULL, 'Tmax is not Defined');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET totalCount = 0;        \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component_temperature_sensitive_data WHERE deletedAt IS NULL AND refComponentID IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);        \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxRed', NULL, 'Tmax');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(vCustomPartTotalCount > 0) THEN        \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('CustomPart', NULL, 'Custom Part');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET totalCount = 0;        \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)        \n" +
                "	SELECT 'OperationalAttribute', IFNULL(icon, 'noimage.png'), `description` FROM component_dynamic_attribute WHERE id IN (        \n" +
                "		SELECT attributeID FROM component_dynamic_attribute_mapping_part WHERE mfgPNID IN (        \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0        \n" +
                "			)  AND deletedAt IS NULL	) ;        \n" +
                "  \n" +
                "	SELECT * FROM temp_IconList;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(          \n" +
                "	IN ppageIndex INT,            \n" +
                "	IN precordPerPage INT,            \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pCategoryIDs LONGTEXT              \n" +
                ")  \n" +
                "BEGIN          \n" +
                "		DECLARE pOffset INT;            \n" +
                "		DECLARE rowNumWhere VARCHAR(255);            \n" +
                "		DECLARE vTextAngularKeyCode VARCHAR(500);            \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);            \n" +
                "		DECLARE vTimeZone VARCHAR(50);            \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;            \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;            \n" +
                "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                          \n" +
                "        SET @tempQuery = CONCAT(\"SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFR Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFR Verification'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'Invalid MFR-Supplier Mapping'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFRPN'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFR Bad Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFR PN Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'RoHS Status'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Pin Mismatch'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MFR PN'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Require Mating Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Require Drive Tools Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Require Pickup Pad'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Type'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 34) THEN 'Duplicate CPN with Rev'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Require Functional Testing Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 39) THEN 'UOM Mismatched'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 40) THEN 'Programming Is Not Included'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 41) THEN 'Mismatch Color'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 42) THEN 'Mismatch Temperature'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 43) THEN 'Mismatch Power'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 50) THEN 'Restrict Use in BOM'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 51) THEN 'Customer Approval For QPA or REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 52) THEN 'Customer Approval For Buy'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 53) THEN 'Customer Approval For Populate'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 54) THEN 'Mismatch Number Of Rows'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 55) THEN 'Part pin is less then BOM pin'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 56) THEN 'TBD Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 57) THEN 'Restrict CPN Use With Permission'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 58) THEN 'Restrict CPN Use Permanently'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 59) THEN 'Restrict CPN Use in BOM'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 60) THEN 'Export Controlled'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 61) THEN 'Restrict Use in BOM With Permission'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 62) THEN 'TBD Type Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 63) THEN 'Default Invalid MFR'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 64) THEN 'Restrict Use In BOM Excluding Packaging Alias (With Permission)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 65) THEN 'Restrict Use In BOM Excluding Packaging Alias (Permanently)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 66) THEN 'Restrict Use Excluding Packaging Alias (Permanently)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 67) THEN 'Restrict Use Excluding Packaging Alias (With Permission)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 68) THEN 'DNP Qty vs REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 69) THEN 'Customer Approval For DNP QPA or REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 70) THEN 'Customer Approval For Buy DNP Qty'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 71) THEN 'Invalid DNP REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 72) THEN 'Suggested Good Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 73) THEN 'Suggested Good Supplier Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 74) THEN 'Mismatch Required Programming'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 75) THEN 'Mismatch Custom Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 76) THEN 'Map Part Program REF DES'      \n" +
                "        WHEN(rfq_lineitems_errorcode.logicID = 77) THEN 'Suggested MFR Mapping'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 78) THEN 'Suggested Alternate Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 79) THEN 'Suggested Packaging Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 80) THEN 'Suggested Process Material Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 81) THEN 'Suggested RoHS Replacement Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 82) THEN 'Mismatch Line and Part Programming'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 83) THEN 'QPA REF DES Change'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 84) THEN 'DNP QPA REF DES Change'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 85) THEN 'MPN not Mapped in CPN'      \n" +
                "		ELSE '' END) AS `logicName`,errorCode, errorColor,      \n" +
                "        fun_getUserNameByID(updatedBy) updatedby,        \n" +
                "		fun_getUserNameByID(createdBy) createdby,        \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,        \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,        \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                    \n" +
                "		description, systemVariable,logicID, displayName, org_description,                         \n" +
                "        fun_getTextAngularData(narrative,'\",vTextAngularKeyCode,\"') narrative,                        \n" +
                "        isExternalIssue, displayOrder,isResearchStatus,isAssemblyLevelError,isAllowToEngrApproved,           \n" +
                "		(CASE WHEN (`isExternalIssue` = 0) THEN 'No'          \n" +
                "		WHEN (`isExternalIssue` = 1) THEN 'Yes'          \n" +
                "		ELSE ''          \n" +
                "		END) AS `isExternalIssueValue`,                                 \n" +
                "		(CASE WHEN (`isResearchStatus` = 0) THEN 'No'          \n" +
                "		WHEN (`isResearchStatus` = 1) THEN 'Yes'          \n" +
                "		ELSE ''          \n" +
                "		END) AS `isResearchStatusValue`,                                 \n" +
                "		(CASE WHEN (`isAssemblyLevelError` = 0) THEN 'Line Level'          \n" +
                "		WHEN (`isAssemblyLevelError` = 1) THEN 'Assembly Level'          \n" +
                "		ELSE ''          \n" +
                "		END) AS `isAssemblyLevelErrorValue`,                             \n" +
                "		(CASE WHEN (`isAllowToEngrApproved` = 0) THEN 'No'          \n" +
                "		WHEN (`isAllowToEngrApproved` = 1) THEN 'Yes'                       \n" +
                "		WHEN (`isAllowToEngrApproved` = 2) THEN 'N/A (Not Applicable)'          \n" +
                "		ELSE ''          \n" +
                "		END) AS `isAllowToEngrApprovedValue`,          \n" +
                "		(SELECT COUNT(1) FROM rfq_error_code_category_mapping           \n" +
                "			WHERE errorCodeId = rfq_lineitems_errorcode.id AND isDeleted = 0 )AS RestrictCount          \n" +
                "		FROM `rfq_lineitems_errorcode`          \n" +
                "		WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0\");          \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL ASC, displayOrder, errorCode\") ;                \n" +
                "		ELSE                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "			SET pWhereClause = '1=1' ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "		IF (pCategoryIDs IS NOT NULL AND pCategoryIDs != '') THEN           \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND id IN (SELECT m.errorCodeID FROM rfq_error_code_category_mapping m WHERE m.categoryID IN (', pCategoryIDs,') AND m.isDeleted = 0)');              \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "		ELSE	                \n" +
                "			SET rowNumWhere = '';                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "			/* to get total count of rows */               \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);              \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;              \n" +
                "			EXECUTE query2;              \n" +
                "			DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c              \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;              \n" +
                "			EXECUTE query1;              \n" +
                "			DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(      \n" +
                "IN pPartID INT,      \n" +
                "IN pUserID INT,      \n" +
                "IN pRoleID INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DECLARE totalCount INT DEFAULT 0;      \n" +
                "DECLARE currIndex INT DEFAULT 0;      \n" +
                "DECLARE prevLineID INT;      \n" +
                "DECLARE currCustPNID INT;      \n" +
                "DECLARE currMFGPNID INT;      \n" +
                "DECLARE currLineID INT;      \n" +
                "DECLARE mountingTypeID INT;      \n" +
                "DECLARE functionalCategoryID INT;      \n" +
                "DECLARE rohsStatusID INT;      \n" +
                "DECLARE categoryID INT;      \n" +
                "DECLARE partTypeID INT;      \n" +
                "DECLARE statusID INT;      \n" +
                "DECLARE mfgPNID INT;      \n" +
                "DECLARE currCustRev VARCHAR(10);      \n" +
                "DECLARE currCustPN VARCHAR(500);      \n" +
                "DECLARE currCustomerPartDesc TEXT;      \n" +
                "DECLARE mfgPN VARCHAR(500);      \n" +
                "DECLARE mfgPID VARCHAR(500);      \n" +
                "DECLARE maxDisplayOrder DECIMAL;      \n" +
                "DECLARE pLiveInternalVersion INT;      \n" +
                "DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);      \n" +
                "DECLARE pCompanyName VARCHAR(100);      \n" +
                "DECLARE pMFGPN VARCHAR(100);      \n" +
                "DECLARE pEpicoreType VARCHAR(100);      \n" +
                "DECLARE vSerialNumer VARCHAR(20);      \n" +
                "DECLARE v_message VARCHAR(20);      \n" +
                "DECLARE maxPartId INT;      \n" +
                "SET categoryID = 2;      \n" +
                "SET partTypeID = 2;  \n" +
                "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';      \n" +
                "	ELSE      \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';      \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;      \n" +
                "		ELSE      \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (      \n" +
                "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,      \n" +
                "		rla.mfgPNID,    c.RoHSStatusID      \n" +
                "	FROM rfq_lineitems_alternatepart rla      \n" +
                "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id      \n" +
                "	JOIN component c ON c.id = rla.mfgPNID      \n" +
                "	WHERE rl.custPN IS NOT NULL AND rl.custPN != \"\" AND rla.mfgPNID IS NOT NULL      \n" +
                "	AND rl.partID = pPartID      \n" +
                "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1  \n" +
                "	AND rl.duplicateCPNStep = 1);  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;       \n" +
                "    IF totalCount > 0 THEN      \n" +
                "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';      \n" +
                "		IF functionalCategoryID IS NULL THEN      \n" +
                "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;      \n" +
                "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)      \n" +
                "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF mountingTypeID IS NULL THEN      \n" +
                "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO mountingTypeID;      \n" +
                "		END IF;      \n" +
                "		SET prevLineID = 0;      \n" +
                "		WHILE currIndex < totalCount DO      \n" +
                "			SET currCustPN = NULL;      \n" +
                "			SET currCustRev = NULL;      \n" +
                "			SET currCustomerPartDesc = NULL;  \n" +
                "  \n" +
                "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc  \n" +
                "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc   \n" +
                "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;      \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;      \n" +
                "  \n" +
                "            SET pLiveInternalVersion = 0;      \n" +
                "  \n" +
                "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN      \n" +
                "				IF (currCustPNID IS NOT NULL) THEN      \n" +
                "					IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN      \n" +
                "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "  \n" +
                "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;      \n" +
                "  \n" +
                "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;      \n" +
                "  \n" +
                "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                "  \n" +
                "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;      \n" +
                "						INSERT INTO rfq_assembly_history      \n" +
                "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId)      \n" +
                "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFR PN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID);      \n" +
                "  \n" +
                "						-- Update All Assembly for CPN change      \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);      \n" +
                "					END IF;      \n" +
                "				END IF;      \n" +
                "				IF (currCustPNID IS NULL) THEN      \n" +
                "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN      \n" +
                "						SET rohsStatusID = 0;      \n" +
                "					ELSE      \n" +
                "						SET rohsStatusID = 1;      \n" +
                "					END IF;      \n" +
                "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN      \n" +
                "						SET currCustRev = \"-\";      \n" +
                "					END IF;      \n" +
                "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;      \n" +
                "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);      \n" +
                "					SET mfgPNID = NULL;  \n" +
                "  \n" +
                "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;      \n" +
                "					-- SELECT   mfgPNID;      \n" +
                "					IF mfgPNID IS NULL THEN      \n" +
                "					-- SELECT   mfgPNID;      \n" +
                "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);  \n" +
                "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;    \n" +
                "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,      \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,      \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,      \n" +
                "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription)      \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,      \n" +
                "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),      \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,      \n" +
                "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'));  \n" +
                "						SELECT LAST_INSERT_ID() INTO maxPartId;      \n" +
                "						IF(currMFGPNID > 0 ) THEN      \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);      \n" +
                "						END IF;  \n" +
                "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;      \n" +
                "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);      \n" +
                "					ELSE      \n" +
                "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN      \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);      \n" +
                "							SET currCustPNID = mfgPNID;  \n" +
                "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;      \n" +
                "							SET pLiveInternalVersion = pLiveInternalVersion + 1;      \n" +
                "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;      \n" +
                "							INSERT INTO rfq_assembly_history      \n" +
                "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "								oldValue,newValue,changeVersion,      \n" +
                "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)      \n" +
                "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFR PN\",      \n" +
                "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;      \n" +
                "						-- Update All Assembly for CPN change      \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);      \n" +
                "						ELSE      \n" +
                "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;      \n" +
                "						END IF;      \n" +
                "					END IF;      \n" +
                "				END IF;      \n" +
                "			END IF;      \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "			UPDATE component    \n" +
                "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);      \n" +
                "		END IF;      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "		SELECT  * FROM temp_new_cpn_id;      \n" +
                "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(                          \n" +
                "	IN pGoodPart VARCHAR(100),                                \n" +
                "	IN pSearch VARCHAR(500),                                \n" +
                "	IN pId INT,            \n" +
                "	IN pMfgType VARCHAR(50),                                \n" +
                "	IN pRoHSStatusID VARCHAR(100),                                \n" +
                "	IN pMfgCodeId INT,                                \n" +
                "	IN pMountingType VARCHAR(50),                                \n" +
                "	IN pMountingTypeId INT,                                \n" +
                "	IN pCategoryID INT,                                \n" +
                "	IN pIsContainCPN TINYINT,                                \n" +
                "	IN pRohsMainCategoryID INT,                                \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,                        \n" +
                "	IN prefSupplierMfgpnComponentID INT ,                        \n" +
                "	IN ppackagingID INT,                        \n" +
                "	IN pstrictCustomPart TINYINT,                        \n" +
                "	IN psupplierID INT,          \n" +
                "    IN pPartType int,    \n" +
                "    IN pExcludeStatus INT    \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "	DECLARE vRohsMainCategoryID INT;                                \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;                                \n" +
                "	/*===>this logic is added to compare invert rohs category*/                                \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN                                \n" +
                "		IF pRohsMainCategoryID = -1 THEN                                 \n" +
                "			SET vRohsMainCategoryID = -2;                                    \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN                                    \n" +
                "			SET vRohsMainCategoryID = -1;                                    \n" +
                "		END IF;                                    \n" +
                "	END IF;                            \n" +
                "	/*<===this logic is added to compare invert rohs category*/                        \n" +
                "	/* this logic used in purchase order when supplier is strictly custom part */                       \n" +
                "	IF(pstrictCustomPart = 1)THEN                \n" +
                "		SELECT *             \n" +
                "		FROM                                            \n" +
                "		(                                            \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,                                            \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,                              \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,                                \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,            \n" +
                "					c.category,								c.imageURL,						c.documentPath,                        \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,                                \n" +
                "					c.value,								c.partPackage,					c.powerRating,                                \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,                                \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,                                \n" +
                "					c.pitchMating,							c.length,						c.width,                                \n" +
                "					c.height,								c.voltage,						c.weight,                                \n" +
                "					c.feature,								c.color,						c.partStatus,                                \n" +
                "					c.uom,									c.uomClassID,					c.unit,                                \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,	            \n" +
                "					c.restrictPackagingUseWithpermission,       \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,    \n" +
                "					r.rohsIcon,								r.name AS rohsName,                                \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,                                \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,                                \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,                                      \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,                                      \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,                                      \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,                                      \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,                                      \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,                                      \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,                                      \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,                                      \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,                                      \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,                                      \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,                          \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,            \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,                \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ            \n" +
                "			FROM 	component c            \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)            \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID            \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0            \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId            \n" +
                "			WHERE 	c.isdeleted = 0             \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)            \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                          \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                          \n" +
                "			AND 	c.id = IFNULL(pId, c.id)             \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)               \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)       \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)     \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)                         \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)                        \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)                         \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID             \n" +
                "									FROM supplier_mapping_mst smm            \n" +
                "									WHERE smm.isdeleted = 0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR                         \n" +
                "					c.mfgcodeid IN (SELECT mc.id             \n" +
                "										FROM mfgcodemst mc             \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR                        \n" +
                "					c.mfgcodeid IN (SELECT mc.id             \n" +
                "										FROM mfgcodemst mc             \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)                        \n" +
                "			)            \n" +
                "			AND c.category != 3            \n" +
                "			AND c.iscustom = 1            \n" +
                "		) AS a            \n" +
                "		WHERE (            \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                                        \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR             \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn             \n" +
                "													WHERE opn.refcomponentid = a.id             \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')            \n" +
                "											)            \n" +
                "										)            \n" +
                "				)                                                        \n" +
                "		)                                      \n" +
                "		ORDER BY mfgPN;        \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN                          \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,            \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */                                         \n" +
                "		SELECT * FROM                                            \n" +
                "		(                                            \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,             \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,             \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,             \n" +
                "					c.mfgcodeID,					    c.rev,        \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,             \n" +
                "					c.category,							c.imageURL,								c.documentPath,                        \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,            \n" +
                "					c.value,							c.partPackage,							c.powerRating,            \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,            \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,            \n" +
                "					c.pitchMating,        				c.length,								c.width,            \n" +
                "					c.height,        					c.voltage,								c.weight,            \n" +
                "					c.feature,        					c.color,								c.partStatus,            \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,                    \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,                                                \n" +
                "					c.restrictPackagingUseWithpermission,                                         \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,                    \n" +
                "					r.rohsIcon,							r.name AS rohsName,                                \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,                                \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,                                \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,                                      \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,                                       \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,                                      \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,                                      \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,                                      \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,                                      \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,                                      \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,                                      \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,                                      \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,                            \n" +
                "					c.refMfgPNMfgCodeId,                          \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,                \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,                \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ      \n" +
                "			FROM 	component c            \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))                       \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType                              \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID                       \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0            \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId            \n" +
                "			WHERE 	c.isdeleted = 0                       \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)                          \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                          \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                          \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)                          \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)                         \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)                          \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)              \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)     \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)     \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)                        \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)            \n" +
                "		) AS a                                                        \n" +
                "		WHERE (            \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                                        \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR             \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn             \n" +
                "													WHERE opn.refcomponentid = a.id             \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')            \n" +
                "											)            \n" +
                "										)            \n" +
                "				)                                                        \n" +
                "		)                                      \n" +
                "		ORDER BY mfgPN;             \n" +
                "  \n" +
                "	ELSE         \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,             \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/            \n" +
                "  \n" +
                "		select *             \n" +
                "		from            \n" +
                "		(            \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,            \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,            \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,            \n" +
                "					c.mfgcodeID,          		c.rev,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,            \n" +
                "					c.tolerance,				c.category,							c.imageURL,            \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,            \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,            \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,            \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,            \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,            \n" +
                "					c.width,            		c.height,							c.voltage,            \n" +
                "					c.weight,            		c.feature,            				c.color,            \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,            \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,            \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,            \n" +
                "					c.packagingID,				c.packaging,        				    \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,                 \n" +
                "					r.rohsIcon,					r.name AS rohsName,            \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,            \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,            \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,            \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,            \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,            \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,            \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,            \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,            \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,            \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,            \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,				            \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,            \n" +
                "					c.refMfgPNMfgCodeId,            \n" +
                "					vu.mfgName  supplierPartMfgName,            \n" +
                "					vu.mfgPN supplierPartMfgPn,            \n" +
                "					vu.mfgCode supplierPartMfgCode,            \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,            \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ      \n" +
                "			from component c            \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)            \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0            \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0            \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId            \n" +
                "			WHERE 	c.isdeleted = 0            \n" +
                "			AND 	c.id = IFNULL(pId, c.id)            \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)            \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)            \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)            \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)            \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)            \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)            \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)            \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)     \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)    \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)            \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)            \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)        \n" +
                "		) AS a            \n" +
                "		WHERE (            \n" +
                "				(pSearch IS NULL AND 1 = 1) OR             \n" +
                "				(pSearch IS NOT NULL AND             \n" +
                "					(            \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR             \n" +
                "						EXISTS( SELECT  1            \n" +
                "								FROM 	component_otherpn opn            \n" +
                "								WHERE 	opn.refcomponentid = a.id            \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))            \n" +
                "					)            \n" +
                "				)            \n" +
                "			)            \n" +
                "		ORDER BY mfgPN;                        \n" +
                "	END IF;                                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	DECLARE pIsUpdateRequired BOOL;      \n" +
                "	DECLARE pLiveInternalVersion INT;            \n" +
                "	DECLARE pPartID INT;      \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);      \n" +
                "	DECLARE pCompanyName VARCHAR(100);      \n" +
                "	DECLARE pErrorNarrative TEXT;      \n" +
                "	DECLARE pErrorDisplayName TEXT;      \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;      \n" +
                "	DECLARE pErrorCode VARCHAR(100);      \n" +
                "	SET pIsUpdateRequired = FALSE;      \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;      \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;      \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';                \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN            \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';             \n" +
                "	ELSE             \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';             \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN            \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;            \n" +
                "		ELSE             \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;            \n" +
                "		END IF;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';            \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN            \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history            \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)            \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",            \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN               \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history            \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)            \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",            \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN                 \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history            \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)            \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",            \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);                             \n" +
                "			-- if New.org_mfgCode is null then                            \n" +
                "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;                            \n" +
                "			-- end if;                \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",               \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);               \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history            \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)            \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",            \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);                                  \n" +
                "			-- IF New.org_mfgPN IS NULL THEN                            \n" +
                "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;                            \n" +
                "			-- END IF;                                                  \n" +
                "		END IF;		            \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history            \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)            \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",            \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);            \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                       \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                       \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                        \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                               \n" +
                "  \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                         \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                         \n" +
                "  \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;       \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                        \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                           \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                        \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                                 \n" +
                "  \n" +
                "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                                  \n" +
                "  \n" +
                "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                              \n" +
                "  \n" +
                "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                           \n" +
                "  \n" +
                "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                  \n" +
                "  \n" +
                "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                                  \n" +
                "  \n" +
                "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                               \n" +
                "  \n" +
                "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;                   \n" +
                "  \n" +
                "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);              \n" +
                "		END IF;             \n" +
                "        # mismatch programming require step            \n" +
                "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;           \n" +
                "  \n" +
                "        # part program ref des mapping require step          \n" +
                "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN              \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                    \n" +
                "			INSERT INTO rfq_assembly_history              \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,             \n" +
                "				oldValue,newValue,changeVersion,             \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)              \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,             \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),             \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);            \n" +
                "		END IF;          \n" +
                "        # Mismatch Programming Statue step      \n" +
                "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;   \n" +
                "  \n" +
                "	 # MPN Mapping Pengin in CPN  \n" +
                "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                      \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);              \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN    \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;             \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN                \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,               \n" +
                "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);               \n" +
                "		ELSE            \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;              \n" +
                "			INSERT INTO rfq_assembly_history                \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,               \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);               \n" +
                "		END IF;            \n" +
                "	END IF;               \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN                  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "	END IF;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN                \n" +
                "	DECLARE pIsUpdateRequired BOOL;          \n" +
                "	DECLARE pLiveInternalVersion INT;          \n" +
                "	DECLARE pPartID INT;          \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);          \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);          \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);          \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                 \n" +
                "	DECLARE pCompanyName VARCHAR(100);              \n" +
                "	DECLARE pErrorNarrative TEXT;                  \n" +
                "	DECLARE pErrorDisplayName TEXT;                  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;           \n" +
                "	DECLARE pErrorCode VARCHAR(100);                   \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);             \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;              \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;                \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;           \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';              \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN          \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';           \n" +
                "	ELSE           \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';           \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN          \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;          \n" +
                "		ELSE           \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;          \n" +
                "		END IF;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';          \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN                \n" +
                "		SET pIsUpdateRequired = TRUE;               \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",          \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",          \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",          \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);          \n" +
                "	END IF;	          \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",          \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF OLD.isDeleted != NEW.isDeleted THEN                 \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN             \n" +
                "			SET pDeleteMessage =\"MFR PN \";                \n" +
                "		ELSE             \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);               \n" +
                "		END IF;             \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",          \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);          \n" +
                "	END IF;	          \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",            \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",          \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);          \n" +
                "	END IF;             \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;          \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;                \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN                   \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;          \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN              \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                   \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;          \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, -1) != IFNULL(NEW.getMFGPNStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;          \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN               \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;          \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;          \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;          \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN                  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;          \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;          \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN                \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                 \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;          \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;          \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;          \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;                \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;          \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN           \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;          \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN           \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');            \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;          \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;          \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;               \n" +
                "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;          \n" +
                "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;      	          \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;          \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN                   \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');	               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;          \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;             \n" +
                "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;          \n" +
                "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN                \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;          \n" +
                "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN           \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');            \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;          \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN               \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;          \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN               \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;          \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN                   \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF; 	          \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, -1) != IFNULL(NEW.uomMismatchedStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;          \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;          \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, -1) != IFNULL(NEW.restrictUseInBOMStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;          \n" +
                "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;          \n" +
                "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN                  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;          \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN             \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');           \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;          \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;          \n" +
                "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, -1) != IFNULL(NEW.mismatchNumberOfRowsStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;          \n" +
                "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;          \n" +
                "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN                   \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;          \n" +
                "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                  \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;          \n" +
                "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN                \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                 \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;          \n" +
                "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;          \n" +
                "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN                  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;              \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, -1) != IFNULL(NEW.isUnlockApprovedPart, -1)) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN             \n" +
                "			SET pDeleteMessage =\"MFR PN \";                \n" +
                "		ELSE             \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);               \n" +
                "		END IF;           \n" +
                "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "	 		INSERT INTO rfq_assembly_history          \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "	 			oldValue,newValue,changeVersion,                   \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)          \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",                   \n" +
                "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);                   \n" +
                "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN          \n" +
                "	 		INSERT INTO rfq_assembly_history          \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "	 			oldValue,newValue,changeVersion,                   \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)          \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",                   \n" +
                "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;               \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN          \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSE          \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;            \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,                   \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),          \n" +
                "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                \n" +
                "		END IF;          \n" +
                "	END IF;                  \n" +
                "  \n" +
                "  # Mismatch Programming required step          \n" +
                "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode            \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;          \n" +
                "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN          \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');              \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                   \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                   \n" +
                "		END IF;          \n" +
                "	END IF;           \n" +
                "      # Part and Program ref des mapping required step                  \n" +
                "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN       	                  \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode          \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;                  \n" +
                "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN                  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');            \n" +
                "			INSERT INTO rfq_assembly_history                  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                 \n" +
                "				oldValue,newValue,changeVersion,                 \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                 \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                 \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                 \n" +
                "		ELSEIF NEW.mappingPartProgramStep = 0 THEN                  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history                  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                 \n" +
                "				oldValue,newValue,changeVersion,                 \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                 \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                 \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                 \n" +
                "		END IF;                  \n" +
                "	END IF;                \n" +
                "  \n" +
                "  \n" +
                "    # Mismatch Programming status Step        \n" +
                "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN       	                  \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode          \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;                  \n" +
                "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN                  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');            \n" +
                "			INSERT INTO rfq_assembly_history                  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                 \n" +
                "				oldValue,newValue,changeVersion,                 \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                 \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                 \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                 \n" +
                "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN                  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history                  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                 \n" +
                "				oldValue,newValue,changeVersion,                 \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                 \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                 \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                 \n" +
                "		END IF;                  \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF IFNULL(OLD.approvedMountingType, -1) != IFNULL(NEW.approvedMountingType, -1) THEN       	          \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		IF IFNULL(NEW.approvedMountingType, -1) = 0 THEN          \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',                   \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);                   \n" +
                "		ELSE          \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;            \n" +
                "			INSERT INTO rfq_assembly_history          \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                   \n" +
                "				oldValue,newValue,changeVersion,                   \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)          \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',                   \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                   \n" +
                "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);                \n" +
                "		END IF;          \n" +
                "	END IF;      \n" +
                "  \n" +
                "    # Mismatch Programming status Step        \n" +
                "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN       	                  \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode          \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;                  \n" +
                "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN                  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');            \n" +
                "			INSERT INTO rfq_assembly_history                  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                 \n" +
                "				oldValue,newValue,changeVersion,                 \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                 \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                 \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                 \n" +
                "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN                  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history                  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                 \n" +
                "				oldValue,newValue,changeVersion,                 \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)                  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,                 \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                 \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);                 \n" +
                "		END IF;                  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN                \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);                \n" +
                "	END IF;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE iF EXISTS `Sproc_RemoveMPNFromCPNMapping`;  \n" +
                "CREATE PROCEDURE `Sproc_RemoveMPNFromCPNMapping`(  \n" +
                "	IN prefCompID INT,  \n" +
                "	IN prefCPNID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT,  \n" +
                "    IN pDeleteRequest tinyint,  \n" +
                "    IN pDeleteMPNFrom tinyint,  \n" +
                "    IN preason varchar(1200)  \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "DECLARE vLiveInternalVersion INT;      \n" +
                "DECLARE vLiveInternalVersionMethod VARCHAR(50);      \n" +
                "DECLARE vLiveInternalVersionDateFormate VARCHAR(50);      \n" +
                "DECLARE vInternalVersion VARCHAR(100);     \n" +
                "DECLARE vMFGPN VARCHAR(100);     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "	BEGIN    \n" +
                "		ROLLBACK;    \n" +
                "		RESIGNAL;    \n" +
                "	END;    \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "	  BEGIN    \n" +
                "		ROLLBACK;    \n" +
                "		RESIGNAL;    \n" +
                "	END;    \n" +
                "	START TRANSACTION;      \n" +
                "	# get Internal version format   \n" +
                "		 SELECT  `values` INTO vLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "			IF vLiveInternalVersionMethod = \"P\" THEN      \n" +
                "				SELECT `values` INTO vInternalVersion FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';      \n" +
                "			ELSE      \n" +
                "				SELECT `values` INTO vLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';      \n" +
                "				IF vLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO vInternalVersion;      \n" +
                "				ELSE      \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO vInternalVersion;      \n" +
                "				END IF;      \n" +
                "			END IF;              \n" +
                "  \n" +
                "		SELECT IFNULL(k.liveInternalVersion, 0) INTO vLiveInternalVersion FROM component k WHERE k.id = prefCPNID;   \n" +
                "        SET vLiveInternalVersion  = vLiveInternalVersion  + 1;    \n" +
                "  \n" +
                "		SELECT  j.mfgPN INTO vMFGPN FROM component j WHERE j.id = prefCompID;    \n" +
                "        INSERT INTO rfq_assembly_history      \n" +
                "		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion,description, createdAt,createdBy,createByRoleId)      \n" +
                "		VALUES (\"component\", prefCPNID, NULL,NULL, prefCPNID, \"MFR PN\",  vMFGPN ,NULL, CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR)),  \n" +
                "        concat('Delete Request From: ',(case when pDeleteRequest = 1 then 'Internal Error' when pDeleteRequest = 2 then 'Customer Request' end), '\n Reason: ', preason),  \n" +
                "        fun_DatetimetoUTCDateTime(),pUserID,pRoleID);      \n" +
                "  \n" +
                "  \n" +
                "    UPDATE component    \n" +
                "	SET liveInternalVersion = vLiveInternalVersion, liveVersion = CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR))   \n" +
                "    WHERE id = prefCPNID;    \n" +
                "  \n" +
                "	# remove CPN entry from CPN mapping  \n" +
                "        update component_cust_alias_rev_pn  \n" +
                "        set isdeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "        where refComponentID = prefCompID and refCPNPartID = prefCPNID and isdeleted = 0;  \n" +
                "  \n" +
                "	# Manage History for Change   \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    if pDeleteMPNFrom = 1 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0  \n" +
                "        set rla.isMPNAddedinCPN = 0,  \n" +
                "			rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.updatedBy = pUserID,  \n" +
                "            rla.updateByRoleId = pRoleID  \n" +
                "        where rla.mfgPNID = prefCompID and rl.custPNID = prefCPNID and rla.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	elseif pDeleteMPNFrom = 2 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        Join  ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 )a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set rla.isDeleted = 1,  \n" +
                "			rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.deletedBy = pUserID,  \n" +
                "            rla.deleteByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount>1 and a.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		update rfq_lineitems_alternatepart rla  \n" +
                "        Join ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 ) a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set  \n" +
                "			rla.distributor = null, rla.distMfgCodeID = null, rla.distPN = null, rla.distMfgPNID = null, rla.mfgCode = null, rla.mfgCodeID = null,   \n" +
                "            rla.mfgPN = null, rla.mfgPNID = null, rla.description = null, rla.RoHSStatusID = null, rla.customerApproval = 'P',   \n" +
                "            rla.customerApprovalBy  = null, rla.customerApprovalDate = null, rla.badMfgPN = null, rla.userData1 = null, rla.userData2 = null,   \n" +
                "			rla.userData3 = null, rla.userData4 = null, rla.userData5 = null, rla.userData6 = null, rla.userData7 = null, rla.userData8 = null,   \n" +
                "            rla.userData9 = null, rla.userData10 = null, rla.updatedAt = fun_DatetimetoUTCDateTime(), rla.updatedBy  = pUserID, rla.updateByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount = 1 and rla.isdeleted = 0;  \n" +
                "  \n" +
                "	end if;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "Commit;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4899,'2.00','V1','User Story 34040: CPN Master GUI Modification & give option to Delete MFR PN part from CPN mapping - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4899:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveSupplierQuote;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(                                                            \n" +
                "	IN ppageIndex INT,                                                            \n" +
                "	IN precordPerPage INT,                                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                         \n" +
                "    IN pPartId INT,            \n" +
                "    IN pMfgType VARCHAR(255)            \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                            \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);          \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;           \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"              			                    \n" +
                "            SELECT * FROM         \n" +
                "            (SELECT 						              \n" +
                "				s.id,              \n" +
                "                sqpd.id AS supplierQuotePartDetID,                \n" +
                "				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		              \n" +
                "                fun_getMfgCodeByID(c.mfgcodeID) mfgCode,              \n" +
                "				s.supplierID,              \n" +
                "                sqpd.partID,              \n" +
                "				c.mfgPN AS mfgPN,              \n" +
                "                c.mfgcodeID,              \n" +
                "				sc.mfgPN AS supplierPN,              \n" +
                "				sqpd.supplierPartID,                  \n" +
                "                m.mfgName AS supplier,              \n" +
                "                s.quoteNumber,              \n" +
                "                s.quoteDate,              \n" +
                "                s.reference,              \n" +
                "                s.quoteStatus,              \n" +
                "                (                                          \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                                           \n" +
                "				   'Draft'                                                                               \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                                           \n" +
                "				   'Published'                                                                              \n" +
                "				  ELSE                                           \n" +
                "				   ''                                           \n" +
                "				 END                                          \n" +
                "				) AS `statusConvertedValue`,                 \n" +
                "                (                      \n" +
                "				CASE                                                     \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                             \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                                     \n" +
                "					ELSE ''                                                     \n" +
                "					END                      \n" +
                "				) AS `isActiveConvertedValueDetail`,              \n" +
                "                sqpd.isActive,                               \n" +
                "				sqpd.scanLabel,       \n" +
                "                c.isCustom,              \n" +
                "				sc.isCustom AS isCustomSupplier,              \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,              \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                  \n" +
                "				fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	              \n" +
                "				fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,               \n" +
                "				fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,              \n" +
                "				fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,    				          \n" +
                "				fun_getUserNameByID(sqpd.createdBy) createdby,                            \n" +
                "				fun_getUserNameByID(sqpd.updatedBy) updatedby,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(sqpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(sqpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,            \n" +
                "				fun_getRoleByID(sqpd.updateByRoleId) updatedByRole          \n" +
                "  \n" +
                "			FROM              \n" +
                "				supplier_quote_parts_det sqpd	              \n" +
                "			LEFT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID = s.id                \n" +
                "            LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                                  \n" +
                "			LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                       \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL                  \n" +
                "            WHERE              \n" +
                "				sqpd.deletedAt is NULL AND               \n" +
                "                s.deletedAt IS NULL                            \n" +
                "            UNION ALL            			        \n" +
                "                SELECT s.id,              \n" +
                "                NULL supplierQuotePartDetID,                \n" +
                "				NULL mfgName,		              \n" +
                "                NULL  mfgCode,              \n" +
                "				s.supplierID,              \n" +
                "                NULL partID,              \n" +
                "				NULL mfgPN,              \n" +
                "                NULL mfgcodeID,              \n" +
                "				NULL supplierPN,              \n" +
                "				NULL supplierPartID,                  \n" +
                "                m.mfgName AS supplier,              \n" +
                "                s.quoteNumber,              \n" +
                "                s.quoteDate,              \n" +
                "                s.reference,              \n" +
                "                s.quoteStatus,              \n" +
                "                (                                          \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                                           \n" +
                "				   'Draft'                                                                               \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                                           \n" +
                "				   'Published'                                                                              \n" +
                "				  ELSE                                           \n" +
                "				   ''                                           \n" +
                "				 END                                          \n" +
                "				) AS `statusConvertedValue`,        \n" +
                "                NULL isActiveConvertedValueDetail,        \n" +
                "                NULL isActive,              \n" +
                "                NULL scanLabel,              \n" +
                "                NULL isCustom,              \n" +
                "				NULL isCustomSupplier,              \n" +
                "				NULL rohsIcon,              \n" +
                "				NULL rohsName,                                                                  \n" +
                "				NULL supplierRohsIcon, 	              \n" +
                "				NULL supplierRohsName,               \n" +
                "				NULL attributesList,              \n" +
                "				NULL pricingCount,   \n" +
                "                fun_getUserNameByID(s.createdBy) createdby,                            \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedby,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,            \n" +
                "				fun_getRoleByID(s.updateByRoleId) updatedByRole   \n" +
                "              FROM              \n" +
                "				supplier_quote_mst s	              \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL                              \n" +
                "			WHERE s.id not in(select supplierQuoteMstID from supplier_quote_parts_det sq where sq.deletedAt IS NULL) and         \n" +
                "                s.deletedAt is null	) a  WHERE 1=1                      \n" +
                "                \");                                \n" +
                "  \n" +
                "	IF (pMfgType != '' AND pMfgType IS NOT NULL AND pPartId IS NOT NULL) THEN            \n" +
                "		IF(pMfgType = 'MFG' ) THEN            \n" +
                "			SET @temp_Sproc_RetrieveSupplierQuote  = CONCAT(@temp_Sproc_RetrieveSupplierQuote, ' AND partID = ', pPartId, ' ');            \n" +
                "		ELSE        \n" +
                "			SET @temp_Sproc_RetrieveSupplierQuote  = CONCAT(@temp_Sproc_RetrieveSupplierQuote, ' AND supplierPartID = ', pPartId, ' ');            \n" +
                "		END IF;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                            \n" +
                "	ELSE                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                            \n" +
                "		SET pWhereClause = '1=1' ;                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                            \n" +
                "	ELSE	                                                            \n" +
                "		SET rowNumWhere = '';                                                            \n" +
                "	END IF;	                                                             \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                         \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);                                                           \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);     \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                                     \n" +
                "  \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS Sproc_RetrieveWhereUsedMFGCodeList;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWhereUsedMFGCodeList`(                              \n" +
                "	IN ppageIndex INT,                              \n" +
                "	IN precordPerPage INT,                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "    IN pMFGCode VARCHAR(500),            \n" +
                "    IN pIsManufacture TINYINT          \n" +
                ")  \n" +
                "BEGIN             \n" +
                "	DECLARE pOffset INT(11);                               \n" +
                "	DECLARE rowNumWhere VARCHAR(255);          \n" +
                "    DECLARE SQLMFGStatement varchar(100);          \n" +
                "    DECLARE SQLComponentStatement varchar(100);              \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                         \n" +
                "    DECLARE vTimeZone VARCHAR(50);                      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                          \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;           \n" +
                "  \n" +
                "    SET @SQLMFGWhereClause =\"  \";             \n" +
                "    SET @SQLComponentWhereClause =\"  \";       \n" +
                "  \n" +
                "	if pIsManufacture = 1 then                  \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_mfgCode = '\", pMFGCode, \"' or rla.mfgCode = '\", pMFGCode, \"') \");          \n" +
                "        SET @SQLComponentWhereClause=  concat(\" and mfg.mfgType = 'MFG' \");         \n" +
                "	else         \n" +
                "		SET @SQLComponentWhereClause=  concat(\" and mfg.mfgType = 'DIST' \");         \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_distributor = '\", pMFGCode, \"' or rla.distributor = '\", pMFGCode, \"') \");            \n" +
                "	end if;          \n" +
                "  \n" +
                "    set @tempQuery =  concat(\"select (CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPN ELSE rla.distPN END) as MFGPN          \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgCode ELSE rla.distributor END) as MFGCode          \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgCode ELSE rla.org_distributor END) as orgMFGCode                  \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgPN ELSE rla.org_distPN END) as orgMFGPN          \n" +
                "							,rla.rfqLineItemsID as lineItemID          \n" +
                "							,rl.lineID as lineID          \n" +
                "                            ,assyDet.PIDCode assyCode               \n" +
                "							,assyDet.mfgPN assyMfgPN            \n" +
                "                            ,assyDet.id partId  \n" +
                "                            ,mfg.mfgType  \n" +
                "                            ,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPNID ELSE rla.distMfgPNID END) as mfgPNID        \n" +
                "							,assyDet.isCustom          \n" +
                "							,assyDet.restrictUsePermanently          \n" +
                "							,assyDet.restrictUSEwithpermission          \n" +
                "							,assyDet.restrictPackagingUsePermanently          \n" +
                "							,assyDet.restrictPackagingUseWithpermission    \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.isCustom ELSE distDet.isCustom END) mfgIsCustom    \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictUsePermanently ELSE distDet.restrictUsePermanently END) mfgRestrictUsePermanently    \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictUSEwithpermission ELSE distDet.restrictUSEwithpermission END)  mfgRestrictUSEwithpermission    \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictPackagingUsePermanently ELSE distDet.restrictPackagingUsePermanently END)  mfgRestrictPackagingUsePermanently    \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictPackagingUseWithpermission ELSE distDet.restrictPackagingUseWithpermission END)  mfgRestrictPackagingUseWithpermission    \n" +
                "                            ,fun_getUserNameByID(rla.createdBy) createdbyvalue           \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(rla.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                      \n" +
                "                            ,1 Type  \n" +
                "						from rfq_lineitems_alternatepart as rla          \n" +
                "						left join rfq_lineitems as rl on rla.rfqLineItemsID = rl.id and rl.isDeleted = 0           \n" +
                "						left join component assyDet on rla.partId = assyDet.id and assyDet.isDeleted = 0  \n" +
                "                        left join mfgcodemst mfg on mfg.mfgcodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "                        left join component mfgDet on rla.mfgPNID = mfgDet.id and mfgDet.isDeleted = 0    \n" +
                "						left join component distDet on rla.distMfgPNID = distDet.id and assyDet.isDeleted = 0    \n" +
                "						where rla.isDeleted = 0  \", @SQLMFGWhereClause      \n" +
                "                        ,\" union all          \n" +
                "                        select c.mfgPN as MFGPN, mfg.mfgCode as MFGCode          \n" +
                "							,c.mfrNameText as orgMFGCode    \n" +
                "							,c.mfrNameText as orgMFGPN          \n" +
                "							,null as lineItemID, null as lineID          \n" +
                "                            ,c.PIDCode assyCode               \n" +
                "							,c.mfgPN assyMfgPN              \n" +
                "                            ,c.id partId     \n" +
                "                            ,mfg.mfgType  \n" +
                "                            ,c.id mfgPNID        \n" +
                "                            ,c.isCustom          \n" +
                "							,c.restrictUsePermanently          \n" +
                "							,c.restrictUSEwithpermission          \n" +
                "							,c.restrictPackagingUsePermanently          \n" +
                "							,c.restrictPackagingUseWithpermission     \n" +
                "                            ,c.isCustom mfgIsCustom    \n" +
                "							,c.restrictUsePermanently as mfgRestrictUsePermanently    \n" +
                "							,c.restrictUSEwithpermission as mfgRestrictUSEwithpermission    \n" +
                "							,c.restrictPackagingUsePermanently as mfgRestrictPackagingUsePermanently    \n" +
                "							,c.restrictPackagingUseWithpermission as mfgRestrictPackagingUseWithpermission    \n" +
                "                            ,fun_getUserNameByID(c.createdBy) createdbyvalue           \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                      \n" +
                "							,2 Type          \n" +
                "						from component as c  \n" +
                "							left join mfgcodemst mfg on c.mfgcodeID = mfg.id and mfg.isDeleted = 0 where c.isDeleted = 0      \n" +
                "                            and (c.mfrNameText = '\", pMFGCode, \"' or mfg.mfgCode = '\", pMFGCode, \"')\", @SQLComponentWhereClause);          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                              \n" +
                "		SET pOrderBy = \"ORDER BY MFGCode ASC\";                            \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	END IF;	                              \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "		SET pWhereClause = '1=1' ;                              \n" +
                "	END IF;	                              \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;	                           \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                        \n" +
                "		where \", pWhereClause , \" \" , pOrderBy, rowNumWhere);    \n" +
                "	PREPARE query1 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query1;                        \n" +
                "	DEALLOCATE PREPARE query1;           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4900,'2.00','V1',' User Story 34343: [Main Branch] ]Part Master: Active/Inactive Part Status related changes - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4900:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "            	IN pStockDetail JSON,  \n" +
                "            	IN pRefSalesOrderDetID INT,                                   \n" +
                "            	IN pAssyID INT,   \n" +
                "            	IN pPartIds LONGTEXT,   \n" +
                "            	IN pUMIDs LONGTEXT,   \n" +
                "            	IN pUserId VARCHAR(50),   \n" +
                "            	IN pCheckForSameUmid BOOLEAN   \n" +
                "            )  \n" +
                "BEGIN                                \n" +
                "            	DECLARE v_CountSameUMIDFind INT;                                 \n" +
                "            	DECLARE v_ConcateUMID LONGTEXT;                              \n" +
                "            	DECLARE v_KitName LONGTEXT;                           \n" +
                "            	DECLARE v_UMIDForKitName LONGTEXT;    \n" +
                "				DECLARE v_KitIds LONGTEXT;                     \n" +
                "            	SET v_ConcateUMID = NULL;                                   \n" +
                "				/* create temp table for kit allocation details */    \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;                         \n" +
                "            	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS                                   \n" +
                "            	SELECT 	*                                    \n" +
                "            	FROM 	JSON_TABLE(                                   \n" +
                "            		pStockDetail,                                   \n" +
                "            		\"$[*]\" COLUMNS(                                   \n" +
                "            			refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",                                   \n" +
                "            			assyID INT PATH \"$.assyID\",                                   \n" +
                "            			uid VARCHAR(50) PATH \"$.uid\",                                   \n" +
                "            			refBOMLineID INT PATH \"$.refBOMLineID\",                                   \n" +
                "            			STATUS VARCHAR(50) PATH \"$.status\",                                   \n" +
                "            			refUIDId INT PATH \"$.refUIDId\",                                   \n" +
                "            			partId INT PATH \"$.partId\",                                   \n" +
                "            			allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",                                   \n" +
                "            			allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",                                   \n" +
                "            			allocatedUOM INT PATH \"$.allocatedUOM\",                                   \n" +
                "            			umidUnits INT PATH \"$.umidUnits\",                                 \n" +
                "            			kitAllocationId INT PATH \"$.kitAllocationId\",                              \n" +
                "            			PIDCode VARCHAR(100) PATH \"$.PIDCode\",                     \n" +
                "            			restricType VARCHAR(500) PATH \"$.restricType\",                     \n" +
                "            			transactionType VARCHAR(1000) PATH \"$.transactionType\",                     \n" +
                "            			refTableName VARCHAR(255) PATH \"$.refTableName\",                     \n" +
                "            			approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",                     \n" +
                "            			approvedBy VARCHAR(255) PATH \"$.approvedBy\",                     \n" +
                "            			approvalReason TEXT PATH \"$.approvalReason\",         \n" +
                "						confirmationType INT PATH \"$.confirmationType\",           \n" +
                "						roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",           \n" +
                "						allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"                                    \n" +
                "            		)                                   \n" +
                "            	) AS jt;      \n" +
                "  \n" +
                "                /* create temp table for response */    \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;                                                                                          \n" +
                "            	CREATE TEMPORARY TABLE temp_Validation_Error                                   \n" +
                "            	(                                                                                         \n" +
                "            		IsSuccess BOOLEAN,                                                                               \n" +
                "            		UMID VARCHAR(5000),                                 \n" +
                "            		KitName LONGTEXT,      \n" +
                "            		ErrorCode INT,                \n" +
                "					KitIds VARCHAR(1000)                                                                            \n" +
                "            	);                                    \n" +
                "  \n" +
                "            	IF (pCheckForSameUmid = TRUE) THEN                                 \n" +
                "            		SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID                                  \n" +
                "            		FROM 	kit_allocation                                  \n" +
                "            		WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = pAssyID  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);                                 \n" +
                "            	ELSE                                 \n" +
                "            		SET v_CountSameUMIDFind = 0;                                 \n" +
                "            	END IF;         \n" +
                "  \n" +
                "            	IF (v_CountSameUMIDFind = 0) THEN                                 \n" +
                "            		block1: BEGIN                                   \n" +
                "            			DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                     \n" +
                "            			DECLARE v_RefSalesOrderDetID INT;                                   \n" +
                "            			DECLARE v_AssyID INT;                                   \n" +
                "            			DECLARE v_Umid VARCHAR(50);                                   \n" +
                "            			DECLARE v_RefBOMLineID INT;                                   \n" +
                "            			DECLARE v_Status VARCHAR(50);                                   \n" +
                "            			DECLARE v_RefUIDId INT;                                   \n" +
                "            			DECLARE v_PartId INT;                                    \n" +
                "            			DECLARE v_AllocatedQty DECIMAL(18,8);                                    \n" +
                "            			DECLARE v_AllocatedUnit DECIMAL(18,8);                                    \n" +
                "            			DECLARE v_AllocatedUOM INT;                                   \n" +
                "            			DECLARE v_UMIDUnits DECIMAL(18,8);                                   \n" +
                "            			DECLARE v_countKitExist INT;                                   \n" +
                "            			DECLARE v_CountSameUMID INT;                                   \n" +
                "            			DECLARE	v_SameUMID VARCHAR(50);                                   \n" +
                "            			DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);                                   \n" +
                "            			DECLARE v_oldUMID VARCHAR(50);                                   \n" +
                "            			DECLARE v_CountSameAllocatedUnit INT;                                  \n" +
                "            			DECLARE v_KitAllocationId INT;                                  \n" +
                "            			DECLARE v_StringSameUMID VARCHAR(10000);                                 \n" +
                "            			DECLARE v_CountUMIDForSame INT;                            \n" +
                "            			DECLARE v_StringUMIDForKit VARCHAR(10000);                        \n" +
                "            			DECLARE v_CountSameSalesOrder INT;                          \n" +
                "            			DECLARE v_PIDCode VARCHAR(100);                     \n" +
                "            			DECLARE v_RestricType VARCHAR(500);                        \n" +
                "            			DECLARE v_TransactionType VARCHAR(1000);                     \n" +
                "            			DECLARE v_RefTableName VARCHAR(255);                        \n" +
                "            			DECLARE v_ApproveFromPage VARCHAR(255);                        \n" +
                "            			DECLARE v_ApprovedBy VARCHAR(255);                        \n" +
                "            			DECLARE v_ConfirmationType INT;                        \n" +
                "            			DECLARE v_ApprovalReason TEXT;                        \n" +
                "            			DECLARE v_RefID INT;             \n" +
                "						DECLARE v_RoHSApprovalReason VARCHAR(1000);          \n" +
                "						DECLARE v_AllocationRemark VARCHAR(1000);          \n" +
                "  \n" +
                "            			DECLARE KitAllocationDetail_Cursor CURSOR FOR                                   \n" +
                "            			SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,                     \n" +
                "            					PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark                     \n" +
                "            			FROM 	tempKitAllocationDetail;                                   \n" +
                "  \n" +
                "            			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                      \n" +
                "            			OPEN KitAllocationDetail_Cursor;                                     \n" +
                "  \n" +
                "            			KitAllocationDetail_Loop:LOOP                                   \n" +
                "							FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,                     \n" +
                "            									v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;                                   \n" +
                "						IF exit_loop THEN                                                                                    \n" +
                "							LEAVE KitAllocationDetail_Loop;                                                                              \n" +
                "						END IF;              \n" +
                "  \n" +
                "  \n" +
                "				IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN            \n" +
                "					UPDATE 	kit_allocation                                  \n" +
                "							SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),                                 \n" +
                "								allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)                                 \n" +
                "							WHERE	id = v_KitAllocationId;         \n" +
                "				ELSE           \n" +
                "					INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)                                   \n" +
                "							VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,							                                          \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),          \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),          \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),      \n" +
                "							(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));                  \n" +
                "							SET v_RefID = LAST_INSERT_ID();     \n" +
                "					IF(IFNULL(v_RefID, \"\") != \"\") THEN              \n" +
                "						SET v_KitIds = (            \n" +
                "								SELECT 	CASE             \n" +
                "										WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN             \n" +
                "											v_RefID              \n" +
                "										ELSE             \n" +
                "											(SELECT CONCAT(v_KitIds, \",\", v_RefID))              \n" +
                "									END            \n" +
                "								);              \n" +
                "					END IF;              \n" +
                "					IF (v_RestricType IS NOT NULL) THEN                     \n" +
                "						INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)                     \n" +
                "						VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);                     \n" +
                "					END IF;            \n" +
                "  \n" +
                "				END IF;            \n" +
                "					END LOOP KitAllocationDetail_Loop;                                     \n" +
                "					CLOSE KitAllocationDetail_Cursor;     \n" +
                "					END block1;      \n" +
                "  \n" +
                "					INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(1, NULL, NULL, 0, v_KitIds);                                \n" +
                "					SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;     \n" +
                "            	ELSE                                 \n" +
                "            		SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName                          \n" +
                "            		FROM 	vu_salesorder_shipped_report                          \n" +
                "            		WHERE 	SalesOrderDetailId IN (                         \n" +
                "            				SELECT 	refSalesOrderDetID                          \n" +
                "            				FROM 	kit_allocation                          \n" +
                "            				WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)                         \n" +
                "            			);                         \n" +
                "            		INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(0, v_ConcateUMID, v_KitName, 1, v_KitIds);                                   \n" +
                "            		SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;                                 \n" +
                "            	END IF;                               \n" +
                "            END;  \n" +
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4901,'2.00','V1','Bug 34965: [Main branch] When user tries to Allocate to many UMIDs from Available stock then it shows error - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4901:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-06-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_mfgcodemst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;     \n" +
                "    IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),    \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;       \n" +
                "    IF IFNULL(OLD.externalSupplierOrder,0) != IFNULL(NEW.externalSupplierOrder,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Supplier API Request Order',CAST(OLD.externalSupplierOrder AS CHAR), CAST(NEW.externalSupplierOrder AS CHAR),    \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),   \n" +
                "        CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                                    \n" +
                "	IN pTransType VARCHAR(5),                                            \n" +
                "	IN pInvoiceType VARCHAR(1),                                                \n" +
                "	IN pInvoiceID INT,              	                                                \n" +
                "    IN pInvData JSON,                                                \n" +
                "    IN pPackingSlipID INT,                                                \n" +
                "	IN puserID INT,                                                          \n" +
                "	IN puserRoleID INT ,                                                      \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),                    \n" +
                "    IN pSystemId VARCHAR(20)  ,                  \n" +
                "    IN pPackingSlipType INT                  \n" +
                ")  \n" +
                "BEGIN                                                                 \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                              \n" +
                "	DECLARE v_prefix VARCHAR(20);                                                      \n" +
                "	DECLARE vTermsDays INT ;     \n" +
                "	DECLARE v_incrementI INT;      \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                            \n" +
                "	SELECT 	*                                                                                             \n" +
                "	FROM 	JSON_TABLE(                                                     \n" +
                "			pInvData,                                                                                            \n" +
                "			\"$[*]\" COLUMNS(    			                                               \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                                \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                                \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                                 \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                                                \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                                            \n" +
                "				`status` INT PATH \"$.status\",                                                \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                                \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                            \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                            \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                                 \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                            \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                                    \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                                  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                                  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                                  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                                  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                                  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                                \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                                \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                                \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                                \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                                \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                                \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                                                \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                                \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                                \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                                \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                                \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                                \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                            \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                                  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                             \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                                  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                             \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                            \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\",                \n" +
                "                `revision` VARCHAR(10) PATH \"$.revision\",                \n" +
                "                `isZeroValue` TINYINT PATH \"$.isZeroValue\",              \n" +
                "                `isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",           \n" +
                "                `poRevision` VARCHAR(50) PATH \"$.poRevision\" ,      \n" +
                "                `isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",      \n" +
                "                `agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\"      \n" +
                "			)                                                  \n" +
                "		) AS CustInv_JT;                          \n" +
                "  \n" +
                "		SELECT  termsDays INTO 	vTermsDays                                                \n" +
                "		FROM genericCategory gc                                                 \n" +
                "		WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                                \n" +
                "		AND categoryType = 'Payment Terms';                   \n" +
                "	  IF(pInvoiceID IS NULL)THEN                  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                                      \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                                      \n" +
                "			FROM `identity`                                                      \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                                     \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                      \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                      \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                      \n" +
                "				packingSlipComment,headerComment,sorevision,                                                      \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                                      \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                                    \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                                 \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                                    \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,                \n" +
                "                contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision)                                                           \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                      \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                      \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                 \n" +
                "					packingSlipComment,headerComment,sorevision,                                                      \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                                     \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                                    \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                                \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                                    \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,                \n" +
                "                    contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision                              \n" +
                "			FROM temp_customerInvoice ;			                                                \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                                        \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                                       \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                                       \n" +
                "		 WHERE id= pPackingSlipID;                                                          \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN               \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order              \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                                      \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                                    \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                                      \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                                      \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,                \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                          \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                                      \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,            \n" +
                "                    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),              \n" +
                "                    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                                   \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,            \n" +
                "                    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                                    \n" +
                "					puserRoleID,puserRoleID,            \n" +
                "                    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                                      \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),                \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,             \n" +
                "                    cpd.isZeroValue                                                    \n" +
                "			FROM customer_packingslip_det   cpd                    \n" +
                "            LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0            \n" +
                "            LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0            \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                                       \n" +
                "			AND cpd.isDeleted = 0;                        \n" +
                "  \n" +
                "            IF pPackingSlipType = 2 THEN -- PO/SO INV      \n" +
                "            INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                      \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,                      \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,                      \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)                      \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,                    \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,                      \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes                       \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca                      \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;       \n" +
                "					-- child records                \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                      \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                      \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                      \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                      \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,                      \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                      \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                       \n" +
                "					FROM salesorderdet_commission_attribute sca                      \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;                        \n" +
                "  \n" +
                "             ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV             \n" +
                "					-- SP to generate line wise sales commission.                  \n" +
                "                    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);                  \n" +
                "  -- Sales Price details for Part master    \n" +
                "                    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                      \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                      \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                      \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                      \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,                      \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                      \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                       \n" +
                "					FROM temp_salesCommission sca                   \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;      \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ    \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;                                                                                  \n" +
                "	                     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS      \n" +
                "	                       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca     \n" +
                "	                       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;    \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;    \n" +
                "			SET v_incrementI=0;    \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO    \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;    \n" +
                "  \n" +
                "				SELECT SUM(unitPrice),SUM(commissionValue) INTO @totalUnitPrice,@totalCommissionValue FROM     \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;    \n" +
                "  \n" +
                "				SET v_commissionPercentage=(@totalCommissionValue*100)/(@totalUnitPrice);    \n" +
                "				SET @totalCommissionValue=ROUND((v_commissionPercentage * @totalUnitPrice)/100,5);    \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                      \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                      \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                      \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)                      \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,                      \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                      \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID                       \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;    \n" +
                "					-- sales commission child details    \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;    \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                      \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                      \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                      \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                      \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,                      \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                      \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                       \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;     \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;    \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;      \n" +
                "             END IF;                         \n" +
                "		END IF;                                                \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                  \n" +
                "        /*          \n" +
                "		UPDATE `identity`                                                      \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                                      \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                      \n" +
                "		*/          \n" +
                "	  ELSE                                                      \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                                \n" +
                "			UPDATE customer_packingslip cp                                                \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                                                \n" +
                "				cp.`status`= tci.status,  			                                                      \n" +
                "				cp.subStatus = tci.subStatus,                                                \n" +
                "                cp.headerComment= tci.headerComment,                                                \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,                                      \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                      \n" +
                "                cp.updatedBy = puserID,                                      \n" +
                "                cp.updateByRoleId = puserRoleID  ,                            \n" +
                "                cp.billingAddress= tci.billingAddress,                                                \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                            \n" +
                "                cp.contactPersonId = tci.contactPersonId,                            \n" +
                "                cp.billToId = tci.billToId,                                  \n" +
                "                cp.shipToId  = tci.shipToId,                                  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,                \n" +
                "                cp.revision = LPAD(tci.revision,2,'0'),                \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,              \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),          \n" +
                "                cp.poRevision = tci.poRevision          \n" +
                "			WHERE cp.id=pInvoiceID              \n" +
                "            AND cp.transType = pTransType;                                                   \n" +
                "        ELSE                                                  \n" +
                "        # in case of tariff invoice & credit memo update all other field                                                \n" +
                "			UPDATE customer_packingslip  cp                                                  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                \n" +
                "			SET	cp.status= tci.status,                                                \n" +
                "				cp.subStatus= tci.subStatus,                                                \n" +
                "				cp.poNumber= tci.poNumber,                                                \n" +
                "				cp.poDate= tci.poDate,                                                \n" +
                "				cp.soNumber= tci.soNumber,                                                \n" +
                "				cp.soDate= tci.soDate,                                                \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                                                \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                                                \n" +
                "				cp.invoiceDate= tci.invoiceDate,                                                \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                                                \n" +
                "				cp.headerComment= tci.headerComment,                                                \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                \n" +
                "				cp.billingAddress= tci.billingAddress,                                                \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                                \n" +
                "				cp.totalAmount= IFNULL(tci.totalAmount,0),                                                \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                                                \n" +
                "				cp.termsId= tci.termsId,                 \n" +
                "                cp.termsDays = vTermsDays,                \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                                            \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                            \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                                      \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                      \n" +
                "                cp.updatedBy = puserID,                                      \n" +
                "                cp.updateByRoleId = puserRoleID,                                    \n" +
                "                cp.rmaNumber= tci.rmaNumber,                                  \n" +
                "                cp.billToId = tci.billToId,                                  \n" +
                "                cp.shipToId  = tci.shipToId,                                  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,                                \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,                            \n" +
                "                cp.contactPersonId = tci.contactPersonId,                \n" +
                "                cp.revision =  LPAD(tci.revision,2,'0'),                \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0),              \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),          \n" +
                "                cp.poRevision = tci.poRevision ,      \n" +
                "                cp.isMarkForRefund = tci.isMarkForRefund,       \n" +
                "                cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0)      \n" +
                "			 WHERE cp.id = pInvoiceID              \n" +
                "             AND cp.transType = pTransType;                                                   \n" +
                "  \n" +
                "            END IF;                                                \n" +
                "  \n" +
                "	  END IF;                                                         \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                                          \n" +
                "       -- detail Id                                                  \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                                  \n" +
                "      FROM customer_packingslip_det                                                   \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                                   \n" +
                "      AND isDeleted = 0;                                                  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4902,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4902:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getDeallocatedUIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_getDeallocatedUIDList`(      \n" +
                "	IN pPageIndex INT,       \n" +
                "	IN pRecordPerPage INT,       \n" +
                "	IN pOrderBy VARCHAR(255),       \n" +
                "	IN pWhereClause VARCHAR(16383),       \n" +
                "	IN pRefSalesOrderID INT,      \n" +
                "	IN pAssyID INT,       \n" +
                "    IN pPartIDs LONGTEXT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_Offset INT;       \n" +
                "	DECLARE v_RowNumWhere VARCHAR(255);       \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);       \n" +
                "    DECLARE v_mfgPnIds LONGTEXT;      \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;       \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;       \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS          \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId        \n" +
                "	FROM 		component c          \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0          \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartIDs)          \n" +
                "				AND c.isDeleted = 0          \n" +
                "	GROUP BY 	mfrPNId;          \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN       \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;       \n" +
                "	ELSE       \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";       \n" +
                "	END IF;       \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN       \n" +
                "		SET pWhereClause = ' 1=1';       \n" +
                "	END IF;       \n" +
                "  \n" +
                "    SET v_mfgPnIds = (SELECT GROUP_CONCAT(m.mfrPNId) FROM temp_mainPartAndPackagingAliesPart m);      \n" +
                "  \n" +
                "    IF(v_mfgPnIds IS NOT NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND partID IN (\" ,v_mfgPnIds , \")\");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN       \n" +
                "		SET v_Offset = (pPageIndex -1) * pRecordPerPage;       \n" +
                "		SET v_RowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , v_Offset) ;                                                                              \n" +
                "	ELSE       \n" +
                "		SET v_RowNumWhere = '';       \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET @temp_Sproc_Deallocated_UMID = CONCAT(\" SELECT	      \n" +
                "				cst.id,			cst.uid,				cst.refcompid,		cst.dateCode, 	   kl.lineID,       \n" +
                "				cst.rohsStatusID UMIDRohsStatusID, 		cst.binID,				cst.uom,       \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate, 	      \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus, 		ka.refBOMLineID,      \n" +
                "				c.PIDCode,		c.mfgPN, 		c.RoHSStatusID rohsID, 		ka.refSalesOrderDetID, 		ka.assyID,      \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 				c.isCustom,       \n" +
                "                fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,       \n" +
                "                c.restrictUsePermanently,			c.restrictUSEwithpermission,       \n" +
                "                c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,       \n" +
                "                cst.isUMIDRestrict, 	ka.partID,    	c.connecterTypeID,      \n" +
                "                ka.allocatedQty, 		ka.allocatedUnit, 	  \n" +
                "                (CASE WHEN (c.connecterTypeID = - 2)   \n" +
                "						THEN  (IFNULL(ka.allocatedUnit, 0) * IFNULL(c.noOfPosition, 0))    \n" +
                "				ELSE  NULL  \n" +
                "								END) allocatedPins,   \n" +
                "                cst.pkgUnit,			cst.pkgQty,    \n" +
                "				(CASE WHEN (c.connecterTypeID = - 2)   \n" +
                "						THEN  (IFNULL(cst.pkgUnit, 0) * IFNULL(c.noOfPosition, 0))    \n" +
                "				ELSE NULL  \n" +
                "								END) currentPins,   \n" +
                "				fun_getBinNameByID(cst.binID) binName,     \n" +
                "                c.noOfPosition,      \n" +
                "                ka.remark,    \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,       \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,       \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,       \n" +
                "                fun_getUserNameByID(ka.updatedBy) updatedBy,                                 \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ka.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt       \n" +
                "		FROM 		component_sid_stock cst                            \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  AND c.isDeleted = 0                                               \n" +
                "		INNER JOIN  kit_allocation ka ON cst.id = ka.refUIDId AND ka.status = 'D'      \n" +
                "		INNER JOIN 	kit_allocation_lineitems kl ON kl.refRfqLineitem = ka.refBOMLineID AND kl.refSalesOrderDetID = \", pRefSalesOrderID ,\"      \n" +
                "		WHERE 		ka.refSalesOrderDetID = \", pRefSalesOrderID ,\"      \n" +
                "					AND ka.assyID = IFNULL(\", pAssyID ,\",ka.assyID)       \n" +
                "					AND ka.status = 'D'       \n" +
                "					AND cst.isDeleted = 0       \n" +
                "		GROUP BY ka.id      \n" +
                "			\");                            \n" +
                "  \n" +
                "	/* to get total count of rows */                                     \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Deallocated_UMID, \" ) c where 1=1 and \", pWhereClause);                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;       \n" +
                "	DEALLOCATE PREPARE query1;       \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Deallocated_UMID,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , v_RowNumWhere);                                    \n" +
                "	PREPARE query1 FROM @SQLStatement2;       \n" +
                "	EXECUTE query1;       \n" +
                "	DEALLOCATE PREPARE query1;       \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4903,'2.00','V1','Bug 34938: [Low Priority] Improvement Point: Kit Release/Release pop-up - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4903:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(  \n" +
                "	IN pPaymentMstID INT ,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SELECT 	psip.id,  \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
                "			psip.refGencTransModeID ,  \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  psip.isMarkForRefund , psip.agreedRefundAmt ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  \n" +
                "				(CASE WHEN psip.refPaymentMode = 'R' THEN  \n" +
                "					(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND  \n" +
                "							(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'  \n" +
                "						ELSE 'Received' END)  \n" +
                "				ELSE NULL END)  \n" +
                "			    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue ,  \n" +
                "			 (CASE WHEN psip.refPaymentID IS NULL THEN NULL  \n" +
                "				ELSE (SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = psip.refPaymentID AND isDeleted = 0)  \n" +
                "					END) AS refPaymentNumFromTransInitiate ,  \n" +
                "			psip.refPaymentID  ,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "		WHERE psip.id = pPaymentMstID  \n" +
                "		AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		;  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(  \n" +
                "	IN pCustCreditMemoMstID INT ,  \n" +
                "	IN pCustomerPaymentMstID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate , cps.totalAmount , psip.paymentNumber ,  \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,  \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,  \n" +
                "			psip.isMarkForRefund , psip.agreedRefundAmt ,  \n" +
                "            fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN  \n" +
                "					(CASE WHEN (cps.paymentStatus = 'PE' ) THEN ''  \n" +
                "						  WHEN (cps.paymentStatus = 'RE' ) THEN 'Received & Applied'  \n" +
                "						  WHEN (cps.paymentStatus = 'PR' ) THEN 'Received' END)  \n" +
                "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby  \n" +
                "	FROM customer_packingslip AS cps  \n" +
                "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID  \n" +
                "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)  \n" +
                "	WHERE cps.id = pCustCreditMemoMstID  \n" +
                "	AND cps.isDeleted = 0  \n" +
                "		;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4904,'2.00','V1',' customer payment flow get master detail queries - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4904:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(      \n" +
                "	IN ppartID INT      \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "  \n" +
                "   # Create Temporary table for Assembly and its sub Assembly RoHS Status and Deviation    \n" +
                "		DROP temporary table if exists temp_AssyRohsStatusWithDeviation;    \n" +
                "		create temporary table temp_AssyRohsStatusWithDeviation as    \n" +
                "		select com.id, com.RoHSStatusID, ro.name as RoHSName, com.rohsDeviation from component com    \n" +
                "		Join rfq_rohsmst ro on ro.id = com.RoHSStatusID    \n" +
                "		where com.id in (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0);    \n" +
                "	# For get Mounting type wise glance Detail          \n" +
                "		SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,        \n" +
                "			a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,         \n" +
                "			COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,          \n" +
                "			b.mountingType        \n" +
                "		FROM	        \n" +
                "			(         \n" +
                "				select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,	        \n" +
                "						ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,        \n" +
                "						(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,        \n" +
                "						(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,          \n" +
                "						(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,          \n" +
                "						(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount        \n" +
                "				FROM rfq_lineitems rl           \n" +
                "				INNER JOIN component assypart ON assypart.id = rl.partID          \n" +
                "				INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID             \n" +
                "				where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)         \n" +
                "			) a        \n" +
                "			INNER JOIN         \n" +
                "			(        \n" +
                "				SELECT 	rl.id,	        \n" +
                "				case when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  and ifnull(max(com.mountingtypeID),'Unknown') = 'Unknown' then         \n" +
                "						'Unknown'        \n" +
                "					when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  then         \n" +
                "						fun_getMountingTypeNameByID(max(com.mountingtypeID))        \n" +
                "					else 'Mismatched' end  as mountingType        \n" +
                "				FROM rfq_lineitems rl           \n" +
                "				Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0                \n" +
                "				LEFT JOIN component com ON com.id = ra.mfgPNID       \n" +
                "				WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)         \n" +
                "				AND rl.isDeleted = 0 and com.isGoodPart <> 2       \n" +
                "				GROUP BY rl.id,rl.partID         \n" +
                "			) b on a.id = b.id        \n" +
                "			GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon, a.`level`, b.mountingType;        \n" +
                "  \n" +
                "  # For get RoHS type wise glance Detail          \n" +
                "  SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,        \n" +
                "		a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,         \n" +
                "		COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,          \n" +
                "		b.RoHSStatus        \n" +
                "	FROM	        \n" +
                "		(         \n" +
                "			select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,	        \n" +
                "					ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,        \n" +
                "					(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,        \n" +
                "					(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,          \n" +
                "					(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,          \n" +
                "					(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount        \n" +
                "			FROM rfq_lineitems rl           \n" +
                "			INNER JOIN component assypart ON assypart.id = rl.partID          \n" +
                "			INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID             \n" +
                "			where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)         \n" +
                "		) a        \n" +
                "		INNER JOIN         \n" +
                "		(        \n" +
                "			SELECT 	rl.id,	        \n" +
                "			case when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  and ifnull(max(com.RoHSStatusID),'Unknown') = 'Unknown' then         \n" +
                "					'Unknown'        \n" +
                "				when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  then         \n" +
                "					fun_getRoHSNameByID(max(com.RoHSStatusID))        \n" +
                "				else 'Mismatched' end  as RoHSStatus        \n" +
                "			FROM rfq_lineitems rl           \n" +
                "			Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0                \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID      \n" +
                "			WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)         \n" +
                "			AND rl.isDeleted = 0  and com.isGoodPart <> 2       \n" +
                "			GROUP BY rl.id,rl.partID         \n" +
                "		) b on a.id = b.id        \n" +
                "		GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon,a.`level`, b.RoHSStatus;          \n" +
                "  \n" +
                "    # get Assembly Standard detail for glance          \n" +
                "        SELECT sc.className, sc.colorCode, cs.fullName AS standardName,csd.*             \n" +
                "		FROM component_standard_details csd                  \n" +
                "		INNER JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isDeleted = 0                  \n" +
                "		LEFT JOIN standard_class sc ON sc.classID = csd.ClassID AND sc.isDeleted = 0                  \n" +
                "		WHERE csd.isDeleted = 0 AND csd.componentID = ppartID            \n" +
                "		ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC;                  \n" +
                "  \n" +
                "    # Assembly detail                          \n" +
                "	   SELECT com.id partID, com.PIDCode, com.mfgPN, com.mfgcodeID AS customerID, fun_getMfgCodeAndNameByPartID(com.id) Customer, com.mfgPNDescription,com.totalSolderPoints,                          \n" +
                "		ro.name,ro.rohsIcon                          \n" +
                "	   FROM component com                          \n" +
                "	   JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0                          \n" +
                "	   WHERE com.id = ppartID;       \n" +
                "  \n" +
                "	# get RoHS Status by Part    \n" +
                "		SELECT 	rla.partID, count(1) partCount,  (case when com.RoHSStatusID is null then 'Unknown' else ro.name end) as RoHSStatus,    \n" +
                "		(case when tar.RoHSStatusID = com.RoHSStatusID then 'Yes' else 'No' end) as complientWithAssy    \n" +
                "		FROM rfq_lineitems_alternatepart rla     \n" +
                "        Join temp_AssyRohsStatusWithDeviation tar on tar.id = rla.partID    \n" +
                "		Left JOIN component com ON com.id = rla.mfgPNID     \n" +
                "        left Join rfq_rohsmst ro on ro.id = com.RoHSStatusID    \n" +
                "		WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)         \n" +
                "		AND rla.isDeleted = 0     \n" +
                "		GROUP BY rla.partID,com.RoHSStatusID  \n" +
                "        order by RoHSStatus;    \n" +
                "  \n" +
                "	# Get RoHS Status By Item with All Complient parts with in Item(Compared with Assembly RoHS Requirement)    \n" +
                "		SELECT COUNT(1) AS `ItemCount`, a.partID,    \n" +
                "			(CASE WHEN MIN(RoHSStatus) = MAX(RoHSStatus) THEN RoHSStatus ELSE 'Mismatched' END) rohs,    \n" +
                "			(CASE WHEN MIN(complientWithAssy) = 1 THEN 'Yes' ELSE 'No' END) complientWithAssy    \n" +
                "		FROM    \n" +
                "			(SELECT rla.partID,    \n" +
                "					(CASE WHEN MIN(com.RoHSStatusID) = MAX(com.RoHSStatusID)    \n" +
                "						THEN    \n" +
                "							(CASE WHEN tar.RoHSStatusID = MAX(com.RoHSStatusID)     \n" +
                "								THEN ro.name    \n" +
                "								ELSE 'Mismatched'    \n" +
                "							END)    \n" +
                "						ELSE 'Mismatched'    \n" +
                "					END) RoHSStatus,    \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE 0 END) AS complientWithAssy,    \n" +
                "					rla.rfqLineItemsID    \n" +
                "			FROM rfq_lineitems_alternatepart rla    \n" +
                "			JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID    \n" +
                "			JOIN component com ON com.id = rla.mfgPNID    \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID    \n" +
                "			WHERE rla.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)    \n" +
                "			AND rla.isDeleted = 0    \n" +
                "            GROUP BY rla.partID , rla.rfqLineItemsID  \n" +
                "            order by complientWithAssy) a    \n" +
                "		GROUP BY a.partID , a.RoHSStatus  \n" +
                "        order by complientWithAssy;    \n" +
                "  \n" +
                "	# RoHS Status By Item with minimum one compliant part within item ( Compared to assembly RoHS requirement)    \n" +
                "		SELECT  COUNT(1) AS `ItemCount`, b.partID, b.rohs, b.complientWithAssy, sum(deviationApproveCount) deviationApproveCount    \n" +
                "		FROM    \n" +
                "			(SELECT  a.partID,    \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1    \n" +
                "						THEN    \n" +
                "							(CASE WHEN MAX(LineRoHSStatus) = - 15 THEN 'Mismatched'    /* -15 added as Static value for Check mismatched*/    \n" +
                "									WHEN MAX(LineRoHSStatus) = - 10 THEN 'RoHS Deviation (Allowed w/ Eng. Approval)'  /* -10 added as Static value for Check RoHS Deviation*/    \n" +
                "									ELSE FUN_GETROHSNAMEBYID(MAX(LineRoHSStatus))    \n" +
                "							END)    \n" +
                "						ELSE 'Mismatched'    \n" +
                "					END) rohs,    \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1 THEN 'Yes'    \n" +
                "							ELSE 'No'    \n" +
                "					END) complientWithAssy,    \n" +
                "					sum(deviationApproveCount) deviationApproveCount,    \n" +
                "					a.rfqLineItemsID    \n" +
                "			FROM    \n" +
                "				(SELECT  rla.partID,    \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN com.RoHSStatusID    \n" +
                "							ELSE (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN - 10 ELSE - 15  END) /* -15 & -10 added as Static value for Check mismatched and RoHS Deviation*/    \n" +
                "					END) LineRoHSStatus,    \n" +
                "					ro.name AS RoHSStatus,    \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE    \n" +
                "						(CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END)    \n" +
                "					 END) AS complientWithAssy,    \n" +
                "					 (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END) deviationApproveCount,    \n" +
                "					rla.rfqLineItemsID    \n" +
                "				FROM rfq_lineitems_alternatepart rla    \n" +
                "				JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID    \n" +
                "				JOIN component com ON com.id = rla.mfgPNID    \n" +
                "				JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID    \n" +
                "				WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)    \n" +
                "				AND rla.isDeleted = 0    \n" +
                "				ORDER BY rfqLineItemsID ASC , complientWithAssy DESC , LineRoHSStatus ASC    \n" +
                "				) a    \n" +
                "				GROUP BY a.partID , a.rfqLineItemsID    \n" +
                "				ORDER BY complientWithAssy    \n" +
                "			) b    \n" +
                "		GROUP BY b.partID , b.rohs    \n" +
                "		ORDER BY complientWithAssy;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWhoBoughtWho`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWhoBoughtWho`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "  \n" +
                "	SET @temp_Sproc_GetWhoBoughtWho = CONCAT(\"    \n" +
                "		SELECT   \n" +
                "        CONCAT('(',bbm.mfgCode,') ',bbm.mfgName) AS mfgBy,  \n" +
                "        CONCAT('(',btm.mfgCode,') ',btm.mfgName) AS mfgTo,  \n" +
                "			wbw.buyBy,  \n" +
                "			wbw.buyTo,  \n" +
                "			wbw.buyDate,  \n" +
                "			wbw.description,  \n" +
                "			fun_getUserNameByID(wbw.createdBy) createdby,  \n" +
                "			fun_getRoleByID(wbw.createByRoleId) createdbyRole,  \n" +
                "            fun_ApplyCommonDateTimeFormatByParaValue(wbw.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt     \n" +
                "		FROM `who_bought_who` wbw  \n" +
                "        join mfgcodemst btm on btm.id = wbw.buyTo  \n" +
                "        join mfgcodemst bbm on bbm.id = wbw.buyBy  \n" +
                "		JOIN users us ON wbw.createdBy = us.id AND us.isdeleted = 0  \n" +
                "		JOIN employees emp ON us.employeeID = emp.id AND emp.isdeleted = 0  \n" +
                "		WHERE wbw.isdeleted = 0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY c.buyBy DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetWhoBoughtWho,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetWhoBoughtWho,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 30-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4905,'2.00','V1','Bug 34853: Mergers & Acquisitions: MFR Name is missing and need to give the hyperlink to open the respected MFR - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4905:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_UNQDATE_component_price_break_details;  \n" +
                "CREATE TRIGGER `TRG_UNQDATE_component_price_break_details` BEFORE UPDATE ON `component_price_break_details` FOR EACH ROW BEGIN         \n" +
                "        IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN     \n" +
                "                set NEW.unqDate = utc_timestamp();     \n" +
                "        END IF;     \n" +
                "        IF (OLD.isHistory = 0  and NEW.isHistory =1) THEN     \n" +
                "                set NEW.unqDate = utc_timestamp();     \n" +
                "        END IF;   \n" +
                "END;  \n" +

                "DROP PROCEDURE IF  EXISTS Sproc_CheckUsedPartInTransaction;  \n" +
                "CREATE PROCEDURE `Sproc_CheckUsedPartInTransaction`(      \n" +
                "	IN pPartId INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	-- Sales Order Data ('In Progress' Status)      \n" +
                "	select       \n" +
                "			sod.refSalesOrderID as refId      \n" +
                "            ,sdm.salesOrderNumber  as transNumber      \n" +
                "            ,'SO' tranctionType      \n" +
                "            ,'' cancellationConfirmPending      \n" +
                "    from salesorderdet as sod      \n" +
                "		join salesordermst sdm on sdm.id = sod.refSalesOrderID and sod.isDeleted = 0      \n" +
                "        where      \n" +
                "        sod.partID = pPartId and (sod.isCancle = 0 and sod.salesOrderDetStatus = 1) and sod.isDeleted = 0      \n" +
                "	UNION ALL      \n" +
                "    -- Material Receipt Data ('Not Paid' Status & Not Generated Invoice )      \n" +
                "	select 	psm.id as refId      \n" +
                "            ,psm.packingSlipNumber as transNumber      \n" +
                "            ,'PS' tranctionType	       \n" +
                "            ,'' cancellationConfirmPending      \n" +
                "	from packing_slip_material_receive as psm       \n" +
                "		join packing_slip_material_receive_det as psd on  psd.refPackingSlipMaterialRecID = psm.id and psd.isDeleted = 0    \n" +
                "		left join packing_slip_material_receive ird on ird.id = psm.refPackingSlipNumberForInvoice and ird.status != 'P'and ird.isDeleted = 0  \n" +
                "	where psd.partID = pPartId and psm.isDeleted = 0 AND psm.receiptType = 'P'      \n" +
                "    UNION ALL      \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )      \n" +
                "	select	 pm.id as refId      \n" +
                "			,pm.poNumber as transNumber      \n" +
                "            ,'PO' tranctionType	       \n" +
                "            ,'' cancellationConfirmPending      \n" +
                "    from purchase_order_mst as pm       \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID and pd.isDeleted = 0     \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id and pld.isDeleted = 0  \n" +
                "	where pm.poWorkingStatus = 'P' and pd.mfgPartID = pPartId      \n" +
                "    group by pm.id,pm.poNumber       \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )      \n" +
                "    UNION ALL      \n" +
                "	select	 pm.id as refId      \n" +
                "			,pm.poNumber as transNumber      \n" +
                "            ,'PO' tranctionType	       \n" +
                "            ,pm.poWorkingStatus cancellationConfirmPending      \n" +
                "    from purchase_order_mst as pm       \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID and pd.isDeleted = 0   \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id and pld.isDeleted = 0  \n" +
                "	where pm.poWorkingStatus = 'CA' and pm.cancellationConfirmed = 0 and pd.mfgPartID = pPartId      \n" +
                "    group by pm.id,pm.poNumber,pm.poWorkingStatus;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4906,'2.00','V1',' Bug 34949 - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4906:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponents`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveWhereUsedComponents`(                \n" +
                "	IN pPageIndex INT,                \n" +
                "	IN pRecordPerPage INT,                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pPartID INT              \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE pOffset INT;                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;                \n" +
                "	set @temp_Sproc_RetriveWhereUsedComponents1 = concat(\"              \n" +
                "		select id, rfqLineItemsID, mfgPN, PIDCode, nickname, partID, refDesig, qpa,dnpQty, dnpDesig, MID, mfgCode, mfgType, partStatus, partStatusValue, totalUsage, annualUsage, rohsIcon, rohsName, whereUsed, isBOM, isCustom              \n" +
                "			from              \n" +
                "			(SELECT 	rla.id id, 		rla.rfqLineItemsID,                \n" +
                "						c.mfgPN , 		c.PIDCode ,		c.nickname,                \n" +
                "						rla.partID, 	rl.refDesig,	IFNULL(rl.qpa,0) qpa, IFNULL(rl.dnpQty,0) dnpQty, rl.dnpDesig ,            \n" +
                "						m.id MID, 		m.mfgCode,		m.mfgType,                \n" +
                "						c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,                \n" +
                "						0 totalUsage,                \n" +
                "						0 annualUsage,                \n" +
                "						ro.rohsIcon,                \n" +
                "						ro.name rohsName,                \n" +
                "						'Bill of Material                                 ' whereUsed,                \n" +
                "						true isBOM,                \n" +
                "						c.isCustom,              \n" +
                "                        rank() over(partition by rla.rfqLineItemsID, c.id, rla.partID, rl.refDesig order by rla.id) rnk              \n" +
                "				FROM rfq_lineitems_alternatepart AS rla                \n" +
                "				inner JOIN rfq_lineitems AS rl ON rl.id = rla.rfqLineItemsID                \n" +
                "				inner JOIN component AS c ON c.id = rla.partID AND c.isDeleted = 0              \n" +
                "				inner JOIN mfgCodemst AS m ON m.id = c.mfgcodeID AND  m.isDeleted = 0              \n" +
                "				inner JOIN rfq_rohsmst ro ON ro.id = c.RoHSStatusID      \n" +
                "				WHERE (rla.mfgPNID = \",pPartID,\"  OR                 \n" +
                "					  rla.distMfgPNID = \",pPartID,\"  OR                \n" +
                "                      rl.custPNID = \",pPartID,\" OR        \n" +
                "					  exists (              \n" +
                "							SELECT 1              \n" +
                "							FROM rfq_lineitems_alternatepart AS cassy                \n" +
                "							WHERE cassy.partID = rla.mfgPNID              \n" +
                "							AND 	(cassy.mfgPNID = \",pPartID,\" OR  cassy.distMfgPNID = \",pPartID,\")              \n" +
                "							AND  	cassy.isDeleted = 0              \n" +
                "					  ))              \n" +
                "					AND  rla.isDeleted = 0        \n" +
                "                    and rl.isDeleted = 0) a              \n" +
                "			where rnk = 1\");              \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE componentResult AS                \n" +
                "							\",@temp_Sproc_RetriveWhereUsedComponents1,\" \");                \n" +
                "    PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "    UPDATE componentResult c                \n" +
                "		SET c.totalUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)              \n" +
                "										FROM	workorder w                \n" +
                "										WHERE	w.partID = c.partID              \n" +
                "										AND 	w.isDeleted = 0              \n" +
                "										), 0));              \n" +
                "  \n" +
                "	UPDATE 	componentResult c                \n" +
                "		SET c.annualUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)               \n" +
                "									FROM (              \n" +
                "                                    SELECT 	w.buildQty, TIMESTAMPDIFF(MONTH, w.createdAt, fun_DatetimetoUTCDateTime()) createdBefore              \n" +
                "									FROM	workorder w                \n" +
                "									WHERE	w.partID = c.partID              \n" +
                "									AND 	w.isDeleted = 0              \n" +
                "                                    ) w WHERE w.createdBefore <= 12), 0));            \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsed ASC\") ;                \n" +
                "	ELSE                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "	ELSE                  \n" +
                "		SET rowNumWhere = '';                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	/* to get total count of rows */                  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentResult where \", pWhereClause );                  \n" +
                "	PREPARE query4 FROM @SQLStatement4;                  \n" +
                "	EXECUTE query4;                  \n" +
                "	DEALLOCATE PREPARE query4;                  \n" +
                "  \n" +
                "	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "	PREPARE query5 FROM @SQLStatement5;                  \n" +
                "	EXECUTE query5;                  \n" +
                "	DEALLOCATE PREPARE query5;                  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4907,'2.00','V1',' Bug 34949 - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4907:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTermDaysFromPaymentTermsID` ;  \n" +
                "CREATE FUNCTION `fun_getTermDaysFromPaymentTermsID`(  \n" +
                "	pTermsID INT  \n" +
                ") RETURNS INT  \n" +
                "BEGIN  \n" +
                "	DECLARE v_termDays INT;  \n" +
                "	SET v_termDays = NULL;  \n" +
                "  \n" +
                "	IF (pTermsID IS NOT NULL AND pTermsID != '') THEN  \n" +
                "		SELECT termsDays INTO v_termDays  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE gencCategoryID = pTermsID  \n" +
                "		AND categoryType = 'Payment Terms'  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN v_termDays;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4908,'2.00','V1',' fun_getTermDaysFromPaymentTermsID - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4908:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetailsForMultiplePart` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetailsForMultiplePart`(      	          \n" +
                "	IN pInvoiceID INT	      \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE i INT DEFAULT 0;             \n" +
                "	DECLARE vAssyID INT;            \n" +
                "    DECLARE vRefQuoteID INT;            \n" +
                "	DECLARE vMaterialUnitPrice DECIMAL(16,6);            \n" +
                "	DECLARE vlaborUnitPrce DECIMAL(16,6);            \n" +
                "	DECLARE vOverheadUnitPrice DECIMAL(16,6);  \n" +
                "	DECLARE vrequestedQty INT;            \n" +
                "	DECLARE vParamCnt INT;      \n" +
                "  \n" +
                "    -- table data variables      \n" +
                "    DECLARE vRefCustPackingSlipDetId INT;      \n" +
                "    DECLARE vPartId INT;            \n" +
                "    DECLARE vQuoteFrom INT;      \n" +
                "    DECLARE vQuoteGroupId INT;      \n" +
                "    DECLARE vQuoteNumber VARCHAR(50);            \n" +
                "    DECLARE vPOQty INT;      \n" +
                "    DECLARE vTurnTimeId INT;            \n" +
                "    DECLARE vPrice DECIMAL(18,5);      \n" +
                "  \n" +
                "    /*DROP  TABLE IF EXISTS temp_part_data;      \n" +
                "    CREATE TABLE temp_part_data AS      \n" +
                "    Select *       \n" +
                "    From JSON_TABLE(pPartData , \"$[*]\" COLUMNS      \n" +
                "		(      \n" +
                "			`partId` INT PATH \"$.partId\",      \n" +
                "            `quoteFrom` INT PATH \"$.quoteFrom\",      \n" +
                "            `quoteGroupId` INT PATH \"$.quoteGroupId\",      \n" +
                "            `quoteNumber` INT PATH \"$.quoteNumber\",      \n" +
                "            `turnTimeId` INT PATH \"$.turnTimeId\",      \n" +
                "            `poQty` INT PATH \"$.poQty\",      \n" +
                "            `price` DECIMAL(18,5) PATH \"$.price\"      \n" +
                "		)      \n" +
                "    ) AS JS_PartData;      \n" +
                "    */      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_part_data ;      \n" +
                "	CREATE TEMPORARY TABLE temp_part_data AS      \n" +
                "	SELECT id refCustPackingSlipDetId, partId , quoteFrom ,refRFQGroupID quoteGroupId, quoteNumber, poQty,       \n" +
                "		(CASE WHEN quoteFrom = 1 THEN refRFQQtyTurnTimeID     \n" +
                "			WHEN quoteFrom = 2 THEN refAssyQtyTurnTimeID      \n" +
                "            ELSE  NULL END) turnTimeId ,  unitPrice price      \n" +
                "	FROM customer_packingslip_det   cpd    \n" +
                "	WHERE cpd.refCustPackingSlipID =  pInvoiceID AND cpd.isDeleted = 0 AND cpd.quoteFrom <> 3;       \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO vParamCnt FROM temp_part_data;      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;            \n" +
                "	CREATE TEMPORARY TABLE temp_salesCommission(       \n" +
                "							refCustPackingSlipDetId INT,      \n" +
                "                            partId INT,      \n" +
                "							unitPrice DECIMAL(16,6),            \n" +
                "							refQuoteAttributeId INT,            \n" +
                "							commissionPercentage DECIMAL(16,6),            \n" +
                "							commissionValue DECIMAL(16,6),            \n" +
                "                            extendedCommissionValue INT,      \n" +
                "							category VARCHAR(100),      \n" +
                "							poQty INT,      \n" +
                "							fieldName VARCHAR(30),      \n" +
                "                            org_commissionPercentage DECIMAL(16,6),      \n" +
                "                            org_commissionValue DECIMAL(16,6),  \n" +
                "                            `type` INT,  \n" +
                "                            rfqAssyID INT,  \n" +
                "                            commissionCalculateFrom INT,      \n" +
                "							extendedOrgCommissionValue INT,  \n" +
                "							quotedQty INT,							      \n" +
                "                            refComponentSalesPriceBreakID INT);       \n" +
                "    temp_salesCommissionList: WHILE i < vParamCnt DO       \n" +
                "		SET vRefCustPackingSlipDetId = NULL;      \n" +
                "		SET vPartId = NULL;            \n" +
                "		SET vQuoteFrom = NULL;      \n" +
                "		SET vQuoteGroupId = NULL;      \n" +
                "		SET vQuoteNumber= NULL;            \n" +
                "		SET vPOQty = NULL;      \n" +
                "		SET vTurnTimeId = NULL;            \n" +
                "		SET vPrice= NULL;      \n" +
                "  \n" +
                "        SELECT partId,quoteFrom,quoteGroupId,quoteNumber,turnTimeId,poQty,price ,  refCustPackingSlipDetId       \n" +
                "        INTO  vPartId, vQuoteFrom, vQuoteGroupId, vQuoteNumber,vTurnTimeId, vPOQty, vPrice, vRefCustPackingSlipDetId      \n" +
                "        FROM temp_part_data LIMIT i,1;      \n" +
                "  \n" +
                "		SET vAssyID = NULL;            \n" +
                "		SET vRefQuoteID = NULL;            \n" +
                "		SET vMaterialUnitPrice = NULL;            \n" +
                "		SET vlaborUnitPrce = NULL;            \n" +
                "		SET vOverheadUnitPrice = NULL;         \n" +
                "  \n" +
                "		IF vQuoteFrom = 1 THEN /*From RFQ*/            \n" +
                "			  SELECT ra.id INTO vAssyID            \n" +
                "				FROM rfq_assemblies ra            \n" +
                "			   WHERE ra.partID = vPartId            \n" +
                "				 AND ra.rfqrefID = vQuoteGroupId            \n" +
                "				 AND ra.isDeleted = 0;      \n" +
                "  \n" +
                "				SELECT 	id, unitprice, laborunitPrice, overheadUnitPrice,requestedQty      \n" +
                "				INTO vRefQuoteID , vMaterialUnitPrice , vlaborUnitPrce , vOverheadUnitPrice,vrequestedQty       \n" +
                "                FROM rfq_assy_quotations      \n" +
                "				WHERE 	rfqAssyID = vAssyID      \n" +
                "				AND rfqAssyQtyTurnTimeID = vTurnTimeId      \n" +
                "				AND isDeleted = 0      \n" +
                "				ORDER BY id DESC      \n" +
                "				LIMIT 1;            \n" +
                "  \n" +
                "  \n" +
                "		/*get sales commission calculations from RFQ quotation*/            \n" +
                "			 IF(vRefQuoteID IS NOT NULL) THEN    				            \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                   \n" +
                "						IF(vMaterialUnitPrice IS NOT NULL AND vMaterialUnitPrice>0) THEN        \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType             \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;                  \n" +
                "  \n" +
                "						END IF;                  \n" +
                "					END IF;                  \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID                  \n" +
                "						WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1                   \n" +
                "						AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID)            \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad             \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID            \n" +
                "						 WHERE rad.rfqAssyquoteid = vRefQuoteID AND qdf.iscommission = 1            \n" +
                "						   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;            \n" +
                "  \n" +
                "					END IF;                  \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "						IF(vOverheadUnitPrice IS NOT NULL AND vOverheadUnitPrice > 0) THEN            \n" +
                "  \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType             \n" +
                "							FROM rfq_assy_quotations_additionalcost rad               \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;                  \n" +
                "  \n" +
                "						END IF;                  \n" +
                "					 END IF;                  \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "						IF(vlaborUnitPrce IS NOT NULL AND vlaborUnitPrce>0)THEN          \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType             \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;                  \n" +
                "  \n" +
                "						END IF;                  \n" +
                "					END IF;                  \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType            \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "						 WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;            \n" +
                "					END IF;	      \n" +
                "  \n" +
                "  \n" +
                "					UPDATE 	temp_salesCommission sc      \n" +
                "					LEFT JOIN quotecharges_dynamic_fields_mst qd ON qd.id = sc.refQuoteAttributeId AND qd.isDeleted = 0      \n" +
                "						SET sc.poQty = vPOQty, sc.fieldName = qd.fieldName,      \n" +
                "							sc.extendedOrgCommissionValue = (sc.commissionValue*vPOQty),      \n" +
                "							sc.extendedCommissionValue = (sc.commissionValue*vPOQty),  \n" +
                "							sc.commissionCalculateFrom=2,  \n" +
                "							sc.`type`=2,  \n" +
                "							sc.rfqAssyID=vAssyID,  \n" +
                "							sc.quotedQty=vrequestedQty,      \n" +
                "                            sc.org_commissionPercentage = sc.commissionPercentage,      \n" +
                "                            sc.org_commissionValue= sc.commissionValue;            \n" +
                "  \n" +
                "			END IF;            \n" +
                "		ELSE   -- quote from Part Master      \n" +
                "			/*get sales commission calculations from assembly sales price matrix*/            \n" +
                "			INSERT INTO  temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refComponentSalesPriceBreakID,       \n" +
                "                commissionPercentage, commissionValue, extendedCommissionValue,      \n" +
                "                org_commissionPercentage, extendedOrgCommissionValue ,org_commissionValue ,      \n" +
                "				category, poQty, fieldName,quotedQty,`type`,commissionCalculateFrom )      \n" +
                "			 SELECT vRefCustPackingSlipDetId , vPartId , a.unitPrice,  a.id refComponentSalesPriceBreakID,            \n" +
                "					a.commissionPercentage, a.commissionValue, (a.commissionValue*vPOQty) extendedCommissionValue,            \n" +
                "					a.commissionPercentage org_commissionPercentage, (a.commissionValue*vPOQty) extendedOrgCommissionValue,            \n" +
                "					a.commissionValue org_commissionValue,            \n" +
                "					category, vPOQty poQty, 'Sales Price Matrix' fieldName,a.priceBreak,1,1            \n" +
                "			  FROM (SELECT vPrice/*price*/ unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,            \n" +
                "							ROUND((vPrice/*price*/ * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,            \n" +
                "							IFNULL(cp.salesCommissionNotes,'All') category           \n" +
                "					  FROM component_price_break_details cp            \n" +
                "					 WHERE cp.`type` = 2            \n" +
                "						AND cp.isHistory = 0        \n" +
                "					   AND cp.mfgPNID = vPartId            \n" +
                "					   AND cp.id = vTurnTimeId            \n" +
                "					   AND cp.isDeleted = 0) a;            \n" +
                "		END IF;       \n" +
                "     SET i = i + 1;                                        \n" +
                "	END WHILE temp_salesCommissionList;    	      \n" +
                "   -- drop temporary table if exists temp_salesCommission;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerPackingSlipSalesCommission` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerPackingSlipSalesCommission`(      \n" +
                "	IN pTransType VARCHAR(5),                      	      \n" +
                "	IN pInvoiceID INT,              	                                \n" +
                "        IN pInvData JSON,                                \n" +
                "	IN puserID INT,                                          \n" +
                "	IN puserRoleID INT ,      \n" +
                "        IN pDeletedIds VARCHAR(100),      \n" +
                "        IN pInvDetId INT,    \n" +
                "        IN pInvChildData JSON      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                          \n" +
                "BEGIN                                          \n" +
                "	ROLLBACK;                                          \n" +
                "	RESIGNAL;                                          \n" +
                "END;                                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                          \n" +
                "  BEGIN                                          \n" +
                "	ROLLBACK;                                          \n" +
                "	RESIGNAL;                                          \n" +
                "END;    	      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_salescommission_det;                                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_det AS                                                                            \n" +
                "	SELECT 	*                                                                             \n" +
                "	FROM 	JSON_TABLE(                                     \n" +
                "			pInvData,                                                                            \n" +
                "			\"$[*]\" COLUMNS(    			      \n" +
                "				`id` INT PATH \"$.id\",      \n" +
                "				`refCustPackingSlipDetID` INT PATH \"$.refCustPackingSlipDetID\",                                \n" +
                "				`salesCommissionNotes`VARCHAR(1000) PATH \"$.salesCommissionNotes\",                                 \n" +
                "                                 `commissionCalculateFrom` INT PATH \"$.commissionCalculateFrom\",     \n" +
                "                                  `type` INT PATH \"$.type\",                 \n" +
                "                                   `poQty` INT PATH \"$.poQty\",         \n" +
                "                                   `quotedQty` INT PATH \"$.quotedQty\",                                                                                                      \n" +
                "				`unitPrice` DECIMAL(16,6) PATH \"$.unitPrice\",                                \n" +
                "				`commissionPercentage` DECIMAL(16,6) PATH \"$.commissionPercentage\",                                \n" +
                "				`commissionValue` DECIMAL(16,6) PATH \"$.commissionValue\",      \n" +
                "				`quoted_unitPrice` DECIMAL(16,6) PATH \"$.quoted_unitPrice\",                                 \n" +
                "				`quoted_commissionPercentage`  DECIMAL(16,6) PATH \"$.quoted_commissionPercentage\",                                                                            \n" +
                "				`quoted_commissionValue`  DECIMAL(16,6) PATH \"$.quoted_commissionValue\",       \n" +
                "                `partId` INT PATH \"$.partId\",      \n" +
                "                `refComponentSalesPriceBreakID` INT PATH \"$.refComponentSalesPriceBreakID\" ,    \n" +
                "                 `rfqAssyID` INT PATH \"$.rfqAssyID\"     \n" +
                "			)                                  \n" +
                "		) AS CustInv_JT;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_salescommissionchild_det;                                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommissionchild_det AS                                                                            \n" +
                "	SELECT 	*                                                                             \n" +
                "	FROM 	JSON_TABLE(                                     \n" +
                "			pInvChildData,                                                                            \n" +
                "			\"$[*]\" COLUMNS(    			      \n" +
                "				`id` INT PATH \"$.id\",      \n" +
                "				`refCustPackingSlipDetID` INT PATH \"$.refCustPackingSlipDetID\",                                \n" +
                "				`refcustInvoiceCommissionID`INT PATH \"$.refcustInvoiceCommissionID\",    \n" +
                "				`unitPrice` DECIMAL(16,6) PATH \"$.unitPrice\",                                   \n" +
                "                                 `refQuoteAttributeId` INT PATH \"$.refQuoteAttributeId\",    \n" +
                "                                 `commissionPercentage` DECIMAL(16,6) PATH \"$.commissionPercentage\",                                \n" +
                "				`commissionValue` DECIMAL(16,6) PATH \"$.commissionValue\",     \n" +
                "				`org_unitPrice` DECIMAL(16,6) PATH \"$.org_unitPrice\",                                 \n" +
                "				`org_commissionPercentage`  DECIMAL(16,6) PATH \"$.org_commissionPercentage\",                                                                            \n" +
                "				`org_commissionValue`  DECIMAL(16,6) PATH \"$.org_commissionValue\",         \n" +
                "                                  `category` VARCHAR(100) PATH \"$.category\",    \n" +
                "  \n" +
                "                `partId` INT PATH \"$.partId\",      \n" +
                "                `refComponentSalesPriceBreakID` INT PATH \"$.refComponentSalesPriceBreakID\"    \n" +
                "			)                                  \n" +
                "		) AS CustInvChild_JT;     \n" +
                "		-- Add new commission entry	      \n" +
                "		IF (SELECT COUNT(1) FROM temp_salescommission_det WHERE (id IS NULL OR id < 0) ) > 0 THEN      \n" +
                "			INSERT INTO  customer_packingslip_commission_attribute_mstdet       \n" +
                "				(refCustPackingSlipDetID , salesCommissionNotes,commissionCalculateFrom,unitPrice,`type`,poQty,quotedQty,commissionPercentage,commissionValue,      \n" +
                "					quoted_unitPrice,quoted_commissionPercentage,quoted_commissionValue, partId,refComponentSalesPriceBreakID,      \n" +
                "                    createdBy, createdAt,createByRoleId,rfqAssyID)      \n" +
                "            SELECT refCustPackingSlipDetID , salesCommissionNotes,commissionCalculateFrom,unitPrice,`type`,poQty,quotedQty,commissionPercentage,commissionValue,      \n" +
                "					quoted_unitPrice,quoted_commissionPercentage,quoted_commissionValue, partId,refComponentSalesPriceBreakID,      \n" +
                "                    puserID, fun_DatetimetoUTCDateTime(),puserRoleID,rfqAssyID      \n" +
                "            FROM temp_salescommission_det tmp      \n" +
                "            WHERE (tmp.id IS NULL OR tmp.id < 0);      \n" +
                "  \n" +
                "           END IF;     \n" +
                "           -- Add new child commission entry	      \n" +
                "		IF (SELECT COUNT(1) FROM temp_salescommissionchild_det WHERE (id IS NULL OR id < 0) ) > 0 THEN     \n" +
                "		INSERT INTO  customer_packingslip_commission_attribute       \n" +
                "				(refCustPackingSlipDetID , refcustInvoiceCommissionID,unitPrice,commissionPercentage,commissionValue,      \n" +
                "					org_unitPrice,org_commissionPercentage,org_commissionValue, partId,refComponentSalesPriceBreakID,      \n" +
                "                    createdBy, createdAt,createByRoleId,refQuoteAttributeId,category)      \n" +
                "            SELECT tmp.refCustPackingSlipDetID , (SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=tmp.refCustPackingSlipDetID AND `type`=2 AND isdeleted=0 LIMIT 1),tmp.unitPrice,tmp.commissionPercentage,tmp.commissionValue,      \n" +
                "					tmp.org_unitPrice,tmp.org_commissionPercentage,tmp.org_commissionValue, tmp.partId,tmp.refComponentSalesPriceBreakID,      \n" +
                "                    puserID, fun_DatetimetoUTCDateTime(),puserRoleID,tmp.refQuoteAttributeId,tmp.category      \n" +
                "            FROM temp_salescommissionchild_det tmp     \n" +
                "            WHERE (tmp.id IS NULL OR tmp.id < 0);      \n" +
                "  \n" +
                "           END IF;     \n" +
                "		-- Update existing commission entry	      \n" +
                "		IF (SELECT COUNT(1) FROM temp_salescommission_det WHERE (id IS NOT NULL AND id > 0)) > 0 THEN      \n" +
                "			UPDATE 	customer_packingslip_commission_attribute_mstdet cpd       \n" +
                "			  JOIN 	temp_salescommission_det temp ON temp.id = cpd.id       \n" +
                "               SET  cpd.unitPrice = temp.unitPrice,      \n" +
                "		    cpd.commissionPercentage = temp.commissionPercentage,     \n" +
                "		    cpd.salesCommissionNotes=temp.salesCommissionNotes,     \n" +
                "                    cpd.commissionValue = temp.commissionValue,     \n" +
                "                    cpd.updatedAt = fun_DatetimetoUTCDateTime(),      \n" +
                "                    cpd.updatedBy = puserID,      \n" +
                "                    cpd.updateByRoleId =  puserRoleID      \n" +
                "             WHERE	cpd.isDeleted = 0       \n" +
                "             AND 	temp.id IS NOT NULL       \n" +
                "             AND 	temp.id > 0;        \n" +
                "             -- Update existingc child commission entry    \n" +
                "             UPDATE 	customer_packingslip_commission_attribute cpd       \n" +
                "			  JOIN 	temp_salescommissionchild_det temp ON temp.id = cpd.id       \n" +
                "               SET  cpd.unitPrice = temp.unitPrice,      \n" +
                "		    cpd.commissionPercentage = temp.commissionPercentage,     \n" +
                "                    cpd.commissionValue = temp.commissionValue,     \n" +
                "                    cpd.updatedAt = fun_DatetimetoUTCDateTime(),      \n" +
                "                    cpd.updatedBy = puserID,      \n" +
                "                    cpd.updateByRoleId =  puserRoleID      \n" +
                "             WHERE	cpd.isDeleted = 0       \n" +
                "             AND 	temp.id IS NOT NULL       \n" +
                "             AND 	temp.id > 0;                  \n" +
                "        END IF;      \n" +
                "		-- Delete case      \n" +
                "		IF pDeletedIds IS NOT NULL THEN       \n" +
                "			UPDATE customer_packingslip_commission_attribute_mstdet      \n" +
                "            SET isDeleted = 1,      \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),      \n" +
                "                deletedBy = puserID,      \n" +
                "                deleteByRoleId = puserRoleID      \n" +
                "			WHERE FIND_IN_SET(id , pDeletedIds);      \n" +
                "  \n" +
                "			-- Delete Child    \n" +
                "			UPDATE customer_packingslip_commission_attribute      \n" +
                "            SET isDeleted = 1,      \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),      \n" +
                "                deletedBy = puserID,      \n" +
                "                deleteByRoleId = puserRoleID      \n" +
                "			WHERE FIND_IN_SET(refcustInvoiceCommissionID , pDeletedIds);      \n" +
                "        END IF;      \n" +
                "        -- return  success      \n" +
                "       SELECT cca.id,      \n" +
                "				cca.refCustPackingSlipDetID,      \n" +
                "				cca.unitPrice,      \n" +
                "				cca.commissionPercentage,      \n" +
                "				cca.commissionValue,      \n" +
                "				cca.quoted_commissionPercentage,      \n" +
                "				cca.quoted_commissionValue,      \n" +
                "				cca.partId,      \n" +
                "				cca.refComponentSalesPriceBreakID,      \n" +
                "				cca.quoted_unitPrice,    \n" +
                "				cca.type,    \n" +
                "				cca.commissionCalculateFrom,    \n" +
                "				cca.rfqAssyID,    \n" +
                "				cca.quotedQty,    \n" +
                "				cca.poQty,     \n" +
                "				cca.salesCommissionNotes    \n" +
                "			FROM customer_packingslip_commission_attribute_mstdet cca       \n" +
                "			 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID       \n" +
                "			 WHERE  cca.isdeleted=0      \n" +
                "             AND cpd.refCustPackingSlipId = pInvoiceId       \n" +
                "             AND cpd.id = pInvDetId;    \n" +
                "  \n" +
                "             SELECT cca.id,            \n" +
                "		    cca.refCustPackingSlipDetID,    \n" +
                "		    cca.refcustInvoiceCommissionID,            \n" +
                "                    cca.unitPrice,            \n" +
                "                    cca.refQuoteAttributeId,            \n" +
                "                    cca.commissionPercentage,            \n" +
                "                    cca.commissionValue,            \n" +
                "                    cca.org_commissionPercentage,            \n" +
                "                    cca.org_commissionValue,            \n" +
                "                    cca.category,            \n" +
                "                    cca.partId,            \n" +
                "                    cca.refComponentSalesPriceBreakID,            \n" +
                "                    cca.org_unitPrice,            \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,            \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,            \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName            \n" +
                "				FROM customer_packingslip_commission_attribute cca            \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0            \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0            \n" +
                "                 WHERE cpd.refCustPackingSlipId = pInvoiceId            \n" +
                "                 AND cca.isdeleted=0;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetails`(          \n" +
                "	IN psalesDetId INT,          \n" +
                "	IN ppartID INT,          \n" +
                "    IN pQuoteFrom INT,          \n" +
                "    IN pQuoteGroupId INT,          \n" +
                "    IN pQuoteNumber VARCHAR(50),          \n" +
                "    IN pPOQty INT,          \n" +
                "    IN pTurnTimeID INT,          \n" +
                "    IN pPrice DECIMAL(18,5)    ,      \n" +
                "    IN pTransType CHAR,      \n" +
                "    IN pRefId INT      \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pAssyID INT;          \n" +
                "    DECLARE prefQuoteID INT;          \n" +
                "	DECLARE pmaterialUnitPrice DECIMAL(16,6);          \n" +
                "	DECLARE plaborUnitPrce DECIMAL(16,6);          \n" +
                "	DECLARE v_overheadUnitPrice DECIMAL(16,6);          \n" +
                "  \n" +
                "  IF psalesDetId IS NOT NULL THEN          \n" +
                "	   SELECT sc.id,sc.refSalesorderdetID,sc.unitPrice,sc.org_unitPrice,sc.commissionPercentage,sc.commissionValue, (sc.commissionValue*d.qty) extendedCommissionValue,          \n" +
                "				sc.org_commissionPercentage, sc.org_commissionValue, (sc.org_commissionValue*d.qty) extendedOrgCommissionValue,          \n" +
                "				IFNULL(qd.fieldName,'Assembly Sales Price Matrix') fieldName,          \n" +
                "				sc.category, d.qty          \n" +
                "		FROM salesorderdet_commission_attribute sc          \n" +
                "		JOIN salesorderdet d ON d.id = sc.refSalesorderdetID          \n" +
                "		LEFT JOIN quotecharges_dynamic_fields_mst qd ON sc.refQuoteAttributeId = qd.id          \n" +
                "	   WHERE sc.refSalesorderdetID = psalesDetId          \n" +
                "		 AND sc.partid = ppartID          \n" +
                "		 AND sc.isDeleted = 0          \n" +
                "		 AND d.isDeleted = 0;      \n" +
                "  ELSEIF pTransType IS NOT NULL AND pTransType = 'I' AND pRefId IS NOT NULL THEN      \n" +
                "  SELECT cpc.id,cpc.refCustPackingSlipDetID,cpc.unitPrice,cpc.quoted_unitPrice,cpc.commissionPercentage,cpc.commissionValue,          \n" +
                "				cpc.quoted_commissionPercentage, cpc.quoted_commissionValue,cpc.poQty AS qty,cpc.quotedQty, cpc.type,cpc.commissionCalculateFrom,cpc.rfqAssyID      \n" +
                "		FROM customer_packingslip_commission_attribute_mstdet cpc    \n" +
                "	   WHERE cpc.refCustPackingSlipDetID = pRefId          \n" +
                "		 AND cpc.partid = ppartID          \n" +
                "		 AND cpc.isDeleted = 0;    \n" +
                "  \n" +
                "		SELECT cpc.id,cpc.refCustPackingSlipDetID,cpc.unitPrice,cpc.org_unitPrice,cpc.commissionPercentage,cpc.commissionValue, (cpc.commissionValue*d.shipQty) extendedCommissionValue,          \n" +
                "				cpc.org_commissionPercentage, cpc.org_commissionValue, (cpc.org_commissionValue*d.shipQty) extendedOrgCommissionValue,          \n" +
                "				IFNULL(qd.fieldName,'Sales Commission') fieldName,          \n" +
                "				cpc.category, d.shipQty,cpc.refcustInvoiceCommissionID          \n" +
                "		FROM customer_packingslip_commission_attribute cpc          \n" +
                "		JOIN customer_packingslip_det d ON d.id = cpc.refCustPackingSlipDetID          \n" +
                "		LEFT JOIN quotecharges_dynamic_fields_mst qd ON cpc.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0         \n" +
                "	   WHERE cpc.refCustPackingSlipDetID = pRefId          \n" +
                "		 AND cpc.partid = ppartID          \n" +
                "		 AND cpc.isDeleted = 0          \n" +
                "		 AND d.isDeleted = 0;      \n" +
                "  ELSE          \n" +
                "	 IF pQuoteFrom = 1 THEN /*From RFQ*/          \n" +
                "		  SELECT ra.id INTO pAssyID          \n" +
                "			FROM rfq_assemblies ra          \n" +
                "		   WHERE ra.partID = ppartID          \n" +
                "             AND ra.rfqrefID = pQuoteGroupId          \n" +
                "             AND ra.isDeleted = 0;          \n" +
                "			SELECT id, unitprice, laborunitPrice, overheadUnitPrice INTO prefQuoteID, pmaterialUnitPrice, plaborUnitPrce, v_overheadUnitPrice          \n" +
                "              FROM rfq_assy_quotations          \n" +
                "			 WHERE rfqAssyID = pAssyID          \n" +
                "               AND rfqAssyQtyTurnTimeID = pTurnTimeID          \n" +
                "               AND isDeleted = 0          \n" +
                "               ORDER BY id DESC LIMIT 1;          \n" +
                "		/*get sales commission calculations from RFQ quotation*/          \n" +
                "		 IF(prefQuoteID IS NOT NULL) THEN          \n" +
                "               DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;          \n" +
                "               CREATE TEMPORARY TABLE temp_salesCommission(          \n" +
                "									unitPrice DECIMAL(16,6),          \n" +
                "                                    refQuoteAttributeId INT,          \n" +
                "									commissionPercentage DECIMAL(16,6),          \n" +
                "                                    commissionValue DECIMAL(16,6),          \n" +
                "                                    category VARCHAR(100));          \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "					IF(pmaterialUnitPrice IS NOT NULL AND pmaterialUnitPrice>0) THEN          \n" +
                "  \n" +
                "                        INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "						SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType           \n" +
                "                        FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "                        WHERE rad.rfqAssyquoteid=prefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;                \n" +
                "  \n" +
                "					END IF;                \n" +
                "				END IF;                \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID                \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1                 \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "					INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "					SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID)          \n" +
                "					  FROM rfq_assy_quotations_additionalcost rad           \n" +
                "                     INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID          \n" +
                "					 WHERE rad.rfqAssyquoteid = prefQuoteID AND qdf.iscommission = 1          \n" +
                "					   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;          \n" +
                "  \n" +
                "				END IF;                \n" +
                "				 IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "				 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "                    IF(v_overheadUnitPrice IS NOT NULL AND v_overheadUnitPrice > 0) THEN          \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "						SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType           \n" +
                "						FROM rfq_assy_quotations_additionalcost rad             \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "						WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;                \n" +
                "  \n" +
                "				 	END IF;                \n" +
                "				 END IF;                \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "                    IF(plaborUnitPrce IS NOT NULL AND plaborUnitPrce>0)THEN                \n" +
                "  \n" +
                "                        INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "                        SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType           \n" +
                "                        FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "                        WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;                \n" +
                "  \n" +
                "					END IF;                \n" +
                "				END IF;                \n" +
                "                IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "					INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "                    SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType          \n" +
                "                      FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "					 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "                     WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;          \n" +
                "				END IF;          \n" +
                "  \n" +
                "            SELECT sc.refQuoteAttributeId, sc.unitPrice, sc.unitPrice org_unitPrice, sc.commissionPercentage, sc.commissionValue, (sc.commissionValue*pPOQty/*d.qty*/) extendedCommissionValue,          \n" +
                "					sc.commissionPercentage org_commissionPercentage, sc.commissionValue org_commissionValue,           \n" +
                "					(sc.commissionValue*pPOQty/*d.qty*/) extendedOrgCommissionValue,          \n" +
                "					qd.fieldName, sc.category, pPOQty qty/*d.qty*/ , pAssyID rfqAssyID         \n" +
                "			FROM temp_salesCommission sc          \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qd ON sc.refQuoteAttributeId = qd.id;          \n" +
                "  \n" +
                "		END IF;          \n" +
                "	 ELSE          \n" +
                "		/*get sales commission calculations from assembly sales price matrix*/          \n" +
                "		 SELECT IFNULL(pPrice,a.unitPrice) unitPrice, a.unitPrice quoted_unitPrice, a.id refComponentSalesPriceBreakID,          \n" +
                "				a.commissionPercentage, a.commissionValue, (a.commissionValue*pPOQty) extendedCommissionValue,          \n" +
                "				a.commissionPercentage quoted_commissionPercentage, (a.commissionValue*a.priceBreak) extendedQuotedCommissionValue,          \n" +
                "				a.commissionValue quoted_commissionValue,a.priceBreak AS quotedQty,          \n" +
                "				a.mfgPNID AS partID,category AS salesCommissionNotes, pPOQty qty/*qty*/, 'Sales Price Matrix' fieldName,1 AS commissionCalculateFrom,'From Part Master' typeName,1 AS `type`          \n" +
                "		  FROM (SELECT cp.unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,          \n" +
                "						ROUND((pPrice/*price*/ * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,          \n" +
                "						IFNULL(cp.salesCommissionNotes,'All') category ,cp.priceBreak         \n" +
                "				  FROM component_price_break_details cp          \n" +
                "				 WHERE cp.`type` = 2          \n" +
                "                 	AND cp.isHistory = 0      \n" +
                "				   AND cp.mfgPNID = ppartID          \n" +
                "				   AND cp.id = pTurnTimeID          \n" +
                "				   AND cp.isDeleted = 0) a;          \n" +
                "     END IF;          \n" +
                "  END IF;          \n" +
                "  \n" +
                "   DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                                    \n" +
                "	IN pTransType VARCHAR(5),                                            \n" +
                "	IN pInvoiceType VARCHAR(1),                                                \n" +
                "	IN pInvoiceID INT,              	                                                \n" +
                "    IN pInvData JSON,                                                \n" +
                "    IN pPackingSlipID INT,                                                \n" +
                "	IN puserID INT,                                                          \n" +
                "	IN puserRoleID INT ,                                                      \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),                    \n" +
                "    IN pSystemId VARCHAR(20)  ,                  \n" +
                "    IN pPackingSlipType INT                  \n" +
                ")  \n" +
                "BEGIN                                                                 \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                              \n" +
                "	DECLARE v_prefix VARCHAR(20);                                                      \n" +
                "	DECLARE vTermsDays INT ;     \n" +
                "	DECLARE v_incrementI INT;      \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                            \n" +
                "	SELECT 	*                                                                                             \n" +
                "	FROM 	JSON_TABLE(                                                     \n" +
                "			pInvData,                                                                                            \n" +
                "			\"$[*]\" COLUMNS(    			                                               \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                                \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                                \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                                 \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                                                \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                                            \n" +
                "				`status` INT PATH \"$.status\",                                                \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                                \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                            \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                            \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                                 \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                            \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                                    \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                                  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                                  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                                  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                                  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                                  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                                \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                                \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                                \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                                \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                                \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                                \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                                                \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                                \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                                \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                                \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                                \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                                \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                            \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                                  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                             \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                                  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                             \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                            \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\",                \n" +
                "                `revision` VARCHAR(10) PATH \"$.revision\",                \n" +
                "                `isZeroValue` TINYINT PATH \"$.isZeroValue\",              \n" +
                "                `isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",           \n" +
                "                `poRevision` VARCHAR(50) PATH \"$.poRevision\" ,      \n" +
                "                `isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",      \n" +
                "                `agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\"      \n" +
                "			)                                                  \n" +
                "		) AS CustInv_JT;                          \n" +
                "  \n" +
                "		SELECT  termsDays INTO 	vTermsDays                                                \n" +
                "		FROM genericCategory gc                                                 \n" +
                "		WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                                \n" +
                "		AND categoryType = 'Payment Terms';                   \n" +
                "	  IF(pInvoiceID IS NULL)THEN                  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                                      \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                                      \n" +
                "			FROM `identity`                                                      \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                                     \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                      \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                      \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                      \n" +
                "				packingSlipComment,headerComment,sorevision,                                                      \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                                      \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                                    \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                                 \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                                    \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,                \n" +
                "                contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision)                                                           \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                      \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                      \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                 \n" +
                "					packingSlipComment,headerComment,sorevision,                                                      \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                                     \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                                    \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                                \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                                    \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,                \n" +
                "                    contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision                              \n" +
                "			FROM temp_customerInvoice ;			                                                \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                                        \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                                       \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                                       \n" +
                "		 WHERE id= pPackingSlipID;                                                          \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN               \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order              \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                                      \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                                    \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                                      \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                                      \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,                \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                          \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                                      \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,            \n" +
                "                    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),              \n" +
                "                    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                                   \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,            \n" +
                "                    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                                    \n" +
                "					puserRoleID,puserRoleID,            \n" +
                "                    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                                      \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),                \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),            \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,             \n" +
                "                    cpd.isZeroValue                                                    \n" +
                "			FROM customer_packingslip_det   cpd                    \n" +
                "            LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0            \n" +
                "            LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0            \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                                       \n" +
                "			AND cpd.isDeleted = 0;                        \n" +
                "  \n" +
                "            IF pPackingSlipType = 2 THEN -- PO/SO INV      \n" +
                "            INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                      \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,                      \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,                      \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)                      \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,                    \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,                      \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes                       \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca                      \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;       \n" +
                "					-- child records                \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                      \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                      \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                      \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                      \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,                      \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                      \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                       \n" +
                "					FROM salesorderdet_commission_attribute sca                      \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;                        \n" +
                "  \n" +
                "             ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV             \n" +
                "					-- SP to generate line wise sales commission.                  \n" +
                "                    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);                  \n" +
                "  -- Sales Price details for Part master    \n" +
                "                    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                      \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                      \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                      \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                      \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,                      \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                      \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                       \n" +
                "					FROM temp_salesCommission sca                   \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;      \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ    \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;                                                                                  \n" +
                "	                     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS      \n" +
                "	                       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca     \n" +
                "	                       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                        \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;    \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;    \n" +
                "			SET v_incrementI=0;    \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO    \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;    \n" +
                "  \n" +
                "				SELECT SUM(unitPrice),SUM(commissionValue) INTO @totalUnitPrice,@totalCommissionValue FROM     \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;    \n" +
                "  \n" +
                "				SET v_commissionPercentage=(@totalCommissionValue*100)/(@totalUnitPrice);    \n" +
                "				SET @totalCommissionValue=ROUND((v_commissionPercentage * @totalUnitPrice)/100,5);    \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                      \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                      \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                      \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)                      \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,                      \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                      \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID                       \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;    \n" +
                "					-- sales commission child details    \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;    \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                      \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                      \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                      \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                      \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,                      \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                      \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                      \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                       \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;     \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;    \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;      \n" +
                "             END IF;                         \n" +
                "		END IF;                                                \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                  \n" +
                "        /*          \n" +
                "		UPDATE `identity`                                                      \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                                      \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                      \n" +
                "		*/          \n" +
                "	  ELSE                                                      \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                                \n" +
                "			UPDATE customer_packingslip cp                                                \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                                                \n" +
                "				cp.`status`= tci.status,  			                                                      \n" +
                "				cp.subStatus = tci.subStatus,                                                \n" +
                "                cp.headerComment= tci.headerComment,                                                \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,                                      \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                      \n" +
                "                cp.updatedBy = puserID,                                      \n" +
                "                cp.updateByRoleId = puserRoleID  ,                            \n" +
                "                cp.billingAddress= tci.billingAddress,                                                \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                            \n" +
                "                cp.contactPersonId = tci.contactPersonId,                            \n" +
                "                cp.billToId = tci.billToId,                                  \n" +
                "                cp.shipToId  = tci.shipToId,                                  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,                \n" +
                "                cp.revision = LPAD(tci.revision,2,'0'),                \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,              \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),          \n" +
                "                cp.poRevision = tci.poRevision          \n" +
                "			WHERE cp.id=pInvoiceID              \n" +
                "            AND cp.transType = pTransType;                                                   \n" +
                "        ELSE                                                  \n" +
                "        # in case of tariff invoice & credit memo update all other field                                                \n" +
                "			UPDATE customer_packingslip  cp                                                  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                \n" +
                "			SET	cp.status= tci.status,                                                \n" +
                "				cp.subStatus= tci.subStatus,                                                \n" +
                "				cp.poNumber= tci.poNumber,                                                \n" +
                "				cp.poDate= tci.poDate,                                                \n" +
                "				cp.soNumber= tci.soNumber,                                                \n" +
                "				cp.soDate= tci.soDate,                                                \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                                                \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                                                \n" +
                "				cp.invoiceDate= tci.invoiceDate,                                                \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                                                \n" +
                "				cp.headerComment= tci.headerComment,                                                \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                \n" +
                "				cp.billingAddress= tci.billingAddress,                                                \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                                \n" +
                "				cp.totalAmount= IFNULL(tci.totalAmount,0),                                                \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                                                \n" +
                "				cp.termsId= tci.termsId,                 \n" +
                "                cp.termsDays = vTermsDays,                \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                                            \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                            \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                                      \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                      \n" +
                "                cp.updatedBy = puserID,                                      \n" +
                "                cp.updateByRoleId = puserRoleID,                                    \n" +
                "                cp.rmaNumber= tci.rmaNumber,                                  \n" +
                "                cp.billToId = tci.billToId,                                  \n" +
                "                cp.shipToId  = tci.shipToId,                                  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,                                \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,                            \n" +
                "                cp.contactPersonId = tci.contactPersonId,                \n" +
                "                cp.revision =  LPAD(tci.revision,2,'0'),                \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0),              \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),          \n" +
                "                cp.poRevision = tci.poRevision ,      \n" +
                "                cp.isMarkForRefund = tci.isMarkForRefund,       \n" +
                "                cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0)      \n" +
                "			 WHERE cp.id = pInvoiceID              \n" +
                "             AND cp.transType = pTransType;                                                   \n" +
                "  \n" +
                "            END IF;                                                \n" +
                "  \n" +
                "	  END IF;                                                         \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                                          \n" +
                "       -- detail Id                                                  \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                                  \n" +
                "      FROM customer_packingslip_det                                                   \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                                   \n" +
                "      AND isDeleted = 0;                                                  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4909,'2.00','V1','Alter Procedure Sproc_GetSalesCommissionDetailsForMultiplePart - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4909:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021 *********************************** */
                "drop procedure if exists `Sproc_GetAllSupplierMemoListForRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllSupplierMemoListForRefund`(  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentID INT,  \n" +
                "    IN pIsVoidAndReissuePayment tinyint  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE vIsPaymentVoided tinyint;    \n" +
                "    DECLARE vMfgCodeID int;    \n" +
                "	if pPaymentID is not null then    \n" +
                "		select isPaymentVoided, mfgCodeID into vIsPaymentVoided, vMfgCodeID    \n" +
                "          from packingslip_invoice_payment x    \n" +
                "         where x.id = pPaymentID;    \n" +
                "  \n" +
                "        if pIsVoidAndReissuePayment = 1 then  \n" +
                "			set vIsPaymentVoided = true;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		select true isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt    \n" +
                "			  from (select pid.id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,    \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'    \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'    \n" +
                "									else '' end memoType,    \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber    \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber    \n" +
                "									else '' end memoNumber,    \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate    \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate    \n" +
                "									else '' end memoDate,    \n" +
                "							a.markedForRefundAmt,    \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,    \n" +
                "                            paymentAmount paymentAmountForSelectedInvoice    \n" +
                "					  from packing_slip_material_receive a    \n" +
                "					  JOIN packingslip_invoice_payment_det pid ON pid.refPackingslipInvoiceID = a.id          \n" +
                "					 where a.receiptType in ('C','D')    \n" +
                "					   and a.mfgCodeID = vMfgCodeID    \n" +
                "					   and pid.refPayementid = pPaymentID    \n" +
                "					   and exists (SELECT 1 FROM packingslip_invoice_payment X WHERE x.id = pid.refPayementid AND x.refPaymentMode = 'RR')    \n" +
                "					   and a.markedForRefund = 1    \n" +
                "					   and a.isDeleted = 0    \n" +
                "                       and pid.isDeleted = 0) a    \n" +
                "		union all    \n" +
                "		select false isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt    \n" +
                "			  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,    \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'    \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'    \n" +
                "									else '' end memoType,    \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber    \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber    \n" +
                "									else '' end memoNumber,    \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate    \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate    \n" +
                "									else '' end memoDate,    \n" +
                "							a.markedForRefundAmt,    \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,    \n" +
                "                            0 paymentAmountForSelectedInvoice    \n" +
                "					  from packing_slip_material_receive a    \n" +
                "					 where a.receiptType in ('C','D')    \n" +
                "					   and a.mfgCodeID = vMfgCodeID    \n" +
                "					   and not exists (select 1    \n" +
                "										 from packingslip_invoice_payment x    \n" +
                "										 join packingslip_invoice_payment_det pid ON pid.refPayementid = x.id    \n" +
                "										where pid.refPackingslipInvoiceID = a.id    \n" +
                "										  AND x.refPaymentMode = 'RR'    \n" +
                "										  and x.isPaymentVoided = 0    \n" +
                "                                          and x.isDeleted = 0    \n" +
                "                                          and pid.isDeleted=0)    \n" +
                "					   and a.markedForRefund = 1    \n" +
                "					   /*bellow case added to ignore new rows if payment is voided*/    \n" +
                "					   and case when vIsPaymentVoided = 0 then    \n" +
                "									1=1    \n" +
                "								when vIsPaymentVoided = 1 then    \n" +
                "									1=2    \n" +
                "								end    \n" +
                "					   and a.isDeleted = 0) a    \n" +
                "					 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;    \n" +
                "		select id, systemId, mfgcodeID, fun_getMfgCodeAndNameByID(mfgcodeID) mfgName,    \n" +
                "				paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID, bankAccountNo, bankName, remark, isPaymentVoided, voidPaymentReason, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode, documentPath, depositBatchNumber, offsetAmount, refGencTransModeID, acctId    \n" +
                "		 from packingslip_invoice_payment    \n" +
                "		where id = pPaymentID;    \n" +
                "    else    \n" +
                "		select a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt    \n" +
                "		  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,    \n" +
                "						case when a.receiptType = 'C' then 'Credit Memo'    \n" +
                "							when a.receiptType = 'D' then 'Debit Memo'    \n" +
                "								else '' end memoType,    \n" +
                "						case when a.receiptType = 'C' then a.creditMemoNumber    \n" +
                "							when a.receiptType = 'D' then a.debitMemoNumber    \n" +
                "								else '' end memoNumber,    \n" +
                "						case when a.receiptType = 'C' then a.creditMemoDate    \n" +
                "							when a.receiptType = 'D' then a.debitMemoDate    \n" +
                "								else '' end memoDate,    \n" +
                "						a.markedForRefundAmt,    \n" +
                "						get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount    \n" +
                "				  from packing_slip_material_receive a    \n" +
                "				 where a.receiptType in ('C','D')    \n" +
                "                   and a.mfgCodeID = pMfgcodeID    \n" +
                "				   and a.markedForRefund = 1    \n" +
                "				   and a.isDeleted = 0) a    \n" +
                "				 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;    \n" +
                "	end if;    \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_InvoiceRefundVoidAndReIssue`;  \n" +
                "CREATE PROCEDURE `Sproc_InvoiceRefundVoidAndReIssue`(  \n" +
                "	IN pRefVoidPaymentId INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pRemark VARCHAR(255),  \n" +
                "	IN pVoidPaymentReason VARCHAR(255),  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "    DECLARE vValidationPassed tinyint;  \n" +
                "    DECLARE vMessage varchar(50);  \n" +
                "	DECLARE vNewPaymentID INT;  \n" +
                "    DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable R-Receivable, RR- refund*/  \n" +
                "	SELECT COUNT(1) INTO vCount  \n" +
                "	  FROM packingslip_invoice_payment  \n" +
                "	 WHERE id = pRefVoidPaymentId  \n" +
                "	   AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "       AND isPaymentVoided = 0  \n" +
                "       and isDeleted = 0;  \n" +
                "	 if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'NOT_FOUND_OR_ALREADY_VOIDED' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO vCount  \n" +
                "	  FROM packingslip_invoice_payment  \n" +
                "	 WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "	   AND paymentNumber = pPaymentNumber  \n" +
                "	   AND mfgcodeID = pMfgcodeID  \n" +
                "	   AND isdeleted = 0;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_CHECKNO' as message;  \n" +
                "     end if;  \n" +
                "	IF vValidationPassed = 1 THEN  \n" +
                "		call Sproc_GenerateIncrementalNumber('SupplierRefundSystemID', true);  \n" +
                "			  select systemID, message into vSerialNumber, vMessage  \n" +
                "			  from temp_serialNumber;  \n" +
                "			if vMessage is not null and vMessage != '' then  \n" +
                "				set vValidationPassed = 0;  \n" +
                "				select vMessage as message;  \n" +
                "			end if;  \n" +
                "	END IF;  \n" +
                "	IF vValidationPassed = 1 THEN  \n" +
                "  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		   SET voidPaymentReason = pVoidPaymentReason,  \n" +
                "			   isPaymentVoided = 1,  \n" +
                "			   updatedBy = pUserID,  \n" +
                "			   updateByRoleId = pRoleID,  \n" +
                "			   updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		 WHERE id = pRefVoidPaymentId  \n" +
                "		   AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "           AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment  \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "                bankAccountNo, bankName, remark, createdBy, createByRoleId, updatedBy, updateByRoleId, refVoidedPaymentNumber,   \n" +
                "                refVoidedPaymentId, refPaymentMode, lockStatus, depositBatchNumber, offsetAmount, refGencTransModeID, acctId)  \n" +
                "		SELECT 	vSerialNumber, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
                "                pBankAccountNo, pBankName, pRemark, pUserID, pRoleID, pUserID, pRoleID, paymentNumber,  \n" +
                "                id, refPaymentMode, lockStatus, pDepositBatchNumber, offsetAmount, refGencTransModeID, acctId  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment;  \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/  \n" +
                "		UPDATE 	packingslip_invoice_payment_det  \n" +
                "		SET 	isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
                "			pUserID, pRoleID, paymentAmount,  \n" +
                "			FALSE, refCustPackingslipInvoiceID  \n" +
                "		FROM 	packingslip_invoice_payment_det  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;  \n" +
                "	END IF;                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4910,'2.00','V1','User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4910:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveWhereUsedMFGCodeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWhereUsedMFGCodeList`(                                \n" +
                "	IN ppageIndex INT,                                \n" +
                "	IN precordPerPage INT,                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "    IN pMFGCode VARCHAR(500),              \n" +
                "    IN pIsManufacture TINYINT            \n" +
                ")  \n" +
                "BEGIN               \n" +
                "	DECLARE pOffset INT(11);                                 \n" +
                "	DECLARE rowNumWhere VARCHAR(255);            \n" +
                "    DECLARE SQLMFGStatement varchar(100);            \n" +
                "    DECLARE SQLComponentStatement varchar(100);                \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                           \n" +
                "    DECLARE vTimeZone VARCHAR(50);                        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;             \n" +
                "  \n" +
                "    SET @SQLMFGWhereClause =\"  \";               \n" +
                "    SET @SQLComponentWhereClause =\"  \";         \n" +
                "  \n" +
                "	if pIsManufacture = 1 then                    \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_mfgCode = '\", pMFGCode, \"' or rla.mfgCode = '\", pMFGCode, \"') \");            \n" +
                "        SET @SQLComponentWhereClause=  concat(\" and mfg.mfgType = 'MFG' \");           \n" +
                "	else           \n" +
                "		SET @SQLComponentWhereClause=  concat(\" and mfg.mfgType = 'DIST' \");           \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_distributor = '\", pMFGCode, \"' or rla.distributor = '\", pMFGCode, \"') \");              \n" +
                "	end if;            \n" +
                "  \n" +
                "    set @tempQuery =  concat(\"select (CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPN ELSE rla.distPN END) as MFGPN            \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgCode ELSE rla.distributor END) as MFGCode            \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgCode ELSE rla.org_distributor END) as orgMFGCode                    \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgPN ELSE rla.org_distPN END) as orgMFGPN            \n" +
                "							,rla.rfqLineItemsID as lineItemID            \n" +
                "							,rl.lineID as lineID            \n" +
                "                            ,assyDet.PIDCode assyCode                 \n" +
                "							,assyDet.mfgPN assyMfgPN              \n" +
                "                            ,assyDet.id partId    \n" +
                "                            ,mfg.mfgType    \n" +
                "                            ,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPNID ELSE rla.distMfgPNID END) as mfgPNID          \n" +
                "							,assyDet.isCustom            \n" +
                "							,assyDet.restrictUsePermanently            \n" +
                "							,assyDet.restrictUSEwithpermission            \n" +
                "							,assyDet.restrictPackagingUsePermanently            \n" +
                "							,assyDet.restrictPackagingUseWithpermission      \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.isCustom ELSE distDet.isCustom END) mfgIsCustom      \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictUsePermanently ELSE distDet.restrictUsePermanently END) mfgRestrictUsePermanently      \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictUSEwithpermission ELSE distDet.restrictUSEwithpermission END)  mfgRestrictUSEwithpermission      \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictPackagingUsePermanently ELSE distDet.restrictPackagingUsePermanently END)  mfgRestrictPackagingUsePermanently      \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  mfgDet.restrictPackagingUseWithpermission ELSE distDet.restrictPackagingUseWithpermission END)  mfgRestrictPackagingUseWithpermission      \n" +
                "                            ,fun_getUserNameByID(rla.createdBy) createdbyvalue             \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(rla.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                        \n" +
                "                            ,1 Type    \n" +
                "						from rfq_lineitems_alternatepart as rla            \n" +
                "						left join rfq_lineitems as rl on rla.rfqLineItemsID = rl.id and rl.isDeleted = 0             \n" +
                "						left join component assyDet on rla.partId = assyDet.id and assyDet.isDeleted = 0    \n" +
                "                        left join mfgcodemst mfg on assyDet.mfgcodeID = mfg.id and mfg.isDeleted = 0    \n" +
                "                        left join component mfgDet on rla.mfgPNID = mfgDet.id and mfgDet.isDeleted = 0      \n" +
                "						left join component distDet on rla.distMfgPNID = distDet.id and assyDet.isDeleted = 0      \n" +
                "						where rla.isDeleted = 0  \", @SQLMFGWhereClause    \n" +
                "                        ,\" union all            \n" +
                "                        select c.mfgPN as MFGPN, mfg.mfgCode as MFGCode            \n" +
                "							,c.mfrNameText as orgMFGCode      \n" +
                "							,c.mfrNameText as orgMFGPN            \n" +
                "							,null as lineItemID, null as lineID            \n" +
                "                            ,c.PIDCode assyCode                 \n" +
                "							,c.mfgPN assyMfgPN                \n" +
                "                            ,c.id partId       \n" +
                "                            ,mfg.mfgType    \n" +
                "                            ,c.id mfgPNID          \n" +
                "                            ,c.isCustom            \n" +
                "							,c.restrictUsePermanently            \n" +
                "							,c.restrictUSEwithpermission            \n" +
                "							,c.restrictPackagingUsePermanently            \n" +
                "							,c.restrictPackagingUseWithpermission       \n" +
                "                            ,c.isCustom mfgIsCustom      \n" +
                "							,c.restrictUsePermanently as mfgRestrictUsePermanently      \n" +
                "							,c.restrictUSEwithpermission as mfgRestrictUSEwithpermission      \n" +
                "							,c.restrictPackagingUsePermanently as mfgRestrictPackagingUsePermanently      \n" +
                "							,c.restrictPackagingUseWithpermission as mfgRestrictPackagingUseWithpermission      \n" +
                "                            ,fun_getUserNameByID(c.createdBy) createdbyvalue             \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                        \n" +
                "							,2 Type            \n" +
                "						from component as c    \n" +
                "							left join mfgcodemst mfg on c.mfgcodeID = mfg.id and mfg.isDeleted = 0 where c.isDeleted = 0        \n" +
                "                            and (c.mfrNameText = '\", pMFGCode, \"' or mfg.mfgCode = '\", pMFGCode, \"')\", @SQLComponentWhereClause);            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                \n" +
                "		SET pOrderBy = \"ORDER BY MFGCode ASC\";                              \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	END IF;	                                \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                             \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                          \n" +
                "	EXECUTE query2;                          \n" +
                "	DEALLOCATE PREPARE query2;                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                          \n" +
                "		where \", pWhereClause , \" \" , pOrderBy, rowNumWhere);      \n" +
                "	PREPARE query1 FROM @SQLStatement2;                          \n" +
                "	EXECUTE query1;                          \n" +
                "	DEALLOCATE PREPARE query1;             \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4911,'2.00','V1',' Bug 34799: Supplier - Where used: - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4911:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetailsForMultiplePart` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetailsForMultiplePart`(      	            \n" +
                "	IN pInvoiceID INT	        \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE i INT DEFAULT 0;               \n" +
                "	DECLARE vAssyID INT;              \n" +
                "    DECLARE vRefQuoteID INT;              \n" +
                "	DECLARE vMaterialUnitPrice DECIMAL(16,6);              \n" +
                "	DECLARE vlaborUnitPrce DECIMAL(16,6);              \n" +
                "	DECLARE vOverheadUnitPrice DECIMAL(16,6);    \n" +
                "	DECLARE vrequestedQty INT;              \n" +
                "	DECLARE vParamCnt INT;        \n" +
                "  \n" +
                "    -- table data variables        \n" +
                "    DECLARE vRefCustPackingSlipDetId INT;        \n" +
                "    DECLARE vPartId INT;              \n" +
                "    DECLARE vQuoteFrom INT;        \n" +
                "    DECLARE vQuoteGroupId INT;        \n" +
                "    DECLARE vQuoteNumber VARCHAR(50);              \n" +
                "    DECLARE vPOQty INT;        \n" +
                "    DECLARE vTurnTimeId INT;              \n" +
                "    DECLARE vPrice DECIMAL(18,5);        \n" +
                "  \n" +
                "    /*DROP  TABLE IF EXISTS temp_part_data;        \n" +
                "    CREATE TABLE temp_part_data AS        \n" +
                "    Select *         \n" +
                "    From JSON_TABLE(pPartData , \"$[*]\" COLUMNS        \n" +
                "		(        \n" +
                "			`partId` INT PATH \"$.partId\",        \n" +
                "            `quoteFrom` INT PATH \"$.quoteFrom\",        \n" +
                "            `quoteGroupId` INT PATH \"$.quoteGroupId\",        \n" +
                "            `quoteNumber` INT PATH \"$.quoteNumber\",        \n" +
                "            `turnTimeId` INT PATH \"$.turnTimeId\",        \n" +
                "            `poQty` INT PATH \"$.poQty\",        \n" +
                "            `price` DECIMAL(18,5) PATH \"$.price\"        \n" +
                "		)        \n" +
                "    ) AS JS_PartData;        \n" +
                "    */        \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_part_data ;        \n" +
                "	CREATE TEMPORARY TABLE temp_part_data AS        \n" +
                "	SELECT id refCustPackingSlipDetId, partId , quoteFrom ,refRFQGroupID quoteGroupId, quoteNumber, poQty,         \n" +
                "		(CASE WHEN quoteFrom = 1 THEN refRFQQtyTurnTimeID       \n" +
                "			WHEN quoteFrom = 2 THEN refAssyQtyTurnTimeID        \n" +
                "            ELSE  NULL END) turnTimeId ,  unitPrice price        \n" +
                "	FROM customer_packingslip_det   cpd      \n" +
                "	WHERE cpd.refCustPackingSlipID =  pInvoiceID AND cpd.isDeleted = 0 AND cpd.quoteFrom <> 3;         \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO vParamCnt FROM temp_part_data;        \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;              \n" +
                "	CREATE TEMPORARY TABLE temp_salesCommission(         \n" +
                "							refCustPackingSlipDetId INT,        \n" +
                "                            partId INT,        \n" +
                "							unitPrice DECIMAL(16,6),              \n" +
                "							refQuoteAttributeId INT,              \n" +
                "							commissionPercentage DECIMAL(16,6),              \n" +
                "							commissionValue DECIMAL(16,6),              \n" +
                "                            extendedCommissionValue INT,        \n" +
                "							category VARCHAR(100),        \n" +
                "							poQty INT,        \n" +
                "							fieldName VARCHAR(30),        \n" +
                "                            org_commissionPercentage DECIMAL(16,6),        \n" +
                "                            org_commissionValue DECIMAL(16,6),    \n" +
                "                            `type` INT,    \n" +
                "                            rfqAssyID INT,    \n" +
                "                            commissionCalculateFrom INT,        \n" +
                "							extendedOrgCommissionValue INT,    \n" +
                "							quotedQty INT,							        \n" +
                "                            refComponentSalesPriceBreakID INT);         \n" +
                "    temp_salesCommissionList: WHILE i < vParamCnt DO         \n" +
                "		SET vRefCustPackingSlipDetId = NULL;        \n" +
                "		SET vPartId = NULL;              \n" +
                "		SET vQuoteFrom = NULL;        \n" +
                "		SET vQuoteGroupId = NULL;        \n" +
                "		SET vQuoteNumber= NULL;              \n" +
                "		SET vPOQty = NULL;        \n" +
                "		SET vTurnTimeId = NULL;              \n" +
                "		SET vPrice= NULL;        \n" +
                "  \n" +
                "        SELECT partId,quoteFrom,quoteGroupId,quoteNumber,turnTimeId,poQty,price ,  refCustPackingSlipDetId         \n" +
                "        INTO  vPartId, vQuoteFrom, vQuoteGroupId, vQuoteNumber,vTurnTimeId, vPOQty, vPrice, vRefCustPackingSlipDetId        \n" +
                "        FROM temp_part_data LIMIT i,1;        \n" +
                "  \n" +
                "		SET vAssyID = NULL;              \n" +
                "		SET vRefQuoteID = NULL;              \n" +
                "		SET vMaterialUnitPrice = NULL;              \n" +
                "		SET vlaborUnitPrce = NULL;              \n" +
                "		SET vOverheadUnitPrice = NULL;           \n" +
                "  \n" +
                "		IF vQuoteFrom = 1 THEN /*From RFQ*/              \n" +
                "			  SELECT ra.id INTO vAssyID              \n" +
                "				FROM rfq_assemblies ra              \n" +
                "			   WHERE ra.partID = vPartId              \n" +
                "				 AND ra.rfqrefID = vQuoteGroupId              \n" +
                "				 AND ra.isDeleted = 0;        \n" +
                "  \n" +
                "				SELECT 	id, unitprice, laborunitPrice, overheadUnitPrice,requestedQty        \n" +
                "				INTO vRefQuoteID , vMaterialUnitPrice , vlaborUnitPrce , vOverheadUnitPrice,vrequestedQty         \n" +
                "                FROM rfq_assy_quotations        \n" +
                "				WHERE 	rfqAssyID = vAssyID        \n" +
                "				AND rfqAssyQtyTurnTimeID = vTurnTimeId        \n" +
                "				AND isDeleted = 0        \n" +
                "				ORDER BY id DESC        \n" +
                "				LIMIT 1;              \n" +
                "  \n" +
                "  \n" +
                "		/*get sales commission calculations from RFQ quotation*/              \n" +
                "			 IF(vRefQuoteID IS NOT NULL) THEN    				              \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                     \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                     \n" +
                "						IF(vMaterialUnitPrice IS NOT NULL AND vMaterialUnitPrice>0) THEN          \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)              \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType               \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                     \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid               \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;                    \n" +
                "  \n" +
                "						END IF;                    \n" +
                "					END IF;                    \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                     \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID                    \n" +
                "						WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1                     \n" +
                "						AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                    \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)              \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID)              \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad               \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID              \n" +
                "						 WHERE rad.rfqAssyquoteid = vRefQuoteID AND qdf.iscommission = 1              \n" +
                "						   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;              \n" +
                "  \n" +
                "					END IF;                    \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                     \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN                    \n" +
                "  \n" +
                "						IF(vOverheadUnitPrice IS NOT NULL AND vOverheadUnitPrice > 0) THEN              \n" +
                "  \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)              \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType               \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid               \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;                    \n" +
                "  \n" +
                "						END IF;                    \n" +
                "					 END IF;                    \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                     \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN                    \n" +
                "  \n" +
                "						IF(vlaborUnitPrce IS NOT NULL AND vlaborUnitPrce>0)THEN            \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)              \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType               \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                     \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid               \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;                    \n" +
                "  \n" +
                "						END IF;                    \n" +
                "					END IF;                    \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                     \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN                    \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)              \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType              \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad                     \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid               \n" +
                "						 WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;              \n" +
                "					END IF;	        \n" +
                "  \n" +
                "  \n" +
                "					UPDATE 	temp_salesCommission sc        \n" +
                "					LEFT JOIN quotecharges_dynamic_fields_mst qd ON qd.id = sc.refQuoteAttributeId AND qd.isDeleted = 0        \n" +
                "						SET sc.poQty = vPOQty, sc.fieldName = qd.fieldName,        \n" +
                "							sc.extendedOrgCommissionValue = (sc.commissionValue*vPOQty),        \n" +
                "							sc.extendedCommissionValue = (sc.commissionValue*vPOQty),    \n" +
                "							sc.commissionCalculateFrom=2,    \n" +
                "							sc.`type`=2,    \n" +
                "							sc.rfqAssyID=vAssyID,    \n" +
                "							sc.quotedQty=vrequestedQty,        \n" +
                "                            sc.org_commissionPercentage = sc.commissionPercentage,        \n" +
                "                            sc.org_commissionValue= sc.commissionValue;              \n" +
                "  \n" +
                "			END IF;              \n" +
                "		ELSE   -- quote from Part Master        \n" +
                "			/*get sales commission calculations from assembly sales price matrix*/              \n" +
                "			INSERT INTO  temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refComponentSalesPriceBreakID,         \n" +
                "                commissionPercentage, commissionValue, extendedCommissionValue,        \n" +
                "                org_commissionPercentage, extendedOrgCommissionValue ,org_commissionValue ,        \n" +
                "				category, poQty, fieldName,quotedQty,`type`,commissionCalculateFrom )        \n" +
                "			 SELECT vRefCustPackingSlipDetId , vPartId , a.unitPrice,  a.id refComponentSalesPriceBreakID,              \n" +
                "					a.commissionPercentage, a.commissionValue, (a.commissionValue*vPOQty) extendedCommissionValue,              \n" +
                "					a.commissionPercentage org_commissionPercentage, (a.commissionValue*vPOQty) extendedOrgCommissionValue,              \n" +
                "					a.commissionValue org_commissionValue,              \n" +
                "					category, vPOQty poQty, 'Sales Price Matrix' fieldName,a.priceBreak,1,1              \n" +
                "			  FROM (SELECT vPrice/*price*/ unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,              \n" +
                "							ROUND((vPrice/*price*/ * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,              \n" +
                "							IFNULL(cp.salesCommissionNotes,'All') category,cp.priceBreak             \n" +
                "					  FROM component_price_break_details cp              \n" +
                "					 WHERE cp.`type` = 2              \n" +
                "						AND cp.isHistory = 0          \n" +
                "					   AND cp.mfgPNID = vPartId              \n" +
                "					   AND cp.id = vTurnTimeId              \n" +
                "					   AND cp.isDeleted = 0) a;              \n" +
                "		END IF;         \n" +
                "     SET i = i + 1;                                          \n" +
                "	END WHILE temp_salesCommissionList;    	        \n" +
                "   -- drop temporary table if exists temp_salesCommission;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4912,'2.00','V1',' Alter procedure Sproc_GetSalesCommissionDetailsForMultiplePart - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4912:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-07-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`)  \n" +
                "VALUES ('Allow to Void, Void & Reissue Refund', '1', '0', SYSDATE(), '1', SYSDATE());  \n" +
                /* **************************** Add Script Version -> 01-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4913,'2.00','V1','Task 33321: Give provision for Add/update Refund transaction and validations - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4913:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(      \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),      \n" +
                "	IN pAssyId INT,      \n" +
                "	IN pPartId VARCHAR(255),      \n" +
                "	IN pToUOM INT,      \n" +
                "	IN pRfqLineItemIds VARCHAR(255),      \n" +
                "	IN pCustomerId INT,       \n" +
                "	IN pType VARCHAR(255),      \n" +
                "	IN pStockType VARCHAR(20)      \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "	DECLARE v_WhareClause VARCHAR(255);      \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);      \n" +
                "	DECLARE v_AssyId INT;      \n" +
                "	DECLARE v_IsPurchase TINYINT;      \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);      \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;      \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);      \n" +
                "	SET SESSION group_concat_max_len = 500000;      \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')      \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN      \n" +
                "	FROM 	kit_allocation_lineitems      \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID      \n" +
                "			AND partID = pAssyId      \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)      \n" +
                "			AND isDeleted = 0      \n" +
                "	LIMIT 	1;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS      \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId      \n" +
                "	FROM 		component c      \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0      \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartId)      \n" +
                "				AND c.isDeleted = 0      \n" +
                "	GROUP BY 	mfrPNId;      \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;      \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS      \n" +
                "		SELECT 	*      \n" +
                "		FROM 	(      \n" +
                "				SELECT  	*      \n" +
                "				FROM 		(      \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,	   \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					fun_getUnitNameByID(cst.uom) unitName,  		  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,    \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,	 				  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,   \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,			  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,		  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,				  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,	  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,      \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	    \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,      \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,      \n" +
                "									(      \n" +
                "										CASE      \n" +
                "											WHEN c.connecterTypeID = -2 THEN      \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))      \n" +
                "											ELSE 0      \n" +
                "										END      \n" +
                "									) allocatedPins,      \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,      \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,      \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,      \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,                                                     \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                   \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                            \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,        \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,	                                      \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                      \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,          \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                          \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,         \n" +
                "									0 lineCleanStatus       \n" +
                "							FROM 		component_sid_stock cst        \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id      \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id                               \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id   \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id   \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id   \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0                \n" +
                "							LEFT JOIN 	(                        \n" +
                "										SELECT 		ka.refUIDId,                                       \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                           \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                          \n" +
                "										FROM 		kit_allocation ka          \n" +
                "										WHERE 		ka.status = 'A'                   \n" +
                "										GROUP BY 	ka.refUIDId                      \n" +
                "									) AS ka ON ka.refUIDId = cst.id                          \n" +
                "							LEFT JOIN	(                 \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                             \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                           \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                                   \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                                    \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                           \n" +
                "													AND a.partID = pAssyId                              \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                         \n" +
                "													AND a.isDeleted = 0             \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                        \n" +
                "										UNION          \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  		                             \n" +
                "										FROM 		kit_allocation_lineitems a                                           \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                           \n" +
                "													AND a.partID = pAssyId                              \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                         \n" +
                "													AND a.isDeleted = 0             \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		        \n" +
                "									) d ON d.mfgPNID = cst.refcompid                          \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                          \n" +
                "										AND (                          \n" +
                "											CASE                          \n" +
                "												WHEN pStockType = 'IS' THEN                          \n" +
                "													cst.customerConsign = 0                          \n" +
                "												WHEN pStockType = 'CS' THEN                          \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                          \n" +
                "												ELSE                          \n" +
                "													1 = 1                          \n" +
                "											END                          \n" +
                "											)                          \n" +
                "										AND cst.isDeleted = 0                          \n" +
                "						) a    \n" +
                "						WHERE 		FreeToShare > 0                           \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                    \n" +
                "			) b;    \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS       \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                          \n" +
                "		SELECT 		0 AS id,			'-' AS uid,				refcompid,			0 AS pkgQty, 		                                      \n" +
                "				'-' AS dateCode,   		'-' AS internalDateCodeInDate,		0 AS customerID,		0 AS binID, 	                                    \n" +
                "				0 AS salesOrderDetailID,	0 AS assyID,				'-' AS receiveMaterialType, 	0 AS customerConsign,	                                      \n" +
                "				c.uom,				c.packagingID packaging,		fromBin,			b.Name fromBinName,                                    \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		                          \n" +
                "				w.parentWHID fromDepartment,	fun_getWarehouseNameByID(w.parentWHID) fromDepartmentName,                                    \n" +
                "				0 AS pkgUnit,			c.PIDCode,				'-' nickName,			'-' AS customer,		                                      \n" +
                "				'-' AS assembly,		c.RoHSStatusID	rohsID,                          \n" +
                "				'-' AS assyRohsName,		'-' AS assyRohsIcon,			                          \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		                                      \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                            			                      \n" +
                "				'-' AS binName,			'-' AS warehouseName, 			'-' AS warehouseType,		'-' AS departmentName,	                      \n" +
                "				fun_getUnitNameByID(c.uom) unitName,					c.mfgPN,			pendingUMIDQty,                    \n" +
                "				0 AS convertedUnit,		0 currentPin,				'-' AS allocatedToKit,		                          \n" +
                "				0 AS allocatedQty,		0 AS allocatedUnit,			0 AS allocatedPins,		0 AS scrapedPins,                                      \n" +
                "				0 AS FreeToShare,		0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		'-' costCategory, 			                                      \n" +
                "				c.isGoodPart,			c.restrictUsePermanently,		c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently, 	                                      \n" +
                "				c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		0 AS restrictUseInBOMWithPermission,	        \n" +
                "				1 AS restrictUseInBOMExcluding,	0 AS restrictUseInBOMExcludingAliasWithPermission,			v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,        \n" +
                "				0 AS isUMIDRestrict,		fun_convertUOM(c.uom,pToUOM,c.unit) unit,				'-' customerApproveStatus,		                                      \n" +
                "				v_CustomerApprovalCPN customerApproveStatusCPN,				0 UMIDRohsStatusID,			'-' UMIDRohsStatus, 		              \n" +
                "				v_IsPurchase isPurchase, 	0 AS lineCleanStatus           \n" +
                "		FROM 		(                          \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                          \n" +
                "					FROM 		vu_umid_creation_pending vu      \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID                          \n" +
                "				) vu                                    \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid                                    \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0                           \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0                                  \n" +
                "		WHERE 		-- c.id IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart) AND   \n" +
                "					pendingUMIDQty > 0;	                                \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                          \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                          \n" +
                "		ELSE                          \n" +
                "			SELECT 	*		                                  \n" +
                "			FROM 	(                                  \n" +
                "					SELECT  id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                    \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                  \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                      \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                    \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                  \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                    \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                    \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                    \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                  \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                            \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                            \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                    \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                    \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                          \n" +
                "					UNION ALL                      \n" +
                "					SELECT 	id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                    \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                  \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                      \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                    \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                  \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                    \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                    \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                    \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                  \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                            \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                            \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                    \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                     \n" +
                "					FROM 	temp_nonUmidAvailableStock                                    \n" +
                "				) d;                                  \n" +
                "				-- ORDER BY internalDateCodeInDate IS NULL, internalDateCodeInDate, costCategory, uid;                            \n" +
                "		END IF;            \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN                  \n" +
                "		SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                                  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                                      \n" +
                "				cst.customerID,		cst.binID,		cst.salesOrderDetailID, 	cst.assyID,		cst.receiveMaterialType,                          \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,					                          \n" +
                "				cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                    \n" +
                "				cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,               \n" +
                "				cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                                      \n" +
                "				fun_getBinNameByID(cst.binID) binName,		cst.pkgUnit,		cst.nickName,			                                      \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,	fun_getWareHouseTypeByBinID(cst.binID) warehouseType,                                              \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	fun_getDepartmentTypeByBinID(cst.binID) departmentType,                     \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			                                              \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	fun_getAssyPIDCodeByID(cst.assyID) assembly,	                                      \n" +
                "				c.PIDCode,		c.mfgPN, 			c.RoHSStatusID rohsID,				                                             \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                           \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                          \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                          \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                                      \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                                         \n" +
                "				v_NumOfPosition bomPin,                          \n" +
                "				c.noOfPosition,            \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                             \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                                  \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,        \n" +
                "				c.isCustom,                            \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                                                            \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                                                      \n" +
                "				c.isCustom,	cst.rohsStatusID UMIDRohsStatusID,                                                      \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                                                \n" +
                "				ka.roHSApprovalReason,                                                \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                                \n" +
                "		FROM 		component_sid_stock cst                        \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid                                                \n" +
                "		LEFT JOIN 	(                          \n" +
                "					SELECT 		b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                           \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                          \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                             \n" +
                "					FROM 		(                          \n" +
                "								SELECT 		refUIDId, partID, allocatedUOM, consumeUOM,                           \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                           \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                            \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                          \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                          \n" +
                "								FROM 		kit_allocation                           \n" +
                "								WHERE 		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                          \n" +
                "								GROUP BY 	refUIDId, partID, allocatedUOM, consumeUOM                          \n" +
                "							) a                          \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId AND (CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                          \n" +
                " 				) ka ON ka.refUIDId = cst.id                         \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                                   \n" +
                "					AND ka.assyID = IFNULL(pAssyId,ka.assyID)                                \n" +
                "					AND ka.partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                                  \n" +
                "					AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)         \n" +
                "					AND (                          \n" +
                "						CASE   \n" +
                "							WHEN pType = 'AllocatedStock' THEN                           \n" +
                "								ka.`status` = 'A'                           \n" +
                "							ELSE                           \n" +
                "								ka.`status` = 'R'                           \n" +
                "						END                          \n" +
                "					)                          \n" +
                "					AND cst.isDeleted = 0                          \n" +
                "		ORDER BY 	internalDateCodeInDate, costCategory, cst.uid;                               \n" +
                "	END IF;                           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;                 \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4914,'2.00','V1','Procedure tuning for Sproc_GetStockAllocateList - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4914:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(    \n" +
                "            	IN pStockDetail JSON,    \n" +
                "            	IN pRefSalesOrderDetID INT,                                     \n" +
                "            	IN pAssyID INT,     \n" +
                "            	IN pPartIds LONGTEXT,     \n" +
                "            	IN pUMIDs LONGTEXT,     \n" +
                "            	IN pUserId VARCHAR(50),     \n" +
                "            	IN pCheckForSameUmid BOOLEAN     \n" +
                "            )  \n" +
                "BEGIN                                  \n" +
                "            	DECLARE v_CountSameUMIDFind INT;                                   \n" +
                "            	DECLARE v_ConcateUMID LONGTEXT;                                \n" +
                "            	DECLARE v_KitName LONGTEXT;                             \n" +
                "            	DECLARE v_UMIDForKitName LONGTEXT;      \n" +
                "				DECLARE v_KitIds LONGTEXT;                       \n" +
                "            	SET v_ConcateUMID = NULL;                                     \n" +
                "				/* create temp table for kit allocation details */      \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;                           \n" +
                "            	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS                                     \n" +
                "            	SELECT 	*                                      \n" +
                "            	FROM 	JSON_TABLE(                                     \n" +
                "            		pStockDetail,                                     \n" +
                "            		\"$[*]\" COLUMNS(                                     \n" +
                "            			refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",                                     \n" +
                "            			assyID INT PATH \"$.assyID\",                                     \n" +
                "            			uid VARCHAR(50) PATH \"$.uid\",                                     \n" +
                "            			refBOMLineID INT PATH \"$.refBOMLineID\",                                     \n" +
                "            			STATUS VARCHAR(50) PATH \"$.status\",                                     \n" +
                "            			refUIDId INT PATH \"$.refUIDId\",                                     \n" +
                "            			partId INT PATH \"$.partId\",                                     \n" +
                "            			allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",                                     \n" +
                "            			allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",                                     \n" +
                "            			allocatedUOM INT PATH \"$.allocatedUOM\",                                     \n" +
                "            			umidUnits INT PATH \"$.umidUnits\",                                   \n" +
                "            			kitAllocationId INT PATH \"$.kitAllocationId\",                                \n" +
                "            			PIDCode VARCHAR(100) PATH \"$.PIDCode\",                       \n" +
                "            			restricType VARCHAR(500) PATH \"$.restricType\",                       \n" +
                "            			transactionType VARCHAR(1000) PATH \"$.transactionType\",                       \n" +
                "            			refTableName VARCHAR(255) PATH \"$.refTableName\",                       \n" +
                "            			approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",                       \n" +
                "            			approvedBy VARCHAR(255) PATH \"$.approvedBy\",                       \n" +
                "            			approvalReason TEXT PATH \"$.approvalReason\",           \n" +
                "						confirmationType INT PATH \"$.confirmationType\",             \n" +
                "						roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",             \n" +
                "						allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"                                      \n" +
                "            		)                                     \n" +
                "            	) AS jt;        \n" +
                "  \n" +
                "                /* create temp table for response */      \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;                                                                                            \n" +
                "            	CREATE TEMPORARY TABLE temp_Validation_Error                                     \n" +
                "            	(                                                                                           \n" +
                "            		IsSuccess BOOLEAN,                                                                                 \n" +
                "            		UMID LONGTEXT,                                   \n" +
                "            		KitName LONGTEXT,        \n" +
                "            		ErrorCode INT,                  \n" +
                "					KitIds LONGTEXT                                                                              \n" +
                "            	);                                      \n" +
                "  \n" +
                "            	IF (pCheckForSameUmid = TRUE) THEN                                   \n" +
                "            		SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID                                    \n" +
                "            		FROM 	kit_allocation                                    \n" +
                "            		WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = pAssyID  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);                                   \n" +
                "            	ELSE                                   \n" +
                "            		SET v_CountSameUMIDFind = 0;                                   \n" +
                "            	END IF;           \n" +
                "  \n" +
                "            	IF (v_CountSameUMIDFind = 0) THEN                                   \n" +
                "            		block1: BEGIN                                     \n" +
                "            			DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                       \n" +
                "            			DECLARE v_RefSalesOrderDetID INT;                                     \n" +
                "            			DECLARE v_AssyID INT;                                     \n" +
                "            			DECLARE v_Umid VARCHAR(50);                                     \n" +
                "            			DECLARE v_RefBOMLineID INT;                                     \n" +
                "            			DECLARE v_Status VARCHAR(50);                                     \n" +
                "            			DECLARE v_RefUIDId INT;                                     \n" +
                "            			DECLARE v_PartId INT;                                      \n" +
                "            			DECLARE v_AllocatedQty DECIMAL(18,8);                                      \n" +
                "            			DECLARE v_AllocatedUnit DECIMAL(18,8);                                      \n" +
                "            			DECLARE v_AllocatedUOM INT;                                     \n" +
                "            			DECLARE v_UMIDUnits DECIMAL(18,8);                                     \n" +
                "            			DECLARE v_countKitExist INT;                                     \n" +
                "            			DECLARE v_CountSameUMID INT;                                     \n" +
                "            			DECLARE	v_SameUMID VARCHAR(50);                                     \n" +
                "            			DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);                                     \n" +
                "            			DECLARE v_oldUMID VARCHAR(50);                                     \n" +
                "            			DECLARE v_CountSameAllocatedUnit INT;                                    \n" +
                "            			DECLARE v_KitAllocationId INT;                                    \n" +
                "            			DECLARE v_StringSameUMID VARCHAR(10000);                                   \n" +
                "            			DECLARE v_CountUMIDForSame INT;                              \n" +
                "            			DECLARE v_StringUMIDForKit VARCHAR(10000);                          \n" +
                "            			DECLARE v_CountSameSalesOrder INT;                            \n" +
                "            			DECLARE v_PIDCode VARCHAR(100);                       \n" +
                "            			DECLARE v_RestricType VARCHAR(500);                          \n" +
                "            			DECLARE v_TransactionType VARCHAR(1000);                       \n" +
                "            			DECLARE v_RefTableName VARCHAR(255);                          \n" +
                "            			DECLARE v_ApproveFromPage VARCHAR(255);                          \n" +
                "            			DECLARE v_ApprovedBy VARCHAR(255);                          \n" +
                "            			DECLARE v_ConfirmationType INT;                          \n" +
                "            			DECLARE v_ApprovalReason TEXT;                          \n" +
                "            			DECLARE v_RefID INT;               \n" +
                "						DECLARE v_RoHSApprovalReason VARCHAR(1000);            \n" +
                "						DECLARE v_AllocationRemark VARCHAR(1000);            \n" +
                "  \n" +
                "            			DECLARE KitAllocationDetail_Cursor CURSOR FOR                                     \n" +
                "            			SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,                       \n" +
                "            					PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark                       \n" +
                "            			FROM 	tempKitAllocationDetail;                                     \n" +
                "  \n" +
                "            			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                        \n" +
                "            			OPEN KitAllocationDetail_Cursor;                                       \n" +
                "  \n" +
                "            			KitAllocationDetail_Loop:LOOP                                     \n" +
                "							FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,                       \n" +
                "            									v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;                                     \n" +
                "						IF exit_loop THEN                                                                                      \n" +
                "							LEAVE KitAllocationDetail_Loop;                                                                                \n" +
                "						END IF;                \n" +
                "  \n" +
                "  \n" +
                "				IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN              \n" +
                "					UPDATE 	kit_allocation                                    \n" +
                "							SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),                                   \n" +
                "								allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)                                   \n" +
                "							WHERE	id = v_KitAllocationId;           \n" +
                "				ELSE             \n" +
                "					INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)                                     \n" +
                "							VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,							                                            \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),            \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),            \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),        \n" +
                "							(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));                    \n" +
                "							SET v_RefID = LAST_INSERT_ID();       \n" +
                "					IF(IFNULL(v_RefID, \"\") != \"\") THEN                \n" +
                "						SET v_KitIds = (              \n" +
                "								SELECT 	CASE               \n" +
                "										WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN               \n" +
                "											v_RefID                \n" +
                "										ELSE               \n" +
                "											(SELECT CONCAT(v_KitIds, \",\", v_RefID))                \n" +
                "									END              \n" +
                "								);                \n" +
                "					END IF;                \n" +
                "					IF (v_RestricType IS NOT NULL) THEN                       \n" +
                "						INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)                       \n" +
                "						VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);                       \n" +
                "					END IF;              \n" +
                "  \n" +
                "				END IF;              \n" +
                "					END LOOP KitAllocationDetail_Loop;                                       \n" +
                "					CLOSE KitAllocationDetail_Cursor;       \n" +
                "					END block1;        \n" +
                "  \n" +
                "					INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(1, NULL, NULL, 0, v_KitIds);                                  \n" +
                "					SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;       \n" +
                "            	ELSE                                   \n" +
                "            		SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName                            \n" +
                "            		FROM 	vu_salesorder_shipped_report                            \n" +
                "            		WHERE 	SalesOrderDetailId IN (                           \n" +
                "            				SELECT 	refSalesOrderDetID                            \n" +
                "            				FROM 	kit_allocation                            \n" +
                "            				WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)                           \n" +
                "            			);                           \n" +
                "            		INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(0, v_ConcateUMID, v_KitName, 1, v_KitIds);                                     \n" +
                "            		SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;                                   \n" +
                "            	END IF;                                 \n" +
                "            END;  \n" +
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4915,'2.00','V1','Code Review Request 35008: Bug 34965: [Main branch] When user tries to Allocate to many UMIDs from Available stock then it shows error - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4915:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_getSalesCommissionDetailsFromRfq`;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesCommissionDetailsFromRfq`(          \n" +
                "	IN pPartId INT,          \n" +
                "	IN pRfqQuoteNumber varchar(50),        \n" +
                "    IN pIsPushToPartMaster tinyint,        \n" +
                "    IN pUserId INT,    \n" +
                "    IN pRoleId INT ,    \n" +
                "    IN pIsCallFromPartMaster TINYINT,      \n" +
                "    IN pProceedOverriderQuote TINYINT    \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	DECLARE alreadyExistQuote int;    \n" +
                "	/*this SP used for two purpose 1. get quote data for assembly sales price matrix 2. push data to part master from RFQ page*/        \n" +
                "	drop temporary table if exists tempSalesCommission;       \n" +
                "  \n" +
                "    set alreadyExistQuote = 0;    \n" +
                "    if(pIsCallFromPartMaster = 1 or pIsPushToPartMaster = 1)    \n" +
                "    THEN    \n" +
                "		select count(1) into alreadyExistQuote from component_price_break_details where mfgPNID = pPartId and rfqNumber = pRfqQuoteNumber and isDeleted = 0 and isHistory = 1;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF(alreadyExistQuote > 0 and pIsPushToPartMaster = 0 and pProceedOverriderQuote = 0)    \n" +
                "    THEN    \n" +
                "		select alreadyExistQuote;    \n" +
                "    ELSE       \n" +
                "		if(alreadyExistQuote > 0 and pIsCallFromPartMaster = 1 and pIsPushToPartMaster = 0 and pProceedOverriderQuote = 1)    \n" +
                "        THEN    \n" +
                "			-- Revert Existing History with Same Quote number    \n" +
                "			update component_price_break_details    			       \n" +
                "					   set isHistory = 0, updatedBy = pUserId, updateByRoleId= pRoleId, updatedAt = fun_DatetimetoUTCDateTime()        \n" +
                "				 where mfgPNID = pPartId and rfqNumber = pRfqQuoteNumber and `type` = 2 and isHistory = 1 and isDeleted = 0;       \n" +
                "  \n" +
                "			-- Update Part Quote# Part Master    \n" +
                "            update component        \n" +
                "				   set rfqNumber = pRfqQuoteNumber, updatedBy = pUserId, updateByRoleId = pRoleId, updatedAt = fun_DatetimetoUTCDateTime()        \n" +
                "				 where id = pPartId and isDeleted = 0;       \n" +
                "  \n" +
                "            -- Return reverted record to display     \n" +
                "			select x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,        \n" +
                "					x.salesCommissionPercentage, x.isHistory,x.salesCommissionNotes    \n" +
                "			  from component_price_break_details as x where x.mfgPNID = pPartId     \n" +
                "                 and x.rfqNumber = pRfqQuoteNumber and x.`type` = 2 and x.isHistory = 0 and x.isDeleted = 0    \n" +
                "                 ORDER BY priceBreak,turnTime asc;        \n" +
                "        ELSE    \n" +
                "			-- Return RFQ Quote Data if exists with Passed RFQQuoteNumber    \n" +
                "			create temporary table tempSalesCommission as            \n" +
                "			select x.requestQty priceBreak, x.turnTime, x.unitOfTime, x.assemblyTotalRfqPrice unitPrice, x.salesCommissionAmount,        \n" +
                "					case when ifnull(x.assemblyTotalRfqPrice,0) != 0 then        \n" +
                "							round(((x.salesCommissionAmount * 100) / x.assemblyTotalRfqPrice),2)        \n" +
                "						end salesCommissionPercentage,    \n" +
                "						false isHistory,  \n" +
                "                        null salesCommissionNotes  \n" +
                "			  from (select a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime,        \n" +
                "							sum(case when qdfm.isCommission = 1 then raqac.amount else 0 end) salesCommissionAmount,        \n" +
                "							fun_getAssemblyRfqTotalPrice(a.id) assemblyTotalRfqPrice        \n" +
                "					  from rfq_assy_quotations a        \n" +
                "					  left join rfq_assy_quotations_additionalcost raqac ON raqac.rfqAssyQuoteID = a.id and raqac.isDeleted = 0        \n" +
                "					  left join quotecharges_dynamic_fields_mst qdfm ON qdfm.id = raqac.quoteChargeDynamicFieldID and qdfm.isCommission = 1 and qdfm.isDeleted = 0 and qdfm.quoteAttributeType='R'        \n" +
                "					  join rfq_assy_quantity raq ON raq.id = a.rfqAssyQtyID        \n" +
                "					  join rfq_assy_quantity_turn_time raqt ON raqt.id = a.rfqAssyQtyTurnTimeID        \n" +
                "					 where exists (select 1 from rfq_assemblies ra where ra.id = a.rfqAssyID and a.isDeleted = 0 and ra.partID = pPartId )        \n" +
                "					   and exists (select 1 from rfq_assemblies_quotation_submitted b where b.id = a.refSubmittedQuoteID and b.quoteNumber = pRfqQuoteNumber)        \n" +
                "					   and a.isDeleted = 0        \n" +
                "					 group by a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime) x;        \n" +
                "  \n" +
                "			-- Check If data have to Push into part Master from RFQ Quote    \n" +
                "			if pIsPushToPartMaster = true then       \n" +
                "				select count(1) into alreadyExistQuote from component_price_break_details where mfgPNID = pPartId and     \n" +
                "						rfqNumber = pRfqQuoteNumber and isDeleted = 0;    \n" +
                "				-- Check Same RFQ Quote Number Record Exist    \n" +
                "				IF(alreadyExistQuote >= 1)    \n" +
                "				THEN    \n" +
                "					-- Check Same RFQ Quote Number Record Exist Then set all record for that Quote as Delete    \n" +
                "					update component_price_break_details       \n" +
                "					set isDeleted = 1,       \n" +
                "						isHistory = 0,    \n" +
                "						deletedBy = pUserId,        \n" +
                "						deleteByRoleId= pRoleId,        \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()      \n" +
                "					 where mfgPNID = pPartId        \n" +
                "					   and `type` = 2      \n" +
                "                       and rfqNumber = pRfqQuoteNumber    \n" +
                "					   -- and isHistory = 0    \n" +
                "					   and isDeleted = 0;       \n" +
                "				END IF;    \n" +
                "					-- Update Other Quote# record as History    \n" +
                "					update component_price_break_details    			       \n" +
                "						   set  isHistory = 1,        \n" +
                "								updatedBy = pUserId,        \n" +
                "								updateByRoleId= pRoleId,        \n" +
                "								updatedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					 where mfgPNID = pPartId        \n" +
                "					   and rfqNumber != pRfqQuoteNumber    \n" +
                "					   and `type` = 2     \n" +
                "					   and isHistory = 0    \n" +
                "					   and isDeleted = 0;        \n" +
                "				-- END IF;    \n" +
                "  \n" +
                "				-- Update Part Quote# Part Master    \n" +
                "				update component        \n" +
                "				   set rfqNumber = pRfqQuoteNumber,        \n" +
                "						updatedBy = pUserId,        \n" +
                "						updateByRoleId = pRoleId,        \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()        \n" +
                "				 where id = pPartId        \n" +
                "				   and isDeleted = 0;        \n" +
                "  \n" +
                "                -- Insert RFQ Quote Detail into Comonent Price Break Detail(sales Price Metrix)    \n" +
                "				insert into component_price_break_details        \n" +
                "						(mfgPNID, priceBreak, unitPrice, isDeleted, createdAt, createdBy, updatedAt, updatedBy, updatedOn,         \n" +
                "						createByRoleId, updateByRoleId, `type`, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, rfqNumber, isHistory)        \n" +
                "				select pPartId, priceBreak, unitPrice, 0 /*isDeleted*/, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(),        \n" +
                "						pRoleId, pRoleId, 2/*type*/, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, pRfqQuoteNumber,false isHistory        \n" +
                "				 from tempSalesCommission;        \n" +
                "  \n" +
                "                select x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,        \n" +
                "					x.salesCommissionPercentage, x.isHistory, x.salesCommissionNotes    \n" +
                "			  from component_price_break_details as x where x.mfgPNID = pPartId     \n" +
                "                 and x.rfqNumber = pRfqQuoteNumber and x.`type` = 2 and x.isHistory = 0 and x.isDeleted = 0    \n" +
                "                 ORDER BY priceBreak,turnTime asc;    \n" +
                "			else         \n" +
                "				select * from tempSalesCommission ORDER BY priceBreak,turnTime asc;      \n" +
                "			end if;      \n" +
                "		END IF;    \n" +
                "    END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4916,'2.00','V1',' Bug 35043: Sales Price Matrix: While switch the Quote form the History, sales commission note is not showing - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4916:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                                      \n" +
                "	IN pTransType VARCHAR(5),                                              \n" +
                "	IN pInvoiceType VARCHAR(1),                                                  \n" +
                "	IN pInvoiceID INT,              	                                                  \n" +
                "    IN pInvData JSON,                                                  \n" +
                "    IN pPackingSlipID INT,                                                  \n" +
                "	IN puserID INT,                                                            \n" +
                "	IN puserRoleID INT ,                                                        \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),                      \n" +
                "    IN pSystemId VARCHAR(20)  ,                    \n" +
                "    IN pPackingSlipType INT                    \n" +
                ")  \n" +
                "BEGIN                                                                   \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                                \n" +
                "	DECLARE v_prefix VARCHAR(20);                                                        \n" +
                "	DECLARE vTermsDays INT ;       \n" +
                "	DECLARE v_incrementI INT;        \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                              \n" +
                "	SELECT 	*                                                                                               \n" +
                "	FROM 	JSON_TABLE(                                                       \n" +
                "			pInvData,                                                                                              \n" +
                "			\"$[*]\" COLUMNS(    			                                                 \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                                  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                                  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                                   \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                                                  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                                              \n" +
                "				`status` INT PATH \"$.status\",                                                  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                                  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                              \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                              \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                                   \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                              \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                                      \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                                    \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                                    \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                                    \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                                    \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                                    \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                                  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                                  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                                  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                                  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                                  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                                  \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                                                  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                                  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                                  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                                  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                                  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                                  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                              \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                                    \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                               \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                                    \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                               \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                              \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\",                  \n" +
                "                `revision` VARCHAR(10) PATH \"$.revision\",                  \n" +
                "                `isZeroValue` TINYINT PATH \"$.isZeroValue\",                \n" +
                "                `isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",             \n" +
                "                `poRevision` VARCHAR(50) PATH \"$.poRevision\" ,        \n" +
                "                `isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",        \n" +
                "                `agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\"        \n" +
                "			)                                                    \n" +
                "		) AS CustInv_JT;                            \n" +
                "  \n" +
                "		SELECT  termsDays INTO 	vTermsDays                                                  \n" +
                "		FROM genericCategory gc                                                   \n" +
                "		WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                                  \n" +
                "		AND categoryType = 'Payment Terms';                     \n" +
                "	  IF(pInvoiceID IS NULL)THEN                    \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                                        \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                                        \n" +
                "			FROM `identity`                                                        \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                                       \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                        \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                        \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                        \n" +
                "				packingSlipComment,headerComment,sorevision,                                                        \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                                        \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                                      \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                                   \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                                      \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,                  \n" +
                "                contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision)                                                             \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                        \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                        \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                   \n" +
                "					packingSlipComment,headerComment,sorevision,                                                        \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                                       \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                                      \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                                  \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                                      \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,                  \n" +
                "                    contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision                                \n" +
                "			FROM temp_customerInvoice ;			                                                  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                                          \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                                         \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                                         \n" +
                "		 WHERE id= pPackingSlipID;                                                            \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN                 \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order                \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                                        \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                                      \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                                        \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                                        \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,                  \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                            \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                                        \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,              \n" +
                "                    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),                \n" +
                "                    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                                     \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,              \n" +
                "                    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                                      \n" +
                "					puserRoleID,puserRoleID,              \n" +
                "                    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                                        \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,              \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),              \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),              \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),              \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),                  \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),              \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,               \n" +
                "                    cpd.isZeroValue                                                      \n" +
                "			FROM customer_packingslip_det   cpd                      \n" +
                "            LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0              \n" +
                "            LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0              \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                                         \n" +
                "			AND cpd.isDeleted = 0;                          \n" +
                "  \n" +
                "            IF pPackingSlipType = 2 THEN -- PO/SO INV        \n" +
                "            INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                        \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,                        \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,                        \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)                        \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,                      \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,                        \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,                        \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes                         \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca                        \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                          \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;         \n" +
                "					-- child records                  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                        \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                        \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                        \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                        \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,                        \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                        \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                        \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                         \n" +
                "					FROM salesorderdet_commission_attribute sca                        \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                          \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;                          \n" +
                "  \n" +
                "             ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV               \n" +
                "					-- SP to generate line wise sales commission.                    \n" +
                "                    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);                    \n" +
                "  -- Sales Price details for Part master      \n" +
                "                    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                        \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                        \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                        \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                        \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,                        \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                        \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                        \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                         \n" +
                "					FROM temp_salesCommission sca                     \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                          \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;        \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ      \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;                                                                                    \n" +
                "	                     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS        \n" +
                "	                       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca       \n" +
                "	                       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                          \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;      \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;      \n" +
                "			SET v_incrementI=0;      \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO      \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;      \n" +
                "  \n" +
                "                                SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;   \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM       \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;      \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN  \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));      \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                        \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                        \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                        \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)                        \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,                        \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                        \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,                        \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID                         \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;      \n" +
                "					-- sales commission child details      \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;      \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                        \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                        \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                        \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                        \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,                        \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                        \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                        \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                         \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;       \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;      \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;        \n" +
                "             END IF;                           \n" +
                "		END IF;                                                  \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                    \n" +
                "        /*            \n" +
                "		UPDATE `identity`                                                        \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                                        \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                        \n" +
                "		*/            \n" +
                "	  ELSE                                                        \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                                  \n" +
                "			UPDATE customer_packingslip cp                                                  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                  \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                                                  \n" +
                "				cp.`status`= tci.status,  			                                                        \n" +
                "				cp.subStatus = tci.subStatus,                                                  \n" +
                "                cp.headerComment= tci.headerComment,                                                  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                  \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,                                        \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                        \n" +
                "                cp.updatedBy = puserID,                                        \n" +
                "                cp.updateByRoleId = puserRoleID  ,                              \n" +
                "                cp.billingAddress= tci.billingAddress,                                                  \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                              \n" +
                "                cp.contactPersonId = tci.contactPersonId,                              \n" +
                "                cp.billToId = tci.billToId,                                    \n" +
                "                cp.shipToId  = tci.shipToId,                                    \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,                  \n" +
                "                cp.revision = LPAD(tci.revision,2,'0'),                  \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,                \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),            \n" +
                "                cp.poRevision = tci.poRevision            \n" +
                "			WHERE cp.id=pInvoiceID                \n" +
                "            AND cp.transType = pTransType;                                                     \n" +
                "        ELSE                                                    \n" +
                "        # in case of tariff invoice & credit memo update all other field                                                  \n" +
                "			UPDATE customer_packingslip  cp                                                    \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                  \n" +
                "			SET	cp.status= tci.status,                                                  \n" +
                "				cp.subStatus= tci.subStatus,                                                  \n" +
                "				cp.poNumber= tci.poNumber,                                                  \n" +
                "				cp.poDate= tci.poDate,                                                  \n" +
                "				cp.soNumber= tci.soNumber,                                                  \n" +
                "				cp.soDate= tci.soDate,                                                  \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                                                  \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                                                  \n" +
                "				cp.invoiceDate= tci.invoiceDate,                                                  \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                                                  \n" +
                "				cp.headerComment= tci.headerComment,                                                  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                  \n" +
                "				cp.billingAddress= tci.billingAddress,                                                  \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                                  \n" +
                "				cp.totalAmount= IFNULL(tci.totalAmount,0),                                                  \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                                                  \n" +
                "				cp.termsId= tci.termsId,                   \n" +
                "                cp.termsDays = vTermsDays,                  \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                                              \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                              \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                                        \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                        \n" +
                "                cp.updatedBy = puserID,                                        \n" +
                "                cp.updateByRoleId = puserRoleID,                                      \n" +
                "                cp.rmaNumber= tci.rmaNumber,                                    \n" +
                "                cp.billToId = tci.billToId,                                    \n" +
                "                cp.shipToId  = tci.shipToId,                                    \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,                                  \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,                              \n" +
                "                cp.contactPersonId = tci.contactPersonId,                  \n" +
                "                cp.revision =  LPAD(tci.revision,2,'0'),                  \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0),                \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),            \n" +
                "                cp.poRevision = tci.poRevision ,        \n" +
                "                cp.isMarkForRefund = tci.isMarkForRefund,         \n" +
                "                cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0)        \n" +
                "			 WHERE cp.id = pInvoiceID                \n" +
                "             AND cp.transType = pTransType;                                                     \n" +
                "  \n" +
                "            END IF;                                                  \n" +
                "  \n" +
                "	  END IF;                                                           \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                                            \n" +
                "       -- detail Id                                                    \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                                    \n" +
                "      FROM customer_packingslip_det                                                     \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                                     \n" +
                "      AND isDeleted = 0;                                                    \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetailsForMultiplePart` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetailsForMultiplePart`(      	              \n" +
                "	IN pInvoiceID INT	          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE i INT DEFAULT 0;                 \n" +
                "	DECLARE vAssyID INT;                \n" +
                "    DECLARE vRefQuoteID INT;                \n" +
                "	DECLARE vMaterialUnitPrice DECIMAL(16,6);                \n" +
                "	DECLARE vlaborUnitPrce DECIMAL(16,6);                \n" +
                "	DECLARE vOverheadUnitPrice DECIMAL(16,6);      \n" +
                "	DECLARE vrequestedQty INT;                \n" +
                "	DECLARE vParamCnt INT;          \n" +
                "  \n" +
                "    -- table data variables          \n" +
                "    DECLARE vRefCustPackingSlipDetId INT;          \n" +
                "    DECLARE vPartId INT;                \n" +
                "    DECLARE vQuoteFrom INT;          \n" +
                "    DECLARE vQuoteGroupId INT;          \n" +
                "    DECLARE vQuoteNumber VARCHAR(50);                \n" +
                "    DECLARE vPOQty INT;          \n" +
                "    DECLARE vTurnTimeId INT;                \n" +
                "    DECLARE vPrice DECIMAL(18,5);          \n" +
                "  \n" +
                "    /*DROP  TABLE IF EXISTS temp_part_data;          \n" +
                "    CREATE TABLE temp_part_data AS          \n" +
                "    Select *           \n" +
                "    From JSON_TABLE(pPartData , \"$[*]\" COLUMNS          \n" +
                "		(          \n" +
                "			`partId` INT PATH \"$.partId\",          \n" +
                "            `quoteFrom` INT PATH \"$.quoteFrom\",          \n" +
                "            `quoteGroupId` INT PATH \"$.quoteGroupId\",          \n" +
                "            `quoteNumber` INT PATH \"$.quoteNumber\",          \n" +
                "            `turnTimeId` INT PATH \"$.turnTimeId\",          \n" +
                "            `poQty` INT PATH \"$.poQty\",          \n" +
                "            `price` DECIMAL(18,5) PATH \"$.price\"          \n" +
                "		)          \n" +
                "    ) AS JS_PartData;          \n" +
                "    */          \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_part_data ;          \n" +
                "	CREATE TEMPORARY TABLE temp_part_data AS          \n" +
                "	SELECT id refCustPackingSlipDetId, partId , quoteFrom ,refRFQGroupID quoteGroupId, quoteNumber, poQty,           \n" +
                "		(CASE WHEN quoteFrom = 1 THEN refRFQQtyTurnTimeID         \n" +
                "			WHEN quoteFrom = 2 THEN refAssyQtyTurnTimeID          \n" +
                "            ELSE  NULL END) turnTimeId ,  unitPrice price          \n" +
                "	FROM customer_packingslip_det   cpd        \n" +
                "	WHERE cpd.refCustPackingSlipID =  pInvoiceID AND cpd.isDeleted = 0 AND cpd.quoteFrom <> 3;           \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO vParamCnt FROM temp_part_data;          \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;                \n" +
                "	CREATE TEMPORARY TABLE temp_salesCommission(           \n" +
                "							refCustPackingSlipDetId INT,          \n" +
                "                            partId INT,          \n" +
                "							unitPrice DECIMAL(16,6),                \n" +
                "							refQuoteAttributeId INT,                \n" +
                "							commissionPercentage DECIMAL(16,6),                \n" +
                "							commissionValue DECIMAL(16,6),                \n" +
                "                            extendedCommissionValue INT,          \n" +
                "							category VARCHAR(100),          \n" +
                "							poQty INT,          \n" +
                "							fieldName VARCHAR(30),          \n" +
                "                            org_commissionPercentage DECIMAL(16,6),          \n" +
                "                            org_commissionValue DECIMAL(16,6),      \n" +
                "                            `type` INT,      \n" +
                "                            rfqAssyID INT,      \n" +
                "                            commissionCalculateFrom INT,          \n" +
                "							extendedOrgCommissionValue INT,      \n" +
                "							quotedQty INT,							          \n" +
                "                            refComponentSalesPriceBreakID INT);           \n" +
                "    temp_salesCommissionList: WHILE i < vParamCnt DO           \n" +
                "		SET vRefCustPackingSlipDetId = NULL;          \n" +
                "		SET vPartId = NULL;                \n" +
                "		SET vQuoteFrom = NULL;          \n" +
                "		SET vQuoteGroupId = NULL;          \n" +
                "		SET vQuoteNumber= NULL;                \n" +
                "		SET vPOQty = NULL;          \n" +
                "		SET vTurnTimeId = NULL;                \n" +
                "		SET vPrice= NULL;          \n" +
                "  \n" +
                "        SELECT partId,quoteFrom,quoteGroupId,quoteNumber,turnTimeId,poQty,price ,  refCustPackingSlipDetId           \n" +
                "        INTO  vPartId, vQuoteFrom, vQuoteGroupId, vQuoteNumber,vTurnTimeId, vPOQty, vPrice, vRefCustPackingSlipDetId          \n" +
                "        FROM temp_part_data LIMIT i,1;          \n" +
                "  \n" +
                "		SET vAssyID = NULL;                \n" +
                "		SET vRefQuoteID = NULL;                \n" +
                "		SET vMaterialUnitPrice = NULL;                \n" +
                "		SET vlaborUnitPrce = NULL;                \n" +
                "		SET vOverheadUnitPrice = NULL;             \n" +
                "  \n" +
                "		IF vQuoteFrom = 1 THEN /*From RFQ*/                \n" +
                "			  SELECT ra.id INTO vAssyID                \n" +
                "				FROM rfq_assemblies ra                \n" +
                "			   WHERE ra.partID = vPartId                \n" +
                "				 AND ra.rfqrefID = vQuoteGroupId                \n" +
                "				 AND ra.isDeleted = 0;          \n" +
                "  \n" +
                "				SELECT 	id, unitprice, laborunitPrice, overheadUnitPrice,requestedQty          \n" +
                "				INTO vRefQuoteID , vMaterialUnitPrice , vlaborUnitPrce , vOverheadUnitPrice,vrequestedQty           \n" +
                "                FROM rfq_assy_quotations          \n" +
                "				WHERE 	rfqAssyID = vAssyID          \n" +
                "				AND rfqAssyQtyTurnTimeID = vTurnTimeId          \n" +
                "				AND isDeleted = 0          \n" +
                "				ORDER BY id DESC          \n" +
                "				LIMIT 1;                \n" +
                "  \n" +
                "  \n" +
                "		/*get sales commission calculations from RFQ quotation*/                \n" +
                "			 IF(vRefQuoteID IS NOT NULL) THEN    				                \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                       \n" +
                "						IF(vMaterialUnitPrice IS NOT NULL AND vMaterialUnitPrice>0) THEN            \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)                \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType                 \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                       \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;                      \n" +
                "  \n" +
                "						END IF;                      \n" +
                "					END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID                      \n" +
                "						WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1                       \n" +
                "						AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)                \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID)                \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID                \n" +
                "						 WHERE rad.rfqAssyquoteid = vRefQuoteID AND qdf.iscommission = 1                \n" +
                "						   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;                \n" +
                "  \n" +
                "					END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						IF(vOverheadUnitPrice IS NOT NULL AND vOverheadUnitPrice > 0) THEN                \n" +
                "  \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)                \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType                 \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;                      \n" +
                "  \n" +
                "						END IF;                      \n" +
                "					 END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						IF(vlaborUnitPrce IS NOT NULL AND vlaborUnitPrce>0)THEN              \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)                \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType                 \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                       \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;                      \n" +
                "  \n" +
                "						END IF;                      \n" +
                "					END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)                \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType                \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad                       \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "						 WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;                \n" +
                "					END IF;	          \n" +
                "  \n" +
                "  \n" +
                "					UPDATE 	temp_salesCommission sc          \n" +
                "					LEFT JOIN quotecharges_dynamic_fields_mst qd ON qd.id = sc.refQuoteAttributeId AND qd.isDeleted = 0          \n" +
                "						SET sc.poQty = vPOQty, sc.fieldName = qd.fieldName,          \n" +
                "							sc.extendedOrgCommissionValue = (sc.commissionValue*vPOQty),          \n" +
                "							sc.extendedCommissionValue = (sc.commissionValue*vPOQty),      \n" +
                "							sc.commissionCalculateFrom=2,      \n" +
                "							sc.`type`=2,      \n" +
                "							sc.rfqAssyID=vAssyID,      \n" +
                "							sc.quotedQty=vrequestedQty,          \n" +
                "                            sc.org_commissionPercentage = sc.commissionPercentage,          \n" +
                "                            sc.org_commissionValue= sc.commissionValue;                \n" +
                "  \n" +
                "			END IF;                \n" +
                "		ELSE   -- quote from Part Master          \n" +
                "			/*get sales commission calculations from assembly sales price matrix*/                \n" +
                "			INSERT INTO  temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refComponentSalesPriceBreakID,           \n" +
                "                commissionPercentage, commissionValue, extendedCommissionValue,          \n" +
                "                org_commissionPercentage, extendedOrgCommissionValue ,org_commissionValue ,          \n" +
                "				category, poQty, fieldName,quotedQty,`type`,commissionCalculateFrom )          \n" +
                "			 SELECT vRefCustPackingSlipDetId , vPartId , a.unitPrice,  a.id refComponentSalesPriceBreakID,                \n" +
                "					a.commissionPercentage, a.commissionValue, (a.commissionValue*vPOQty) extendedCommissionValue,                \n" +
                "					a.commissionPercentage org_commissionPercentage, (a.commissionValue*vPOQty) extendedOrgCommissionValue,                \n" +
                "					a.commissionValue org_commissionValue,                \n" +
                "					category, vPOQty poQty, 'Sales Price Matrix' fieldName,a.priceBreak,1,1                \n" +
                "			  FROM (SELECT vPrice/*price*/ unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,                \n" +
                "				ROUND((((100/(100+cp.salesCommissionPercentage)) * vPrice ) * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,                \n" +
                "							IFNULL(cp.salesCommissionNotes,'All') category,cp.priceBreak               \n" +
                "					  FROM component_price_break_details cp                \n" +
                "					 WHERE cp.`type` = 2                \n" +
                "						AND cp.isHistory = 0            \n" +
                "					   AND cp.mfgPNID = vPartId                \n" +
                "					   AND cp.id = vTurnTimeId                \n" +
                "					   AND cp.isDeleted = 0) a;                \n" +
                "		END IF;           \n" +
                "     SET i = i + 1;                                            \n" +
                "	END WHILE temp_salesCommissionList;    	          \n" +
                "   -- drop temporary table if exists temp_salesCommission;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetails`(            \n" +
                "	IN psalesDetId INT,            \n" +
                "	IN ppartID INT,            \n" +
                "    IN pQuoteFrom INT,            \n" +
                "    IN pQuoteGroupId INT,            \n" +
                "    IN pQuoteNumber VARCHAR(50),            \n" +
                "    IN pPOQty INT,            \n" +
                "    IN pTurnTimeID INT,            \n" +
                "    IN pPrice DECIMAL(18,5)    ,        \n" +
                "    IN pTransType CHAR,        \n" +
                "    IN pRefId INT        \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE pAssyID INT;            \n" +
                "    DECLARE prefQuoteID INT;            \n" +
                "	DECLARE pmaterialUnitPrice DECIMAL(16,6);            \n" +
                "	DECLARE plaborUnitPrce DECIMAL(16,6);            \n" +
                "	DECLARE v_overheadUnitPrice DECIMAL(16,6);            \n" +
                "  \n" +
                "  IF psalesDetId IS NOT NULL THEN            \n" +
                "	   SELECT sc.id,sc.refSalesorderdetID,sc.unitPrice,sc.org_unitPrice,sc.commissionPercentage,sc.commissionValue, (sc.commissionValue*d.qty) extendedCommissionValue,            \n" +
                "				sc.org_commissionPercentage, sc.org_commissionValue, (sc.org_commissionValue*d.qty) extendedOrgCommissionValue,            \n" +
                "				IFNULL(qd.fieldName,'Assembly Sales Price Matrix') fieldName,            \n" +
                "				sc.category, d.qty            \n" +
                "		FROM salesorderdet_commission_attribute sc            \n" +
                "		JOIN salesorderdet d ON d.id = sc.refSalesorderdetID            \n" +
                "		LEFT JOIN quotecharges_dynamic_fields_mst qd ON sc.refQuoteAttributeId = qd.id            \n" +
                "	   WHERE sc.refSalesorderdetID = psalesDetId            \n" +
                "		 AND sc.partid = ppartID            \n" +
                "		 AND sc.isDeleted = 0            \n" +
                "		 AND d.isDeleted = 0;        \n" +
                "  ELSEIF pTransType IS NOT NULL AND pTransType = 'I' AND pRefId IS NOT NULL THEN        \n" +
                "  SELECT cpc.id,cpc.refCustPackingSlipDetID,cpc.unitPrice,cpc.quoted_unitPrice,cpc.commissionPercentage,cpc.commissionValue,            \n" +
                "				cpc.quoted_commissionPercentage, cpc.quoted_commissionValue,cpc.poQty AS qty,cpc.quotedQty, cpc.type,cpc.commissionCalculateFrom,cpc.rfqAssyID        \n" +
                "		FROM customer_packingslip_commission_attribute_mstdet cpc      \n" +
                "	   WHERE cpc.refCustPackingSlipDetID = pRefId            \n" +
                "		 AND cpc.partid = ppartID            \n" +
                "		 AND cpc.isDeleted = 0;      \n" +
                "  \n" +
                "		SELECT cpc.id,cpc.refCustPackingSlipDetID,cpc.unitPrice,cpc.org_unitPrice,cpc.commissionPercentage,cpc.commissionValue, (cpc.commissionValue*d.shipQty) extendedCommissionValue,            \n" +
                "				cpc.org_commissionPercentage, cpc.org_commissionValue, (cpc.org_commissionValue*d.shipQty) extendedOrgCommissionValue,            \n" +
                "				IFNULL(qd.fieldName,'Sales Commission') fieldName,            \n" +
                "				cpc.category, d.shipQty,cpc.refcustInvoiceCommissionID            \n" +
                "		FROM customer_packingslip_commission_attribute cpc            \n" +
                "		JOIN customer_packingslip_det d ON d.id = cpc.refCustPackingSlipDetID            \n" +
                "		LEFT JOIN quotecharges_dynamic_fields_mst qd ON cpc.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0           \n" +
                "	   WHERE cpc.refCustPackingSlipDetID = pRefId            \n" +
                "		 AND cpc.partid = ppartID            \n" +
                "		 AND cpc.isDeleted = 0            \n" +
                "		 AND d.isDeleted = 0;        \n" +
                "  ELSE            \n" +
                "	 IF pQuoteFrom = 1 THEN /*From RFQ*/            \n" +
                "		  SELECT ra.id INTO pAssyID            \n" +
                "			FROM rfq_assemblies ra            \n" +
                "		   WHERE ra.partID = ppartID            \n" +
                "             AND ra.rfqrefID = pQuoteGroupId            \n" +
                "             AND ra.isDeleted = 0;            \n" +
                "			SELECT id, unitprice, laborunitPrice, overheadUnitPrice INTO prefQuoteID, pmaterialUnitPrice, plaborUnitPrce, v_overheadUnitPrice            \n" +
                "              FROM rfq_assy_quotations            \n" +
                "			 WHERE rfqAssyID = pAssyID            \n" +
                "               AND rfqAssyQtyTurnTimeID = pTurnTimeID            \n" +
                "               AND isDeleted = 0            \n" +
                "               ORDER BY id DESC LIMIT 1;            \n" +
                "		/*get sales commission calculations from RFQ quotation*/            \n" +
                "		 IF(prefQuoteID IS NOT NULL) THEN            \n" +
                "               DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;            \n" +
                "               CREATE TEMPORARY TABLE temp_salesCommission(            \n" +
                "									unitPrice DECIMAL(16,6),            \n" +
                "                                    refQuoteAttributeId INT,            \n" +
                "									commissionPercentage DECIMAL(16,6),            \n" +
                "                                    commissionValue DECIMAL(16,6),            \n" +
                "                                    category VARCHAR(100));            \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "					IF(pmaterialUnitPrice IS NOT NULL AND pmaterialUnitPrice>0) THEN            \n" +
                "  \n" +
                "                        INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "						SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType             \n" +
                "                        FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "                        WHERE rad.rfqAssyquoteid=prefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;                  \n" +
                "  \n" +
                "					END IF;                  \n" +
                "				END IF;                  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID                  \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1                   \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "					INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "					SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID)            \n" +
                "					  FROM rfq_assy_quotations_additionalcost rad             \n" +
                "                     INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID            \n" +
                "					 WHERE rad.rfqAssyquoteid = prefQuoteID AND qdf.iscommission = 1            \n" +
                "					   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;            \n" +
                "  \n" +
                "				END IF;                  \n" +
                "				 IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "				 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "                    IF(v_overheadUnitPrice IS NOT NULL AND v_overheadUnitPrice > 0) THEN            \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "						SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType             \n" +
                "						FROM rfq_assy_quotations_additionalcost rad               \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "						WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;                  \n" +
                "  \n" +
                "				 	END IF;                  \n" +
                "				 END IF;                  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "                    IF(plaborUnitPrce IS NOT NULL AND plaborUnitPrce>0)THEN                  \n" +
                "  \n" +
                "                        INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "                        SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType             \n" +
                "                        FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "						INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "                        WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;                  \n" +
                "  \n" +
                "					END IF;                  \n" +
                "				END IF;                  \n" +
                "                IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN                  \n" +
                "  \n" +
                "					INSERT INTO temp_salesCommission(unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)            \n" +
                "                    SELECT fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, prefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType            \n" +
                "                      FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "					 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid             \n" +
                "                     WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;            \n" +
                "				END IF;            \n" +
                "  \n" +
                "            SELECT sc.refQuoteAttributeId, sc.unitPrice, sc.unitPrice org_unitPrice, sc.commissionPercentage, sc.commissionValue, (sc.commissionValue*pPOQty/*d.qty*/) extendedCommissionValue,            \n" +
                "					sc.commissionPercentage org_commissionPercentage, sc.commissionValue org_commissionValue,             \n" +
                "					(sc.commissionValue*pPOQty/*d.qty*/) extendedOrgCommissionValue,            \n" +
                "					qd.fieldName, sc.category, pPOQty qty/*d.qty*/ , pAssyID rfqAssyID           \n" +
                "			FROM temp_salesCommission sc            \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qd ON sc.refQuoteAttributeId = qd.id;            \n" +
                "  \n" +
                "		END IF;            \n" +
                "	 ELSE            \n" +
                "		/*get sales commission calculations from assembly sales price matrix*/            \n" +
                "		 SELECT a.unitPrice, a.unitPrice quoted_unitPrice, a.id refComponentSalesPriceBreakID,            \n" +
                "				a.commissionPercentage, a.commissionValue, (a.commissionValue*pPOQty) extendedCommissionValue,            \n" +
                "				a.commissionPercentage quoted_commissionPercentage, (a.commissionValue*a.priceBreak) extendedQuotedCommissionValue,            \n" +
                "				a.commissionValue quoted_commissionValue,a.priceBreak AS quotedQty,            \n" +
                "				a.mfgPNID AS partID,category AS salesCommissionNotes, pPOQty qty/*qty*/, 'Sales Price Matrix' fieldName,1 AS commissionCalculateFrom,'From Part Master' typeName,1 AS `type`            \n" +
                "		  FROM (SELECT pPrice AS unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,            \n" +
                "						ROUND((((100/(100+cp.salesCommissionPercentage)) * pPrice ) * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,            \n" +
                "						IFNULL(cp.salesCommissionNotes,'All') category ,cp.priceBreak           \n" +
                "				  FROM component_price_break_details cp            \n" +
                "				 WHERE cp.`type` = 2            \n" +
                "                 	AND cp.isHistory = 0        \n" +
                "				   AND cp.mfgPNID = ppartID            \n" +
                "				   AND cp.id = pTurnTimeID            \n" +
                "				   AND cp.isDeleted = 0) a;            \n" +
                "     END IF;            \n" +
                "  END IF;            \n" +
                "  \n" +
                "   DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4917,'2.00','V1',' Alter Procedure Sproc_GetSalesCommissionDetails - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4917:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(            \n" +
                "    IN pWhereClause VARCHAR(16383),            \n" +
                "    IN puserID VARCHAR(50),    \n" +
                "    IN pnickName VARCHAR(20),          \n" +
                "    IN pprefix VARCHAR(20),            \n" +
                "    IN pIsFromUID TINYINT,            \n" +
                "    IN pComponentID INT,            \n" +
                "    IN pCustomerID INT,            \n" +
                "    IN pCPN BOOL,            \n" +
                "    IN pMFGAvailabel BOOL,            \n" +
                "    IN pRefCpnMfgID INT,            \n" +
                "    IN pAssyID INT,            \n" +
                "    IN pSalesOrderDetailID INT,            \n" +
                "    IN pReceiveMaterialType VARCHAR(255),            \n" +
                "    IN pkitAssemblyID INT,            \n" +
                "    IN pBarcodeID INT,            \n" +
                "    IN pBOMLineID INT,            \n" +
                "    IN pSupplierID INT,            \n" +
                "    IN pCategory VARCHAR(2),            \n" +
                "    IN pInventoryType VARCHAR(2),            \n" +
                "    IN pCallFrom VARCHAR(50),        \n" +
                "    IN pExcludeStatus INT        \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;            \n" +
                "	DECLARE v_delimiter VARCHAR(10);            \n" +
                "	DECLARE v_length INT;            \n" +
                "	DECLARE v_fieldType INT;            \n" +
                "	DECLARE v_entityId INT;            \n" +
                "	DECLARE v_dataElementId INT;            \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);            \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);            \n" +
                "	DECLARE strLabel VARCHAR(2000);            \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);             \n" +
                "	DECLARE StaticField VARCHAR(100);            \n" +
                "	DECLARE DynamicField VARCHAR(100);            \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';            \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');            \n" +
                "	DECLARE plen,slen INT;            \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;            \n" +
                "	DECLARE pbr_Separator VARCHAR(50);            \n" +
                "	DECLARE barcode_type_id INT;            \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);            \n" +
                "	DECLARE UpdateValue VARCHAR(16383);            \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';            \n" +
                "	DECLARE v_SupplierID INT;            \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);            \n" +
                "	DECLARE v_barcode_id INT;            \n" +
                "	DECLARE v_barcode_count INT;            \n" +
                "	DECLARE v_NumberOfPart INT;            \n" +
                "	DECLARE v_rfqLineItemsID INT;            \n" +
                "	DECLARE v_componentCount INT;            \n" +
                "	DECLARE v_componentId INT;            \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);            \n" +
                "	DECLARE v_partMFG INT;            \n" +
                "	DECLARE v_isGoodPart TINYINT;            \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;            \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;            \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;            \n" +
                "	DECLARE v_isInstall TINYINT;            \n" +
                "	DECLARE v_isBOMLineClean TINYINT;            \n" +
                "	DECLARE v_BOMLineId INT;            \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;            \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;            \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;            \n" +
                "	DECLARE v_PIDCode VARCHAR(110);            \n" +
                "	DECLARE v_isPurchase TINYINT;            \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);            \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);            \n" +
                "	DECLARE v_BOMLineCount INT;            \n" +
                "	DECLARE v_AlternateLineId INT;            \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);            \n" +
                "	DECLARE v_BOMAssyId INT;            \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);            \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;            \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;            \n" +
                "	DECLARE v_isCPNFlag TINYINT;            \n" +
                "	DECLARE v_dateCodeFormatID INT;            \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);            \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);            \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;            \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;                                      \n" +
                "	DECLARE v_MFRList VARCHAR(10000);                                    \n" +
                "	DECLARE v_barcode_status INT;                                    \n" +
                "	DECLARE v_category INT;                                    \n" +
                "	DECLARE v_partType INT;                        \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;	                                      \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;                                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                               \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                              \n" +
                "	(                              \n" +
                "		errorText LONGTEXT,                              \n" +
                "		IsSuccess VARCHAR (2),                    \n" +
                "		MFGPart VARCHAR(10000)                                   \n" +
                "	);                                   \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */              \n" +
                "	IF (pCategory = 'P') THEN                                  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;                               \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive                                  \n" +
                "		(                                           \n" +
                "			scanlabel VARCHAR(1000),                                  \n" +
                "			poNumber VARCHAR(100),                              \n" +
                "			supplierSONumber VARCHAR(100),                            \n" +
                "			packingSlipNumber VARCHAR(50),                            \n" +
                "			invoiceNumber VARCHAR(50)                            \n" +
                "		);                                  \n" +
                "	ELSE /* Temp table for MFR */                                   \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                               \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock                              \n" +
                "		(                              \n" +
                "			refcompid INT,                              \n" +
                "			pkgQty DECIMAL(18,6),            \n" +
                "			dateCode VARCHAR(10),            \n" +
                "			lotCode VARCHAR(255),            \n" +
                "			scanlabel VARCHAR(1000),            \n" +
                "			createdBy VARCHAR(255),            \n" +
                "			uid VARCHAR(14),            \n" +
                "			prefix VARCHAR(20),            \n" +
                "			nickName VARCHAR(50),            \n" +
                "			cpn TINYINT,            \n" +
                "			mfgAvailabel TINYINT,            \n" +
                "			refCPNMFGPNID INT,            \n" +
                "			customerID INT,            \n" +
                "			assyID INT,            \n" +
                "			salesOrderDetailID INT,            \n" +
                "			receiveMaterialType VARCHAR(255),            \n" +
                "			refSupplierPartId INT,                                                      \n" +
                "			mfrDateCode VARCHAR(50),                            \n" +
                "			poNumber VARCHAR(50),                              \n" +
                "			supplierSONumber VARCHAR(50),                            \n" +
                "			packingSlipNumber VARCHAR(50),                            \n" +
                "			invoiceNumber VARCHAR(50),                        \n" +
                "			binName VARCHAR(100),                        \n" +
                "			packaging VARCHAR(100),                        \n" +
                "			packingSlipDetailNickname VARCHAR(50)                        \n" +
                "		);              \n" +
                "  \n" +
                "		/* Temp table for data element value */              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                               \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                              \n" +
                "		(                              \n" +
                "			entityid INT,            \n" +
                "			dataelementid INT,            \n" +
                "			`value` LONGTEXT,            \n" +
                "			createdBy VARCHAR(255)            \n" +
                "		);             \n" +
                "    END IF;                                      \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator               \n" +
                "	# return error code            \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found            \n" +
                "	# 0: Barcode template does not exist, Please add template            \n" +
                "	# 1: Validation Clear            \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component            \n" +
                "	# 3: Mfgcode is not found            \n" +
                "	# 4: MFG PN does not exist            \n" +
                "	# 5: Multiple MFG PN found            \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code            \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly            \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer            \n" +
                "	# 9:  Multiple barcode template found.            \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check            \n" +
                "	# 11: MFG PN is incorrect part            \n" +
                "	# 12: PID PID1 was restricted part at part master level.            \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.            \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.            \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.            \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.            \n" +
                "	# 17: PID is contain more than 1 BOM line.            \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.            \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.            \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.            \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.            \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.            \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other            \n" +
                "  \n" +
                "	block1: BEGIN                             \n" +
                "   SET valuesforInsert = REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause, '\\\\', '\\\\'), '\\\\', '\\\\\\\\'), '\"', '\\\\\"'), \"'\",\"\\\\'\");           \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                                         \n" +
                "			/* Get barcode from labelstring */              \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status                                   \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                               \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN                                    \n" +
                "				/* Get More than 1 barcode then give validation */              \n" +
                "				IF (v_barcode_count > 1) THEN              \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                               \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                               \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);	                              \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                     \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                       \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;              \n" +
                "				ELSE                 \n" +
                "					SET pBarcodeID = v_barcode_id;              \n" +
                "				END IF;                                     \n" +
                "			END IF;             \n" +
                "		ELSE              \n" +
                "			/* Get data from barcode id */              \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;              \n" +
                "		END IF;                                                                                                       \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */              \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN                     			                    \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);                             \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name                                   \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;              \n" +
                "			SET pBarcodeID = v_barcode_id;                                                                        \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                            \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;              \n" +
                "			SET v_BarcodeType = '2D';                    \n" +
                "		ELSE /* barcode 1D */                                                                 \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                             \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;                                                               \n" +
                "			SET v_BarcodeType = '1D';                 \n" +
                "		END IF;               \n" +
                "	END block1;                                                                    \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */              \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN              \n" +
                "		block2: BEGIN                                                \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                              \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                              \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                           \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;                       \n" +
                "			-- declare exit loop if data not found                              \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                              \n" +
                "			-- if any record match found than  check for delimiter and its value                         \n" +
                "			IF (pbr_template_ID > 0) THEN                              \n" +
                "				-- create temporary table for deliemeter and component dataelement                              \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                              \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                              \n" +
                "					pentityId INT,                              \n" +
                "					pdataElementId INT,                              \n" +
                "					pdelimiter_value VARCHAR(200)                              \n" +
                "				);                         \n" +
                "				-- create temporary table for separator string values                              \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;			                              \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                    \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                              \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength                                   \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;                   \n" +
                "				-- open cursor                              \n" +
                "				OPEN barcodeMatch_cursor;                         \n" +
                "				-- set str label as whereclause                            \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter                          \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");           \n" +
                "				-- if prefix is found than remove those from actual string match                              \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN		                              \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));            \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));            \n" +
                "				 END IF;                             \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                               \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                              \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                              \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                              \n" +
                "				 END IF;	                                                                                          \n" +
                "				-- insert all values after seprator split                      \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                                    				                          \n" +
                "				PREPARE stmt1 FROM @SQL;                              \n" +
                "				EXECUTE stmt1;                                             \n" +
                "				DEALLOCATE PREPARE stmt1;                            \n" +
                "				IF (pCategory = 'P') THEN                                  \n" +
                "					-- create dynamic query to insert in packing slip                              \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';                                                  \n" +
                "				ELSE                                   \n" +
                "					-- create dynamic query to insert in recieving material                              \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                  \n" +
                "				END IF;                                  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                              \n" +
                "				barcodeMatch_loop:LOOP                             \n" +
                "					-- get all five selected values                              \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                      \n" +
                "					-- exit loop if no record found for barcode match                              \n" +
                "					IF exit_loop THEN                                                                                                \n" +
                "						CLOSE barcodeMatch_cursor;                              \n" +
                "						LEAVE barcodeMatch_loop;                              \n" +
                "					END IF;                         \n" +
                "					-- dynamic query to get dellimeter string with values from string                              \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                              \n" +
                "					EXECUTE stmtdelimiter;                                                  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;                                   \n" +
                "  \n" +
                "					-- get delimiter values from string                              \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                      \n" +
                "					-- check for field type is static or dynamic                              \n" +
                "					-- if static field than check for mfg code and mfg part number            \n" +
                "					IF v_fieldType = 0  THEN                                  \n" +
                "						-- component_sid_stock                               \n" +
                "						-- get static field name from barcode table delimiter data element id                                              \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);                   \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                              \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                      \n" +
                "							SET MFG_Part_No = delimiter_value_data;               \n" +
                "							/* If component id is not found */                                   \n" +
                "							IF(pComponentID = 0)        \n" +
                "                            THEN                      \n" +
                "								/* Get component data */              \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;            \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                              \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM                         \n" +
                "								(                        \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType            \n" +
                "									FROM 	component c                                                                                                         \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND         \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)               \n" +
                "									UNION                        \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                                         \n" +
                "									FROM 		component_otherpn co                                                                                                         \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0                   \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND        \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0	                                        \n" +
                "								) a                                        \n" +
                "								UNION                                        \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM                         \n" +
                "								(                        \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                      \n" +
                "									FROM 	component c                                                                                                         \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND        \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0                     \n" +
                "									UNION                        \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                      \n" +
                "									FROM 		component_otherpn co                                                                                                         \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                         \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)         \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0	                                        \n" +
                "								) a                                        \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;              \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN            \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID                                       \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;                                      \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail; 				                                      \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  		                                      \n" +
                "								   ELSE            \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;            \n" +
                "								END IF;					                                      \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN                     \n" +
                "									/* If component is more that one then remove supplier from list */              \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;            \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS            \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;            \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */              \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;            \n" +
                "									IF (v_componentCount < 2) THEN            \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission            \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission            \n" +
                "										FROM 	temp_component_supplier_detail;            \n" +
                "									END IF;            \n" +
                "								ELSE            \n" +
                "									IF (pSupplierID IS NULL) THEN            \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType            \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType            \n" +
                "										FROM 	temp_component_detail;                                      \n" +
                "									ELSE 	                                      \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN                                      \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;                                      \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN                                      \n" +
                "											SET v_componentCount=0;                                      \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;                                      \n" +
                "										ELSE                                      \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                              \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                              \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);                                      \n" +
                "										END IF;            \n" +
                "									END IF;            \n" +
                "								END IF;         \n" +
                "							ELSE                  \n" +
                "								/* If component id is found */              \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType                              \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType                              \n" +
                "								FROM 	component            \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;                    \n" +
                "							END IF;              \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */              \n" +
                "							IF v_componentCount > 1 THEN              \n" +
                "								CLOSE barcodeMatch_cursor;                              \n" +
                "								LEAVE barcodeMatch_loop;                    \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */              \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN                               \n" +
                "								CLOSE barcodeMatch_cursor;                              \n" +
                "								LEAVE barcodeMatch_loop;                    \n" +
                "							END IF;                              \n" +
                "  \n" +
                "							/* If bad part found */              \n" +
                "							IF (v_isGoodPart != 1) THEN                                      \n" +
                "								CLOSE barcodeMatch_cursor;                              \n" +
                "								LEAVE barcodeMatch_loop;               \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* Check all type of restriction */              \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                         \n" +
                "								CLOSE barcodeMatch_cursor;                              \n" +
                "								LEAVE barcodeMatch_loop;            \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */              \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                       \n" +
                "								CLOSE barcodeMatch_cursor;                              \n" +
                "								LEAVE barcodeMatch_loop;            \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */              \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                       \n" +
                "								CLOSE barcodeMatch_cursor;                              \n" +
                "								LEAVE barcodeMatch_loop;                    \n" +
                "							END IF;                      \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */              \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                  \n" +
                "							IF (@MFGType = 'DIST') THEN                  \n" +
                "								SET v_SupplierID = v_componentId;                  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and         \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);                  \n" +
                "							END IF;               \n" +
                "  \n" +
                "							/* Check kit allocation */              \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                    \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */              \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;            \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId            \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId                          \n" +
                "								FROM 	(            \n" +
                "										SELECT 	*            \n" +
                "										FROM            \n" +
                "											(              \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                         \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId            \n" +
                "												FROM 		component_packagingalias cp                \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid            \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id            \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID            \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0        \n" +
                "												UNION                \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,            \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId            \n" +
                "												FROM 		rfq_lineitems_alternatepart rla            \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                             \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0                   \n" +
                "												UNION                                                                                 \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,            \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId            \n" +
                "												FROM 		rfq_lineitems_alternatepart rla            \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                             \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL            \n" +
                "												GROUP BY 	custPNID, rla.partID            \n" +
                "											) b                         \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)            \n" +
                "										GROUP BY b.lineID, b.assyId                                                                  \n" +
                "									) a;                                                                  \n" +
                "  \n" +
                "								/* BOM line not found  */              \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                     \n" +
                "									CLOSE barcodeMatch_cursor;                              \n" +
                "									LEAVE barcodeMatch_loop;                   \n" +
                "								/* Found More then one BOM line */            \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                      \n" +
                "									CLOSE barcodeMatch_cursor;                              \n" +
                "									LEAVE barcodeMatch_loop;            \n" +
                "								ELSE                        \n" +
                "									/* Restrict use bom */              \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                    \n" +
                "										CLOSE barcodeMatch_cursor;                              \n" +
                "										LEAVE barcodeMatch_loop;                    \n" +
                "									END IF;                                                                           \n" +
                "  \n" +
                "									/* BOM line contain any error */              \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;            \n" +
                "									IF (v_isBOMLineClean = 0) THEN            \n" +
                "										CLOSE barcodeMatch_cursor;            \n" +
                "										LEAVE barcodeMatch_loop;            \n" +
                "									END IF;            \n" +
                "								END IF;            \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */            \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN            \n" +
                "									CLOSE barcodeMatch_cursor;            \n" +
                "									LEAVE barcodeMatch_loop;            \n" +
                "								END IF;            \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* Set dynamic query for component */              \n" +
                "							IF  v_componentCount = 1 THEN                                       \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                              \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				            \n" +
                "								ELSE                                    \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                              \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"'); 	    		                              \n" +
                "								END IF;                                    \n" +
                "							END IF;                          \n" +
                "						END IF;                              \n" +
                "  \n" +
                "						/* Not in use */              \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                              \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                      \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;                                              \n" +
                "						END IF;                \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */              \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN            \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                 \n" +
                "							END IF;                                    \n" +
                "						END IF;                                    \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */              \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;            \n" +
                "						END IF;            \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */              \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                                      \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                                                      \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                                                      \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                                                      \n" +
                "							ELSE                                    \n" +
                "								SET exit_loop = FALSE;                                    \n" +
                "							END IF;                                     \n" +
                "						END IF;                          \n" +
                "  \n" +
                "						/* Set dynamic query for binid */              \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "						END IF;                            \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */              \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "						END IF;                          \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */              \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "						END IF;                                   \n" +
                "  \n" +
                "						/* Set dynamic query for po number */              \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "						END IF;                                   \n" +
                "  \n" +
                "						/* Set dynamic query for so number */              \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "						END IF;                               \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */              \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "						END IF;                               \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */              \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');              \n" +
                "							ELSE                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "							END IF;                                    \n" +
                "						END IF;                          \n" +
                "					ELSE                             \n" +
                "						/* Set dynamic query for other than system generated */              \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                               \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;                           \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                               \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);            \n" +
                "					END IF;            \n" +
                "				END LOOP barcodeMatch_loop;            \n" +
                "				-- check if mfg and component both found than            \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                          \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                              \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);          	                                      \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);				                                      \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);            \n" +
                "				ELSEIF (v_componentCount > 1) THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);                               \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);                               \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                           \n" +
                "					IF (v_isGoodPart = 2) THEN                                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);            \n" +
                "					ELSE                                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);            \n" +
                "					END IF;                                                                                      \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);            \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                                                           \n" +
                "					IF (v_isCPNFlag = 1) THEN                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);            \n" +
                "					ELSE                                                                       \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);            \n" +
                "					END IF;                                                                      \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                           \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                              \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                   \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                              \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                   \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                              \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                   \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN                             \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);                              \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                              \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                              \n" +
                "					IF @Mfgmatched = 0  THEN                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);					                              \n" +
                "					END IF;							                              \n" +
                "				ELSE                     \n" +
                "					IF @mfgCount = 0 THEN                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                              \n" +
                "					END IF;	                              \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);                              \n" +
                "					END IF;				                              \n" +
                "				END IF;	            \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN             \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                              \n" +
                "					END IF;        \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                              \n" +
                "					END IF;             \n" +
                "				END IF;                   \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN                  \n" +
                "					/* If not fire any validation */              \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                     \n" +
                "  \n" +
                "						-- must call statements in sequence                 \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */       		                    \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');            \n" +
                "						PREPARE stmt1 FROM @SQL1;                              \n" +
                "						EXECUTE stmt1;                           \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                \n" +
                "						IF (pnickName IS NOT NULL) THEN                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);              \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                \n" +
                "						END IF;                     \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                \n" +
                "						END IF;                 \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');             \n" +
                "						END IF;                 \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                \n" +
                "						END IF;                 \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;	                               \n" +
                "						PREPARE stmt2 FROM @SQL2;                              \n" +
                "						EXECUTE stmt2;	              \n" +
                "						DEALLOCATE PREPARE stmt2;                                     \n" +
                "  \n" +
                "						/* Add success result in save error table */              \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                                                              \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                              \n" +
                "						ELSE                                                                               \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                              \n" +
                "						END IF;                                                                              \n" +
                "  \n" +
                "						/* Add data in table of delimeter table */              \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                    \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                               \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 	                              \n" +
                "						END IF;                              \n" +
                "  \n" +
                "						/* select detail of error table */              \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;              \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */                \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                \n" +
                "  \n" +
                "						/* Select data of component */              \n" +
                "						SELECT 	c.*,                                                            \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                            \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                             \n" +
                "							csup.packageQty AS supplierPkgQty,            \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,            \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                             \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                             \n" +
                "							mcm.mfgName AS supplierMFGName,                                                             \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                             \n" +
                "							csup.packagingID AS supplierPackagingId,                                                             \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                                                             \n" +
                "							csup.minimum AS supplierMinimum,                                                             \n" +
                "							ccpn.id AS cpnID,                                                             \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                             \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                             \n" +
                "							rfqroh.name AS rohsName,                                                             \n" +
                "							rfqmou.name AS mountingTypeName,                                                             \n" +
                "							um.unitName AS uomName,                                                            \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                            \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                            \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                                          \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                                             \n" +
                "						FROM component AS c             \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID            \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID            \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                            \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID            \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                        \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID            \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID              \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                           \n" +
                "						WHERE c.id = v_componentId;        \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */              \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`            \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv             \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl            \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;                   \n" +
                "  \n" +
                "						/* select data of cpn */              \n" +
                "						SELECT 	id, refComponentID, refCPNPartID            \n" +
                "						FROM 	component_cust_alias_rev_pn            \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;            \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (            \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0            \n" +
                "						) AND isDeleted = 0;                                                                              \n" +
                "  \n" +
                "						/* select detail of bom */              \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,            \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN            \n" +
                "						FROM 		rfq_lineitems_alternatepart rla            \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0            \n" +
                "						WHERE 		rla.isDeleted = 0            \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))            \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)            \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);            \n" +
                "  \n" +
                "					ELSE                        \n" +
                "						/* Found any error then select error  */              \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                              \n" +
                "					END IF;                \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                   \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;              \n" +
                "				ELSE            \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */              \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN            \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');            \n" +
                "						PREPARE stmt1 FROM @SQL1;                              \n" +
                "						EXECUTE stmt1;            \n" +
                "						DEALLOCATE PREPARE stmt1;                          \n" +
                "					END IF;                        \n" +
                "  \n" +
                "					/* Add success data in temp error table */              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                         \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */              \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                     \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                           \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */              \n" +
                "					IF (pCategory = 'M') THEN                        \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                     \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                        \n" +
                "						SELECT 	c.*,                                                             \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                             \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                             \n" +
                "							csup.packageQty AS supplierPkgQty,            \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,            \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                             \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                             \n" +
                "							mcm.mfgName AS supplierMFGName,                                                             \n" +
                "							csup.packagingID AS supplierPackagingId,                                                             \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                             \n" +
                "							csup.id AS supplierMFGPNID,                                                             \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                                                             \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                                                       \n" +
                "							ccpn.id AS cpnID,                                                             \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                             \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                             \n" +
                "							rfqroh.name AS rohsName,                                                             \n" +
                "							rfqmou.name AS mountingTypeName,                                                             \n" +
                "							um.unitName AS uomName,                                                            \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                            \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                            \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,            \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName            \n" +
                "						FROM component AS c             \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID            \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID            \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                            \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID            \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                         \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                       \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom              \n" +
                "						WHERE c.id = v_componentId;        \n" +
                "					END IF;                                      \n" +
                "				END IF;                          \n" +
                "			ELSE                                                               \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                               \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                              \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;	                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                    \n" +
                "				SELECT 1;                                     \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                    \n" +
                "				SELECT 1; 		                                  \n" +
                "			END IF;                              \n" +
                "  \n" +
                "		END block2;                                    \n" +
                "	ELSE                                                    \n" +
                "		IF (pIsFromUID = 1) THEN                                                    \n" +
                "			SELECT * FROM tempUIDSuccessDetail;                                                    \n" +
                "		ELSE                                                     \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                     \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                    \n" +
                "			SELECT 1;                                                    \n" +
                "		END IF;                                                    \n" +
                "	END IF;                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4918,'2.00','V1',' Bug 34970, Bug 34978 and Bug 35002 - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4918:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_invalid_mfgmappingmst`;  \n" +
                "CREATE TRIGGER `Trg_AI_invalid_mfgmappingmst` AFTER INSERT ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN      \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "	VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Added Map Manufacturer',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgCodeID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_invalid_mfgmappingmst`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_AU_invalid_mfgmappingmst` AFTER UPDATE ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN      \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN        \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Map Manufacturer',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgCodeID) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4919,'2.00','V1',' Bug 34970, Bug 34978 and Bug 35002 - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4919:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesCommissionDetailsFromRfq` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesCommissionDetailsFromRfq`(            \n" +
                "	IN pPartId INT,            \n" +
                "	IN pRfqQuoteNumber VARCHAR(50),          \n" +
                "    IN pIsPushToPartMaster TINYINT,          \n" +
                "    IN pUserId INT,      \n" +
                "    IN pRoleId INT ,      \n" +
                "    IN pIsCallFromPartMaster TINYINT,        \n" +
                "    IN pProceedOverriderQuote TINYINT      \n" +
                "    )  \n" +
                "BEGIN         \n" +
                "	DECLARE alreadyExistQuote INT;      \n" +
                "	/*this SP used for two purpose 1. get quote data for assembly sales price matrix 2. push data to part master from RFQ page*/          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSalesCommission;         \n" +
                "  \n" +
                "    SET alreadyExistQuote = 0;      \n" +
                "    IF(pIsCallFromPartMaster = 1 OR pIsPushToPartMaster = 1)      \n" +
                "    THEN      \n" +
                "		SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND isDeleted = 0 AND isHistory = 1;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF(alreadyExistQuote > 0 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 0)      \n" +
                "    THEN      \n" +
                "		SELECT alreadyExistQuote;      \n" +
                "    ELSE         \n" +
                "		IF(alreadyExistQuote > 0 AND pIsCallFromPartMaster = 1 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 1)      \n" +
                "        THEN      \n" +
                "			-- Revert Existing History with Same Quote number      \n" +
                "			UPDATE component_price_break_details    			         \n" +
                "					   SET isHistory = 0, updatedBy = pUserId, updateByRoleId= pRoleId, updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "				 WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND `type` = 2 AND isHistory = 1 AND isDeleted = 0;         \n" +
                "  \n" +
                "			-- Update Part Quote# Part Master      \n" +
                "            UPDATE component          \n" +
                "				   SET rfqNumber = pRfqQuoteNumber, updatedBy = pUserId, updateByRoleId = pRoleId, updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "				 WHERE id = pPartId AND isDeleted = 0;         \n" +
                "  \n" +
                "            -- Return reverted record to display       \n" +
                "			SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,          \n" +
                "					x.salesCommissionPercentage, x.isHistory,x.salesCommissionNotes      \n" +
                "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId       \n" +
                "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0      \n" +
                "                 ORDER BY priceBreak,turnTime ASC;          \n" +
                "        ELSE      \n" +
                "			-- Return RFQ Quote Data if exists with Passed RFQQuoteNumber      \n" +
                "			CREATE TEMPORARY TABLE tempSalesCommission AS              \n" +
                "			SELECT x.requestQty priceBreak, x.turnTime, x.unitOfTime, x.assemblyTotalRfqPrice unitPrice, x.salesCommissionAmount,          \n" +
                "					CASE WHEN IFNULL(x.assemblyTotalRfqPrice,0) != 0 THEN          \n" +
                "							ROUND(((x.assemblyTotalRfqPrice - (x.assemblyTotalRfqPrice - x.salesCommissionAmount)) *100/ (x.assemblyTotalRfqPrice - x.salesCommissionAmount)),2)          \n" +
                "						END salesCommissionPercentage,      \n" +
                "						FALSE isHistory,    \n" +
                "                        NULL salesCommissionNotes    \n" +
                "			  FROM (SELECT a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime,          \n" +
                "							SUM(CASE WHEN qdfm.isCommission = 1 THEN raqac.amount ELSE 0 END) salesCommissionAmount,          \n" +
                "							fun_getAssemblyRfqTotalPrice(a.id) assemblyTotalRfqPrice          \n" +
                "					  FROM rfq_assy_quotations a          \n" +
                "					  LEFT JOIN rfq_assy_quotations_additionalcost raqac ON raqac.rfqAssyQuoteID = a.id AND raqac.isDeleted = 0          \n" +
                "					  LEFT JOIN quotecharges_dynamic_fields_mst qdfm ON qdfm.id = raqac.quoteChargeDynamicFieldID AND qdfm.isCommission = 1 AND qdfm.isDeleted = 0 AND qdfm.quoteAttributeType='R'          \n" +
                "					  JOIN rfq_assy_quantity raq ON raq.id = a.rfqAssyQtyID          \n" +
                "					  JOIN rfq_assy_quantity_turn_time raqt ON raqt.id = a.rfqAssyQtyTurnTimeID          \n" +
                "					 WHERE EXISTS (SELECT 1 FROM rfq_assemblies ra WHERE ra.id = a.rfqAssyID AND a.isDeleted = 0 AND ra.partID = pPartId )          \n" +
                "					   AND EXISTS (SELECT 1 FROM rfq_assemblies_quotation_submitted b WHERE b.id = a.refSubmittedQuoteID AND b.quoteNumber = pRfqQuoteNumber)          \n" +
                "					   AND a.isDeleted = 0          \n" +
                "					 GROUP BY a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime) X;          \n" +
                "  \n" +
                "			-- Check If data have to Push into part Master from RFQ Quote      \n" +
                "			IF pIsPushToPartMaster = TRUE THEN         \n" +
                "				SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND       \n" +
                "						rfqNumber = pRfqQuoteNumber AND isDeleted = 0;      \n" +
                "				-- Check Same RFQ Quote Number Record Exist      \n" +
                "				IF(alreadyExistQuote >= 1)      \n" +
                "				THEN      \n" +
                "					-- Check Same RFQ Quote Number Record Exist Then set all record for that Quote as Delete      \n" +
                "					UPDATE component_price_break_details         \n" +
                "					SET isDeleted = 1,         \n" +
                "						isHistory = 0,      \n" +
                "						deletedBy = pUserId,          \n" +
                "						deleteByRoleId= pRoleId,          \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					 WHERE mfgPNID = pPartId          \n" +
                "					   AND `type` = 2        \n" +
                "                       AND rfqNumber = pRfqQuoteNumber      \n" +
                "					   -- and isHistory = 0      \n" +
                "					   AND isDeleted = 0;         \n" +
                "				END IF;      \n" +
                "					-- Update Other Quote# record as History      \n" +
                "					UPDATE component_price_break_details    			         \n" +
                "						   SET  isHistory = 1,          \n" +
                "								updatedBy = pUserId,          \n" +
                "								updateByRoleId= pRoleId,          \n" +
                "								updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "					 WHERE mfgPNID = pPartId          \n" +
                "					   AND rfqNumber != pRfqQuoteNumber      \n" +
                "					   AND `type` = 2       \n" +
                "					   AND isHistory = 0      \n" +
                "					   AND isDeleted = 0;          \n" +
                "				-- END IF;      \n" +
                "  \n" +
                "				-- Update Part Quote# Part Master      \n" +
                "				UPDATE component          \n" +
                "				   SET rfqNumber = pRfqQuoteNumber,          \n" +
                "						updatedBy = pUserId,          \n" +
                "						updateByRoleId = pRoleId,          \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "				 WHERE id = pPartId          \n" +
                "				   AND isDeleted = 0;          \n" +
                "  \n" +
                "                -- Insert RFQ Quote Detail into Comonent Price Break Detail(sales Price Metrix)      \n" +
                "				INSERT INTO component_price_break_details          \n" +
                "						(mfgPNID, priceBreak, unitPrice, isDeleted, createdAt, createdBy, updatedAt, updatedBy, updatedOn,           \n" +
                "						createByRoleId, updateByRoleId, `type`, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, rfqNumber, isHistory)          \n" +
                "				SELECT pPartId, priceBreak, unitPrice, 0 /*isDeleted*/, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(),          \n" +
                "						pRoleId, pRoleId, 2/*type*/, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, pRfqQuoteNumber,FALSE isHistory          \n" +
                "				 FROM tempSalesCommission;          \n" +
                "  \n" +
                "                SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,          \n" +
                "					x.salesCommissionPercentage, x.isHistory, x.salesCommissionNotes      \n" +
                "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId       \n" +
                "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0      \n" +
                "                 ORDER BY priceBreak,turnTime ASC;      \n" +
                "			ELSE           \n" +
                "				SELECT * FROM tempSalesCommission ORDER BY priceBreak,turnTime ASC;        \n" +
                "			END IF;        \n" +
                "		END IF;      \n" +
                "    END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetailsForMultiplePart` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetailsForMultiplePart`(      	              \n" +
                "	IN pInvoiceID INT	          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE i INT DEFAULT 0;                 \n" +
                "	DECLARE vAssyID INT;                \n" +
                "    DECLARE vRefQuoteID INT;                \n" +
                "	DECLARE vMaterialUnitPrice DECIMAL(16,6);                \n" +
                "	DECLARE vlaborUnitPrce DECIMAL(16,6);                \n" +
                "	DECLARE vOverheadUnitPrice DECIMAL(16,6);      \n" +
                "	DECLARE vrequestedQty INT;                \n" +
                "	DECLARE vParamCnt INT;          \n" +
                "  \n" +
                "    -- table data variables          \n" +
                "    DECLARE vRefCustPackingSlipDetId INT;          \n" +
                "    DECLARE vPartId INT;                \n" +
                "    DECLARE vQuoteFrom INT;          \n" +
                "    DECLARE vQuoteGroupId INT;          \n" +
                "    DECLARE vQuoteNumber VARCHAR(50);                \n" +
                "    DECLARE vPOQty INT;          \n" +
                "    DECLARE vTurnTimeId INT;                \n" +
                "    DECLARE vPrice DECIMAL(18,5);          \n" +
                "  \n" +
                "    /*DROP  TABLE IF EXISTS temp_part_data;          \n" +
                "    CREATE TABLE temp_part_data AS          \n" +
                "    Select *           \n" +
                "    From JSON_TABLE(pPartData , \"$[*]\" COLUMNS          \n" +
                "		(          \n" +
                "			`partId` INT PATH \"$.partId\",          \n" +
                "            `quoteFrom` INT PATH \"$.quoteFrom\",          \n" +
                "            `quoteGroupId` INT PATH \"$.quoteGroupId\",          \n" +
                "            `quoteNumber` INT PATH \"$.quoteNumber\",          \n" +
                "            `turnTimeId` INT PATH \"$.turnTimeId\",          \n" +
                "            `poQty` INT PATH \"$.poQty\",          \n" +
                "            `price` DECIMAL(18,5) PATH \"$.price\"          \n" +
                "		)          \n" +
                "    ) AS JS_PartData;          \n" +
                "    */          \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_part_data ;          \n" +
                "	CREATE TEMPORARY TABLE temp_part_data AS          \n" +
                "	SELECT id refCustPackingSlipDetId, partId , quoteFrom ,refRFQGroupID quoteGroupId, quoteNumber, poQty,           \n" +
                "		(CASE WHEN quoteFrom = 1 THEN refRFQQtyTurnTimeID         \n" +
                "			WHEN quoteFrom = 2 THEN refAssyQtyTurnTimeID          \n" +
                "            ELSE  NULL END) turnTimeId ,  unitPrice price          \n" +
                "	FROM customer_packingslip_det   cpd        \n" +
                "	WHERE cpd.refCustPackingSlipID =  pInvoiceID AND cpd.isDeleted = 0 AND cpd.quoteFrom <> 3;           \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO vParamCnt FROM temp_part_data;          \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_salesCommission;                \n" +
                "	CREATE TEMPORARY TABLE temp_salesCommission(           \n" +
                "							refCustPackingSlipDetId INT,          \n" +
                "                            partId INT,          \n" +
                "							unitPrice DECIMAL(16,6),                \n" +
                "							refQuoteAttributeId INT,                \n" +
                "							commissionPercentage DECIMAL(16,6),                \n" +
                "							commissionValue DECIMAL(16,6),                \n" +
                "                            extendedCommissionValue INT,          \n" +
                "							category VARCHAR(100),          \n" +
                "							poQty INT,          \n" +
                "							fieldName VARCHAR(30),          \n" +
                "                            org_commissionPercentage DECIMAL(16,6),          \n" +
                "                            org_commissionValue DECIMAL(16,6),      \n" +
                "                            `type` INT,      \n" +
                "                            rfqAssyID INT,      \n" +
                "                            commissionCalculateFrom INT,          \n" +
                "							extendedOrgCommissionValue INT,      \n" +
                "							quotedQty INT,							          \n" +
                "                            refComponentSalesPriceBreakID INT);           \n" +
                "    temp_salesCommissionList: WHILE i < vParamCnt DO           \n" +
                "		SET vRefCustPackingSlipDetId = NULL;          \n" +
                "		SET vPartId = NULL;                \n" +
                "		SET vQuoteFrom = NULL;          \n" +
                "		SET vQuoteGroupId = NULL;          \n" +
                "		SET vQuoteNumber= NULL;                \n" +
                "		SET vPOQty = NULL;          \n" +
                "		SET vTurnTimeId = NULL;                \n" +
                "		SET vPrice= NULL;          \n" +
                "  \n" +
                "        SELECT partId,quoteFrom,quoteGroupId,quoteNumber,turnTimeId,poQty,price ,  refCustPackingSlipDetId           \n" +
                "        INTO  vPartId, vQuoteFrom, vQuoteGroupId, vQuoteNumber,vTurnTimeId, vPOQty, vPrice, vRefCustPackingSlipDetId          \n" +
                "        FROM temp_part_data LIMIT i,1;          \n" +
                "  \n" +
                "		SET vAssyID = NULL;                \n" +
                "		SET vRefQuoteID = NULL;                \n" +
                "		SET vMaterialUnitPrice = NULL;                \n" +
                "		SET vlaborUnitPrce = NULL;                \n" +
                "		SET vOverheadUnitPrice = NULL;             \n" +
                "  \n" +
                "		IF vQuoteFrom = 1 THEN /*From RFQ*/                \n" +
                "			  SELECT ra.id INTO vAssyID                \n" +
                "				FROM rfq_assemblies ra                \n" +
                "			   WHERE ra.partID = vPartId                \n" +
                "				 AND ra.rfqrefID = vQuoteGroupId                \n" +
                "				 AND ra.isDeleted = 0;          \n" +
                "  \n" +
                "				SELECT 	id, unitprice, laborunitPrice, overheadUnitPrice,requestedQty          \n" +
                "				INTO vRefQuoteID , vMaterialUnitPrice , vlaborUnitPrce , vOverheadUnitPrice,vrequestedQty           \n" +
                "                FROM rfq_assy_quotations          \n" +
                "				WHERE 	rfqAssyID = vAssyID          \n" +
                "				AND rfqAssyQtyTurnTimeID = vTurnTimeId          \n" +
                "				AND isDeleted = 0          \n" +
                "				ORDER BY id DESC          \n" +
                "				LIMIT 1;                \n" +
                "  \n" +
                "  \n" +
                "		/*get sales commission calculations from RFQ quotation*/                \n" +
                "			 IF(vRefQuoteID IS NOT NULL) THEN    				                \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                       \n" +
                "						IF(vMaterialUnitPrice IS NOT NULL AND vMaterialUnitPrice>0) THEN            \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category,commissionCalculateFrom,`type`,rfqAssyID,quotedQty)                \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType,2,2,vAssyID,@QuoteQty                 \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                       \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;                      \n" +
                "  \n" +
                "						END IF;                      \n" +
                "					END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID                      \n" +
                "						WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1                       \n" +
                "						AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category,commissionCalculateFrom,`type`,rfqAssyID,quotedQty)                \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage,    \n" +
                "						rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID),2,2,vAssyID,@QuoteQty                \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID                \n" +
                "						 WHERE rad.rfqAssyquoteid = vRefQuoteID AND qdf.iscommission = 1                \n" +
                "						   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;                \n" +
                "  \n" +
                "					END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						IF(vOverheadUnitPrice IS NOT NULL AND vOverheadUnitPrice > 0) THEN                \n" +
                "  \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category,commissionCalculateFrom,`type`,rfqAssyID,quotedQty)                \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType,2,2,vAssyID,@QuoteQty                  \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                   \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;                      \n" +
                "  \n" +
                "						END IF;                      \n" +
                "					 END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						IF(vlaborUnitPrce IS NOT NULL AND vlaborUnitPrce>0)THEN              \n" +
                "							INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category,commissionCalculateFrom,`type`,rfqAssyID,quotedQty)                \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType,2,2,vAssyID,@QuoteQty                  \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                       \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;                      \n" +
                "  \n" +
                "						END IF;                      \n" +
                "					END IF;                      \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                       \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN                      \n" +
                "  \n" +
                "						INSERT INTO temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category,commissionCalculateFrom,`type`,rfqAssyID,quotedQty)                \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType,2,2,vAssyID,@QuoteQty                \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad                       \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid                 \n" +
                "						 WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;                \n" +
                "					END IF;	          \n" +
                "  \n" +
                "					SELECT raq.requestQty INTO @QuoteQty FROM rfq_assy_quantity_turn_time rat JOIN rfq_assy_quantity raq ON raq.id=rat.rfqAssyQtyID  WHERE rat.id=vTurnTimeId;  \n" +
                "					UPDATE 	temp_salesCommission sc          \n" +
                "					LEFT JOIN quotecharges_dynamic_fields_mst qd ON qd.id = sc.refQuoteAttributeId AND qd.isDeleted = 0          \n" +
                "						SET sc.poQty = vPOQty, sc.fieldName = qd.fieldName,          \n" +
                "							sc.extendedOrgCommissionValue = (sc.commissionValue*vPOQty),          \n" +
                "							sc.extendedCommissionValue = (sc.commissionValue*vPOQty),  \n" +
                "							sc.org_commissionPercentage = sc.commissionPercentage,          \n" +
                "							sc.org_commissionValue= sc.commissionValue;                \n" +
                "  \n" +
                "			END IF;                \n" +
                "		ELSE   -- quote from Part Master          \n" +
                "			/*get sales commission calculations from assembly sales price matrix*/                \n" +
                "			INSERT INTO  temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refComponentSalesPriceBreakID,           \n" +
                "                commissionPercentage, commissionValue, extendedCommissionValue,          \n" +
                "                org_commissionPercentage, extendedOrgCommissionValue ,org_commissionValue ,          \n" +
                "				category, poQty, fieldName,quotedQty,`type`,commissionCalculateFrom )          \n" +
                "			 SELECT vRefCustPackingSlipDetId , vPartId , a.unitPrice,  a.id refComponentSalesPriceBreakID,                \n" +
                "					a.commissionPercentage, a.commissionValue, (a.commissionValue*vPOQty) extendedCommissionValue,                \n" +
                "					a.commissionPercentage org_commissionPercentage, (a.commissionValue*vPOQty) extendedOrgCommissionValue,                \n" +
                "					a.commissionValue org_commissionValue,                \n" +
                "					category, vPOQty poQty, 'Sales Price Matrix' fieldName,a.priceBreak,1,1                \n" +
                "			  FROM (SELECT vPrice/*price*/ unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,                \n" +
                "				ROUND((((100/(100+cp.salesCommissionPercentage)) * vPrice ) * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,                \n" +
                "							IFNULL(cp.salesCommissionNotes,'All') category,cp.priceBreak               \n" +
                "					  FROM component_price_break_details cp                \n" +
                "					 WHERE cp.`type` = 2                \n" +
                "						AND cp.isHistory = 0            \n" +
                "					   AND cp.mfgPNID = vPartId                \n" +
                "					   AND cp.id = vTurnTimeId                \n" +
                "					   AND cp.isDeleted = 0) a;                \n" +
                "		END IF;           \n" +
                "     SET i = i + 1;                                            \n" +
                "	END WHILE temp_salesCommissionList;    	          \n" +
                "   -- drop temporary table if exists temp_salesCommission;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4920,'2.00','V1',' Alter procedure Sproc_getSalesCommissionDetailsFromRfq - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4920:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetWorkOrderDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderDetailForElastic`(	                                              \n" +
                "	IN pwoID INT(11),     \n" +
                "    In pFromdate date,    \n" +
                "    In pTodate date,    \n" +
                "    IN pRequiredCount tinyint(1)                                              \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "  \n" +
                "    IF(pRequiredCount)     \n" +
                "	THEN    \n" +
                "		SELECT     \n" +
                "			count(1) totalCount    \n" +
                "		FROM workorder as wo            \n" +
                "			left join mfgcodemst mfg on wo.customerID = mfg.id            \n" +
                "			left join component com on wo.partID = com.id            \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID            \n" +
                "		where IFNULL(wo.isDeleted , 0) = 0;      \n" +
                "	ELSE    \n" +
                "		select wo.woID            \n" +
                "			,woNumber            \n" +
                "			,wo.woVersion            \n" +
                "			,wo.woSubStatus            \n" +
                "			,wo.partID            \n" +
                "			,com.PIDCode            \n" +
                "			,com.mfgPN            \n" +
                "			,com.nickName            \n" +
                "			,wo.buildQty            \n" +
                "			,mfg.mfgCode            \n" +
                "			,mfg.mfgName            \n" +
                "			,mfg.isCustOrDisty            \n" +
                "			,mfg.mfgType            \n" +
                "			,wo.customerID             \n" +
                "			,vusalesorderdet.salesOrderNumber            \n" +
                "			,vusalesorderdet.poNumber  \n" +
                "            ,vusalesorderdet.salesOrderMstIDs  \n" +
                "            ,salesOrderMstIDs  \n" +
                "			,wo.isHotJob as RushJob            \n" +
                "			,wo.isStopWorkorder as HoldStatus            \n" +
                "			,CASE WHEN wo.isStopWorkorder = 1 THEN            \n" +
                "				(select reason from workorder_trans_hold_unhold where woID = wo.woID and endDate is null)               \n" +
                "			ELSE \"\"            \n" +
                "			END as HoldReason     \n" +
                "            ,wo.isDeleted     \n" +
                "		from workorder as wo            \n" +
                "			left join mfgcodemst mfg on wo.customerID = mfg.id            \n" +
                "			left join component com on wo.partID = com.id            \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID            \n" +
                "		where wo.woID = IFNULL(pwoID, wo.woID) AND    \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN     \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wo.createdAt,v_TimeZone)) between pFromdate and pTodate)     \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wo.updatedAt,v_TimeZone)) between pFromdate and pTodate))    \n" +
                "						ELSE 1 = 1 END);        \n" +
                "    END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4921,'2.00','V1',' Bug 35042:  - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4921:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_packingslip_invoice_payment_det`;  \n" +
                "CREATE TRIGGER `Trg_BI_packingslip_invoice_payment_det` BEFORE INSERT ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN      \n" +
                "	DECLARE v_receiptType VARCHAR(1);      \n" +
                "	DECLARE v_invoiceTotal DECIMAL(18,8);      \n" +
                "	DECLARE v_totalPayment DECIMAL(18,8);      \n" +
                "	DECLARE v_isTariffInvoice TINYINT;      \n" +
                "	DECLARE v_refPaymentMode VARCHAR(5);      \n" +
                "	DECLARE vMessage VARCHAR(500);      \n" +
                "  \n" +
                "	SELECT 	a.refPaymentMode      \n" +
                "	INTO 	v_refPaymentMode      \n" +
                "	FROM 	packingslip_invoice_payment a      \n" +
                "	WHERE 	a.isDeleted = 0      \n" +
                "		   AND a.isPaymentVoided = 0      \n" +
                "		   AND a.id = NEW.refPayementid LIMIT 1;      \n" +
                "  \n" +
                "	IF v_refPaymentMode = 'P' THEN      \n" +
                "		/*getting invoice amount and type*/      \n" +
                "		SELECT 	a.receiptType,    \n" +
                "				(IFNULL(SUM(b.extendedPrice),0)+IFNULL(sum(a.markedForRefundAmt),0)),    \n" +
                "				a.isTariffInvoice      \n" +
                "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice      \n" +
                "		FROM 	packing_slip_material_receive a      \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id      \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID      \n" +
                "				AND a.isDeleted = 0      \n" +
                "				AND b.isDeleted = 0      \n" +
                "		GROUP BY a.receiptType, a.isTariffInvoice;      \n" +
                "  \n" +
                "		/*getting total payment amount including new added payment */      \n" +
                "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))      \n" +
                "			INTO 	v_totalPayment      \n" +
                "			FROM 	packingslip_invoice_payment_det b      \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID      \n" +
                "				AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'P')    \n" +
                "                AND b.isPaymentVoided = 0      \n" +
                "                AND b.isDeleted = 0      \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;      \n" +
                "  \n" +
                "		IF v_receiptType IN ('D', 'C') THEN      \n" +
                "			IF IFNULL(NEW.paymentAmount,0) >= 0 THEN      \n" +
                "			/*in case of debit/credit memo payment amount must be less then zero*/      \n" +
                "				SET vMessage = CONCAT('Debit or Credit Memo payment must be less than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));      \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;      \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) > 0 THEN      \n" +
                "			/*in case of debit/credit memo outstanding amount must be less or equal to zero*/      \n" +
                "				SET vMessage = CONCAT('Total payment amount for Debit or Credit Memo must be less or equal to zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));      \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;      \n" +
                "			/*ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  */    \n" +
                "			/*in case of debit/credit memo now if outstanding amount is zero then update debit/credit memo status to paid*/      \n" +
                "				/*UPDATE 	packing_slip_material_receive      \n" +
                "				SET 	`status` = 'P',      \n" +
                "					updatedBy = NEW.updatedBy,      \n" +
                "					updatedAt = NEW.updatedAt,      \n" +
                "					updateByRoleId = NEW.updateByRoleId      \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;  */    \n" +
                "			END IF;      \n" +
                "		ELSEIF v_receiptType = 'I' THEN      \n" +
                "			IF IFNULL(NEW.paymentAmount,0) <= 0 AND IFNULL(v_invoiceTotal,0) != 0 THEN      \n" +
                "			/*invoice payment amount must not negetive, if invoice amount is not zero*/      \n" +
                "				SET vMessage = CONCAT('Invoice Payment amount must be greater than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));      \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;      \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) < 0 THEN      \n" +
                "			/*invoice outstanding amount must not negetive*/      \n" +
                "				SET vMessage = CONCAT('Total payment amount for an Invoice can not less than zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));      \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;      \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN      \n" +
                "            /*if invoice outstanding amount zero then update invoice status to paid*/      \n" +
                "				UPDATE 	packing_slip_material_receive      \n" +
                "				SET 	`status` = 'P',      \n" +
                "					updatedBy = NEW.updatedBy,      \n" +
                "					updatedAt = NEW.updatedAt,      \n" +
                "					updateByRoleId = NEW.updateByRoleId      \n" +
                "				 WHERE 	id = NEW.refPackingslipInvoiceID;      \n" +
                "  \n" +
                "				 IF v_isTariffInvoice = FALSE THEN      \n" +
                "					/*in case of non tariff invoice update packing slip status to paid*/      \n" +
                "					UPDATE 	packing_slip_material_receive      \n" +
                "					SET 	`status` = 'P',      \n" +
                "						updatedBy = NEW.updatedBy,      \n" +
                "						updatedAt = NEW.updatedAt,      \n" +
                "						updateByRoleId = NEW.updateByRoleId      \n" +
                "					WHERE 	refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;      \n" +
                "				 END IF;      \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "    ELSEIF v_refPaymentMode = 'RR' THEN    \n" +
                "		/*getting invoice amount and type*/      \n" +
                "		SELECT 	a.receiptType,    \n" +
                "				IFNULL(sum(a.markedForRefundAmt),0),    \n" +
                "				a.isTariffInvoice      \n" +
                "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice      \n" +
                "		FROM 	packing_slip_material_receive a      \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id      \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID      \n" +
                "				AND a.isDeleted = 0      \n" +
                "				AND b.isDeleted = 0      \n" +
                "		GROUP BY a.receiptType, a.isTariffInvoice;      \n" +
                "  \n" +
                "        /*getting total payment amount including new added payment */      \n" +
                "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))      \n" +
                "			INTO 	v_totalPayment      \n" +
                "			FROM 	packingslip_invoice_payment_det b      \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID      \n" +
                "				AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'RR')    \n" +
                "                AND b.isPaymentVoided = 0      \n" +
                "                AND b.isDeleted = 0      \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;      \n" +
                "  \n" +
                "		IF v_totalPayment > v_invoiceTotal THEN    \n" +
                "			/*in case of debit/credit memo payment amount must be less then zero*/      \n" +
                "			SET vMessage = CONCAT('CM DM Refund must be less or equal to Marked for Refund Amount. actual amt is: ', ROUND((v_invoiceTotal - v_totalPayment),2),', Marked for Refund amt is: ',ROUND(IFNULL(v_invoiceTotal,0),2));    \n" +
                "			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;      \n" +
                "        END IF;    \n" +
                "    END IF;      \n" +
                "  \n" +
                "    if v_refPaymentMode in ('P','RR') then /*update status to paid*/    \n" +
                "		/*getting invoice amount and type*/      \n" +
                "		SELECT 	a.receiptType,    \n" +
                "				IFNULL(SUM(b.extendedPrice),0)    \n" +
                "		INTO 	v_receiptType, v_invoiceTotal    \n" +
                "		FROM 	packing_slip_material_receive a      \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id      \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID      \n" +
                "				AND a.isDeleted = 0      \n" +
                "				AND b.isDeleted = 0      \n" +
                "		GROUP BY a.receiptType;      \n" +
                "  \n" +
                "		/*getting total payment amount including new added payment */      \n" +
                "		SELECT 	(IFNULL(sum(case when b.paymentAmount > 0 then (b.paymentAmount *-1) else b.paymentAmount end),0) +     \n" +
                "				 IFNULL(sum(case when NEW.paymentAmount > 0 then (NEW.paymentAmount *-1) else NEW.paymentAmount end),0))    \n" +
                "			INTO 	v_totalPayment      \n" +
                "			FROM 	packingslip_invoice_payment_det b      \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID      \n" +
                "                AND b.isPaymentVoided = 0      \n" +
                "                AND b.isDeleted = 0      \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;      \n" +
                "  \n" +
                "		IF v_receiptType IN ('D', 'C') THEN    \n" +
                "			IF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN    \n" +
                "				UPDATE 	packing_slip_material_receive      \n" +
                "				SET `status` = 'P',      \n" +
                "					updatedBy = NEW.updatedBy,      \n" +
                "					updatedAt = NEW.updatedAt,      \n" +
                "					updateByRoleId = NEW.updateByRoleId      \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;     \n" +
                "            END IF;    \n" +
                "        END IF;    \n" +
                "    end if;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4922,'2.00','V1','Bug 35036: QA Testing Bugs for User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4922:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN                 \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),       \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Date', CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),       \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),       \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),       \n" +
                "		(      \n" +
                "			CASE       \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'       \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'      \n" +
                "				ELSE 'Supplier Invoice Status'      \n" +
                "			END      \n" +
                "		),       \n" +
                "		CAST(      \n" +
                "			(      \n" +
                "				CASE      \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'      \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'      \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'      \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'      \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'      \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'      \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'      \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'      \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'      \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'      \n" +
                "					ELSE NULL      \n" +
                "				END      \n" +
                "			) AS CHAR      \n" +
                "		),      \n" +
                "		CAST(      \n" +
                "			(      \n" +
                "				CASE      \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'      \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'      \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'      \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'      \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'      \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'      \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'      \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'      \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'      \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'      \n" +
                "					ELSE NULL      \n" +
                "				END      \n" +
                "			) AS CHAR      \n" +
                "		),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),       \n" +
                "		(      \n" +
                "			CASE       \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'       \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'      \n" +
                "				ELSE 'Supplier Invoice Posting Status'      \n" +
                "			END      \n" +
                "		),       \n" +
                "		CAST(      \n" +
                "			(      \n" +
                "				CASE      \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'      \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'      \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'      \n" +
                "					ELSE NULL      \n" +
                "				END      \n" +
                "			) AS CHAR      \n" +
                "		),      \n" +
                "		CAST(      \n" +
                "			(      \n" +
                "				CASE      \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'      \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'      \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'      \n" +
                "					ELSE NULL      \n" +
                "				END      \n" +
                "			) AS CHAR      \n" +
                "		),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),       \n" +
                "		(      \n" +
                "			CASE       \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'      \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'      \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'      \n" +
                "				ELSE NULL      \n" +
                "			END      \n" +
                "		),      \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),       \n" +
                "		(      \n" +
                "			CASE       \n" +
                "				WHEN NEW.`status` = 'R' THEN 'RMA Comment'       \n" +
                "				ELSE 'Comment'      \n" +
                "			END      \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),       \n" +
                "		(      \n" +
                "			CASE       \n" +
                "				WHEN NEW.`status` = 'R' THEN 'Internal RMA Comment'       \n" +
                "				ELSE 'Internal Comment'      \n" +
                "			END      \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),       \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN                \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4923,'2.00','V1','Bug 35036: QA Testing Bugs for User Story 32984: Supplier Refund Flow implementation - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4923:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_PackagingAlias_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_PackagingAlias_History` AFTER UPDATE ON `component_packagingalias` FOR EACH ROW BEGIN      \n" +
                "	DECLARE pOldValue TEXT;      \n" +
                "	DECLARE pNewValue TEXT;      \n" +
                "	IF IFNULL(OLD.aliasgroupID,0) != IFNULL(NEW.aliasgroupID,0) THEN        \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby)      \n" +
                "	       VALUES(NEW.componentID,				'component_packagingalias',	'Part > Packaging Alias > Alias Group Id',      \n" +
                "			CAST(OLD.aliasgroupID AS CHAR), 	CAST(NEW.aliasgroupID AS CHAR),	 OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN      \n" +
                "		IF OLD.componentID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`      \n" +
                "			FROM component      \n" +
                "			WHERE id =OLD.componentID      \n" +
                "			ORDER BY id DESC LIMIT 1;      \n" +
                "		END IF;      \n" +
                "		IF NEW.componentID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`      \n" +
                "			FROM component      \n" +
                "			WHERE id =NEW.componentID      \n" +
                "			ORDER BY id DESC LIMIT 1;      \n" +
                "		END IF;      \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby)      \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > MFG PN',      \n" +
                "			pOldValue, 			pNewValue,			OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN      \n" +
                "		IF OLD.componentID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`      \n" +
                "			FROM component      \n" +
                "			WHERE id =OLD.componentID      \n" +
                "			ORDER BY id DESC LIMIT 1;      \n" +
                "		END IF;      \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby)      \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > Deleted',      \n" +
                "			NULL, 				CONCAT(pOldValue,' > Deleted'),	OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy);      \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4924,'2.00','V1',' Bug 35077: - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4924:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(      \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(255),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(255),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "	DECLARE v_WhareClause VARCHAR(255);      \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);      \n" +
                "	DECLARE v_AssyId INT;      \n" +
                "	DECLARE v_IsPurchase TINYINT;      \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);      \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;      \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);      \n" +
                "	SET SESSION group_concat_max_len = 500000;      \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')      \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN      \n" +
                "	FROM 	kit_allocation_lineitems      \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID      \n" +
                "			AND partID = pAssyId      \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)      \n" +
                "			AND isDeleted = 0      \n" +
                "	LIMIT 	1;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;      \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId   \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0   \n" +
                "			WHERE 		c.id in (\", pPartId, \")   \n" +
                "			AND 		c.isDeleted = 0   \n" +
                "			GROUP BY 	mfrPNId;   \n" +
                "	\");                                                                                                            \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;                                                                                                                                                  \n" +
                "	EXECUTE partWithPackaging;                                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;        \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;      \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS      \n" +
                "		SELECT 	*      \n" +
                "		FROM 	(      \n" +
                "				SELECT  	*      \n" +
                "				FROM 		(      \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,	   \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					fun_getUnitNameByID(cst.uom) unitName,  		  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,    \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,	 				  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,   \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,			  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,		  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,				  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,	  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,      \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	    \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,      \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,      \n" +
                "									(      \n" +
                "										CASE      \n" +
                "											WHEN c.connecterTypeID = -2 THEN      \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))      \n" +
                "											ELSE 0      \n" +
                "										END      \n" +
                "									) allocatedPins,      \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,      \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,      \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,      \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,                                                     \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                   \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                            \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,        \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,	                                      \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                      \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,          \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                          \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,         \n" +
                "									0 lineCleanStatus       \n" +
                "							FROM 		component_sid_stock cst        \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id      \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id                               \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id   \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id   \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id   \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0                \n" +
                "							LEFT JOIN 	(                        \n" +
                "										SELECT 		ka.refUIDId,                                       \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                           \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                          \n" +
                "										FROM 		kit_allocation ka          \n" +
                "										WHERE 		ka.status = 'A'                   \n" +
                "										GROUP BY 	ka.refUIDId                      \n" +
                "									) AS ka ON ka.refUIDId = cst.id                          \n" +
                "							LEFT JOIN	(                 \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                             \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                           \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                                   \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                                    \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                           \n" +
                "													AND a.partID = pAssyId                              \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                         \n" +
                "													AND a.isDeleted = 0             \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                        \n" +
                "										UNION          \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  		                             \n" +
                "										FROM 		kit_allocation_lineitems a                                           \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                           \n" +
                "													AND a.partID = pAssyId                              \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                         \n" +
                "													AND a.isDeleted = 0             \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		        \n" +
                "									) d ON d.mfgPNID = cst.refcompid                          \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                          \n" +
                "										AND (                          \n" +
                "											CASE                          \n" +
                "												WHEN pStockType = 'IS' THEN                          \n" +
                "													cst.customerConsign = 0                          \n" +
                "												WHEN pStockType = 'CS' THEN                          \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                          \n" +
                "												ELSE                          \n" +
                "													1 = 1                          \n" +
                "											END                          \n" +
                "											)                          \n" +
                "										AND cst.isDeleted = 0                          \n" +
                "						) a    \n" +
                "						WHERE 		FreeToShare > 0                           \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                    \n" +
                "			) b;    \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS       \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                          \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,   \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,   \n" +
                "				0 AS salesOrderDetailID,		0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,   \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,   \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,   \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,   \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,			c.mfgPN,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,	  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,			  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus  \n" +
                "		FROM 	(                          \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                          \n" +
                "					FROM 		vu_umid_creation_pending vu      \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id    \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;	                                \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                          \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                          \n" +
                "		ELSE                          \n" +
                "			SELECT 	*		                                  \n" +
                "			FROM 	(                                  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode, 				  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,						  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType, 	  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,		  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,				                    \n" +
                "							unitName,				mfgPN,						pendingUMIDQty,			convertedUnit,			currentPin,	  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently, 	                                  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,	                                                            \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus                    \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                          \n" +
                "					UNION ALL                      \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,				  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,		  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,				                    \n" +
                "							unitName,				mfgPN,						pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,	  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,	                                                            \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,		  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus                     \n" +
                "					FROM 	temp_nonUmidAvailableStock                                    \n" +
                "				) d;  \n" +
                "		END IF;            \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN    \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode, 	                                  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,	  \n" +
                "                cst.binID,				cst.salesOrderDetailID,					cst.assyID,					cst.receiveMaterialType,                          \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,                                    \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,                                                      \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,                                              \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,			                                              \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,	                                      \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,                           \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                          \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                          \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                                      \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                                         \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,            \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                             \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                                  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,        \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,                                                            \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,                                                \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                                \n" +
                "		FROM 		component_sid_stock cst                        \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid     \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id    \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id      \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id                                             \n" +
                "		INNER JOIN 	(                          \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                           \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                          \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                             \n" +
                "					FROM 	(                          \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,                           \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                           \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                            \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                          \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                          \n" +
                "								FROM 	kit_allocation                           \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)   \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                          \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM                          \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId   \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)                                   \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)                                \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)      \n" +
                "		) ka ON ka.refUIDId = cst.id                         \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0                          \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;   \n" +
                "	END IF;                           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4925,'2.00','V1',' Procedure tuning for kit allocation popup - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4925:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(        \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),    \n" +
                "	IN pAssyId INT,    \n" +
                "	IN pPartId VARCHAR(255),    \n" +
                "	IN pToUOM INT,    \n" +
                "	IN pRfqLineItemIds VARCHAR(255),    \n" +
                "	IN pCustomerId INT,    \n" +
                "	IN pType VARCHAR(255),    \n" +
                "	IN pStockType VARCHAR(20)    \n" +
                ")  \n" +
                "BEGIN                             \n" +
                "	DECLARE v_WhareClause VARCHAR(255);        \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);        \n" +
                "	DECLARE v_AssyId INT;        \n" +
                "	DECLARE v_IsPurchase TINYINT;        \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);        \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;        \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);        \n" +
                "	SET SESSION group_concat_max_len = 500000;        \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')        \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN        \n" +
                "	FROM 	kit_allocation_lineitems        \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID        \n" +
                "			AND partID = pAssyId        \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)        \n" +
                "			AND isDeleted = 0        \n" +
                "	LIMIT 	1;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;        \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);    \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"    \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart    \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId     \n" +
                "			FROM 		component c    \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0     \n" +
                "			WHERE 		c.id in (\", pPartId, \")     \n" +
                "			AND 		c.isDeleted = 0     \n" +
                "			GROUP BY 	mfrPNId;     \n" +
                "	\");                                                                                                              \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;                                                                                                                                                    \n" +
                "	EXECUTE partWithPackaging;                                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE partWithPackaging;          \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS        \n" +
                "		SELECT 	*        \n" +
                "		FROM 	(        \n" +
                "				SELECT  	*        \n" +
                "				FROM 		(        \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,	     \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,    \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,	    \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,      \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,	 				    \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,     \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,			    \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,		    \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,				    \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,    \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,	    \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,        \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	      \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,        \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,        \n" +
                "									(        \n" +
                "										CASE        \n" +
                "											WHEN c.connecterTypeID = -2 THEN        \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))        \n" +
                "											ELSE 0        \n" +
                "										END        \n" +
                "									) allocatedPins,        \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,        \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,        \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,        \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,                                                       \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                     \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                              \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,          \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,	                                        \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                        \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,            \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                            \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,           \n" +
                "									0 lineCleanStatus         \n" +
                "							FROM 		component_sid_stock cst          \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id        \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id                                 \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id     \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id     \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id     \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id    \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id    \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id    \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id   \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0    \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0    \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0                  \n" +
                "							LEFT JOIN 	(                          \n" +
                "										SELECT 		ka.refUIDId,                                         \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                             \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                            \n" +
                "										FROM 		kit_allocation ka            \n" +
                "										WHERE 		ka.status = 'A'                     \n" +
                "										GROUP BY 	ka.refUIDId                        \n" +
                "									) AS ka ON ka.refUIDId = cst.id                            \n" +
                "							LEFT JOIN	(                   \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                               \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                             \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                                     \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                                      \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                             \n" +
                "													AND a.partID = pAssyId                                \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                           \n" +
                "													AND a.isDeleted = 0               \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                          \n" +
                "										UNION            \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  		                               \n" +
                "										FROM 		kit_allocation_lineitems a                                             \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                             \n" +
                "													AND a.partID = pAssyId                                \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                           \n" +
                "													AND a.isDeleted = 0               \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		          \n" +
                "									) d ON d.mfgPNID = cst.refcompid                            \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                            \n" +
                "										AND (                            \n" +
                "											CASE                            \n" +
                "												WHEN pStockType = 'IS' THEN                            \n" +
                "													cst.customerConsign = 0                            \n" +
                "												WHEN pStockType = 'CS' THEN                            \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                            \n" +
                "												ELSE                            \n" +
                "													1 = 1                            \n" +
                "											END                            \n" +
                "											)                            \n" +
                "										AND cst.isDeleted = 0                            \n" +
                "						) a      \n" +
                "						WHERE 		FreeToShare > 0                             \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                      \n" +
                "			) b;      \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;                                                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS         \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus    \n" +
                "		from   	temp_internalAndCustomerAvailableStock    \n" +
                "		group by   refRfqLineitem,  refcompid;    \n" +
                "  \n" +
                "        #Update Line Clean Status    \n" +
                "        Update temp_internalAndCustomerAvailableStock ts    \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid    \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                            \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,     \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,     \n" +
                "				0 AS salesOrderDetailID,		0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,     \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,     \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,     \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,     \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,    \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,    \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,	   \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,    \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,    \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		    \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,	    \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		    \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,    \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,    \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,			    \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(                            \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                            \n" +
                "					FROM 		vu_umid_creation_pending vu        \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)    \n" +
                "					GROUP BY 	vu.PartId, vu.BinID    \n" +
                "		) vu    \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid    \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id    \n" +
                "        inner join 	uoms u on c.uom = u.id      \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0    \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0    \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0    \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;	                                  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                            \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                            \n" +
                "		ELSE                            \n" +
                "			SELECT 	*		                                    \n" +
                "			FROM 	(                                    \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode, 				    \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,						    \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType, 	    \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,		    \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,    \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,    \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,    \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,    \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,				                      \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,	    \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,    \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,    \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently, 	                                    \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,	                                                              \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,    \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,    \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus                      \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                            \n" +
                "					UNION ALL                        \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,    \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,    \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		    \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,    \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,    \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,				    \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,    \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,		    \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,				                      \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,    \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,    \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,	    \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,    \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,	                                                              \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,		    \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,    \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus                       \n" +
                "					FROM 	temp_nonUmidAvailableStock                                      \n" +
                "				) d;    \n" +
                "		END IF;              \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN      \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode, 	                                    \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,	    \n" +
                "                cst.binID,				cst.salesOrderDetailID,					cst.assyID,					cst.receiveMaterialType,                            \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,                                      \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,                                                        \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,                                                \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID, 	                                                \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,	                                        \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,                             \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                            \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                            \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                            \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                                        \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                                           \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,              \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                               \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                                    \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,          \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,                                                              \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,                                                  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                                  \n" +
                "		FROM 		component_sid_stock cst                          \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid       \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id    \n" +
                "        inner join 	uoms u on cst.uom = u.id      \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id    \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id        \n" +
                "        inner join 	binmst b on cst.binID = b.id    \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id    \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id    \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id    \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id    \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id                                               \n" +
                "		INNER JOIN 	(                            \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                             \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                            \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                               \n" +
                "					FROM 	(                            \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,                             \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                             \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                              \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                            \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                            \n" +
                "								FROM 	kit_allocation                             \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)     \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                            \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM                            \n" +
                "					) a    \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId     \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)                                     \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)                                  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)    \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)        \n" +
                "		) ka ON ka.refUIDId = cst.id                           \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0    \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0    \n" +
                "		WHERE cst.isDeleted = 0                            \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;     \n" +
                "	END IF;                             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;                   \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(                  \n" +
                "	pUMIDId INT,          \n" +
                "    pKitAllocationId INT         \n" +
                ")  \n" +
                "BEGIN         \n" +
                "	Select	ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,     \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,    \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,    \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,    \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,    \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,    \n" +
                "        u.measurementTypeID as uomClassID,    \n" +
                "        		rp.kitReleaseDate,  rp.promiseShipDate,        \n" +
                "        fun_getKitReleaseStatus(ka.refSalesOrderDetID, NULL, ka.assyID, k.allocPerWithSubAssy, false) AS kitReleaseStatus       \n" +
                "	From(          \n" +
                "	SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,	              \n" +
                "			SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,                   \n" +
                "			k.allocatedUOM allocatedUOMID           \n" +
                "	FROM 	kit_allocation k          \n" +
                "	WHERE 	k.id = IFNULL(pKitAllocationId, k.id)                 \n" +
                "	AND 	k.refUIDId = pUMIDId          \n" +
                "	AND 	k.status = 'A'          \n" +
                "	GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM          \n" +
                "	) ka           \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3                      \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                      \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id          \n" +
                "	INNER JOIN uoms u ON u.id = ka.allocatedUOMID          \n" +
                "	LEFT JOIN (    \n" +
                "	SELECT 	k.refSalesorderdetid, k.assyID,    \n" +
                "			ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy    \n" +
                "			FROM    \n" +
                "			(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,    \n" +
                "					vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,    \n" +
                "					IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer    \n" +
                "							FROM  		vu_kit_allocation_detail vk                                                                  \n" +
                "							INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id                                                 \n" +
                "							WHERE    	vk.isNotRequiredKitAllocation != 1    \n" +
                "							GROUP BY 	vk.refSalesorderdetid, vk.assyID    \n" +
                "			) as k    \n" +
                "	) k ON ka.refSalesOrderDetID = k.refSalesorderdetid and ka.assyID = k.assyID         \n" +
                "	left join (          \n" +
                "		Select 	salesOrderDetID,           \n" +
                "				(case when subAssyID is not null then subAssyID else refAssyId end) assyID,          \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,          \n" +
                "				MIN(poDueDate) promiseShipDate,          \n" +
                "		count(1) totalPlan,           \n" +
                "				sum(case when kitStatus = 'R' then 1 else 0 end) totalReleasedPlan          \n" +
                "		from 	vu_release_plan_detail          \n" +
                "		Group by salesOrderDetID, refAssyId, subAssyID          \n" +
                "	) rp on ka.refSalesOrderDetID = rp.salesOrderDetID and ka.assyID = rp.assyID          \n" +
                "	ORDER BY (rp.kitReleaseDate IS NULL),  rp.kitReleaseDate ASC, ka.id ASC;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4926,'2.00','V1','Bug 35068: In case of EACH type parts user must not able to enter Decimal values in Count - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4926:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
                "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,  \n" +
                "					NEW.paymentNumber,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
                "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),  \n" +
                "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),  \n" +
                "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = OLD.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = NEW.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Payment Method\",								vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 		(vTableName,									NEW.id,  \n" +
                "					\"Account Reference\",								OLD.accountReference,  \n" +
                "					NEW.accountReference,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Bank Account Code\",								OLD.bankAccountNo,  \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Bank Name\",								OLD.bankName,  \n" +
                "					NEW.bankName,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Comments\",									OLD.remark,  \n" +
                "					NEW.remark,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),  \n" +
                "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "			 VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
                "		IF NEW.isDeleted = TRUE THEN  \n" +
                "			SET vNewval = 'Deleted';  \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
                "			SET vNewval = 'Restored';  \n" +
                "		ELSE  \n" +
                "			SET vNewval = 'Unknown action on delete';  \n" +
                "        END IF;  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "                    Colname,									Oldval,  \n" +
                "                    Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "                    vNewval,									NULL,  \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Status\"  \n" +
                "						WHEN old.refPaymentMode = \"CA\" THEN \"Write Off Status\"  \n" +
                "						ELSE \"Payment Status\" END), 						vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							olname,										Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId)  \n" +
                "				  VALUES 	(vTableName,										NEW.id,  \n" +
                "							\"Voided Date\",							'',  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId)  \n" +
                "				  VALUES 	(vTableName,										NEW.id,  \n" +
                "							\"Voided By\",									'',  \n" +
                "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "		  END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
                "					WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Locked Date\",									'',  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Locked By\",									'',  \n" +
                "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'P' THEN  \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =OLD.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =NEW.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Supplier\",									vOldval,  \n" +
                "						vNewval,												OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To name\",									OLD.payToName,  \n" +
                "						NEW.payToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To Address\",									OLD.payToAddress,  \n" +
                "						NEW.payToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Name\",									OLD.billToName,  \n" +
                "						NEW.billToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Address\",								OLD.billToAddress,  \n" +
                "						NEW.billToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    ELSEIF NEW.refPaymentMode = 'R' THEN  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,						refPaymentID,  \n" +
                "						Colname,						Oldval,  \n" +
                "						Newval,							createdAt,  \n" +
                "						createdBy,						createByRoleId,  \n" +
                "						updatedAt,						updatedBy,  \n" +
                "						updateByRoleId)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_Det_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_Det_History` AFTER UPDATE ON `packingslip_invoice_payment_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment_det\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vRefPaymentMode VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT refPaymentMode INTO vRefPaymentMode  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id = NEW.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN  \n" +
                "  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,  \n" +
                "					(CASE WHEN vRefPaymentMode = 'CA' THEN 'Credit Memo AMT. Applied in Detail'  \n" +
                "						WHEN vRefPaymentMode = 'WOFF' THEN 'Write Off Amount in Detail ($)'  \n" +
                "						ELSE 'Payment Amount in Detail' END),					FORMAT(OLD.paymentAmount,2),  \n" +
                "					FORMAT(NEW.paymentAmount,2),							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vRefPaymentMode = 'CA' AND (IFNULL(OLD.appliedDate, \"\") != IFNULL(NEW.appliedDate, \"\"))) THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,  \n" +
                "					'Applied Credit Memo Date in Detail',						CAST(DATE_FORMAT(OLD.appliedDate, '%m/%d/%y') AS CHAR),  \n" +
                "					CAST(DATE_FORMAT(NEW.appliedDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierInvoicePaymentHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentHistory`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPaymentID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN  \n" +
                "		CREATE TEMPORARY TABLE temp_custInvListOfPayment AS  \n" +
                "			SELECT id, invoiceNumber  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE refPayementid = pPaymentID)  \n" +
                "			AND transType = 'I'  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_custInvListOfPayment AS  \n" +
                "		SELECT id, invoiceNumber FROM customer_packingslip WHERE 1=0;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierInvoicePaymentHistory = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				id, tableName , refPaymentID ,  \n" +
                "				colName,  \n" +
                "				oldVal,  \n" +
                "				newVal,  \n" +
                "				(CASE WHEN ('\",pRefPaymentMode,\"' = 'R' OR '\",pRefPaymentMode,\"' = 'CA' OR '\",pRefPaymentMode,\"' = 'WOFF')  \n" +
                "						AND siph.refPaymentDetID IS NOT NULL  \n" +
                "						THEN (SELECT invoiceNumber FROM temp_custInvListOfPayment  \n" +
                "							WHERE id = (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det  \n" +
                "												WHERE id = siph.refPaymentDetID))  \n" +
                "				      WHEN '\",pRefPaymentMode,\"' = 'P' THEN '' ELSE '' END) AS invoiceNumber ,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedBy,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole  \n" +
                "			FROM    supplier_invoice_payment_history siph  \n" +
                "			WHERE   refPaymentID =\",pPaymentID,\"  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4927,'2.00','V1',' payment history trigger - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4927:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "alter table customer_packingslip  add  column isAskForVersionConfirmation tinyint default 0;   \n" +
                "  \n" +
                "alter table customer_packingslip modify column isAlreadyPublished tinyint  default 0;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4928,'2.00','V1','Add Column in customer_packingslip for isAskForVersionConfirmation  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4928:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCreditMemoReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                          \n" +
                "	IN cpID INT                          \n" +
                ")  \n" +
                "BEGIN	                \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);                   \n" +
                "   # Customer Invoice Master table details                           \n" +
                "   SELECT  cp.id,                           \n" +
                "			cp.invoiceNumber,                          \n" +
                "			cp.invoiceDate,              \n" +
                "            cp.creditMemoNumber,              \n" +
                "            cp.creditMemoDate,              \n" +
                "            cp.refDebitMemoNumber,              \n" +
                "            refDebitMemoDate,                              \n" +
                "			cp.poNumber,                                 \n" +
                "			cp.poDate,                \n" +
                "			mg.customerSystemID,                \n" +
                "			mg.accountRef,              \n" +
                "			cp.status,                       \n" +
                "			cp.billingAddress,               \n" +
                "			cp.shippingAddress,                \n" +
                "            cp.packingSlipComment,                \n" +
                "            cp.rmaNumber,              \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                            \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                  \n" +
                "			cp.systemID AS legalnumber,                  \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                    \n" +
                "			us.emailAddress,                \n" +
                "			emp.phExtension,    \n" +
                "            '1.00' docNumber ,  \n" +
                "            cp.revision creditMemoVersion  \n" +
                "		FROM customer_packingslip cp                 \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                          \n" +
                "                LEFT JOIN                                \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                           \n" +
                "        AND gcs.isDeleted = 0                               \n" +
                "           LEFT JOIN                                \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                           \n" +
                "        AND gcp.isDeleted = 0                             \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                           \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0     \n" +
                "    and transType='C'    \n" +
                "    LIMIT 1;                           \n" +
                "  \n" +
                "	# Customer Invoice line level details                           \n" +
                "	SELECT                            \n" +
                "		cpd.id,                                \n" +
                "		cpd.partId,                      \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                       \n" +
                "		cpd.lineID,               \n" +
                "        cpd.reflineID,            \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                             \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                          \n" +
                "		  WHEN (c.iscustom=1) THEN                           \n" +
                "			c.custAssyPN                          \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                           \n" +
                "			c.mfgPN                           \n" +
                "        ELSE                                                                   \n" +
                "			  ''                                                  \n" +
                "			END) AS mfgPN ,                          \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                               \n" +
                "			'Other Charges'                                \n" +
                "		ELSE                                                                   \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                  \n" +
                "			END) AS  mfgName,                          \n" +
                "		IFNULL(c.rev, '') AS revision,                          \n" +
                "		(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                             \n" +
                "			'EA'                          \n" +
                "		ELSE           \n" +
                "			fun_getUOMAbbreviationByID(c.uom)          \n" +
                "        END) AS uom,                          \n" +
                "		cpd.shipQty AS qty,                           \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                          \n" +
                "		IFNULL(cpd.extendedPrice,0) AS extPrice,                \n" +
                "		CONCAT(IFNULL(cpd.assyDescription, ''),'<br/>',                               \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                 \n" +
                "            IFNULL(CONCAT(', ',                                  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                  \n" +
                "                    ''),                  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',        \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS description                 \n" +
                "  \n" +
                "	FROM                                \n" +
                "		customer_packingslip_det cpd                               \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                \n" +
                "	WHERE                                \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID ORDER BY reflineID ASC;                           \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                          \n" +
                "	SELECT  fun_getTotalCustomerCreditMemoAppliedAmountById(cpID) into vReceivedAmt;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                           \n" +
                "    SELECT                                        \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                           \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                       \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 ) totalLinePrice              \n" +
                "			/*(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                           \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice*/                          \n" +
                "		FROM customer_packingslip_det cpd                               \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                            \n" +
                "		AND cpd.isdeleted=0;             \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                \n" +
                "				vReceivedAmt totalRecvAmt,  \n" +
                "                -- IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,        \n" +
                "                IFNULL(totalLinePrice,0) totalCMAmount,  \n" +
                "                (IFNULL((IFNULL(totalLinePrice,0) + ifnull(vReceivedAmt,0)) ,0)) totalBalAmt   \n" +
                "                FROM tempTotalPrice LIMIT 1;             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4929,'2.00','V1','Sproc_GetCreditMemoReportDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4929:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(            \n" +
                "	IN invoiceID INT      ,            \n" +
                "    IN pTransType VARCHAR(5)            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);            \n" +
                "	DECLARE vTimeZone VARCHAR(50);            \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;            \n" +
                "	                 SELECT inv.id,   inv.transType,            \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,            \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,            \n" +
                "                        cps.id packingSlipID,            \n" +
                "						inv.refSalesOrderId  ,            \n" +
                "                        inv.systemID,            \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,            \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,            \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,            \n" +
                "						inv.soNumber,inv.soDate,            \n" +
                "                        inv.packingSlipType,inv.`status`,            \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,            \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,            \n" +
                "						inv.invoiceNumber,inv.invoiceDate,            \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,            \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,            \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,            \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,            \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,            \n" +
                "                        inv.intermediateShipmentId ,            \n" +
                "						inv.billingAddress,            \n" +
                "						inv.shippingAddress,            \n" +
                "						inv.intermediateAddress,            \n" +
                "                        inv.isLocked,            \n" +
                "                        inv.subStatus,            \n" +
                "                        inv.paymentStatus,            \n" +
                "                        inv.packingSlipType,            \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,            \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,            \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,         \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,            \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,            \n" +
                "                        inv.isZeroValue,            \n" +
                "                        inv.revision,            \n" +
                "                        cps.subStatus packingSlipSubStatus,            \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))            \n" +
                "						ELSE '' END) materialStatus ,            \n" +
                "                        inv.isAlreadyPublished ,            \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,            \n" +
                "            cps.revision packingSlipVersion,          \n" +
                "            (CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)           \n" +
                "				WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)          \n" +
                "                ELSE NULL END) receivedAmount,      \n" +
                "                (SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'        \n" +
                "							AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "						fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
                "						fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
                "						fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
                "						fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
                "						inv.isAskForVersionConfirmation,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,            \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt           \n" +
                "		FROM customer_packingslip inv            \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'            \n" +
                "                 WHERE inv.id = invoiceID            \n" +
                "                 AND inv.transType = pTransType;            \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,            \n" +
                "					cpd.id,            \n" +
                "                    cpd.refCustPackingSlipID,            \n" +
                "					cpd.custPOLineID,            \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,            \n" +
                "                    cpd.lineID,            \n" +
                "                    co.PIDCode,            \n" +
                "                    co.mfgcodeID,            \n" +
                "                    ss.releaseNumber,            \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,            \n" +
                "					co.mfgpn,            \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,            \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,            \n" +
                "                    cpd.partId,            \n" +
                "                    cpd.refChargesTypeID,            \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,            \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,            \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,            \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,            \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,            \n" +
                "                    othercharges AS lineOtherCharges,            \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,            \n" +
                "					cpd.shippingNotes,            \n" +
                "                    cpd.internalComment,            \n" +
                "                    cpd.assyDescription,            \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,            \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,            \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,            \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,            \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,            \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,            \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,            \n" +
                "                    co.partType,            \n" +
                "                    vu.packingLineID,            \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,            \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,            \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert            \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID            \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,            \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,            \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,            \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'            \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'            \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )            \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn            \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0            \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,            \n" +
                "                    cpd.isZeroValue,            \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted            \n" +
                "				 FROM customer_packingslip_det cpd            \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0            \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0            \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId            \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0            \n" +
                "                 ORDER BY cpd.lineID ASC;            \n" +
                "  \n" +
                "                 SELECT cpOther.id,            \n" +
                "						cpOther.refCustomerPackingSlipDetID,            \n" +
                "						cpOther.partID,            \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,            \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,            \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,            \n" +
                "                        cpOther.qty,            \n" +
                "                        cpOther.price,            \n" +
                "                        cpOther.lineComment,            \n" +
                "                         cpOther.lineInternalComment,            \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,            \n" +
                "                        cpOther.frequency ,            \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'            \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'            \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'            \n" +
                "								ELSE ''            \n" +
                "						END) AS frequencyName            \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther            \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0            \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID            \n" +
                "                 AND cpOther.isdeleted=0;            \n" +
                "  \n" +
                "                  --  Tracking Number            \n" +
                "                SELECT id,trackNumber            \n" +
                "                FROM customer_packing_slip_track_number            \n" +
                "                WHERE refCustPackingSlipID = invoiceID            \n" +
                "                AND isDeleted = 0;            \n" +
                "  \n" +
                "                -- sales commission attribute      \n" +
                "                SELECT cca.id,            \n" +
                "		    cca.refCustPackingSlipDetID,            \n" +
                "                    cca.unitPrice,         \n" +
                "                    cca.commissionPercentage,            \n" +
                "                    cca.commissionValue,            \n" +
                "                    cca.quoted_commissionPercentage,            \n" +
                "                    cca.quoted_commissionValue,            \n" +
                "                    cca.poQty,            \n" +
                "                    cca.partId,    \n" +
                "                    cca.quotedQty,    \n" +
                "                    cca.type,    \n" +
                "                    cca.rfqAssyID,    \n" +
                "                    cca.commissionCalculateFrom,    \n" +
                "                    cca.salesCommissionNotes,            \n" +
                "                    cca.refComponentSalesPriceBreakID,            \n" +
                "                    cca.quoted_unitPrice        \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca            \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0    \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID            \n" +
                "                 AND cca.isdeleted=0;    \n" +
                "                 -- sales commission child attribute          \n" +
                "                SELECT cca.id,            \n" +
                "		    cca.refCustPackingSlipDetID,    \n" +
                "		    cca.refcustInvoiceCommissionID,            \n" +
                "                    cca.unitPrice,            \n" +
                "                    cca.refQuoteAttributeId,            \n" +
                "                    cca.commissionPercentage,            \n" +
                "                    cca.commissionValue,            \n" +
                "                    cca.org_commissionPercentage,            \n" +
                "                    cca.org_commissionValue,            \n" +
                "                    cca.category,            \n" +
                "                    cca.partId,            \n" +
                "                    cca.refComponentSalesPriceBreakID,            \n" +
                "                    cca.org_unitPrice,            \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,            \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,            \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName            \n" +
                "				FROM customer_packingslip_commission_attribute cca            \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0            \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0            \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID            \n" +
                "                 AND cca.isdeleted=0;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4930,'2.00','V1','Sproc_GetCustomerInvoiceDetail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4930:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                                      \n" +
                "	IN cpID INT                                      \n" +
                ")  \n" +
                "BEGIN	                                      \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);            \n" +
                "    # Customer Invoice Master table details                                       \n" +
                "    SELECT  cp.id,                                      \n" +
                "		cp.invoiceNumber,                                      \n" +
                "        cp.invoiceDate,                                      \n" +
                "		cp.packingSlipNumber,                                            \n" +
                "		cp.packingSlipDate,                                            \n" +
                "		cp.poDate,                                            \n" +
                "		cp.poNumber,                      \n" +
                "        cp.poRevision,            \n" +
                "		mg.customerSystemID,                            \n" +
                "		mg.accountRef,                           \n" +
                "		cp.packingSlipComment,                                     \n" +
                "        cp.status,                                      \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '                          \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                                    \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                                      \n" +
                "        cp.billingAddress,                                      \n" +
                "        cp.shippingAddress,                            \n" +
                "        cp.intermediateAddress,                                      \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                                      \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                        \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                       \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                                      \n" +
                "        cp.systemID AS legalnumber,                    \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,                                      \n" +
                "		us.emailAddress,                                      \n" +
                "		emp.phExtension,          \n" +
                "        cp.revision invoiceVersion,      \n" +
                "        '1.00' AS docNumber,    \n" +
                "        subStatus  \n" +
                "		FROM customer_packingslip cp                             \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                                      \n" +
                "                LEFT JOIN                                            \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                                       \n" +
                "        AND gcs.isDeleted = 0                                           \n" +
                "           LEFT JOIN                                            \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                                       \n" +
                "        AND gcp.isDeleted = 0                                         \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                              \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                                       \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                                       \n" +
                "  \n" +
                "	# Customer Invoice line level details                                       \n" +
                "	SELECT                                        \n" +
                "		cpd.id,                                            \n" +
                "		cpd.partId,                                  \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                                   \n" +
                "		cpd.lineID,               \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,              \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,                                   \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                         \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                                      \n" +
                "		  WHEN (c.iscustom=1) THEN                                       \n" +
                "			c.custAssyPN                                      \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                                       \n" +
                "			c.mfgPN                                       \n" +
                "        ELSE                                                                               \n" +
                "			  ''                                                              \n" +
                "			END) AS mfgPN ,                                      \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                           \n" +
                "			'Other Charges'                                            \n" +
                "		ELSE                                                                               \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                              \n" +
                "			END) AS  mfgName,                                      \n" +
                "		IFNULL(c.rev, '') AS revision,                                      \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                                      \n" +
                "		cpd.shipQty AS qty,                                       \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                                      \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,                            \n" +
                "		CONCAT(                      \n" +
                "		IFNULL(cpd.assyDescription, ''),'<br/>',                                           \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                              \n" +
                "                IFNULL(CONCAT(', ',                                              \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                              \n" +
                "                    ''),                              \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                              \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),              \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,                          \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS DESCRIPTION                         \n" +
                "  \n" +
                "	FROM                                            \n" +
                "		customer_packingslip_det cpd               \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0                                               \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                             \n" +
                "	WHERE                                            \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                                       \n" +
                "  \n" +
                "	SELECT  get_totalCustomerInvoiceReceivedAmountById(cpID) into vReceivedAmt;            \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                       \n" +
                "    SELECT                                                    \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                                       \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                                       \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 ) totalLinePrice,                                            \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod   \n" +
                "				WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det   \n" +
                "							WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice                                                \n" +
                "			/*(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                                       \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                                       \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                                    \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                                       \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice*/                                      \n" +
                "		FROM customer_packingslip_det cpd                                           \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                                        \n" +
                "		AND cpd.isdeleted=0;                                            \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                                        \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                                        \n" +
                "                /* IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,                */  \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)),0) totalCIPrice,            \n" +
                "                vReceivedAmt totalRecvAmt,            \n" +
                "                (IFNULL(((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)) - ifnull(vReceivedAmt,0)) ,0)) totalBalAmt            \n" +
                "                FROM tempTotalPrice LIMIT 1;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4931,'2.00','V1','Sproc_GetCustomerInvoiceReportDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4931:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                                        \n" +
                "	IN cpid INT                                        \n" +
                ")  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	SELECT                                     \n" +
                "    cp.id,                                \n" +
                "    cp.status,                       \n" +
                "    cp.packingSlipType,                      \n" +
                "    cp.packingSlipNumber AS PackingSlip,                                    \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                                    \n" +
                "    cp.poDate AS PODate,                                    \n" +
                "    cp.soNumber AS SalesOrderNumber,                                    \n" +
                "    cp.poNumber AS PONumber,                \n" +
                "    cp.packingSlipComment,                                    \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                                    \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                                    \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                                \n" +
                "    cp.soDate AS SODate,                                    \n" +
                "    cp.sorevision AS SORevision,                                    \n" +
                "	cp.billingAddress AS SoldToAddress,                              \n" +
                "	cp.shippingAddress AS ShippingAddress,                     \n" +
                "	cp.intermediateAddress AS IntermediateAddress,                       \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,                              \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,      \n" +
                "    cp.revision packingSlipVersion  ,    \n" +
                "    '1.00' docNumber ,  \n" +
                "    cp.systemID AS legalNumber   \n" +
                "FROM                                    \n" +
                "    customer_packingslip cp                           \n" +
                "        LEFT JOIN                                    \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                                    \n" +
                "        AND sm.isDeleted = 0                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                                    \n" +
                "        AND gc.isDeleted = 0                                    \n" +
                "        AND gc.categoryType = 'Shipping Methods'                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                                    \n" +
                "        AND gcc.isDeleted = 0                                    \n" +
                "        AND gcc.categoryType = 'Payment Terms'                                  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                                        \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                                 \n" +
                "WHERE                                    \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                                    \n" +
                "LIMIT 1;                                    \n" +
                "  \n" +
                "SELECT                                     \n" +
                "	cpd.lineID AS PSLine,                              \n" +
                "    cpd.id AS cpDetID,        \n" +
                "    ss.releaseNumber,                              \n" +
                "    cpd.refCustPackingSlipID AS cpID,                               \n" +
                "    cpd.partId,                              \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                                \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,                                \n" +
                "    cpd.custPOLineID AS POLine,                        \n" +
                "    cpd.shippingNotes AS ShippingComment,                        \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN                              \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                              \n" +
                "		WHEN (c.iscustom = 1) THEN                              \n" +
                "		c.custAssyPN                              \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN                              \n" +
                "		c.mfgPN                              \n" +
                "		ELSE                              \n" +
                "		''                              \n" +
                "	END) AS PartNumber,                \n" +
                "	CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,                                 \n" +
                "    IFNULL(c.rev, '') AS Revision,                               \n" +
                "    c.partType,                              \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',                                 \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                                    \n" +
                "            IFNULL(CONCAT(', ',                                    \n" +
                "                            cpd.standrads),                                    \n" +
                "                    ''),                                    \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                                    \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                    \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                                    \n" +
                "FROM                                    \n" +
                "    customer_packingslip_det cpd                              \n" +
                "        LEFT JOIN                                    \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                                    \n" +
                "        AND cp.isDeleted = 0                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    component c ON c.id = cpd.partid                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                                    \n" +
                "        AND sd.isDeleted = 0                                   \n" +
                "        LEFT JOIN                                   \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID         \n" +
                "    LEFT JOIN        \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId     	                              \n" +
                "        LEFT JOIN                                    \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                                    \n" +
                "        AND ra.partID = cpd.partId                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                               \n" +
                "WHERE                            \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4932,'2.00','V1','Sproc_GetCustomerPackingslipReportDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4932:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                                        \n" +
                "	IN pTransType VARCHAR(5),                                                \n" +
                "	IN pInvoiceType VARCHAR(1),                                                    \n" +
                "	IN pInvoiceID INT,              	                                                    \n" +
                "    IN pInvData JSON,                                                    \n" +
                "    IN pPackingSlipID INT,                                                    \n" +
                "	IN puserID INT,                                                              \n" +
                "	IN puserRoleID INT ,                                                          \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),                        \n" +
                "    IN pSystemId VARCHAR(20)  ,                      \n" +
                "    IN pPackingSlipType INT                      \n" +
                ")  \n" +
                "BEGIN                                                                     \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                                  \n" +
                "	DECLARE v_prefix VARCHAR(20);                                                          \n" +
                "	DECLARE vTermsDays INT ;         \n" +
                "	DECLARE v_incrementI INT;          \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                                \n" +
                "	SELECT 	*                                                                                                 \n" +
                "	FROM 	JSON_TABLE(                                                         \n" +
                "			pInvData,                                                                                                \n" +
                "			\"$[*]\" COLUMNS(    			                                                   \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                                    \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                                    \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                                     \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                                                    \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                                                \n" +
                "				`status` INT PATH \"$.status\",                                                    \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                                    \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                                \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                                \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                                     \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                                \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                                        \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                                      \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                                      \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                                      \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                                      \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                                      \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                                    \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                                    \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                                    \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                                    \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                                    \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                                    \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                                                    \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                                    \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                                    \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                                    \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                                    \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                                    \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                                \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                                      \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                                 \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                                      \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                                 \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                                \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\",                    \n" +
                "                `revision` VARCHAR(10) PATH \"$.revision\",                    \n" +
                "                `isZeroValue` TINYINT PATH \"$.isZeroValue\",                  \n" +
                "                `isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",               \n" +
                "                `poRevision` VARCHAR(50) PATH \"$.poRevision\" ,          \n" +
                "                `isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",          \n" +
                "                `agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",  \n" +
                "                `isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\"  \n" +
                "			)                                                      \n" +
                "		) AS CustInv_JT;                              \n" +
                "  \n" +
                "		SELECT  termsDays INTO 	vTermsDays                                                    \n" +
                "		FROM genericCategory gc                                                     \n" +
                "		WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                                    \n" +
                "		AND categoryType = 'Payment Terms';                       \n" +
                "	  IF(pInvoiceID IS NULL)THEN                      \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                                          \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                                          \n" +
                "			FROM `identity`                                                          \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                                         \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                          \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                          \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                          \n" +
                "				packingSlipComment,headerComment,sorevision,                                                          \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                                          \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                                        \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                                     \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                                        \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,                    \n" +
                "                contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation)                                                               \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                          \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                          \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                     \n" +
                "					packingSlipComment,headerComment,sorevision,                                                          \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                                         \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                                        \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                                    \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                                        \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,                    \n" +
                "                    contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0                                 \n" +
                "			FROM temp_customerInvoice ;			                                                    \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                                            \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                                           \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                                           \n" +
                "		 WHERE id= pPackingSlipID;                                                              \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN                   \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order                  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                                          \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                                        \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                                          \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                                          \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,                    \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                              \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                                          \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,                \n" +
                "                    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),                  \n" +
                "                    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                                       \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,                \n" +
                "                    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                                        \n" +
                "					puserRoleID,puserRoleID,                \n" +
                "                    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                                          \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,                \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),                \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),                \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),                \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),                    \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),                \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,                 \n" +
                "                    cpd.isZeroValue                                                        \n" +
                "			FROM customer_packingslip_det   cpd                        \n" +
                "            LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0                \n" +
                "            LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0                \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                                           \n" +
                "			AND cpd.isDeleted = 0;                            \n" +
                "  \n" +
                "            IF pPackingSlipType = 2 THEN -- PO/SO INV          \n" +
                "            INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                          \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,                          \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,                          \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)                          \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,                        \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,                          \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,                          \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes                           \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca                          \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                            \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;           \n" +
                "					-- child records                    \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                          \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                          \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                          \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                          \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,                          \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                          \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                          \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                           \n" +
                "					FROM salesorderdet_commission_attribute sca                          \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                            \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;                            \n" +
                "  \n" +
                "             ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV                 \n" +
                "					-- SP to generate line wise sales commission.                      \n" +
                "                    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);                      \n" +
                "  -- Sales Price details for Part master        \n" +
                "                    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                          \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                          \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                          \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                          \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,                          \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                          \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                          \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                           \n" +
                "					FROM temp_salesCommission sca                       \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                            \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;          \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ        \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;                                                                                      \n" +
                "	                     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS          \n" +
                "	                       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca         \n" +
                "	                       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                            \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;        \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;        \n" +
                "			SET v_incrementI=0;        \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO        \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;        \n" +
                "  \n" +
                "                                SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;     \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM         \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;        \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN    \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);    \n" +
                "				END IF;    \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));        \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                          \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                          \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                          \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)                          \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,                          \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                          \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,                          \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID                           \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;        \n" +
                "					-- sales commission child details        \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;        \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                          \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                          \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                          \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                          \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,                          \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                          \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                          \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                           \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;         \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;        \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;          \n" +
                "             END IF;                             \n" +
                "		END IF;                                                    \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                      \n" +
                "        /*              \n" +
                "		UPDATE `identity`                                                          \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                                          \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                          \n" +
                "		*/              \n" +
                "	  ELSE                                                          \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                                    \n" +
                "			UPDATE customer_packingslip cp                                                    \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                    \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                                                    \n" +
                "				cp.`status`= tci.status,  			                                                          \n" +
                "				cp.subStatus = tci.subStatus,                                                    \n" +
                "                cp.headerComment= tci.headerComment,                                                    \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                    \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,                                          \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                          \n" +
                "                cp.updatedBy = puserID,                                          \n" +
                "                cp.updateByRoleId = puserRoleID  ,                                \n" +
                "                cp.billingAddress= tci.billingAddress,                                                    \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                    \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                \n" +
                "                cp.contactPersonId = tci.contactPersonId,                                \n" +
                "                cp.billToId = tci.billToId,                                      \n" +
                "                cp.shipToId  = tci.shipToId,                                      \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,                    \n" +
                "                cp.revision = LPAD(tci.revision,2,'0'),                    \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,                  \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),              \n" +
                "                cp.poRevision = tci.poRevision ,  \n" +
                "                cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation  \n" +
                "			WHERE cp.id=pInvoiceID                  \n" +
                "            AND cp.transType = pTransType;                                                       \n" +
                "        ELSE                                                      \n" +
                "        # in case of tariff invoice & credit memo update all other field                                                    \n" +
                "			UPDATE customer_packingslip  cp                                                      \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                    \n" +
                "			SET	cp.status= tci.status,                                                    \n" +
                "				cp.subStatus= tci.subStatus,                                                    \n" +
                "				cp.poNumber= tci.poNumber,                                                    \n" +
                "				cp.poDate= tci.poDate,                                                    \n" +
                "				cp.soNumber= tci.soNumber,                                                    \n" +
                "				cp.soDate= tci.soDate,                                                    \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                                                    \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                                                    \n" +
                "				cp.invoiceDate= tci.invoiceDate,                                                    \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                                                    \n" +
                "				cp.headerComment= tci.headerComment,                                                    \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                    \n" +
                "				cp.billingAddress= tci.billingAddress,                                                    \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                    \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                                    \n" +
                "				cp.totalAmount= IFNULL(tci.totalAmount,0),                                                    \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                                                    \n" +
                "				cp.termsId= tci.termsId,                     \n" +
                "                cp.termsDays = vTermsDays,                    \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                                                \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                                \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                                          \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                                          \n" +
                "                cp.updatedBy = puserID,                                          \n" +
                "                cp.updateByRoleId = puserRoleID,                                        \n" +
                "                cp.rmaNumber= tci.rmaNumber,                                      \n" +
                "                cp.billToId = tci.billToId,                                      \n" +
                "                cp.shipToId  = tci.shipToId,                                      \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,                                    \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,                                \n" +
                "                cp.contactPersonId = tci.contactPersonId,                    \n" +
                "                cp.revision =  LPAD(tci.revision,2,'0'),                    \n" +
                "                cp.isZeroValue = IFNULL(tci.isZeroValue,0),                  \n" +
                "                cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),              \n" +
                "                cp.poRevision = tci.poRevision ,          \n" +
                "                cp.isMarkForRefund = tci.isMarkForRefund,           \n" +
                "                cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),  \n" +
                "                cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation  \n" +
                "			 WHERE cp.id = pInvoiceID                  \n" +
                "             AND cp.transType = pTransType;                                                       \n" +
                "  \n" +
                "            END IF;                                                    \n" +
                "  \n" +
                "	  END IF;                                                             \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                                              \n" +
                "       -- detail Id                                                      \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                                      \n" +
                "      FROM customer_packingslip_det                                                       \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                                       \n" +
                "      AND isDeleted = 0;                                                      \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4933,'2.00','V1','Sproc_SaveCustomerInvoiceDetail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4933:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS sproc_updateCustomerInvoiceMasterAfterDetailChange;  \n" +
                "CREATE PROCEDURE `sproc_updateCustomerInvoiceMasterAfterDetailChange`(       \n" +
                "	IN pInvoiceId INT,      \n" +
                "	IN pTotalAmout DECIMAL(18,6),      \n" +
                "    IN pUserId INT,      \n" +
                "    IN pUserRoleId INT,      \n" +
                "    IN pRevision INT  ,  \n" +
                "    IN pIsAskForVersionConfirmation TINYINT  \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	DECLARE vZeroValueDetCount INT DEFAULT 0;      \n" +
                "    DECLARE vTotalRecord INT DEFAULT 0;      \n" +
                "    DECLARE vHeaderZeroValue TINYINT DEFAULT 0;      \n" +
                "  \n" +
                "    SELECT count(1), ifnull(sum(if(isZeroValue>0,1,0)),0) INTO vTotalRecord,vZeroValueDetCount      \n" +
                "    FROM customer_packingslip_det      \n" +
                "    WHERE refCustPackingSlipID = pInvoiceId      \n" +
                "    AND isDeleted  = 0;      \n" +
                "  \n" +
                "    IF vTotalRecord = vZeroValueDetCount THEN      \n" +
                "		SET vHeaderZeroValue = 1;      \n" +
                "    ELSE       \n" +
                "		SET vHeaderZeroValue = 0;      \n" +
                "    END IF;      \n" +
                "  \n" +
                "    update customer_packingslip      \n" +
                "    set totalAmount = pTotalAmout,      \n" +
                "    isZeroValue = vHeaderZeroValue,      \n" +
                "    updatedBy = pUserId,      \n" +
                "    updateByRoleId = pUserRoleId,      \n" +
                "    updatedAt = fun_DatetimetoUTCDateTime(),      \n" +
                "    revision = lpad(ifnull(pRevision,0),2,'0')    ,  \n" +
                "    isAskForVersionConfirmation = pIsAskForVersionConfirmation  \n" +
                "    where id = pInvoiceId      \n" +
                "    and isDeleted = 0;      \n" +
                "  \n" +
                "	-- return new version    \n" +
                "	select lpad(ifnull(pRevision,0),2,'0') newRevision;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4934,'2.00','V1','sproc_updateCustomerInvoiceMasterAfterDetailChange  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4934:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "drop trigger if exists Trg_AU_customer_packingslip;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip` FOR EACH ROW BEGIN                                   \n" +
                "	DECLARE vTransTypeText VARCHAR(20);          \n" +
                "    SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');          \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN                                  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                    \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),                                  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "	END IF;               \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),                                  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;               \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),                                  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;               \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),                                  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM customer_contactperson WHERE personId=OLD.contactPersonId),                                  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM customer_contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,                                  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;                       \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN               \n" +
                "	IF(NEW.transType='P')THEN                                    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),                                  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "	ELSEIF (NEW.transType='I')THEN                  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),                                  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "	ELSEIF (NEW.transType='C')THEN              \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),                                  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "	END IF;	              \n" +
                "    END IF;                 \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),                                  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),                                  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;                 \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,                                  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,                                  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,                                  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),                                  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),                                  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN                                  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                    \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),                                  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',              \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)                   \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,                                  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)                   \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,               \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;               \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',              \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),                                  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;               \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',            \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,                                  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,             \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),                                  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),                                  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),                                  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,                                  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),                                  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),                                  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,                                  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN                                  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),                                  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;              \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,                                  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;             \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN                                  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                                  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,                                  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                                  \n" +
                "    END IF;          \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN                            \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                              \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),                            \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                            \n" +
                "	END IF;          \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN                            \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                              \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,        \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                            \n" +
                "	END IF;       \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN                            \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                              \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,        \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                            \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN                            \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                              \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,        \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                            \n" +
                "	END IF;    \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4935,'2.00','V1','Trg_AU_customer_packingslip  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4935:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP procedure IF exists Sproc_GetCalibrationDetailsList;  \n" +
                "CREATE PROCEDURE `Sproc_GetCalibrationDetailsList`(            \n" +
                "IN ppageIndex INT,            \n" +
                "IN precordPerPage INT,            \n" +
                "IN pOrderBy VARCHAR(255),            \n" +
                "IN pWhereClause VARCHAR(16383),        \n" +
                "IN pCurrentCalibrationDetail TINYINT,      \n" +
                "IN pEqpId INT      \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pOffset INT;        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);        \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);        \n" +
                "    DECLARE vTimeZone VARCHAR(50);      \n" +
                "    DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;        \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;        \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();     \n" +
                "  \n" +
                "	SET @temp_MainQuery =        \n" +
                "    CONCAT(\" select rank() over (partition by refEqpID,calibrationType order by calibrationDate desc) rnk,        \n" +
                "					cd.id,        \n" +
                "					cd.refEqpID,        \n" +
                "                    e.assetName,        \n" +
                "                    e.eqpMake,        \n" +
                "                    e.eqpModel,        \n" +
                "                    e.eqpYear,    \n" +
                "                    e.assetNumber,  \n" +
                "                    e.serialNumber,  \n" +
                "                    e.departmentID,  \n" +
                "                    dept.`deptName` AS `departmentName`,  \n" +
                "                    e.calibrationRequired,        \n" +
                "                    case when e.calibrationRequired = 1 then        \n" +
                "							'Yes'        \n" +
                "						when  e.calibrationRequired = 0 then        \n" +
                "							'No'        \n" +
                "                    end calibrationRequiredValue,        \n" +
                "					cd.calibrationType,        \n" +
                "                    case when cd.calibrationType = 1 then        \n" +
                "							'Calibration'        \n" +
                "						when  cd.calibrationType = 2 then        \n" +
                "							'Repair'        \n" +
                "                    end calibrationTypeValue,        \n" +
                "					cd.calibrationDate,        \n" +
                "                    cd.calibrationExpirationDate,        \n" +
                "                    cd.calibrationComments,        \n" +
                "					fun_getUserNameByID(cd.createdBy) createdbyValue,        \n" +
                "					fun_getUserNameByID(cd.updatedBy) updatedbyValue,        \n" +
                "					fun_getRoleByID(cd.createByRoleId) createdbyRoleValue,        \n" +
                "					fun_getRoleByID(cd.updateByRoleId) updatedbyRoleValue,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue      ,  \n" +
                "					fun_getGenericCategoryNameByID(`e`.locationTypeID) locationName,  \n" +
                "                    e.locationTypeID,     \n" +
                "                    e.eqpDescription,  \n" +
                "                    e.equipmentAs,  \n" +
                "                    (CASE WHEN (`e`.`equipmentAs` = 'E') THEN 'Equipment'                \n" +
                "						WHEN (`e`.`equipmentAs` = 'W') THEN 'Workstation'                \n" +
                "						WHEN (`e`.`equipmentAs` = 'S') THEN 'Sample' ELSE '' END) AS `equipmentAsConvertedValue`,  \n" +
                "                     (case when cd.calibrationExpirationDate < curDate() then 1  \n" +
                "						   when cd.calibrationExpirationDate > curDate() and month(cd.calibrationExpirationDate) = month(curDate()) and year(cd.calibrationExpirationDate) = year(curDate()) then 2  \n" +
                "                           else 3 end) calExpiryDateStatus 							  \n" +
                "			  from calibration_details cd        \n" +
                "              join equipment e ON e.eqpID = cd.refEqpID        \n" +
                "              LEFT JOIN department dept ON `dept`.`deptID` = `e`.`departmentID` and dept.isDeleted = 0  \n" +
                "			 where cd.isDeleted = 0        \n" +
                "               and e.isDeleted = 0        \n" +
                "	\");        \n" +
                "  \n" +
                "  \n" +
                "    IF(pEqpId IS NOT NULL) THEN         \n" +
                "		SET @temp_MainQuery = CONCAT(@temp_MainQuery,\" and cd.refEqpID = \" , pEqpId);      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = \" ORDER BY assetName ASC \";        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;        \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN         \n" +
                "		SET pWhereClause = ' 1=1 ';        \n" +
                "	END IF;            \n" +
                "  \n" +
                "    IF (pCurrentCalibrationDetail = TRUE) THEN        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' and rnk = 1 ');        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN            \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;            \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_MainQuery,\" ) c where \", pWhereClause);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_MainQuery,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query1 FROM @SQLStatement2;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4936,'2.00','V1','Sproc_GetCalibrationDetailsList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4936:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "alter  table serial_number_configuration add column barcodeSeparatorID int;  \n" +
                "  \n" +
                "alter table serial_number_configuration add column barcodeSeparatorLock tinyint default 0;  \n" +
                "  \n" +
                "ALTER TABLE `serial_number_configuration`   \n" +
                "ADD CONSTRAINT `fk_serialnumberconfig_generaiccategory`  \n" +
                "  FOREIGN KEY (`barcodeSeparatorID`) REFERENCES `genericcategory` (`gencCategoryID`);  \n" +
                "  \n" +
                "alter  table workorder_serialmst add column barcodeSeparatorID int;  \n" +
                "  \n" +
                "alter  table workorder_serialmst add column barcodeSeparatorValue varchar(100);  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4937,'2.00','V1','Add column for separator  in serial# configuration and WO serial#  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4937:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS  Sproc_GenerateSerialNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GenerateSerialNumber`(                  \n" +
                "       pPrefix VARCHAR(200),        \n" +
                "       pSuffix VARCHAR(200),        \n" +
                "       pConfigurationId INT,        \n" +
                "       pStartNumber INT,        \n" +
                "       pNoofDigit INT,        \n" +
                "       pUserID INT,            \n" +
                "       pRoleId INT,        \n" +
                "       pDateCode VARCHAR(4),        \n" +
                "       pDateCodeFormat VARCHAR(4),        \n" +
                "       pCurrStatus VARCHAR(5),        \n" +
                "       pWoID INT,        \n" +
                "       pNoofSerial INT,        \n" +
                "       pCurropID INT,        \n" +
                "       pWOTransID INT,        \n" +
                "       pSerialType INT,        \n" +
                "       pIsTransferred TINYINT(1),        \n" +
                "       pRefSerialID INT(11),        \n" +
                "       pRefMFGSerialNo VARCHAR(500),       \n" +
                "       pSerialNoSeparator VARCHAR(50),  \n" +
                "       pBarcodeSeparatorID INT  \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "    DECLARE vMaxNumber INT;        \n" +
                "    DECLARE vMaxLimitNumber INT;        \n" +
                "    DECLARE vRangeEndNumber INT;        \n" +
                "    DECLARE vEndNumber INT;        \n" +
                "    DECLARE vSerialNo VARCHAR(500);            \n" +
                "	DECLARE vStartIndex INT;        \n" +
                "    DECLARE vWoNumber VARCHAR(255);        \n" +
                "    DECLARE vIsConsecutiveNo TINYINT;        \n" +
                "    DECLARE vCustomerID INT;        \n" +
                "    DECLARE vDuplicate VARCHAR(255);        \n" +
                "  \n" +
                "    SELECT  woNumber, customerID        \n" +
                "			INTO vWoNumber,vCustomerID          \n" +
                "	FROM workorder a WHERE woID = pWoID;          \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail          \n" +
                "        ( errorCode INT(11), woNumber VARCHAR(255), serialNo VARCHAR(500));         \n" +
                "  \n" +
                "    #-----------------  Get Last Max Number generated base on 'ConfigurationId' or take base on Workorder Serial Number ---------------------        \n" +
                "    SET vMaxNumber = pStartNumber;        \n" +
                "  \n" +
                "    IF(pConfigurationId IS NOT NULL AND pConfigurationId > 0)        \n" +
                "	THEN        \n" +
                "		SELECT  CASE WHEN a.isConsecutiveNumber = 0         \n" +
                "					THEN pStartNumber         \n" +
                "					ELSE (CASE WHEN a.lastMaxNumber = 0 THEN (a.startNumber) ELSE (a.lastMaxNumber + 1) END)        \n" +
                "				END        \n" +
                "			,a.isConsecutiveNumber        \n" +
                "		INTO vMaxNumber, vIsConsecutiveNo         \n" +
                "			FROM serial_number_configuration a WHERE a.id = pConfigurationId;                    \n" +
                "	END IF;        \n" +
                "  \n" +
                "    SET vRangeEndNumber = (SELECT LPAD(9,pNoofDigit,9));        \n" +
                "    SET vMaxLimitNumber = (SELECT (vMaxNumber - 1) + pNoofSerial);        \n" +
                "  \n" +
                "    SET vEndNumber = vMaxLimitNumber;        \n" +
                "  \n" +
                "    #-----------------  Check validation on limit reach base on No Digit ---------------------        \n" +
                "    IF((vRangeEndNumber) < (vMaxLimitNumber))        \n" +
                "    THEN        \n" +
                "		INSERT INTO tempValidationDetail (errorCode, woNumber, serialNo) VALUES (1,vWoNumber, vRangeEndNumber + 1);        \n" +
                "        SET vEndNumber = vRangeEndNumber;        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	#-----------------  Check Duplication on Serial no Combination(CustomerId, Prefix, Suffix, serialIntVal)---------------------        \n" +
                "	/*INSERT INTO tempValidationDetail(errorCode, woNumber, serialNo)        \n" +
                "	SELECT 2, wo.woNumber, ws.SerialNo        \n" +
                "	FROM workorder_serialmst ws JOIN workorder wo ON ws.woID = wo.woID        \n" +
                "		WHERE IFNULL(ws.prefix,\"\") = IFNULL(pPrefix,\"\") AND IFNULL(suffix,\"\") = IFNULL(pSuffix,\"\")                \n" +
                "		AND serialIntVal BETWEEN vMaxNumber AND vEndNumber        \n" +
                "		AND ws.serialType = pSerialType         \n" +
                "		AND ws.isDeleted = 0         \n" +
                "		AND wo.customerID= vCustomerID          \n" +
                "		AND wo.isDeleted = 0;	     */   \n" +
                "	#-----------------  Check Duplication on Serial no new Generated---------------------        \n" +
                "	  INSERT INTO tempValidationDetail(errorCode, woNumber, serialNo)        \n" +
                "		SELECT 2, wo.woNumber, ws.SerialNo        \n" +
                "		FROM workorder_serialmst ws JOIN workorder wo ON ws.woID = wo.woID        \n" +
                "			WHERE ws.serialNo =  CONCAT(IFNULL(pPrefix , \"\"), LPAD(serialIntVal,pNoofDigit,0),pSerialNoSeparator,IFNULL(pSuffix,\"\"))     \n" +
                "			AND serialIntVal BETWEEN vMaxNumber AND vEndNumber        \n" +
                "			AND ws.serialType = pSerialType         \n" +
                "			AND ws.isDeleted = 0         \n" +
                "			AND wo.customerID= vCustomerID          \n" +
                "			AND wo.isDeleted = 0;	    \n" +
                "	#---------------- Make entry for generated serial number If not any Duplication founded ---------------------                \n" +
                "	IF (SELECT COUNT(1) FROM tempValidationDetail WHERE errorCode=2) = 0 THEN        \n" +
                "		#-----------------  Insert Serial No into Serial Master Table ---------------------        \n" +
                "		INSERT INTO workorder_serialmst        \n" +
                "				(woID,PrefixorSuffix,dateCode,noofDigit,SerialNo,curropID,currStatus,isDeleted,        \n" +
                "				 createdAt,createdBy,woTransID,serialType,isTransferred,refSerialID,refMFGSerialNo,createByRoleId,        \n" +
                "				 prefix,suffix,serialIntVal,configurationId,dateCodeFormat,barcodeSeparatorID,barcodeSeparatorValue)        \n" +
                "		SELECT pWoID,0,pDateCode,pNoofDigit,        \n" +
                "				CONCAT(IFNULL(pPrefix , \"\"), LPAD(a.serialIntVal,pNoofDigit,0),ifnull(pSerialNoSeparator,''),IFNULL(pSuffix,\"\")) serialNo,        \n" +
                "                pCurropID,pCurrStatus,0,        \n" +
                "				fun_DatetimetoUTCDateTime(),pUserID,pWOTransID,pSerialType,pIsTransferred,pRefSerialID,pRefMFGSerialNo,pRoleId,        \n" +
                "                pPrefix,pSuffix,a.serialIntVal,pConfigurationId,pDateCodeFormat ,pBarcodeSeparatorID ,pSerialNoSeparator       \n" +
                "		  FROM        \n" +
                "			(WITH RECURSIVE CTE AS (SELECT vMaxNumber start_series,vEndNumber end_series FROM DUAL        \n" +
                "										UNION ALL        \n" +
                "											SELECT start_series + 1,end_series        \n" +
                "										FROM CTE        \n" +
                "										WHERE start_series < end_series        \n" +
                "										)SELECT c.start_series serialIntVal        \n" +
                "				FROM CTE c) a;        \n" +
                "  \n" +
                "		#-----------------  Update Configuration Max number base on 'Configuration Id' ---------------------        \n" +
                "		IF(pConfigurationId IS NOT NULL AND pConfigurationId > 0)        \n" +
                "		THEN        \n" +
                "			UPDATE serial_number_configuration a SET a.lastMaxNumber = vEndNumber WHERE a.id = pConfigurationId;        \n" +
                "		END IF;        \n" +
                "	END  IF;        \n" +
                "    SELECT * FROM tempValidationDetail;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4938,'2.00','V1','Sproc_GenerateSerialNumber  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4938:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveWorkOrderSerials;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWorkOrderSerials`(                \n" +
                "	IN ppageIndex INT,                \n" +
                "	IN precordPerPage INT,                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "	IN pWoID INT,                \n" +
                "	IN pSerialType INT             \n" +
                "	)  \n" +
                "BEGIN                \n" +
                "  \n" +
                "		DECLARE pOffset INT;                \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;     \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
                "		DECLARE v_TimeZone VARCHAR(50);                  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;               \n" +
                "  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveWorkOrderSerials = CONCAT(\"               \n" +
                "  \n" +
                "			SELECT ws.`ID`,      \n" +
                "				  ws.`woID`,      \n" +
                "				  ws.`PrefixorSuffix`,      \n" +
                "				  ws.`PreSuffix`,      \n" +
                "				  ws.`dateCode`,      \n" +
                "				  ws.`noofDigit`,      \n" +
                "				  ws.`SerialNo`,      \n" +
                "				  ws.`curropID`,      \n" +
                "				  ws.`currStatus`,     \n" +
                "				  ws.`isDeleted`,      \n" +
                "				  fun_ApplyCommonDateTimeFormatByParaValue(ws.`createdAt`,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                \n" +
                "				  fun_ApplyCommonDateTimeFormatByParaValue(ws.`updatedAt`,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "				  fun_getUserNameByID(ws.createdBy) createdBy,       \n" +
                "				  fun_getUserNameByID(ws.updatedBy) updatedBy,       \n" +
                "				  ws.`woTransID`,      \n" +
                "				  ws.`serialType`,      \n" +
                "				  ws.`isTransferred`,      \n" +
                "				  ws.`refSerialID`,      \n" +
                "				  ws.`refMFGSerialNo`,      \n" +
                "				  fun_getRoleByID(ws.createByRoleId) createByRole,        \n" +
                "				  fun_getRoleByID(ws.updateByRoleId) updateByRole,        \n" +
                "				  ws.`prefix`,      \n" +
                "				  ws.`suffix`,      \n" +
                "				  ws.`serialIntVal`,      \n" +
                "				  ws.`dateCodeFormat`,      \n" +
                "				  ws.`configurationId`,      \n" +
                "				  ws.`currwoOPID`,      \n" +
                "				  fun_getOperationNameByWOOPID(ws.currwoOPID) opName,          \n" +
                "				  ws.`currwoTransID`,      \n" +
                "				  ws.`refMFGSerialNoId`,      \n" +
                "				  ws.`mappingWOOPID`,      \n" +
                "				  fun_getOperationNameByWOOPID(ws.mappingWOOPID) mappingOpName,      \n" +
                "				  fun_getUserNameByID(ws.mappingBy) mappingBy,       \n" +
                "				  fun_ConvertUTCDatetimeToDataKeyTimeZone(ws.`mappingOn`) mappingOn,      \n" +
                "				  fun_getWorkorderNumberWithRevByID((select w.terminateWOID from workorder w where w.woID=ws.woID)) terminatedWorkOrder,  \n" +
                "                  ws.barcodeSeparatorID,  \n" +
                "                  ws.barcodeSeparatorValue  \n" +
                "			FROM `workorder_serialmst` ws                \n" +
                "			WHERE ws.`deletedAt` IS NULL                 \n" +
                "			AND `woID` = \",pWoID,\" AND `serialType` = \",pSerialType,\"               \n" +
                "		\");                \n" +
                "		-- AND `woID` = IFNULL(\",pWoID,\",`woID`) AND `serialType` = IFNULL(\",pSerialType,\",`serialType`)    	            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "			SET pOrderBy = \"ORDER BY ID DESC\";                \n" +
                "		ELSE                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "			SET pWhereClause = '1=1' ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "		ELSE	                \n" +
                "			SET rowNumWhere = '';                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */                       \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWorkOrderSerials,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "	-- select @SQLStatement2;  \n" +
                "		PREPARE query2 FROM @SQLStatement2;                      \n" +
                "		EXECUTE query2;                      \n" +
                "		DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWorkOrderSerials,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          \n" +
                "		PREPARE query1 FROM @SQLStatement2;                      \n" +
                "		EXECUTE query1;     	                 \n" +
                "		DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4939,'2.00','V1','Sproc_RetrieveWorkOrderSerials  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        case 4939:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCheckPrintAndRemittanceReport;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(      \n" +
                "	IN pPaymentID int      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,      \n" +
                "				pip.paymentAmount,      \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,      \n" +
                "				pip.payToAddress,      \n" +
                "				pip.billToName supplierName,      \n" +
                "                pip.billToAddress supplierAddress,      \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,      \n" +
                "                pip.bankAccountNo,      \n" +
                "                g.gencCategoryName paymentType      \n" +
                "		  from packingslip_invoice_payment pip      \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1      \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType      \n" +
                "		 where pip.isDeleted = 0      \n" +
                "			and pip.refPaymentMode = 'P'      \n" +
                "		   and pip.id = pPaymentID;      \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,      \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							p.creditMemoNumber      \n" +
                "						ELSE      \n" +
                "							p.debitMemoNumber      \n" +
                "					END) invoiceNumber,      \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "				else      \n" +
                "					(SELECT 	ps.invoiceNumber      \n" +
                "					FROM 	packing_slip_material_receive ps      \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno      \n" +
                "							AND ps.isDeleted = 0  )      \n" +
                "				end                          \n" +
                "				) refInvoiceNumber,                          \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN                          \n" +
                "							p.invoiceDate                          \n" +
                "						WHEN p.`receiptType` = 'C' THEN                          \n" +
                "							p.creditMemoDate                          \n" +
                "						ELSE                          \n" +
                "							p.debitMemoDate                          \n" +
                "					END) invoiceDate,                          \n" +
                "  \n" +
                "				null `description`,                          \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/            \n" +
                "                pd.paymentAmount extendedPrice,            \n" +
                "				0 discount,                          \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN                          \n" +
                "							'Invoice'                          \n" +
                "						WHEN p.`receiptType` = 'C' THEN                          \n" +
                "							'Credit Memo'                          \n" +
                "						ELSE                          \n" +
                "							'Debit Memo'                          \n" +
                "					END) receiptMemoType                          \n" +
                "			FROM packing_slip_material_receive p                          \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id                      \n" +
                "			WHERE /*p.isDeleted =0                          \n" +
                "			and*/ p.receiptType in ('I','C','D')                      \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)          \n" +
                "			/*and p.`status` = 'P'*/                      \n" +
                "			and pd.refPayementid = pPaymentID              \n" +
                "            order by invoiceDate, invoiceNumber;         \n" +
                "  \n" +
                "		SELECT concat(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,                    \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,                    \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, (select `name` from company_info where isDeleted = 0 ) companyName                          \n" +
                "		FROM customer_addresses cua                                                    \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                                                    \n" +
                "        join countrymst c ON c.countryID = cua.countryID                        \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;                                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4940,'2.00','V1','Sproc_GetCheckPrintAndRemittanceReport - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4940:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCompanyReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN            \n" +
                "	# Company detail for Report                          \n" +
                "	SELECT CONCAT('S & M Group, Inc. d/b/a,','<br/>',  \n" +
                "				(select `name` from company_info where isDeleted = 0) ,  \n" +
                "				'<br/>',cua.street1,'<br/>',cua.city,', ',cua.state,' ',cua.postcode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',cua.email,'<br/>','Phone: ',        \n" +
                "				cua.contact,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(cua.faxNumber,''))AS address,              \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
                "				'' AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,            \n" +
                "		ci.ein, ci.remittanceAddress             \n" +
                "	FROM customer_addresses cua                                  \n" +
                "	JOIN mfgcodemst cu ON cu.id = cua.customerId            \n" +
                "	JOIN company_info ci ON ci.mfgCodeId = cu.id                 \n" +
                "	LEFT JOIN countrymst c ON cua.countryID=c.countryID                                 \n" +
                "	WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1      \n" +
                "	 AND cua.isDeleted = 0 AND ci.isDeleted=0 AND cu.isDeleted=0;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4941,'2.00','V1','Sproc_GetCompanyReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4941:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(                                                                                                            \n" +
                "	IN pPackingSlipNumber VARCHAR(100)                                    \n" +
                ")  \n" +
                "BEGIN                                           \n" +
                "	DECLARE v_CountOfPSRecord INT;                                     \n" +
                "        DECLARE v_CountOfSIRecord INT;                                    \n" +
                "        DECLARE v_StringOfMFGCode VARCHAR(255);                                    \n" +
                "        DECLARE Status_Check TINYINT;                                    \n" +
                "	DECLARE vPackingSlipId INT;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;                                                                                                               \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error                                                        \n" +
                "	(                                                                                                              \n" +
                "		IsSuccess BOOLEAN,                                    \n" +
                "		Error VARCHAR(1000)                                       \n" +
                "	);                                                         \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord                                         \n" +
                "	FROM 	customer_packingslip                                         \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber                                      \n" +
                "			AND transType = 'P'                                      \n" +
                "			AND deletedAt IS NULL;                                        \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN                                        \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));                                        \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                        \n" +
                "	ELSE                                      \n" +
                "  \n" +
                "		SELECT 	refCustInvoiceID, GROUP_CONCAT(fullCustCode),`subStatus` ,id                            \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId                                      \n" +
                "		FROM 	(                                        \n" +
                "				SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(customerID) fullCustCode,`subStatus`,refCustInvoiceID                                        \n" +
                "				FROM 	customer_packingslip                                         \n" +
                "				WHERE 	packingSlipNumber = pPackingSlipNumber                                     \n" +
                "						AND transType = 'P'                                     \n" +
                "						AND isDeleted =0                                     \n" +
                "		) a;                                     \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */                              \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));                                        \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                        \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN                                    \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));                                        \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                     \n" +
                "			ELSE                                    \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');                                        \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                     \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,                            \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,                            \n" +
                "                customerID,                            \n" +
                "                    id AS packingSlipID,                            \n" +
                "                    poNumber, poDate,poRevision,                                  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,                            \n" +
                "                    packingSlipType,                       \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,                      \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,                                          \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,                            \n" +
                "                    shipToId, billToId ,                            \n" +
                "                    freeOnBoardId,salesCommissionTo,                            \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,                            \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  						                          \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,                            \n" +
                "                    contactPersonId,                            \n" +
                "                    intermediateShipmentId ,                            \n" +
                "                    billingAddress,                            \n" +
                "                    shippingAddress,                            \n" +
                "                    intermediateAddress,                      \n" +
                "                    packingSlipComment,              \n" +
                "                    headerComment,      \n" +
                "                    revision packingSlipVersion      \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber                                     \n" +
                "						AND transType = 'P'                                    \n" +
                "						AND isDeleted = 0 ;                                       \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,        \n" +
                "						cpd.refSalesorderDetid,        \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,        \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,        \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,        \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,        \n" +
                "                        cpd.partId,cpd.refChargesTypeID,                                  \n" +
                "					(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,                                \n" +
                "						cpd.shipQty,        \n" +
                "						IF(cp.packingSlipType = 2 ,sod.price, cpd.unitPrice) unitPrice,              \n" +
                "						cpd.assyDescription,              \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,              \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,              \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,                        \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,                        \n" +
                "						(IFNULL(cpd.shipQty,0)* IF(cp.packingSlipType = 2 ,sod.price,IFNULL(cpd.unitPrice,0))) extPrice,                         \n" +
                "						cpd.otherCharges AS lineOtherCharges,                                \n" +
                "						0 totalExtPrice ,             \n" +
                "						1 isFromPackingSlip,            \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) quoteFrom,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,            \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,            \n" +
                "						(CASE 	WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 1 THEN 'From RFQ'         \n" +
                "								WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 3 THEN 'N/A'         \n" +
                "                                WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 2 THEN 'From Part Master' ELSE '' END) quoteFromText             \n" +
                "				 FROM customer_packingslip_det cpd         \n" +
                "                 LEFT JOIN customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and cp.isDeleted = 0  and cp.transType = 'P'      \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0        \n" +
                "                 WHERE cpd.isDeleted=0                        \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber      \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;                                   \n" +
                "  \n" +
                "                -- get other charges                        \n" +
                "                -- 1, Every 2 First 3 Last                        \n" +
                "			  SELECT dtl.refCustPackingSlipID ,                         \n" +
                "					 dtl.refSalesorderDetid,                                             \n" +
                "                     dtl.remainingQty,                         \n" +
                "                     sother.partID,                        \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,                        \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,                        \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,                         \n" +
                "                     sother.price ,                         \n" +
                "                     sother.qty,                        \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,                          \n" +
                "                     sother.frequency,           \n" +
                "                      sother.lineComment,           \n" +
                "                       sother.lineInternalComment,                        \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'                                                                                                           \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'                                 \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'                                 \n" +
                "							ELSE ''                                                                       \n" +
                "						END) AS frequencyName                           \n" +
                "				FROM (                        \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM                \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,                        \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'                        \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'                        \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'                         \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency                         \n" +
                "						FROM (                        \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,                         \n" +
                "								cpd2.remainingQty,cpd2.shippingId,                           \n" +
                "                                cpd2.partID,                        \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex                        \n" +
                "							FROM customer_packingslip_det cpd1                         \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0                        \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId                        \n" +
                "                            AND cpd1.isDeleted = 0                        \n" +
                "						) AS a                \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency                       \n" +
                "				) AS dtl                        \n" +
                "				JOIN salesorder_otherexpense_details sother                         \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0                        \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)                         \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;                        \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number                            \n" +
                "                SELECT trackNumber                             \n" +
                "                FROM customer_packing_slip_track_number                            \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId                            \n" +
                "                AND isDeleted = 0;                            \n" +
                "			END IF;                                    \n" +
                "	END IF;                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4942,'2.00','V1','Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4942:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_supplier_mapping_mst`;  \n" +
                "CREATE TRIGGER `TRG_AI_supplier_mapping_mst` AFTER INSERT ON `supplier_mapping_mst` FOR EACH ROW BEGIN    \n" +
                "	SELECT mfgtype,iscustordisty INTO @mfgtype,@iscustordisty FROM mfgcodemst WHERE id=NEW.supplierid;    \n" +
                "  \n" +
                "	IF @mfgtype='DIST' THEN      \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "		VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Added Manufacturer Mapping',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgcodemstid) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	ELSE     \n" +
                "		IF @iscustordisty=1 THEN    \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "			VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Added Customer Mapping',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgcodemstid) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_supplier_mapping_mst`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_AU_supplier_mapping_mst` AFTER UPDATE ON `supplier_mapping_mst` FOR EACH ROW BEGIN    \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN      \n" +
                "		SELECT mfgtype,iscustordisty INTO @mfgtype,@iscustordisty FROM mfgcodemst WHERE id=NEW.supplierid;    \n" +
                "		IF @mfgtype='DIST' THEN      \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "			VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Manufacturer Mapping',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgcodemstid) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "		ELSE      \n" +
                "			IF @iscustordisty=1 THEN    \n" +
                "				INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "				VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Customer Mapping',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgcodemstid) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "			END IF;     \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_invalid_mfgmappingmst`;  \n" +
                "CREATE TRIGGER `Trg_AI_invalid_mfgmappingmst` AFTER INSERT ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN        \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "	VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Added Map Manufacturer',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgCodeID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_invalid_mfgmappingmst`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_AU_invalid_mfgmappingmst` AFTER UPDATE ON `invalid_mfgmappingmst` FOR EACH ROW BEGIN        \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)        \n" +
                "        VALUES('INVALIDMFGMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Map Manufacturer',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgCodeID) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4943,'2.00','V1',' Update trigger and sp for MFR-customer-supplier page history related - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4943:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_who_bought_who`;  \n" +
                "CREATE TRIGGER `Trg_AI_who_bought_who` AFTER INSERT ON `who_bought_who` FOR EACH ROW BEGIN    \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "	VALUES('WHOBOUGHTWHO',CAST(NEW.id AS CHAR),'Acquired',CAST(fun_getMfgCodeAndNameByID(NEW.buyTo) AS CHAR), CAST(fun_getMfgCodeAndNameByID(NEW.buyBy) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId),    \n" +
                "	('WHOBOUGHTWHO',CAST(NEW.id AS CHAR),'Acquisition Date',NULL, CAST(NEW.buyDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);   \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_who_bought_who`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_AU_who_bought_who` AFTER UPDATE ON `who_bought_who` FOR EACH ROW BEGIN    \n" +
                "    IF IFNULL(OLD.buyDate,0) != IFNULL(NEW.buyDate,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('WHOBOUGHTWHO',CAST(NEW.id AS CHAR),'Acquisition Date',CAST(OLD.buyDate AS CHAR), CAST(NEW.buyDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);     \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_mfgcodealias`;  \n" +
                "CREATE TRIGGER `Trg_AI_mfgcodealias` AFTER INSERT ON `mfgcodealias` FOR EACH ROW BEGIN       \n" +
                "    DECLARE v_serialNumber   VARCHAR(20);      \n" +
                "    DECLARE v_custSerialNumber VARCHAR(20) DEFAULT NULL;      \n" +
                "    SELECT mfgtype,iscustordisty,systemID,customerSystemID INTO @mfgtype,@iscustordisty,@systemID,@customerSystemID FROM mfgcodemst WHERE id=new.mfgcodeid;      \n" +
                "    IF(@systemID IS NULL)THEN      \n" +
                "    IF(@mfgtype='DIST')THEN      \n" +
                "    SELECT CONCAT('SUP',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber        \n" +
                "         FROM identity WHERE `type`='SupplierSystemID';      \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='SupplierSystemID';      \n" +
                "    ELSE      \n" +
                "    SELECT CONCAT('MFR',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber      \n" +
                "         FROM identity WHERE `type`='MFRSystemID';      \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='MFRSystemID';      \n" +
                "    END IF;      \n" +
                "    UPDATE mfgcodemst        \n" +
                "        SET systemID=  v_serialNumber      \n" +
                "	  WHERE id = new.mfgcodeid;       \n" +
                "    END IF;      \n" +
                "    IF(@mfgtype<>'DIST' AND @iscustordisty=1 AND @customerSystemID IS NULL)THEN      \n" +
                "    SELECT mfgcode INTO @v_mfgcode FROM mfgcodemst WHERE iscompany=1 ;      \n" +
                "    SELECT CONCAT(@v_mfgcode,'C',LPAD(`maxvalue`,5,'0'))  INTO v_custSerialNumber        \n" +
                "         FROM identity WHERE `type`='CustSystemID';      \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustSystemID';      \n" +
                "  \n" +
                "         UPDATE mfgcodemst        \n" +
                "        SET customerSystemID = v_custSerialNumber      \n" +
                "	  WHERE id = new.mfgcodeid;        \n" +
                "    END IF;      \n" +
                "  \n" +
                "    INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "	VALUES('MFGCODEALIAS',CAST(NEW.id AS CHAR),'Added Alias',NULL, CAST(NEW.alias AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodealias`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_AU_mfgcodealias` AFTER UPDATE ON `mfgcodealias` FOR EACH ROW BEGIN    \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN      \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)      \n" +
                "        VALUES('MFGCODEALIAS',CAST(NEW.id AS CHAR),'Removed Alias',CAST(OLD.alias AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);      \n" +
                "	END IF;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4944,'2.00','V1',' Update trigger and sp for MFR-customer-supplier page history related - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4944:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN          \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;       \n" +
                "    IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),      \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;         \n" +
                "    IF IFNULL(OLD.externalSupplierOrder,0) != IFNULL(NEW.externalSupplierOrder,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Supplier API Request Order',CAST(OLD.externalSupplierOrder AS CHAR), CAST(NEW.externalSupplierOrder AS CHAR),      \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)          \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),     \n" +
                "        CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4945,'2.00','V1',' Update trigger and sp for MFR-customer-supplier page history related - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4945:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_HistoryByTableName`;  \n" +
                "CREATE PROCEDURE `Sproc_HistoryByTableName`(      \n" +
                "	IN pID INT,      \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN precordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "    IN pTableName VARCHAR(255)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE vTimeZone VARCHAR(50);      \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;      \n" +
                "	SET @temp_Sproc_HistoryByTableName = CONCAT(\"SELECT      \n" +
                "		ID,      \n" +
                "        Tablename,      \n" +
                "        RefTransID,      \n" +
                "        Colname,      \n" +
                "        Oldval,      \n" +
                "        Newval,      \n" +
                "		fun_getUserNameByID(updatedBy) updatedby,      \n" +
                "		fun_getUserNameByID(createdBy) createdby,      \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,      \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,      \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt      \n" +
                "		FROM dataentrychange_auditlog WHERE (RefTransID='\",pID,\"' AND Tablename='\",pTableName,\"')      \n" +
                "	\");      \n" +
                "  \n" +
                "    /*This logic configure for supplier/manufacturer/customer page*/    \n" +
                "    IF pTableName = 'MFGCODEMST' THEN    \n" +
                "		SET @temp_Sproc_HistoryByTableName = CONCAT(@temp_Sproc_HistoryByTableName,    \n" +
                "			\"UNION    \n" +
                "			SELECT      \n" +
                "				ID,      \n" +
                "				Tablename,      \n" +
                "				RefTransID,      \n" +
                "				Colname,      \n" +
                "				Oldval,      \n" +
                "				Newval,      \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,      \n" +
                "				fun_getUserNameByID(createdBy) createdby,      \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,      \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt      \n" +
                "			FROM dataentrychange_auditlog     \n" +
                "            WHERE (RefTransID IN (SELECT id FROM mfgcodealias WHERE mfgcodeId='\",pID,\"')     \n" +
                "				AND Tablename='MFGCODEALIAS')      \n" +
                "  \n" +
                "			UNION    \n" +
                "			SELECT      \n" +
                "				ID,      \n" +
                "				Tablename,      \n" +
                "				RefTransID,      \n" +
                "				Colname,      \n" +
                "				Oldval,      \n" +
                "				Newval,      \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,      \n" +
                "				fun_getUserNameByID(createdBy) createdby,      \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,      \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt      \n" +
                "			FROM dataentrychange_auditlog     \n" +
                "            WHERE (RefTransID IN (SELECT id FROM who_bought_who WHERE buyTo='\",pID,\"')     \n" +
                "				AND Tablename='WHOBOUGHTWHO')     \n" +
                "  \n" +
                "            UNION    \n" +
                "			SELECT      \n" +
                "				ID,      \n" +
                "				Tablename,      \n" +
                "				RefTransID,      \n" +
                "				Colname,      \n" +
                "				Oldval,      \n" +
                "				Newval,      \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,      \n" +
                "				fun_getUserNameByID(createdBy) createdby,      \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,      \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt      \n" +
                "			FROM dataentrychange_auditlog     \n" +
                "            WHERE (RefTransID IN (SELECT id FROM supplier_mapping_mst WHERE supplierID='\",pID,\"')     \n" +
                "				AND Tablename='SUPPLIERMAPPINGMST')    \n" +
                "  \n" +
                "			UNION    \n" +
                "			SELECT      \n" +
                "				ID,      \n" +
                "				Tablename,      \n" +
                "				RefTransID,      \n" +
                "				Colname,      \n" +
                "				Oldval,      \n" +
                "				Newval,      \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,      \n" +
                "				fun_getUserNameByID(createdBy) createdby,      \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,      \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt      \n" +
                "			FROM dataentrychange_auditlog      \n" +
                "            WHERE (RefTransID IN (SELECT id FROM invalid_mfgmappingmst WHERE refmfgAliasID IN (SELECT id FROM mfgcodealias WHERE mfgcodeId='\",pID,\"'))  \n" +
                "				AND Tablename='INVALIDMFGMAPPINGMST')     \n" +
                "		\");    \n" +
                "    END IF;    \n" +
                "    IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";      \n" +
                "	END IF;     \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HistoryByTableName,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HistoryByTableName,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;     \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4946,'2.00','V1',' Update trigger and sp for MFR-customer-supplier page history related - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4946:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ImportCPNData`;  \n" +
                "CREATE PROCEDURE `Sproc_ImportCPNData`(           \n" +
                "	IN pcustomerID INT,          \n" +
                "	IN pUserID INT,      \n" +
                "	IN pUserRoleID INT      \n" +
                ")  \n" +
                "BEGIN             \n" +
                "	DECLARE mountingTypeID INT;      \n" +
                "	DECLARE functionalCategoryID INT;      \n" +
                "	DECLARE rohsStatusID INT;      \n" +
                "	DECLARE categoryID INT;      \n" +
                "	DECLARE partTypeID INT;      \n" +
                "	DECLARE statusID INT;      \n" +
                "	DECLARE mfgPNID INT;      \n" +
                "	DECLARE pEpicoreType VARCHAR(100);                     \n" +
                "	DECLARE vSerialNumer VARCHAR(8);               \n" +
                "	DECLARE maxDisplayOrder DECIMAL;             \n" +
                "	DECLARE mfgPID VARCHAR(500);                       \n" +
                "	DECLARE maxPartId INT;            \n" +
                "	DECLARE totCPN INT;          \n" +
                "	DECLARE pcustPN VARCHAR(100);          \n" +
                "	DECLARE pcustPart VARCHAR(100);          \n" +
                "	DECLARE pcustPNRev VARCHAR(100);                    \n" +
                "	DECLARE prefCPNPartID INT;                  \n" +
                "	DECLARE prefComponentIDs VARCHAR(5000);          \n" +
                "	DECLARE i INT DEFAULT 0;          \n" +
                "    DECLARE v_serialNumber varchar(20);    \n" +
                "    DECLARE v_message varchar(20);    \n" +
                "  \n" +
                "	SET categoryID = 2;                     \n" +
                "	SET partTypeID = 2;            \n" +
                "	SET rohsStatusID = 1;                   \n" +
                "  \n" +
                "	SELECT epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;             \n" +
                "	SELECT mfgCode, mfgType INTO @mfgCode, @mfgType FROM mfgcodemst WHERE id = pcustomerID;             \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;                     \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;                     \n" +
                "	SELECT id INTO statusID FROM component_partstatusmst WHERE `name`= 'Active';                     \n" +
                "	IF functionalCategoryID IS NULL THEN                     \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;                     \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId)                     \n" +
                "		VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pUserRoleID);                     \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;                     \n" +
                "	END IF;                     \n" +
                "  	IF mountingTypeID IS NULL THEN                     \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId)VALUES('CPN', 1, pUserID,pUserRoleID);                     \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;                     \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	SELECT COUNT(*) FROM t_CPNUploadDetails INTO totCPN;                  \n" +
                "	-- select * from t_CPNUploadDetails;          \n" +
                "	WHILE i < totCPN DO           \n" +
                "		SET prefCPNPartID = NULL;          \n" +
                "		SET prefComponentIDs = NULL;          \n" +
                "		SET pcustPart = NULL;          \n" +
                "		SET pcustPN = NULL;          \n" +
                "		SET pcustPNRev = NULL;          \n" +
                "		SELECT refCPNPartID, refComponentIDs, custPN, custPart, custPNRev          \n" +
                "		INTO prefCPNPartID, prefComponentIDs, pcustPN, pcustPart, pcustPNRev FROM t_CPNUploadDetails LIMIT i,1;             \n" +
                "  \n" +
                "		IF prefCPNPartID IS NULL THEN          \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , pcustPN);                     \n" +
                "			SET mfgPNID = NULL;                     \n" +
                "			SELECT d.id INTO mfgPNID FROM component d WHERE d.PIDCode = mfgPID AND d.isDeleted = 0 LIMIT 1;                     \n" +
                "			IF mfgPNID IS NULL THEN                 \n" +
                "				call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then    \n" +
                "																'MPNSystemID'    \n" +
                "															else 'SPNSystemID' end,    \n" +
                "														true);    \n" +
                "				  select systemID, message into v_serialNumber, v_message    \n" +
                "				  from temp_serialNumber;    \n" +
                "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,                     \n" +
                "					isCPN, isCustom, mfgCodeID, createdBy, createByRoleId,                    \n" +
                "					RoHSStatusID, mountingTypeID, functionalCategoryID, category,                     \n" +
                "					createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,updatedBy,updatedAt,updateByRoleId)                     \n" +
                "				VALUES (pcustPart, pcustPNRev, pcustPN, mfgPID, statusID,                     \n" +
                "					1,1,pcustomerID,pUserID, pUserRoleID,      \n" +
                "					rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,                     \n" +
                "					fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, v_serialNumber, -1, '-',pUserID,fun_DatetimetoUTCDateTime(), pUserRoleID);                     \n" +
                "				SELECT LAST_INSERT_ID() INTO maxPartId;          \n" +
                "				SELECT maxPartId;           	          \n" +
                "				CALL Sproc_SaveCustMFGPn(maxPartId,prefComponentIDs,puserID,pUserRoleID);		          \n" +
                "			ELSE          \n" +
                "				CALL Sproc_SaveCustMFGPn(mfgPNID,prefComponentIDs,puserID,pUserRoleID);          \n" +
                "			END IF;          \n" +
                "		ELSE          \n" +
                "			CALL Sproc_SaveCustMFGPn(prefCPNPartID,prefComponentIDs,puserID,pUserRoleID);          \n" +
                "			CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(prefCPNPartID, puserID,FALSE);          \n" +
                "		END IF;            \n" +
                "  \n" +
                "		SET i = i + 1;                  \n" +
                "	END WHILE;            \n" +
                "	SELECT pcustomerID;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "DROP PROCEDURE iF EXISTS `Sproc_RemoveMPNFromCPNMapping`;  \n" +
                "CREATE PROCEDURE `Sproc_RemoveMPNFromCPNMapping`(  \n" +
                "	IN prefCompID INT,  \n" +
                "	IN prefCPNID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT,  \n" +
                "    IN pDeleteRequest tinyint,  \n" +
                "    IN pDeleteMPNFrom tinyint,  \n" +
                "    IN preason varchar(1200)  \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "DECLARE vLiveInternalVersion INT;      \n" +
                "DECLARE vLiveInternalVersionMethod VARCHAR(50);      \n" +
                "DECLARE vLiveInternalVersionDateFormate VARCHAR(50);      \n" +
                "DECLARE vInternalVersion VARCHAR(100);     \n" +
                "DECLARE vMFGPN VARCHAR(100);     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "	BEGIN    \n" +
                "		ROLLBACK;    \n" +
                "		RESIGNAL;    \n" +
                "	END;    \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "	  BEGIN    \n" +
                "		ROLLBACK;    \n" +
                "		RESIGNAL;    \n" +
                "	END;    \n" +
                "	START TRANSACTION;      \n" +
                "	# get Internal version format   \n" +
                "		 SELECT  `values` INTO vLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "			IF vLiveInternalVersionMethod = \"P\" THEN      \n" +
                "				SELECT `values` INTO vInternalVersion FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';      \n" +
                "			ELSE      \n" +
                "				SELECT `values` INTO vLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';      \n" +
                "				IF vLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO vInternalVersion;      \n" +
                "				ELSE      \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO vInternalVersion;      \n" +
                "				END IF;      \n" +
                "			END IF;              \n" +
                "  \n" +
                "		SELECT IFNULL(k.liveInternalVersion, 0) INTO vLiveInternalVersion FROM component k WHERE k.id = prefCPNID;   \n" +
                "        SET vLiveInternalVersion  = vLiveInternalVersion  + 1;    \n" +
                "  \n" +
                "		SELECT  j.mfgPN INTO vMFGPN FROM component j WHERE j.id = prefCompID;    \n" +
                "        INSERT INTO rfq_assembly_history      \n" +
                "		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion,description, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)      \n" +
                "		VALUES (\"component\", prefCPNID, NULL,NULL, prefCPNID, \"MFR PN\",  vMFGPN ,NULL, CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR)),  \n" +
                "        concat('Delete Request From: ',(case when pDeleteRequest = 1 then 'Internal Error' when pDeleteRequest = 2 then 'Customer Request' end), '<br/> Reason: ', preason),  \n" +
                "        fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);      \n" +
                "  \n" +
                "  \n" +
                "    UPDATE component    \n" +
                "	SET liveInternalVersion = vLiveInternalVersion, liveVersion = CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR))   \n" +
                "    WHERE id = prefCPNID;    \n" +
                "  \n" +
                "	# remove CPN entry from CPN mapping  \n" +
                "        update component_cust_alias_rev_pn  \n" +
                "        set isdeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "        where refComponentID = prefCompID and refCPNPartID = prefCPNID and isdeleted = 0;  \n" +
                "  \n" +
                "	# Manage History for Change   \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    if pDeleteMPNFrom = 1 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0  \n" +
                "        set rla.isMPNAddedinCPN = 0,  \n" +
                "			rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.updatedBy = pUserID,  \n" +
                "            rla.updateByRoleId = pRoleID  \n" +
                "        where rla.mfgPNID = prefCompID and rl.custPNID = prefCPNID and rla.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	elseif pDeleteMPNFrom = 2 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        Join  ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 )a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set rla.isDeleted = 1,  \n" +
                "			rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.deletedBy = pUserID,  \n" +
                "            rla.deleteByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount>1 and a.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		update rfq_lineitems_alternatepart rla  \n" +
                "        Join ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 ) a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set  \n" +
                "			rla.distributor = null, rla.distMfgCodeID = null, rla.distPN = null, rla.distMfgPNID = null, rla.mfgCode = null, rla.mfgCodeID = null,   \n" +
                "            rla.mfgPN = null, rla.mfgPNID = null, rla.description = null, rla.RoHSStatusID = null, rla.customerApproval = 'P',   \n" +
                "            rla.customerApprovalBy  = null, rla.customerApprovalDate = null, rla.badMfgPN = null, rla.userData1 = null, rla.userData2 = null,   \n" +
                "			rla.userData3 = null, rla.userData4 = null, rla.userData5 = null, rla.userData6 = null, rla.userData7 = null, rla.userData8 = null,   \n" +
                "            rla.userData9 = null, rla.userData10 = null, rla.updatedAt = fun_DatetimetoUTCDateTime(), rla.updatedBy  = pUserID, rla.updateByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount = 1 and rla.isdeleted = 0;  \n" +
                "  \n" +
                "	end if;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "Commit;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustMFGPn`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(    \n" +
                "IN prefCPNPartID INT,    \n" +
                "IN prefComponentIDs VARCHAR(5000),    \n" +
                "IN puserID int,    \n" +
                "IN pUserRoleID int    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);    \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);    \n" +
                "	DECLARE pCompanyName VARCHAR(100);    \n" +
                "	DECLARE pMFGPN VARCHAR(100);    \n" +
                "	DECLARE pLiveInternalVersion INT;    \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;    \n" +
                "	DECLARE i INT DEFAULT 0;              \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "	BEGIN    \n" +
                "		ROLLBACK;    \n" +
                "		RESIGNAL;    \n" +
                "	END;    \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "	  BEGIN    \n" +
                "		ROLLBACK;    \n" +
                "		RESIGNAL;    \n" +
                "	END;    \n" +
                "	START TRANSACTION;    */    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;    \n" +
                "	/*Generate Dummy data from string to row */    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;    \n" +
                "	CREATE TEMPORARY TABLE t_CustMFGPn( txt TEXT );    \n" +
                "	INSERT INTO t_CustMFGPn VALUES(prefComponentIDs);    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;    \n" +
                "	CREATE TEMPORARY TABLE temp_CustMFGPn( val CHAR(255) );    \n" +
                "	SET @SQL = CONCAT(\"insert into temp_CustMFGPn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_CustMFGPn), \",\", \"'),('\"),\"');\");    \n" +
                "	PREPARE stmt1 FROM @SQL;    \n" +
                "	EXECUTE stmt1;    \n" +
                "	-- SELECT DISTINCT(val) FROM temp_CustMFGPn;    \n" +
                "	/*Generate Dummy data from string to row */    \n" +
                "  \n" +
                "	-- SELECT mfgPN INTO pMFGPN FROM component WHERE id = prefCPNPartID;    \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = prefCPNPartID;    \n" +
                "	SET pLiveInternalVersion  = pLiveInternalVersion  + 1;    \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';    \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN    \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';    \n" +
                "	ELSE    \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';    \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN    \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;    \n" +
                "		ELSE    \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* add all mapping mfgPN history with internal version */    \n" +
                "	SELECT COUNT(*) FROM temp_CustMFGPn INTO totMFGPN;    \n" +
                "	WHILE i < totMFGPN DO    \n" +
                "	SET pMFGPN = NULL;    \n" +
                "	SELECT mfgPN INTO pMFGPN FROM component WHERE deletedAt IS NULL    \n" +
                "	AND id = (SELECT val FROM temp_CustMFGPn LIMIT i,1);    \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,    \n" +
                "						oldValue,newValue,changeVersion,createdAt,createdBy,createByRoleId)    \n" +
                "	VALUES 	(\"component\", prefCPNPartID, NULL,NULL, prefCPNPartID, \"MFG PN\",    \n" +
                "		NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)), fun_DatetimetoUTCDateTime(),puserID,pUserRoleID);    \n" +
                "	SET i = i + 1;    \n" +
                "	END WHILE;    \n" +
                "	/* update component live internal version */    \n" +
                "	UPDATE component    \n" +
                "	SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = prefCPNPartID;    \n" +
                "	/* add all mapping mfgPN against custpn */    \n" +
                "	INSERT INTO component_cust_alias_rev_pn(refComponentID,refCPNPartID,createdBy,createByRoleId)    \n" +
                "	SELECT DISTINCT(val) `refComponentID` , prefCPNPartID `refCPNPartID`, puserID `createdBy`,pUserRoleID    \n" +
                "	FROM temp_CustMFGPn ;    \n" +
                "	-- COMMIT;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN`;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN`(                     \n" +
                "	IN pPartID INT(11),                                                   \n" +
                "	IN pUserID INT(11)                  \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE totalCount INT DEFAULT 0;                      \n" +
                "	DECLARE totalCPNCount INT DEFAULT 0;                                    \n" +
                "	DECLARE currIndex INT DEFAULT 0;                    \n" +
                "	DECLARE currCPNIndex INT DEFAULT 0;                    \n" +
                "	DECLARE totalMFGPNCount INT DEFAULT 0;                                    \n" +
                "	DECLARE currMFGPNIndex INT DEFAULT 0;                     \n" +
                "	DECLARE currLineID INT;                                    \n" +
                "	DECLARE currPartID INT;                   \n" +
                "	DECLARE currMFGPNID INT;                   \n" +
                "	DECLARE currCustPNID INT;                   \n" +
                "	DECLARE countAlternatePart INT DEFAULT 0;                \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;                  \n" +
                "	DECLARE mfgPnIndex INT DEFAULT 0;                   \n" +
                "	DECLARE currMFGPN TEXT;                   \n" +
                "	DECLARE currCustMFGPNID INT;                  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);                        \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                      \n" +
                "	DECLARE pCompanyName VARCHAR(100);                             \n" +
                "	DECLARE pLiveInternalVersion INT(11);                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_update_bom_list;                 \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_update_bom_list (partId INT(11));     \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';                            \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN                        \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';                         \n" +
                "	ELSE                         \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';                         \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN                        \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;                        \n" +
                "		ELSE                         \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;                        \n" +
                "		END IF;                        \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS existBOMCPNResult AS                  \n" +
                "	SELECT  rl.id id,  rl.custPNID                  \n" +
                "	FROM rfq_lineitems AS rl                   \n" +
                "	WHERE partId = pPartID AND rl.isDeleted = 0 AND rl.custPNID IS NOT NULL;                 \n" +
                "  \n" +
                "	-- SELECT * FROM existBOMCPNResult;            \n" +
                "	SELECT COUNT(1) INTO totalCPNCount FROM existBOMCPNResult;                  \n" +
                "	IF totalCPNCount > 0 THEN                   \n" +
                "		WHILE currCPNIndex < totalCPNCount DO                     \n" +
                "		SELECT a.custPNID                  \n" +
                "			INTO 	currCustPNID                 \n" +
                "			FROM 	existBOMCPNResult a LIMIT currCPNIndex, 1;                 \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS existCPNResult AS                \n" +
                "		SELECT id , refComponentID FROM component_cust_alias_rev_pn                 \n" +
                "		WHERE refCPNPartID = currCustPNID AND isDeleted = 0 AND                 \n" +
                "		refComponentID NOT IN (                \n" +
                "			SELECT rla.mfgPNID FROM rfq_lineitems_alternatepart rla                 \n" +
                "			WHERE rla.partId = pPartID AND rla.rfqLineItemsID IN (                \n" +
                "				SELECT id FROM rfq_lineitems                 \n" +
                "				WHERE partId = pPartID AND custPNID = currCustPNID AND isDeleted = 0                \n" +
                "				)                 \n" +
                "			AND rla.isDeleted = 0);                \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS existBOMResult AS                  \n" +
                "		SELECT  rl.id id,  rl.partID                  \n" +
                "		FROM rfq_lineitems AS rl                   \n" +
                "		WHERE partId != pPartID AND rl.custPNID =  currCustPNID AND rl.isDeleted = 0 ;                  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO totalCount FROM existBOMResult;                  \n" +
                "		IF totalCount > 0 THEN                   \n" +
                "			WHILE currIndex < totalCount DO                                    \n" +
                "				SELECT  a.id,		a.partID                  \n" +
                "				INTO 	currLineID	,currPartID                  \n" +
                "				FROM 	existBOMResult a LIMIT currIndex, 1;                 \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS existAlternateResult AS                \n" +
                "				SELECT id, mfgPNID FROM rfq_lineitems_alternatepart rla                 \n" +
                "				WHERE rfqLineItemsID IN (                 \n" +
                "					SELECT id FROM rfq_lineitems                 \n" +
                "					WHERE partId = currPartID AND custPNID = currCustPNID                 \n" +
                "					AND isDeleted = 0                \n" +
                "					)                \n" +
                "				AND mfgPNID IN (SELECT refComponentID FROM existCPNResult) AND isDeleted = 0;                \n" +
                "  \n" +
                "				SET countAlternatePart = 0;                \n" +
                "				SELECT COUNT(1) INTO countAlternatePart FROM existAlternateResult;                  \n" +
                "  \n" +
                "				-- IF (countAlternatePart > 0) THEN                 \n" +
                "				-- 	CALL Sproc_UpdatePartInternalVersion (currPartID);                                   \n" +
                "				-- 	UPDATE rfq_lineitems_alternatepart SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existAlternateResult);                \n" +
                "				-- END IF;                \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE existAlternateResult;                 \n" +
                "				SET currIndex = currIndex + 1;                               \n" +
                "  \n" +
                "			END WHILE;                        \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		SET currCPNIndex = currCPNIndex + 1;                   \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;                      \n" +
                "		CREATE TEMPORARY TABLE t_CustMFGPn(cpnID INT(11),  txt TEXT );                \n" +
                "		INSERT INTO t_CustMFGPn(cpnID, txt)               \n" +
                "		SELECT cpn.refCPNPartID, GROUP_CONCAT(c.mfgPN SEPARATOR ', ') FROM component_cust_alias_rev_pn cpn              \n" +
                "		JOIN component c ON c.id = cpn.refComponentID              \n" +
                "		WHERE cpn.deletedAt IS NULL AND cpn.id IN (SELECT id FROM existCPNResult) GROUP BY refCPNPartID;              \n" +
                "  \n" +
                "		/* add all mapping mfgPN history with internal version */                  \n" +
                "		SELECT COUNT(*) FROM t_CustMFGPn INTO totMFGPN;                  \n" +
                "  \n" +
                "		WHILE mfgPnIndex < totMFGPN DO                   \n" +
                "  \n" +
                "		SELECT  a.txt,		a.cpnID                  \n" +
                "		INTO 	currMFGPN	,currCustMFGPNID                  \n" +
                "		FROM 	t_CustMFGPn a LIMIT mfgPnIndex, 1;                 \n" +
                "  \n" +
                "		SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = currCustMFGPNID;                   \n" +
                "		SET pLiveInternalVersion  = pLiveInternalVersion  + 1;           		                    \n" +
                "  /*  \n" +
                "		INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                        \n" +
                "							oldValue,newValue,description, changeVersion,createdAt,createdBy)                                         \n" +
                "		VALUES 	(\"component\", currCustMFGPNID, NULL,NULL, currCustMFGPNID, \"MFG PN\",                                        \n" +
                "			NULL, NULL ,CONCAT(\"MFG PN \",currMFGPN, \" Deleted\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) , fun_DatetimetoUTCDateTime(),puserID);                    \n" +
                "  \n" +
                "		UPDATE component                   \n" +
                "		SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = currCustMFGPNID;                        \n" +
                "  */  \n" +
                "		SET mfgPnIndex = mfgPnIndex + 1;                  \n" +
                "		END WHILE;                  \n" +
                "  \n" +
                "		-- UPDATE component_cust_alias_rev_pn SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existCPNResult);                \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE t_CustMFGPn;                \n" +
                "		DROP TEMPORARY TABLE existBOMResult;                  \n" +
                "		DROP TEMPORARY TABLE existCPNResult;                  \n" +
                "  \n" +
                "		-- INSERT INTO temp_component_update_bom_list     \n" +
                "		-- values EXECUTE Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);    \n" +
                "  \n" +
                "		CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID,FALSE);       \n" +
                "		INSERT INTO temp_component_update_bom_list(partId) SELECT partId FROM temp_component_update_bom;          \n" +
                "		END WHILE;            \n" +
                "		SELECT DISTINCT * FROM temp_component_update_bom_list;       \n" +
                "  \n" +
                "	END IF;                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponetCustAliasRevPN`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponetCustAliasRevPN`(                  \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN prefComponentCustAliasRevID VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "	SET @temp_Sproc_GetComponetCustAliasRevPN = CONCAT(\"    \n" +
                "       SELECT co.id, co.id as refComponentID, co.mfgPN,mfg.mfgCode,co.restrictUsePermanently, co.isCustom,co.pidCode,    \n" +
                "			co.restrictUSEwithpermission  , ro.rohsIcon , ro.name AS `rohsComplientConvertedValue`,    \n" +
                "            co.mfgPNDescription,    \n" +
                "            fun_getUserNameByID(co.createdBy) createdby,    \n" +
                "            fun_getRoleByID(co.createByRoleId) createdbyRole,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt    \n" +
                "		FROM component co    \n" +
                "        Inner JOIN mfgcodemst mfg ON mfg.id= co.mfgcodeID AND mfg.isDeleted = 0    \n" +
                "		Inner JOIN rfq_rohsmst ro ON ro.id = co.RoHSStatusID AND ro.isDeleted = 0    \n" +
                "		Inner Join rfq_partcategory pc on pc.id = co.partType    \n" +
                "		WHERE co.isDeleted = 0    \n" +
                "		AND co.id = \" , prefComponentCustAliasRevID ,\"    \n" +
                "		Union all    \n" +
                "		SELECT car_pn.id ,car_pn.refComponentID,comp.mfgPN,mfg.mfgCode,comp.restrictUsePermanently, comp.isCustom,comp.pidCode,    \n" +
                "			comp.restrictUSEwithpermission  , ro.rohsIcon , ro.name AS `rohsComplientConvertedValue`,    \n" +
                "            comp.mfgPNDescription,    \n" +
                "            fun_getUserNameByID(car_pn.createdBy) createdby,    \n" +
                "            fun_getRoleByID(car_pn.createByRoleId) createdbyRole,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(car_pn.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt    \n" +
                "		FROM component_cust_alias_rev_pn car_pn    \n" +
                "			LEFT OUTER JOIN component comp ON comp.id=car_pn.refComponentID AND IFNULL(comp.isDeleted,0)=0    \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=comp.mfgcodeID AND IFNULL(mfg.isDeleted,0)=0    \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id = comp.RoHSStatusID AND ro.deletedAt IS NULL    \n" +
                "		WHERE IFNULL(car_pn.isDeleted,0)=0    \n" +
                "		AND car_pn.refCPNPartID = \" , prefComponentCustAliasRevID ,\"    \n" +
                "	\");    \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;    \n" +
                "	END IF;    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "	 /* to get total count of rows */    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponetCustAliasRevPN,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponetCustAliasRevPN,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query1 FROM @SQLStatement2;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4947,'2.00','V1','Bug 35041: QA Testing findings on #34040: CPN Master GUI Modification & give option to Delete MFR PN part from - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4947:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "update rfq_lineitems_errorcode  \n" +
                "set description = '<% MFR %> <% MPN %>, Part Status is <% Part Status %>',  \n" +
                "org_description = '<% MFR %> <% MPN %>, Part Status is <% Part Status %>'  \n" +
                "where errorCode = 'OBS';  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBomProgressBar`;  \n" +
                "CREATE FUNCTION `fun_getBomProgressBar`(            \n" +
                " pPartID INT            \n" +
                "	) RETURNS int  \n" +
                "BEGIN            \n" +
                "	DECLARE pValidCount INT;            \n" +
                "	DECLARE pTotalCount INT;            \n" +
                "	DECLARE pProgress INT;            \n" +
                "	SET pProgress = 0;            \n" +
                "	-- pTotal count            \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM rfq_lineitems l            \n" +
                "	WHERE l.partID = pPartID AND            \n" +
                "	l.isDeleted = 0;            \n" +
                "  \n" +
                "	 -- p valid count            \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM (            \n" +
                "			SELECT  l.id AS lineID,            \n" +
                "				max(CASE            \n" +
                "					WHEN            \n" +
                "						IFNULL(l.qpaDesignatorStep,1) = 1 AND            \n" +
                "						IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1 AND            \n" +
                "						IFNULL(l.customerApprovalForBuyStep,1) = 1 AND            \n" +
                "						IFNULL(l.dnpQPARefDesStep,1) = 1 AND                \n" +
                "						IFNULL(l.customerApprovalForDNPBuyStep,1) = 1 AND            \n" +
                "						IFNULL(l.customerApprovalForPopulateStep,1) = 1 AND            \n" +
                "						IFNULL(l.customerApprovalForDNPQPAREFDESStep,1) = 1 AND            \n" +
                "						IFNULL(l.duplicateCPNStep,0) = 1 AND            \n" +
                "						IFNULL(l.restrictCPNUseInBOMStep,0) = 0 AND            \n" +
                "						IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1 AND            \n" +
                "						IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1 AND            \n" +
                "						IFNULL(l.requireFunctionalTypeStep,0) = 1 AND            \n" +
                "						IFNULL(l.requireMountingTypeStep,0) = 1 AND            \n" +
                "						IFNULL(p.mfgVerificationStep,0) = 1 AND            \n" +
                "						IFNULL(p.mfgDistMappingStep,0) = 1 AND            \n" +
                "						IFNULL(p.mfgCodeStep,0) = 1 AND            \n" +
                "						IFNULL(p.distVerificationStep,0) = 1 AND            \n" +
                "						IFNULL(p.distCodeStep,0) = 1 AND            \n" +
                "						IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND            \n" +
                "						IFNULL(p.mfgPNStep,0) = 1 AND            \n" +
                "						IFNULL(p.distPNStep,0) = 1 AND            \n" +
                "						IFNULL(p.distGoodPartMappingStep,0) = 1 AND            \n" +
                "						IFNULL(p.nonRohsStep,0) = 1 AND            \n" +
                "						IFNULL(p.epoxyStep,0) = 1  AND            \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND            \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND            \n" +
                "						(IFNULL(p.obsoletePartStep,0) = 1 OR(IFNULL(p.obsoletePartStep,0) = 0 AND l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N'))) AND           \n" +
                "						#(IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND p.customerApproval = 'A')) AND            \n" +
                "		#				IFNULL(p.mismatchMountingTypeStep,0) = 1   AND           \n" +
                "                       (case when IFNULL(p.mismatchMountingTypeStep,0) = 1 or (IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(approvedMountingType,0) = 1)        \n" +
                "then 1 else 0 end)        \n" +
                " AND           \n" +
                "						(case when IFNULL(p.mismatchFunctionalCategoryStep,0) = 1 or (IFNULL(p.mismatchFunctionalCategoryStep,0) = 0 and ifnull(approvedMountingType,0) = 1)        \n" +
                "then 1 else 0 end)        \n" +
                " AND           \n" +
                "						IFNULL(p.invalidConnectorTypeStep,0) = 1   AND            \n" +
                "						IFNULL(p.mismatchNumberOfRowsStep,0) = 1   AND            \n" +
                "						IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1   AND            \n" +
                "						IFNULL(p.tbdPartStep,0) = 1   AND            \n" +
                "						IFNULL(p.mismatchColorStep,0) = 1   AND            \n" +
                "						IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND            \n" +
                "						IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND            \n" +
                "						p.restrictUseExcludingAliasStep = 1   AND            \n" +
                "						p.restrictUseExcludingAliasWithPermissionStep = 1  AND            \n" +
                "						IFNULL(p.pickupPadRequiredStep,0) = 1   AND            \n" +
                "						IFNULL(p.matingPartRquiredStep,0) = 1    AND            \n" +
                "						IFNULL(p.driverToolsRequiredStep,0) = 1   AND            \n" +
                "						IFNULL(p.functionalTestingRequiredStep,0) = 1    AND            \n" +
                "						IFNULL(p.uomMismatchedStep,0) = 1   AND            \n" +
                "						IFNULL(p.programingRequiredStep,1) = 1     AND            \n" +
                "						IFNULL(p.defaultInvalidMFRStep,0) = 1     AND            \n" +
                "						p.restrictUseInBOMStep = 0   AND            \n" +
                "						p.restrictUseInBOMWithPermissionStep = 0   AND            \n" +
                "						p.restrictUseInBOMExcludingAliasStep = 0   AND            \n" +
                "						p.restrictUseInBOMExcludingAliasWithPermissionStep = 0   AND            \n" +
                "						IFNULL(p.exportControlledStep,0) = 1   AND            \n" +
                "						IFNULL(p.unknownPartStep,0) = 1   AND            \n" +
                "						(IFNULL(p.customerApproval, 'A')  != 'P' AND IFNULL(suggestedGoodPartStep,1) != 0 AND (IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND (l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N' )))))AND            \n" +
                "						p.mismatchRequiredProgrammingStep = 1   AND            \n" +
                "						p.mappingPartProgramStep = 1   AND            \n" +
                "						 CASE WHEN (l.qpa IS NULL AND l.dnpQty IS NULL )OR ((l.qpa IS NULL OR l.qpa = 0)AND l.isPurchase)OR (l.uomID = -1 AND ((l.qpa IS NULL AND l.dnpQty IS NULL )OR (l.refDesig IS NULL AND l.dnpDesig IS NULL))) THEN FALSE ELSE TRUE END            \n" +
                "						-- CASE WHEN l.qpa IS NULL OR (l.uomID = -1 AND (l.qpa IS NULL  OR l.refDesig IS NULL)) THEN FALSE ELSE TRUE END            \n" +
                "					THEN 1            \n" +
                "					ELSE 0            \n" +
                "				END) AS ProgressCount            \n" +
                "				FROM rfq_lineitems l            \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id AND p.partID = pPartID            \n" +
                "				WHERE l.partID = pPartID AND p.mfgPNID IS NOT NULL            \n" +
                "                AND IFNULL(suggestedGoodPartStep,1) = 1            \n" +
                "				AND l.isDeleted = 0 AND p.isDeleted = 0            \n" +
                "				GROUP BY l.lineID              \n" +
                "		) AS b            \n" +
                "		WHERE b.ProgressCount=1;            \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN            \n" +
                "		SET pProgress = 0;            \n" +
                "	ELSE            \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);            \n" +
                "	END IF;            \n" +
                "	RETURN pProgress;            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4948,'2.00','V1','Bug 35035: UI->BOM: Need to change the validation message for Parts which having Part Status other than Active. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4948:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SupplierQuoteCopy;  \n" +
                "CREATE PROCEDURE `Sproc_SupplierQuoteCopy`(                                                    \n" +
                "	IN pSupplierQuoteID INT(11),                                                    \n" +
                "	IN pSupplierQuotePartDetID INT(11),      \n" +
                "    IN pNewQuoteNumber VARCHAR(50),      \n" +
                "	IN pNewQuoteDate DATE,      \n" +
                "    IN pNewReferences VARCHAR(255),      \n" +
                "    IN pUserId INT(11)      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE V_EXIST INT;	          \n" +
                "    DECLARE V_INSERTEDSQID INT;      \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION          \n" +
                "BEGIN          \n" +
                "	ROLLBACK;          \n" +
                "	RESIGNAL;          \n" +
                "END;          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING          \n" +
                "  BEGIN          \n" +
                "	ROLLBACK;          \n" +
                "	RESIGNAL;          \n" +
                "END;          \n" +
                "    START TRANSACTION;        \n" +
                "    IF(pSupplierQuotePartDetID IS NOT NULL) THEN      \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		SELECT pSupplierQuoteID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()       \n" +
                "		FROM supplier_quote_parts_det sqpd      \n" +
                "		WHERE sqpd.id = pSupplierQuotePartDetID AND sqpd.deletedAt IS NULL;      \n" +
                "  \n" +
                "		SET V_INSERTEDSQID = LAST_INSERT_ID();       \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		SELECT V_INSERTEDSQID,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()       \n" +
                "		FROM supplier_quote_part_attribute sqpa      \n" +
                "		WHERE sqpa.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpa.deletedAt IS NULL;      \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		SELECT V_INSERTEDSQID,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()       \n" +
                "		FROM supplier_quote_part_price sqpp      \n" +
                "		WHERE sqpp.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpp.deletedAt IS NULL;      \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()       \n" +
                "		FROM supplier_quote_part_price_attribute sqppa			       \n" +
                "		JOIN       \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber      \n" +
                "		FROM supplier_quote_part_price sqp       \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL       \n" +
                "		WHERE sqpd.id=pSupplierQuotePartDetID AND sqp.deletedAt IS NULL      \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID      \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp       \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL       \n" +
                "		WHERE sqpd.id=V_INSERTEDSQID AND sqp.deletedAt IS NULL) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber      \n" +
                "		WHERE sqppa.deletedAt IS NULL;										      \n" +
                "   ELSE        		      \n" +
                "		 INSERT INTO supplier_quote_mst(supplierID,quoteNumber,quoteDate,quoteStatus,`reference`,shippingAddressID,billingAddressID,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		 SELECT supplierID,pNewQuoteNumber,pNewQuoteDate,\"D\",pNewReferences,shippingAddressID,billingAddressID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_mst WHERE id=pSupplierQuoteID AND deletedAt IS NULL;      \n" +
                "  \n" +
                "		 SET V_INSERTEDSQID = LAST_INSERT_ID();       \n" +
                "		 INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		 SELECT V_INSERTEDSQID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_parts_det sqpd WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqpd.deletedAt IS NULL;      \n" +
                "  \n" +
                "		 INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)                  \n" +
                "		 SELECT sqpdNew.id,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()        \n" +
                "		 FROM supplier_quote_part_attribute sqpa       \n" +
                "		 JOIN supplier_quote_parts_det sqpdOld ON sqpa.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL      \n" +
                "		 JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL      \n" +
                "		 WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpa.deletedAt IS NULL;      \n" +
                "  \n" +
                "		 INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		SELECT sqpdNew.id,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()       \n" +
                "		FROM supplier_quote_part_price sqpp			       \n" +
                "		JOIN supplier_quote_parts_det sqpdOld ON sqpp.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL      \n" +
                "		JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL			      \n" +
                "		WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpp.deletedAt IS NULL;      \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)      \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()       \n" +
                "		FROM supplier_quote_part_price_attribute sqppa			       \n" +
                "		JOIN       \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber      \n" +
                "		FROM supplier_quote_part_price sqp       \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL       \n" +
                "		WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqp.deletedAt IS NULL      \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID      \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp       \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL       \n" +
                "		WHERE sqpd.supplierQuoteMstID=V_INSERTEDSQID AND sqp.deletedAt IS NULL) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber      \n" +
                "		WHERE sqppa.deletedAt IS NULL;							      \n" +
                "  \n" +
                "	END IF;	                   \n" +
                "    COMMIT;  \n" +
                "    SELECT V_INSERTEDSQID;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4949,'2.00','V1',' Bug 34984: - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4949:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckUsedPartInTransaction`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckUsedPartInTransaction`(        \n" +
                "	IN pPartId INT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	-- Sales Order Data ('In Progress' Status)        \n" +
                "	select         \n" +
                "			sod.refSalesOrderID as refId        \n" +
                "            ,sdm.salesOrderNumber  as transNumber        \n" +
                "            ,'SO' tranctionType        \n" +
                "            ,'' cancellationConfirmPending        \n" +
                "    from salesorderdet as sod        \n" +
                "		join salesordermst sdm on sdm.id = sod.refSalesOrderID and sod.isDeleted = 0        \n" +
                "        where        \n" +
                "        sod.partID = pPartId and (sod.isCancle = 0 and sod.salesOrderDetStatus = 1) and sod.isDeleted = 0        \n" +
                "	UNION ALL        \n" +
                "    -- Material Receipt Data ('Not Paid' Status & Not Generated Invoice )        \n" +
                "	select 	psm.id as refId        \n" +
                "            ,psm.packingSlipNumber as transNumber        \n" +
                "            ,'PS' tranctionType	         \n" +
                "            ,'' cancellationConfirmPending        \n" +
                "	from packing_slip_material_receive as psm         \n" +
                "		join packing_slip_material_receive_det as psd on  psd.refPackingSlipMaterialRecID = psm.id and psd.isDeleted = 0      \n" +
                "		left join packing_slip_material_receive ird on ird.id = psm.refPackingSlipNumberForInvoice and ird.isDeleted = 0    \n" +
                "	where psd.partID = pPartId and psm.isDeleted = 0 AND psm.receiptType = 'P' AND IFNULL(ird.status, '') != 'P'  \n" +
                "    UNION ALL        \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )        \n" +
                "	select	 pm.id as refId        \n" +
                "			,pm.poNumber as transNumber        \n" +
                "            ,'PO' tranctionType	         \n" +
                "            ,'' cancellationConfirmPending        \n" +
                "    from purchase_order_mst as pm  \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID and pd.isDeleted = 0       \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id and pld.isDeleted = 0    \n" +
                "	where pm.poWorkingStatus = 'P' and pd.mfgPartID = pPartId        \n" +
                "    group by pm.id,pm.poNumber         \n" +
                "    -- Purchase Order Data ('P - Open' Status & Not Generated Invoice )        \n" +
                "    UNION ALL        \n" +
                "	select	 pm.id as refId        \n" +
                "			,pm.poNumber as transNumber        \n" +
                "            ,'PO' tranctionType	         \n" +
                "            ,pm.poWorkingStatus cancellationConfirmPending        \n" +
                "    from purchase_order_mst as pm         \n" +
                "	join purchase_order_det pd on pm.id = pd.refPurchaseOrderID and pd.isDeleted = 0     \n" +
                "    join purchase_order_line_release_det pld on pld.refPurchaseOrderDetID = pd.id and pld.isDeleted = 0    \n" +
                "	where pm.poWorkingStatus = 'CA' and pm.cancellationConfirmed = 0 and pd.mfgPartID = pPartId        \n" +
                "    group by pm.id,pm.poNumber,pm.poWorkingStatus;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4950,'2.00','V1',' Bug 34984: - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4950:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "update rfq_lineitems_errorcode  \n" +
                "set description = replace(description, 'Advise', 'advice'),  \n" +
                "description = replace(description, 'advise', 'advice'),  \n" +
                "org_description = replace(org_description, 'Advise', 'advice'),  \n" +
                "org_description = replace(org_description, 'advise', 'advice')  \n" +
                "where (`description` like '%advise%') or  \n" +
                "(`org_description` like '%advise%');  \n" +
                /* **************************** Add Script Version -> 05-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4951,'2.00','V1','Bug 35062: BOM-> Supplier API Error pop-up : After click on source DK , navigates on NULL URL - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4951:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(              \n" +
                "    IN pWhereClause VARCHAR(16383),              \n" +
                "    IN puserID VARCHAR(50),      \n" +
                "    IN pnickName VARCHAR(20),            \n" +
                "    IN pprefix VARCHAR(20),              \n" +
                "    IN pIsFromUID TINYINT,              \n" +
                "    IN pComponentID INT,              \n" +
                "    IN pCustomerID INT,              \n" +
                "    IN pCPN BOOL,              \n" +
                "    IN pMFGAvailabel BOOL,              \n" +
                "    IN pRefCpnMfgID INT,              \n" +
                "    IN pAssyID INT,              \n" +
                "    IN pSalesOrderDetailID INT,              \n" +
                "    IN pReceiveMaterialType VARCHAR(255),              \n" +
                "    IN pkitAssemblyID INT,              \n" +
                "    IN pBarcodeID INT,              \n" +
                "    IN pBOMLineID INT,              \n" +
                "    IN pSupplierID INT,              \n" +
                "    IN pCategory VARCHAR(2),              \n" +
                "    IN pInventoryType VARCHAR(2),              \n" +
                "    IN pCallFrom VARCHAR(50),          \n" +
                "    IN pExcludeStatus INT          \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;              \n" +
                "	DECLARE v_delimiter VARCHAR(10);              \n" +
                "	DECLARE v_length INT;              \n" +
                "	DECLARE v_fieldType INT;              \n" +
                "	DECLARE v_entityId INT;              \n" +
                "	DECLARE v_dataElementId INT;              \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);              \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);              \n" +
                "	DECLARE strLabel VARCHAR(2000);              \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);               \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE DynamicField VARCHAR(100);              \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';              \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');              \n" +
                "	DECLARE plen,slen INT;              \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;              \n" +
                "	DECLARE pbr_Separator VARCHAR(50);              \n" +
                "	DECLARE barcode_type_id INT;              \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);              \n" +
                "	DECLARE UpdateValue VARCHAR(16383);              \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';              \n" +
                "	DECLARE v_SupplierID INT;              \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);              \n" +
                "	DECLARE v_barcode_id INT;              \n" +
                "	DECLARE v_barcode_count INT;              \n" +
                "	DECLARE v_NumberOfPart INT;              \n" +
                "	DECLARE v_rfqLineItemsID INT;              \n" +
                "	DECLARE v_componentCount INT;              \n" +
                "	DECLARE v_componentId INT;              \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);              \n" +
                "	DECLARE v_partMFG INT;              \n" +
                "	DECLARE v_isGoodPart TINYINT;              \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;              \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;              \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;              \n" +
                "	DECLARE v_isInstall TINYINT;              \n" +
                "	DECLARE v_isBOMLineClean TINYINT;              \n" +
                "	DECLARE v_BOMLineId INT;              \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;              \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;              \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;              \n" +
                "	DECLARE v_PIDCode VARCHAR(110);              \n" +
                "	DECLARE v_isPurchase TINYINT;              \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);              \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);              \n" +
                "	DECLARE v_BOMLineCount INT;              \n" +
                "	DECLARE v_AlternateLineId INT;              \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);              \n" +
                "	DECLARE v_BOMAssyId INT;              \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);              \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;              \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;              \n" +
                "	DECLARE v_isCPNFlag TINYINT;              \n" +
                "	DECLARE v_dateCodeFormatID INT;              \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);              \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);              \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;              \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;                                        \n" +
                "	DECLARE v_MFRList VARCHAR(10000);                                      \n" +
                "	DECLARE v_barcode_status INT;                                      \n" +
                "	DECLARE v_category INT;                                      \n" +
                "	DECLARE v_partType INT;                          \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;	                                        \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;                                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                 \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                \n" +
                "	(                                \n" +
                "		errorText LONGTEXT,                                \n" +
                "		IsSuccess VARCHAR (2),                      \n" +
                "		MFGPart VARCHAR(10000)                                     \n" +
                "	);      \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */                \n" +
                "	IF (pCategory = 'P') THEN                                    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;                                 \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive                                    \n" +
                "		(                                             \n" +
                "			scanlabel VARCHAR(1000),                                    \n" +
                "			poNumber VARCHAR(100),                                \n" +
                "			supplierSONumber VARCHAR(100),                              \n" +
                "			packingSlipNumber VARCHAR(50),                              \n" +
                "			invoiceNumber VARCHAR(50)                              \n" +
                "		);                                    \n" +
                "	ELSE /* Temp table for MFR */                                     \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                 \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                \n" +
                "		(                                \n" +
                "			refcompid INT,                                \n" +
                "			pkgQty DECIMAL(18,6),              \n" +
                "			dateCode VARCHAR(10),              \n" +
                "			lotCode VARCHAR(255),              \n" +
                "			scanlabel VARCHAR(1000),              \n" +
                "			createdBy VARCHAR(255),              \n" +
                "			uid VARCHAR(14),              \n" +
                "			prefix VARCHAR(20),              \n" +
                "			nickName VARCHAR(50),              \n" +
                "			cpn TINYINT,              \n" +
                "			mfgAvailabel TINYINT,              \n" +
                "			refCPNMFGPNID INT,              \n" +
                "			customerID INT,              \n" +
                "			assyID INT,              \n" +
                "			salesOrderDetailID INT,              \n" +
                "			receiveMaterialType VARCHAR(255),              \n" +
                "			refSupplierPartId INT,                                                        \n" +
                "			mfrDateCode VARCHAR(50),                              \n" +
                "			poNumber VARCHAR(50),                                \n" +
                "			supplierSONumber VARCHAR(50),                              \n" +
                "			packingSlipNumber VARCHAR(50),                              \n" +
                "			invoiceNumber VARCHAR(50),                          \n" +
                "			binName VARCHAR(100),                          \n" +
                "			packaging VARCHAR(100),                          \n" +
                "			packingSlipDetailNickname VARCHAR(50)                          \n" +
                "		);                \n" +
                "  \n" +
                "		/* Temp table for data element value */                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                 \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                \n" +
                "		(                                \n" +
                "			entityid INT,              \n" +
                "			dataelementid INT,              \n" +
                "			`value` LONGTEXT,              \n" +
                "			createdBy VARCHAR(255)              \n" +
                "		);               \n" +
                "    END IF;                                        \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator                 \n" +
                "	# return error code              \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found              \n" +
                "	# 0: Barcode template does not exist, Please add template              \n" +
                "	# 1: Validation Clear              \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component              \n" +
                "	# 3: Mfgcode is not found              \n" +
                "	# 4: MFG PN does not exist              \n" +
                "	# 5: Multiple MFG PN found              \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code              \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly              \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer              \n" +
                "	# 9:  Multiple barcode template found.              \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check              \n" +
                "	# 11: MFG PN is incorrect part              \n" +
                "	# 12: PID PID1 was restricted part at part master level.              \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.              \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.              \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.              \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.              \n" +
                "	# 17: PID is contain more than 1 BOM line.              \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.              \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.              \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.              \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.              \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.              \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other              \n" +
                "  \n" +
                "	block1: BEGIN                               \n" +
                "   SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                                           \n" +
                "			/* Get barcode from labelstring */                \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status                                     \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                    \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                                 \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN                                      \n" +
                "				/* Get More than 1 barcode then give validation */                \n" +
                "				IF (v_barcode_count > 1) THEN                \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                                 \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                 \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);	                                \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                       \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                         \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                \n" +
                "				ELSE                   \n" +
                "					SET pBarcodeID = v_barcode_id;                \n" +
                "				END IF;                                       \n" +
                "			END IF;               \n" +
                "		ELSE                \n" +
                "			/* Get data from barcode id */                \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;                \n" +
                "		END IF;                                                                                                         \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */                \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN                     			                      \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);                               \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name                                     \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                \n" +
                "			SET pBarcodeID = v_barcode_id;                                                                          \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                              \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;                \n" +
                "			SET v_BarcodeType = '2D';                      \n" +
                "		ELSE /* barcode 1D */                                                                   \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                               \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;                                                                 \n" +
                "			SET v_BarcodeType = '1D';                   \n" +
                "		END IF;                 \n" +
                "	END block1;                                                                      \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */                \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                \n" +
                "		block2: BEGIN                                                  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                             \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;                         \n" +
                "			-- declare exit loop if data not found                                \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                \n" +
                "			-- if any record match found than  check for delimiter and its value                           \n" +
                "			IF (pbr_template_ID > 0) THEN                                \n" +
                "				-- create temporary table for deliemeter and component dataelement                                \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                \n" +
                "					pentityId INT,                                \n" +
                "					pdataElementId INT,                                \n" +
                "					pdelimiter_value VARCHAR(200)                                \n" +
                "				);                           \n" +
                "				-- create temporary table for separator string values                                \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;			                                \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                      \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength                                     \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;                     \n" +
                "				-- open cursor                                \n" +
                "				OPEN barcodeMatch_cursor;                           \n" +
                "				-- set str label as whereclause                              \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter                            \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "				-- if prefix is found than remove those from actual string match                                \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN		                                \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));              \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));              \n" +
                "				 END IF;                               \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                 \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                \n" +
                "				 END IF;	                                                                                            \n" +
                "				-- insert all values after seprator split                        \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                                    				                            \n" +
                "				PREPARE stmt1 FROM @SQL;                                \n" +
                "				EXECUTE stmt1;                                               \n" +
                "				DEALLOCATE PREPARE stmt1;                              \n" +
                "				IF (pCategory = 'P') THEN                                    \n" +
                "					-- create dynamic query to insert in packing slip                                \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';                                                    \n" +
                "				ELSE                                     \n" +
                "					-- create dynamic query to insert in recieving material                                \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                    \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                \n" +
                "				barcodeMatch_loop:LOOP                               \n" +
                "					-- get all five selected values                                \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                        \n" +
                "					-- exit loop if no record found for barcode match                                \n" +
                "					IF exit_loop THEN                                                                                                  \n" +
                "						CLOSE barcodeMatch_cursor;                                \n" +
                "						LEAVE barcodeMatch_loop;                                \n" +
                "					END IF;                           \n" +
                "					-- dynamic query to get dellimeter string with values from string                                \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                \n" +
                "					EXECUTE stmtdelimiter;                                                    \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;                                     \n" +
                "  \n" +
                "					-- get delimiter values from string                                \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                        \n" +
                "					-- check for field type is static or dynamic                                \n" +
                "					-- if static field than check for mfg code and mfg part number              \n" +
                "					IF v_fieldType = 0  THEN                                    \n" +
                "						-- component_sid_stock                                 \n" +
                "						-- get static field name from barcode table delimiter data element id                                                \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);                     \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                        \n" +
                "							SET MFG_Part_No = delimiter_value_data;                 \n" +
                "							/* If component id is not found */                                     \n" +
                "							IF(pComponentID = 0)          \n" +
                "                            THEN                        \n" +
                "								/* Get component data */                \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;              \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                                \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM                           \n" +
                "								(                          \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType              \n" +
                "									FROM 	component c                                                                                                           \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND           \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)                 \n" +
                "									UNION                          \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                                           \n" +
                "									FROM 		component_otherpn co                                                                                                           \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0                     \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND          \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0	                                          \n" +
                "								) a                                          \n" +
                "								UNION                                          \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM                           \n" +
                "								(                          \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                        \n" +
                "									FROM 	component c                                                                                                           \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND          \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0                       \n" +
                "									UNION                          \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                        \n" +
                "									FROM 		component_otherpn co                                                                                                           \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                           \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)           \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0	                                          \n" +
                "								) a                                          \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;                \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN              \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID                                         \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;                                        \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail; 				                                        \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  		                                        \n" +
                "								   ELSE              \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;              \n" +
                "								END IF;					                                        \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN                       \n" +
                "									/* If component is more that one then remove supplier from list */                \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;              \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS              \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;              \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */                \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;              \n" +
                "									IF (v_componentCount < 2) THEN              \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission              \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission              \n" +
                "										FROM 	temp_component_supplier_detail;              \n" +
                "									END IF;              \n" +
                "								ELSE              \n" +
                "									IF (pSupplierID IS NULL) THEN              \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType              \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType              \n" +
                "										FROM 	temp_component_detail;                                        \n" +
                "									ELSE 	                                        \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN                                        \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;                                        \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN                                        \n" +
                "											SET v_componentCount=0;                                        \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;                                        \n" +
                "										ELSE                                        \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);                                        \n" +
                "										END IF;              \n" +
                "									END IF;              \n" +
                "								END IF;           \n" +
                "							ELSE                    \n" +
                "								/* If component id is found */                \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType                                \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType                                \n" +
                "								FROM 	component              \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;                      \n" +
                "							END IF;                \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */                \n" +
                "							IF v_componentCount > 1 THEN                \n" +
                "								CLOSE barcodeMatch_cursor;                                \n" +
                "								LEAVE barcodeMatch_loop;                      \n" +
                "							END IF;              \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */                \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN                                 \n" +
                "								CLOSE barcodeMatch_cursor;                                \n" +
                "								LEAVE barcodeMatch_loop;                      \n" +
                "							END IF;                                \n" +
                "  \n" +
                "							/* If bad part found */                \n" +
                "							IF (v_isGoodPart != 1) THEN                                        \n" +
                "								CLOSE barcodeMatch_cursor;                                \n" +
                "								LEAVE barcodeMatch_loop;                 \n" +
                "							END IF;              \n" +
                "  \n" +
                "							/* Check all type of restriction */                \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                           \n" +
                "								CLOSE barcodeMatch_cursor;                                \n" +
                "								LEAVE barcodeMatch_loop;              \n" +
                "							END IF;              \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */                \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                         \n" +
                "								CLOSE barcodeMatch_cursor;                                \n" +
                "								LEAVE barcodeMatch_loop;              \n" +
                "							END IF;              \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */                \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                    \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                         \n" +
                "								CLOSE barcodeMatch_cursor;                                \n" +
                "								LEAVE barcodeMatch_loop;                      \n" +
                "							END IF;                        \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */                \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                    \n" +
                "							IF (@MFGType = 'DIST') THEN                    \n" +
                "								SET v_SupplierID = v_componentId;                    \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and           \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);                    \n" +
                "							END IF;                 \n" +
                "  \n" +
                "							/* Check kit allocation */                \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                      \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */                \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;              \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId              \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId                            \n" +
                "								FROM 	(              \n" +
                "										SELECT 	*              \n" +
                "										FROM              \n" +
                "											(                \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                           \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId              \n" +
                "												FROM 		component_packagingalias cp                  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid              \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id              \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID              \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0          \n" +
                "												UNION                  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,              \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId              \n" +
                "												FROM 		rfq_lineitems_alternatepart rla              \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                               \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0                     \n" +
                "												UNION                                                                                   \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,              \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId              \n" +
                "												FROM 		rfq_lineitems_alternatepart rla              \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                               \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL              \n" +
                "												GROUP BY 	custPNID, rla.partID              \n" +
                "											) b                           \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)              \n" +
                "										GROUP BY b.lineID, b.assyId                                                                    \n" +
                "									) a;                                                                    \n" +
                "  \n" +
                "								/* BOM line not found  */                \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                       \n" +
                "									CLOSE barcodeMatch_cursor;                                \n" +
                "									LEAVE barcodeMatch_loop;                     \n" +
                "								/* Found More then one BOM line */              \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                        \n" +
                "									CLOSE barcodeMatch_cursor;                                \n" +
                "									LEAVE barcodeMatch_loop;              \n" +
                "								ELSE                          \n" +
                "									/* Restrict use bom */                \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                      \n" +
                "										CLOSE barcodeMatch_cursor;                                \n" +
                "										LEAVE barcodeMatch_loop;                      \n" +
                "									END IF;                                                                             \n" +
                "  \n" +
                "									/* BOM line contain any error */                \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;              \n" +
                "									IF (v_isBOMLineClean = 0) THEN              \n" +
                "										CLOSE barcodeMatch_cursor;              \n" +
                "										LEAVE barcodeMatch_loop;              \n" +
                "									END IF;              \n" +
                "								END IF;              \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */              \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN              \n" +
                "									CLOSE barcodeMatch_cursor;              \n" +
                "									LEAVE barcodeMatch_loop;              \n" +
                "								END IF;              \n" +
                "							END IF;              \n" +
                "  \n" +
                "							/* Set dynamic query for component */                \n" +
                "							IF  v_componentCount = 1 THEN                                         \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				              \n" +
                "								ELSE                                      \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"'); 	    		                                \n" +
                "								END IF;                                      \n" +
                "							END IF;                            \n" +
                "						END IF;                                \n" +
                "  \n" +
                "						/* Not in use */                \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                        \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;                                                \n" +
                "						END IF;                  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */                \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN              \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN              \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                   \n" +
                "							END IF;                                      \n" +
                "						END IF;                                      \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */                \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;              \n" +
                "						END IF;              \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */                \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN                                          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                                        \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                                                        \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                                                        \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                                                        \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                                                        \n" +
                "							ELSE                                      \n" +
                "								SET exit_loop = FALSE;                                      \n" +
                "							END IF;                                       \n" +
                "						END IF;                            \n" +
                "  \n" +
                "						/* Set dynamic query for binid */                \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "						END IF;                              \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */                \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "						END IF;                            \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */                \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "						END IF;                                     \n" +
                "  \n" +
                "						/* Set dynamic query for po number */                \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "						END IF;                                     \n" +
                "  \n" +
                "						/* Set dynamic query for so number */                \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "						END IF;                                 \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */                \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "						END IF;                                 \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */                \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                                \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                \n" +
                "							ELSE                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                                \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "							END IF;                                      \n" +
                "						END IF;                            \n" +
                "					ELSE                               \n" +
                "						/* Set dynamic query for other than system generated */                \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                 \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;                             \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                 \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);              \n" +
                "					END IF;              \n" +
                "				END LOOP barcodeMatch_loop;              \n" +
                "				-- check if mfg and component both found than              \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                            \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                                \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);          	                                        \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);				                                        \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);              \n" +
                "				ELSEIF (v_componentCount > 1) THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);                                 \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);                                 \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                             \n" +
                "					IF (v_isGoodPart = 2) THEN                                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);              \n" +
                "					ELSE                                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);              \n" +
                "					END IF;                                                                                        \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);              \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                                                             \n" +
                "					IF (v_isCPNFlag = 1) THEN                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);              \n" +
                "					ELSE                                                                         \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);              \n" +
                "					END IF;                                                                        \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                             \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);                        \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                     \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                     \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                     \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN                               \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);                                \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                \n" +
                "					IF @Mfgmatched = 0  THEN                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);					                                \n" +
                "					END IF;							                                \n" +
                "				ELSE                       \n" +
                "					IF @mfgCount = 0 THEN                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                \n" +
                "					END IF;	                                \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);                                \n" +
                "					END IF;				                                \n" +
                "				END IF;	              \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN               \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                \n" +
                "					END IF;          \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                \n" +
                "					END IF;               \n" +
                "				END IF;                     \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN                    \n" +
                "					/* If not fire any validation */                \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                       \n" +
                "  \n" +
                "						-- must call statements in sequence                   \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */       		                      \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');              \n" +
                "						PREPARE stmt1 FROM @SQL1;                                \n" +
                "						EXECUTE stmt1;                             \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                  \n" +
                "						IF (pnickName IS NOT NULL) THEN                  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                  \n" +
                "						END IF;                      \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                  \n" +
                "						END IF;                       \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                  \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                  \n" +
                "						END IF;                     \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                  \n" +
                "						END IF;                      \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');               \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                  \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;	                                 \n" +
                "						PREPARE stmt2 FROM @SQL2;                                \n" +
                "						EXECUTE stmt2;	                \n" +
                "						DEALLOCATE PREPARE stmt2;                                       \n" +
                "  \n" +
                "						/* Add success result in save error table */                \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                                                                \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                \n" +
                "						ELSE                                                                                 \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                \n" +
                "						END IF;                                                                                \n" +
                "  \n" +
                "						/* Add data in table of delimeter table */                \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                      \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                 \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 	                                \n" +
                "						END IF;                                \n" +
                "  \n" +
                "						/* select detail of error table */                \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */                  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                  \n" +
                "  \n" +
                "						/* Select data of component */                \n" +
                "						SELECT 	c.*,                                                              \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                              \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                               \n" +
                "							csup.packageQty AS supplierPkgQty,              \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,              \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                               \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                               \n" +
                "							mcm.mfgName AS supplierMFGName,                                                               \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                               \n" +
                "							csup.packagingID AS supplierPackagingId,                                                               \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                                                               \n" +
                "							csup.minimum AS supplierMinimum,                                                               \n" +
                "							ccpn.id AS cpnID,                                                               \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                               \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                               \n" +
                "							rfqroh.name AS rohsName,                                                               \n" +
                "							rfqmou.name AS mountingTypeName,                                                               \n" +
                "							um.unitName AS uomName,                                                              \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                              \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                              \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                                            \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                                               \n" +
                "						FROM component AS c               \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID              \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID              \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                              \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID              \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                          \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID              \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                             \n" +
                "						WHERE c.id = v_componentId;          \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */                \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`              \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv               \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl              \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;                     \n" +
                "  \n" +
                "						/* select data of cpn */                \n" +
                "						SELECT 	id, refComponentID, refCPNPartID              \n" +
                "						FROM 	component_cust_alias_rev_pn              \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;              \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (              \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0              \n" +
                "						) AND isDeleted = 0;                                                                                \n" +
                "  \n" +
                "						/* select detail of bom */                \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,              \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN              \n" +
                "						FROM 		rfq_lineitems_alternatepart rla              \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0              \n" +
                "						WHERE 		rla.isDeleted = 0              \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))              \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)              \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);              \n" +
                "  \n" +
                "					ELSE                          \n" +
                "						/* Found any error then select error  */                \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                \n" +
                "					END IF;                  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                \n" +
                "				ELSE              \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */                \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN              \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');              \n" +
                "						PREPARE stmt1 FROM @SQL1;                                \n" +
                "						EXECUTE stmt1;              \n" +
                "						DEALLOCATE PREPARE stmt1;                            \n" +
                "					END IF;                          \n" +
                "  \n" +
                "					/* Add success data in temp error table */                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                           \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */                \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                       \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                                       \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                             \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */                \n" +
                "					IF (pCategory = 'M') THEN                          \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                       \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                          \n" +
                "						SELECT 	c.*,                                                               \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                               \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                               \n" +
                "							csup.packageQty AS supplierPkgQty,              \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,              \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                               \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                               \n" +
                "							mcm.mfgName AS supplierMFGName,                                                               \n" +
                "							csup.packagingID AS supplierPackagingId,                                                               \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                               \n" +
                "							csup.id AS supplierMFGPNID,                                                               \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                                                               \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                                                         \n" +
                "							ccpn.id AS cpnID,                                                               \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                               \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                               \n" +
                "							rfqroh.name AS rohsName,                                                               \n" +
                "							rfqmou.name AS mountingTypeName,                                                               \n" +
                "							um.unitName AS uomName,                                                              \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                              \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                              \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,              \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName              \n" +
                "						FROM component AS c               \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID              \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID              \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                              \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID              \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                           \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                         \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                \n" +
                "						WHERE c.id = v_componentId;          \n" +
                "					END IF;                                        \n" +
                "				END IF;                            \n" +
                "			ELSE                                                                 \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                 \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;	                                      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                       \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                      \n" +
                "				SELECT 1;                                       \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                       \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                      \n" +
                "				SELECT 1; 		                                    \n" +
                "			END IF;                                \n" +
                "  \n" +
                "		END block2;                                      \n" +
                "	ELSE                                                      \n" +
                "		IF (pIsFromUID = 1) THEN                                                      \n" +
                "			SELECT * FROM tempUIDSuccessDetail;                                                      \n" +
                "		ELSE                                                       \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                       \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                      \n" +
                "			SELECT 1;                                                      \n" +
                "		END IF;                                                      \n" +
                "	END IF;                                          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4952,'2.00','V1',' Update Sproc_MatchBarCodeAndSaveDelimiters sp - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4952:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetDownloadHelpBlogDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetDownloadHelpBlogDetails`(      \n" +
                "    IN phelpBlogId INT,     \n" +
                "    IN phelpBlogDetailId INT    \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);              \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;       \n" +
                "  \n" +
                "	IF(phelpBlogId IS NOT NULL) THEN    \n" +
                "		IF(phelpBlogDetailId IS NULL) THEN     \n" +
                "		SELECT hbd.title,hbd.description,hbd.isSystemGenerated,    \n" +
                "		hbd.displayOrder,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,v_TimeZone,v_DateTimeDisplayFormat) lastModified,             \n" +
                "		fun_getUserNameByID(hbd.updatedBy) lastModifiedBy,    \n" +
                "		hb.title AS menuTitle     \n" +
                "		FROM help_blog hb     \n" +
                "		INNER JOIN help_blog_det hbd     \n" +
                "			ON hbd.helpBlogId = hb.id     \n" +
                "		WHERE hb.id = phelpBlogId    \n" +
                "			AND hbd.isdeleted=0;    \n" +
                "  \n" +
                "		ELSE SELECT hbd.title,hbd.description,hbd.isSystemGenerated,    \n" +
                "		hbd.displayOrder,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,v_TimeZone,v_DateTimeDisplayFormat) lastModified,              \n" +
                "		fun_getUserNameByID(hbd.updatedBy) lastModifiedBy,    \n" +
                "		hb.title AS menuTitle     \n" +
                "		FROM help_blog hb     \n" +
                "		INNER JOIN help_blog_det hbd     \n" +
                "			ON hbd.helpBlogId = hb.id     \n" +
                "		WHERE hb.id = phelpBlogId     \n" +
                "			AND hbd.isdeleted=0    \n" +
                "			AND hbd.id = phelpBlogDetailId;			    \n" +
                "		END IF;				    \n" +
                "	END IF;	    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4953,'2.00','V1','Help Blog Script update - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4953:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive_det_stock`   \n" +
                "ADD COLUMN `availableQtyAtRMA` DECIMAL(18,8) NULL,  \n" +
                "ADD COLUMN `availableUnitAtRMA` DECIMAL(18,8) NULL;  \n" +
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4954,'2.00','V1','User Story 35106: Supplier RMA flow: change for Shipped Qty (decimal Qty issue for other than Each part) - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4954:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	MAX(pds.id) stockId,  \n" +
                "			'PU' AS `type`,  \n" +
                "			'Pending UMID' AS `typeValue`,  \n" +
                "			NULL umidId,  \n" +
                "			NULL umid,          \n" +
                "			vu.PartId partId,           \n" +
                "			vu.packagingID packagingId,          \n" +
                "			NULL receiveMaterialType,          \n" +
                "			SUM(pd.receivedQty) receivedQty,          \n" +
                "			SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) availableQty,          \n" +
                "			SUM(IFNULL(pds.qty,0)) shipmentQty,          \n" +
                "			vu.BinID binId,          \n" +
                "			b.name binName,          \n" +
                "			b.WarehouseID,          \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,          \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            0 availableQtyAtRMA,  \n" +
                "            0 availableUnitAtRMA  \n" +
                "	FROM 		vu_umid_creation_pending vu          \n" +
                "	LEFT JOIN 	(      \n" +
                "				SELECT 		refPackingSlipMaterialRecID, SUM(receivedQty) receivedQty, SUM(umidCreatedQty) umidCreatedQty, packagingID, partID      \n" +
                "				FROM 		packing_slip_material_receive_det      \n" +
                "				WHERE 		isDeleted = 0      \n" +
                "				GROUP BY  	refPackingSlipMaterialRecID, packagingID, partID      \n" +
                "			) pd ON pd.refPackingSlipMaterialRecID = vu.packingSlipID AND pd.packagingID = vu.packagingID AND pd.partID = vu.PartId      \n" +
                "	LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId       \n" +
                "						AND pds.refPackingSlipId = vu.packingSlipID       \n" +
                "						AND pds.packagingId = vu.packagingID       \n" +
                "						AND pds.partId = vu.PartId       \n" +
                "						AND pds.isDeleted = 0       \n" +
                "						AND pds.type = 'PU'       \n" +
                "						AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)         \n" +
                "	LEFT JOIN 	binmst b ON b.id = vu.BinID          \n" +
                "	WHERE 		vu.packingSlipID = pPackingSlipId          \n" +
                "				AND vu.packagingID = pPackagingId          \n" +
                "				AND vu.partID = pPartId          \n" +
                "				AND b.isDeleted = 0          \n" +
                "	GROUP BY 	typeValue, umidId, umid, partId, packagingId, receiveMaterialType,binId, binName, WarehouseID, warehouseName, parentWarehouseName          \n" +
                "	UNION          \n" +
                "	SELECT 		cp.id stockId,          \n" +
                "			cp.type AS `type`,          \n" +
                "			'UMID' AS `typeValue`,          \n" +
                "			c.id umidId,          \n" +
                "			c.uid umid,          \n" +
                "			c.refcompid partId,          \n" +
                "			c.packaging packagingId,           \n" +
                "			c.receiveMaterialType,          \n" +
                "			pd.receivedQty receivedQty,          \n" +
                "			c.pkgQty availableQty,          \n" +
                "			cp.qty shipmentQty,          \n" +
                "			c.binID binId,          \n" +
                "			b.name binName,          \n" +
                "			b.WarehouseID,          \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,          \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            cp.availableQtyAtRMA,  \n" +
                "            cp.availableUnitAtRMA  \n" +
                "	FROM 		packing_slip_material_receive_det_stock cp          \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId          \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId           \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binId          \n" +
                "	WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId      and cp.refRMADetailid = pRMADetailLineId    \n" +
                "				AND cp.type = 'U'          \n" +
                "				AND cp.isDeleted = 0          \n" +
                "				AND c.isDeleted = 0          \n" +
                "				AND pd.isDeleted = 0          \n" +
                "				AND b.isDeleted = 0          \n" +
                "	UNION          \n" +
                "	SELECT 		NULL stockId,          \n" +
                "			'U' AS `type`,          \n" +
                "			'UMID' AS `typeValue`,          \n" +
                "			c.id umidId,          \n" +
                "			c.uid umid,          \n" +
                "			c.refcompid partId,          \n" +
                "			c.packaging packagingId,           \n" +
                "			c.receiveMaterialType,          \n" +
                "			pd.receivedQty receivedQty,          \n" +
                "			c.pkgQty availableQty,          \n" +
                "			0 shipmentQty,          \n" +
                "			c.binID binId,          \n" +
                "			b.name binName,          \n" +
                "			b.WarehouseID,          \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,          \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            c.pkgQty availableQtyAtRMA,  \n" +
                "            c.pkgUnit availableUnitAtRMA  \n" +
                "	FROM 		component_sid_stock_packing_detail cp          \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID          \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID           \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binID          \n" +
                "	WHERE 		c.pkgQty > 0           \n" +
                "				AND cp.refPackingSlipDetailID = pPackingSlipDetailId          \n" +
                "				AND cp.isDeleted = 0          \n" +
                "				AND c.isDeleted = 0          \n" +
                "				AND pd.isDeleted = 0          \n" +
                "				AND b.isDeleted = 0;          \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_SavePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_SavePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMAStockList JSON,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_TotalRMAStock INT;  \n" +
                "	DECLARE v_stockId INT;  \n" +
                "	DECLARE v_TransactionAction VARCHAR(10);  \n" +
                "	DECLARE v_RefRMAId INT;  \n" +
                "	DECLARE v_RefRMADetailId INT;  \n" +
                "	DECLARE v_Type VARCHAR(5);  \n" +
                "	DECLARE v_RefSidId INT;  \n" +
                "	DECLARE v_RefPackingSlipId INT;  \n" +
                "	DECLARE v_RefPackingSlipDetId INT;  \n" +
                "	DECLARE v_PartId INT;  \n" +
                "	DECLARE v_PackagingId INT;  \n" +
                "	DECLARE v_BinId INT;  \n" +
                "	DECLARE v_Qty DECIMAL(18,8);  \n" +
                "    DECLARE v_availableQtyAtRMA DECIMAL(18,8);  \n" +
                "    DECLARE v_availableUnitAtRMA DECIMAL(18,8);  \n" +
                "	DECLARE v_TransferBinId INT;  \n" +
                "	DECLARE v_TransferWarehouseId INT;  \n" +
                "	DECLARE v_TransferParentWarehouseId INT;  \n" +
                "	DECLARE v_QtyOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_UnitsOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_ErorrCode VARCHAR(100) default null;  \n" +
                "    DECLARE v_CurrentStockQty DECIMAL(18,8);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_RMAStockList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pRMAStockList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`stockId` INT PATH \"$.stockId\",  \n" +
                "				`transactionAction` VARCHAR(10) PATH \"$.transactionAction\",  \n" +
                "				`refRMAId` INT PATH \"$.refRMAId\",  \n" +
                "				`refRMADetailId` INT PATH \"$.refRMADetailId\",  \n" +
                "				`type` VARCHAR(5) PATH \"$.type\",  \n" +
                "				`refSidId` INT PATH \"$.refSidId\",  \n" +
                "				`refPackingSlipId` INT PATH \"$.refPackingSlipId\",  \n" +
                "				`refPackingSlipDetId` INT PATH \"$.refPackingSlipDetId\",  \n" +
                "				`partId` INT PATH \"$.partId\",  \n" +
                "				`packagingId` INT PATH \"$.packagingId\",  \n" +
                "				`binId` VARCHAR(20) PATH \"$.binId\",  \n" +
                "				`qty` DECIMAL(18,8) PATH \"$.qty\",  \n" +
                "                `availableQtyAtRMA` DECIMAL(18,8) PATH \"$.availableQtyAtRMA\",  \n" +
                "                `availableUnitAtRMA` DECIMAL(18,8) PATH \"$.availableUnitAtRMA\",  \n" +
                "				`transferBinId` INT path \"$.transferBinId\",  \n" +
                "				`transferWarehouseId` INT path \"$.transferWarehouseId\",  \n" +
                "				`transferParentWarehouseId` INT path \"$.transferParentWarehouseId\"  \n" +
                "			)  \n" +
                "		) AS RMAStockList_JT;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_TotalRMAStock FROM temp_RMAStockList;  \n" +
                "		SET i = 0;  \n" +
                "		temp_RMAStockList: WHILE i < v_TotalRMAStock DO  \n" +
                "  \n" +
                "            if v_ErorrCode is null or v_ErorrCode = '' then  \n" +
                "  \n" +
                "				SET v_stockId = NULL;  \n" +
                "				SET v_TransactionAction = NULL;  \n" +
                "				SET v_RefRMAId = NULL;  \n" +
                "				SET v_RefRMADetailId = NULL;  \n" +
                "				SET v_Type = NULL;  \n" +
                "				SET v_RefSidId = NULL;  \n" +
                "				SET v_RefPackingSlipId = NULL;  \n" +
                "				SET v_RefPackingSlipDetId = NULL;  \n" +
                "				SET v_PartId = NULL;  \n" +
                "				SET v_PackagingId = NULL;  \n" +
                "				SET v_BinId = NULL;  \n" +
                "				SET v_Qty = NULL;  \n" +
                "                SET v_availableQtyAtRMA = NULL;  \n" +
                "                SET v_availableUnitAtRMA = NULL;  \n" +
                "				SET v_QtyOfLastConsume = NULL;  \n" +
                "                SET v_UnitsOfLastConsume = NULL;  \n" +
                "  \n" +
                "				SELECT 	stockId, transactionAction, refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, transferBinId, transferWarehouseId, transferParentWarehouseId, availableQtyAtRMA, availableUnitAtRMA  \n" +
                "				INTO 	v_stockId, v_TransactionAction, v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, v_TransferBinId, v_TransferWarehouseId, v_TransferParentWarehouseId, v_availableQtyAtRMA, v_availableUnitAtRMA  \n" +
                "				FROM 	temp_RMAStockList  \n" +
                "				LIMIT 	i, 1;  \n" +
                "				IF (v_TransactionAction = 'Add') THEN  \n" +
                "					if v_RefSidId is null then /*non UMID stock*/  \n" +
                "						/*fetching non UMID stock*/  \n" +
                "						SELECT SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0))  \n" +
                "                          into v_CurrentStockQty  \n" +
                "							FROM vu_umid_creation_pending vu  \n" +
                "							LEFT JOIN (SELECT refPackingSlipMaterialRecID, SUM(receivedQty) receivedQty, SUM(umidCreatedQty) umidCreatedQty, packagingID, partID  \n" +
                "										 FROM packing_slip_material_receive_det  \n" +
                "										WHERE isDeleted = 0        \n" +
                "										GROUP BY refPackingSlipMaterialRecID, packagingID, partID        \n" +
                "									) pd ON pd.refPackingSlipMaterialRecID = vu.packingSlipID AND pd.packagingID = vu.packagingID AND pd.partID = vu.PartId        \n" +
                "							LEFT JOIN packing_slip_material_receive_det_stock pds       \n" +
                "										ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId         \n" +
                "											AND pds.refPackingSlipId = vu.packingSlipID         \n" +
                "											AND pds.packagingId = vu.packagingID         \n" +
                "											AND pds.partId = vu.PartId         \n" +
                "											AND pds.isDeleted = 0         \n" +
                "											AND pds.type = 'PU'         \n" +
                "											AND (CASE WHEN v_RefRMADetailId IS NOT NULL THEN pds.refRMADetailId = v_RefRMADetailId ELSE pds.refRMADetailId IS NULL END)           \n" +
                "							WHERE vu.packagingID = v_PackagingId      \n" +
                "							  AND vu.partID = v_PartId      \n" +
                "							  and vu.BinID = v_BinId;      \n" +
                "                    else /*UMID stock*/      \n" +
                "						/*Fetching UMID current stock*/      \n" +
                "                        select availableQty into v_CurrentStockQty      \n" +
                "                          from (SELECT c.pkgQty availableQty      \n" +
                "								  FROM component_sid_stock c      \n" +
                "								 INNER JOIN packing_slip_material_receive_det_stock cp ON cp.refSidId = c.id      \n" +
                "								 WHERE c.id = v_RefSidId      \n" +
                "								   and c.refcompid = v_PartId      \n" +
                "								   AND cp.type = 'U'      \n" +
                "								   AND cp.isDeleted = 0      \n" +
                "								   AND c.isDeleted = 0      \n" +
                "								UNION      \n" +
                "								SELECT c.pkgQty availableQty      \n" +
                "								  FROM component_sid_stock c      \n" +
                "								 INNER JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id      \n" +
                "								 WHERE c.pkgQty > 0      \n" +
                "								   and c.id = v_RefSidId      \n" +
                "								   and c.refcompid = v_PartId      \n" +
                "								   AND cp.isDeleted = 0      \n" +
                "								   AND c.isDeleted = 0) a;      \n" +
                "                    end if;      \n" +
                "  \n" +
                "                    if (case when v_Type = 'U' then v_availableQtyAtRMA else v_Qty end) > v_CurrentStockQty then      \n" +
                "						set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';      \n" +
                "					else      \n" +
                "						INSERT INTO packing_slip_material_receive_det_stock (refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, createdBy, createByRoleId, updatedBy, updateByRoleId, availableQtyAtRMA, availableUnitAtRMA)        \n" +
                "						VALUES (v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, pUserID, pUserRoleID, pUserID, pUserRoleID, v_availableQtyAtRMA, v_availableUnitAtRMA);        \n" +
                "						IF (v_RefSidId IS NOT NULL) THEN        \n" +
                "							INSERT INTO component_sid_stock_history         \n" +
                "								(transType, 	actionPerformed, 	refUIDId, 	uid, 	refcompid, 	binID,  \n" +
                "                                warehouseID, 	deptWHID,  \n" +
                "								orgQty, 	orgUnit,  \n" +
                "                                currentQty, 	currentUnit, 		uom, 		consumedQty, 		consumedUnit,         \n" +
                "								refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)        \n" +
                "							SELECT 	'Supplier RMA - Returned', 	'UMID Zero Out',	c.id,		c.uid,		c.refcompid,		-1,        \n" +
                "									-3,				fun_getDepartmentIDByBinID(-1),  \n" +
                "                                    c.orgQty,	c.orgPkgUnit,        \n" +
                "									case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,  \n" +
                "                                    case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.uom,		v_Qty,			(v_Qty * com.unit),			        \n" +
                "									fun_getRMANumberById(v_RefRMAId),					v_RefRMAId,	'packing_slip_material_receive',        \n" +
                "									pUserID,			pUserID,				pUserRoleID,	pUserRoleID        \n" +
                "							FROM 		component_sid_stock c        \n" +
                "							INNER JOIN 	binmst b ON b.id = c.binID        \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid         \n" +
                "							WHERE 		c.id =  v_RefSidId        \n" +
                "										AND c.isDeleted = 0         \n" +
                "										AND b.isDeleted = 0        \n" +
                "										AND com.isDeleted = 0;        \n" +
                "  \n" +
                "							UPDATE 		component_sid_stock c        \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid         \n" +
                "								SET c.pkgQty = case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,    \n" +
                "									c.pkgUnit = case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.isinStk = false    \n" +
                "							WHERE	c.id = v_RefSidId AND c.isDeleted = 0;        \n" +
                "						END IF;      \n" +
                "                    end if;      \n" +
                "				ELSEIF (v_TransactionAction = 'Edit' AND v_Type = 'PU') THEN        \n" +
                "						/*fetching non UMID stock*/      \n" +
                "						select sum(stockQty) into v_CurrentStockQty      \n" +
                "						from       \n" +
                "							(SELECT SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) stockQty      \n" +
                "								FROM vu_umid_creation_pending vu            \n" +
                "								LEFT JOIN (SELECT refPackingSlipMaterialRecID, SUM(receivedQty) receivedQty, SUM(umidCreatedQty) umidCreatedQty, packagingID, partID        \n" +
                "											 FROM packing_slip_material_receive_det        \n" +
                "											WHERE isDeleted = 0        \n" +
                "											GROUP BY refPackingSlipMaterialRecID, packagingID, partID        \n" +
                "										) pd ON pd.refPackingSlipMaterialRecID = vu.packingSlipID AND pd.packagingID = vu.packagingID AND pd.partID = vu.PartId        \n" +
                "								LEFT JOIN packing_slip_material_receive_det_stock pds       \n" +
                "											ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId         \n" +
                "												AND pds.refPackingSlipId = vu.packingSlipID         \n" +
                "												AND pds.packagingId = vu.packagingID         \n" +
                "												AND pds.partId = vu.PartId         \n" +
                "												AND pds.isDeleted = 0         \n" +
                "												AND pds.type = 'PU'         \n" +
                "												AND (CASE WHEN v_RefRMADetailId IS NOT NULL THEN pds.refRMADetailId = v_RefRMADetailId ELSE pds.refRMADetailId IS NULL END)           \n" +
                "								WHERE vu.packagingID = v_PackagingId      \n" +
                "								  AND vu.partID = v_PartId      \n" +
                "								  and vu.BinID = v_BinId      \n" +
                "								union all      \n" +
                "								select qty      \n" +
                "								from packing_slip_material_receive_det_stock      \n" +
                "							   where id = v_stockId      \n" +
                "								 and isDeleted = 0) a;      \n" +
                "						if v_Qty > v_CurrentStockQty then      \n" +
                "							set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';      \n" +
                "						else      \n" +
                "							UPDATE packing_slip_material_receive_det_stock      \n" +
                "							   SET qty = v_Qty,      \n" +
                "									updatedBy = pUserID,      \n" +
                "									updateByRoleId = pUserRoleID,      \n" +
                "									updatedAt = CURRENT_TIMESTAMP      \n" +
                "							 WHERE id = v_stockId AND isDeleted = 0;      \n" +
                "                        end if;      \n" +
                "				ELSEIF (v_TransactionAction = 'Delete') THEN        \n" +
                "					UPDATE 	packing_slip_material_receive_det_stock        \n" +
                "					SET 	isDeleted = 1,        \n" +
                "						deletedBy = pUserID,        \n" +
                "						deleteByRoleId = pUserRoleID,        \n" +
                "						deletedAt = CURRENT_TIMESTAMP        \n" +
                "					WHERE 	id = v_stockId AND isDeleted = 0;        \n" +
                "  \n" +
                "					IF (v_Type = 'U' AND v_TransferBinId IS NOT NULL) THEN        \n" +
                "						SELECT ifnull(availableQtyAtRMA,0), ifnull(availableUnitAtRMA,0)  \n" +
                "						INTO v_QtyOfLastConsume, v_UnitsOfLastConsume  \n" +
                "                          FROM packing_slip_material_receive_det_stock WHERE id = v_stockId;        \n" +
                "  \n" +
                "						INSERT INTO component_sid_stock_history         \n" +
                "							(transType, 	actionPerformed,  \n" +
                "                            refUIDId, 	uid, 	refcompid, 	binID, 		warehouseID, 		deptWHID,  \n" +
                "							orgQty, 	orgUnit, 		currentQty, 	currentUnit,		uom,  \n" +
                "                            consumedQty,  \n" +
                "                            consumedUnit,  \n" +
                "							refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)  \n" +
                "						SELECT 		'Supplier RMA - Corrected', 	'UMID Count Material (Adjust Material: Add/Append Count)',  \n" +
                "								c.id,		c.uid,		c.refcompid, 	v_TransferBinId,	v_TransferWarehouseId,		v_TransferParentWarehouseId,  \n" +
                "								c.orgQty,	c.orgPkgUnit,	v_QtyOfLastConsume,		v_UnitsOfLastConsume,	c.uom,  \n" +
                "                                (IFNULL(c.orgQty,0) - v_QtyOfLastConsume),  \n" +
                "                                (IFNULL(c.orgPkgUnit,0) - v_UnitsOfLastConsume),  \n" +
                "								fun_getRMANumberById(v_RefRMAId),  \n" +
                "								v_RefRMAId,		'packing_slip_material_receive',  \n" +
                "								pUserID,		pUserID,  \n" +
                "								pUserRoleID,		pUserRoleID  \n" +
                "						FROM 		component_sid_stock c  \n" +
                "						INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "						INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "						WHERE 		c.id =  v_RefSidId  \n" +
                "									AND c.isDeleted = 0  \n" +
                "									AND b.isDeleted = 0  \n" +
                "									AND com.isDeleted = 0;  \n" +
                "  \n" +
                "						UPDATE 		component_sid_stock c  \n" +
                "						INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "							SET		c.pkgQty = v_QtyOfLastConsume,  \n" +
                "									c.pkgUnit = v_UnitsOfLastConsume,  \n" +
                "									c.binID = v_TransferBinId  \n" +
                "							WHERE  	c.id = v_RefSidId AND c.isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "             end if;  \n" +
                "  \n" +
                "			SET i = i + 1;  \n" +
                "		END WHILE temp_RMAStockList;  \n" +
                "  \n" +
                "		SELECT ifnull(v_ErorrCode,'1') AS 'spStatus';  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4955,'2.00','V1','User Story 35106: Supplier RMA flow: change for Shipped Qty (decimal Qty issue for other than Each part) - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4955:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021  *********************************** */
                "drop procedure if exists Sproc_GetCreditMemoReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                            \n" +
                "	IN cpID INT                            \n" +
                ")  \n" +
                "BEGIN	                  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);                     \n" +
                "   # Customer Invoice Master table details                             \n" +
                "   SELECT  cp.id,                             \n" +
                "			cp.invoiceNumber,                            \n" +
                "			cp.invoiceDate,                \n" +
                "            cp.creditMemoNumber,                \n" +
                "            cp.creditMemoDate,                \n" +
                "            cp.refDebitMemoNumber,                \n" +
                "            refDebitMemoDate,                                \n" +
                "			cp.poNumber,                                   \n" +
                "			cp.poDate,                  \n" +
                "			mg.customerSystemID,                  \n" +
                "			mg.accountRef,                \n" +
                "			cp.status,                         \n" +
                "			cp.billingAddress,                 \n" +
                "			cp.shippingAddress,                  \n" +
                "            cp.packingSlipComment,                  \n" +
                "            cp.rmaNumber,                \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                              \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                    \n" +
                "			cp.systemID AS legalnumber,                    \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                      \n" +
                "			us.emailAddress,                  \n" +
                "			emp.phExtension,      \n" +
                "            '1.00' docNumber ,    \n" +
                "            cp.revision creditMemoVersion    \n" +
                "		FROM customer_packingslip cp                   \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                            \n" +
                "                LEFT JOIN                                  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                             \n" +
                "        AND gcs.isDeleted = 0                                 \n" +
                "           LEFT JOIN                                  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                             \n" +
                "        AND gcp.isDeleted = 0                               \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                    \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                             \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0       \n" +
                "    and transType='C'      \n" +
                "    LIMIT 1;                             \n" +
                "  \n" +
                "	# Customer Invoice line level details                             \n" +
                "	SELECT                              \n" +
                "		cpd.id,                                  \n" +
                "		cpd.partId,                        \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                         \n" +
                "		cpd.lineID,                 \n" +
                "        cpd.reflineID,              \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                               \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                            \n" +
                "		  WHEN (c.iscustom=1) THEN                             \n" +
                "			c.custAssyPN                            \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                             \n" +
                "			c.mfgPN                             \n" +
                "        ELSE                                                                     \n" +
                "			  ''                                                    \n" +
                "			END) AS mfgPN ,                            \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                 \n" +
                "			'Other Charges'                                  \n" +
                "		ELSE                                                                     \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                    \n" +
                "			END) AS  mfgName,                            \n" +
                "		IFNULL(c.rev, '') AS revision,                            \n" +
                "		(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                               \n" +
                "			'EA'                            \n" +
                "		ELSE             \n" +
                "			fun_getUOMAbbreviationByID(c.uom)            \n" +
                "        END) AS uom,                            \n" +
                "		cpd.shipQty AS qty,                             \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                            \n" +
                "		IFNULL(cpd.extendedPrice,0) AS extPrice,                  \n" +
                "		CONCAT(IFNULL(replace(cpd.assyDescription,'\n','<br/>'), ''),'<br/>',                                 \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                   \n" +
                "            IFNULL(CONCAT(', ',                                    \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                    \n" +
                "                    ''),                    \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                    \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',          \n" +
                "            IFNULL(replace(cpd.shippingNotes,'\n','<br/>'),'')) AS description                   \n" +
                "  \n" +
                "	FROM                                  \n" +
                "		customer_packingslip_det cpd                                 \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                  \n" +
                "	WHERE                                  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID ORDER BY reflineID ASC;                             \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                            \n" +
                "	SELECT  fun_getTotalCustomerCreditMemoAppliedAmountById(cpID) into vReceivedAmt;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                             \n" +
                "    SELECT                                          \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                             \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                         \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 ) totalLinePrice                \n" +
                "			/*(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                             \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice*/                            \n" +
                "		FROM customer_packingslip_det cpd                                 \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                              \n" +
                "		AND cpd.isdeleted=0;               \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                  \n" +
                "				vReceivedAmt totalRecvAmt,    \n" +
                "                -- IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,          \n" +
                "                IFNULL(totalLinePrice,0) totalCMAmount,    \n" +
                "                (IFNULL((IFNULL(totalLinePrice,0) + ifnull(vReceivedAmt,0)) ,0)) totalBalAmt     \n" +
                "                FROM tempTotalPrice LIMIT 1;               \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4956,'2.00','V1','Sproc_GetCreditMemoReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4956:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                                        \n" +
                "	IN cpID INT                                        \n" +
                ")  \n" +
                "BEGIN	                                        \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);              \n" +
                "    # Customer Invoice Master table details                                         \n" +
                "    SELECT  cp.id,                                        \n" +
                "		cp.invoiceNumber,                                        \n" +
                "        cp.invoiceDate,                                        \n" +
                "		cp.packingSlipNumber,                                              \n" +
                "		cp.packingSlipDate,                                              \n" +
                "		cp.poDate,                                              \n" +
                "		cp.poNumber,                        \n" +
                "        cp.poRevision,              \n" +
                "		mg.customerSystemID,                              \n" +
                "		mg.accountRef,                             \n" +
                "		cp.packingSlipComment,                                       \n" +
                "        cp.status,                                        \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '                            \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                                      \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                                        \n" +
                "        cp.billingAddress,                                        \n" +
                "        cp.shippingAddress,                              \n" +
                "        cp.intermediateAddress,                                        \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                                        \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                          \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                         \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                                        \n" +
                "        cp.systemID AS legalnumber,                      \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,                                        \n" +
                "		us.emailAddress,                                        \n" +
                "		emp.phExtension,            \n" +
                "        cp.revision invoiceVersion,        \n" +
                "        '1.00' AS docNumber,      \n" +
                "        subStatus    \n" +
                "		FROM customer_packingslip cp                               \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                                        \n" +
                "                LEFT JOIN                                              \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                                         \n" +
                "        AND gcs.isDeleted = 0                                             \n" +
                "           LEFT JOIN                                              \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                                         \n" +
                "        AND gcp.isDeleted = 0                                           \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                                \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                                         \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                                         \n" +
                "  \n" +
                "	# Customer Invoice line level details                                         \n" +
                "	SELECT                                          \n" +
                "		cpd.id,                                              \n" +
                "		cpd.partId,                                    \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                                     \n" +
                "		cpd.lineID,                 \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,                \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,                                     \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                           \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                                        \n" +
                "		  WHEN (c.iscustom=1) THEN                                         \n" +
                "			c.custAssyPN                                        \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                                         \n" +
                "			c.mfgPN                                         \n" +
                "        ELSE                                                                                 \n" +
                "			  ''                                                                \n" +
                "			END) AS mfgPN ,                                        \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                             \n" +
                "			'Other Charges'                                              \n" +
                "		ELSE                                                                                 \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                                \n" +
                "			END) AS  mfgName,                                        \n" +
                "		IFNULL(c.rev, '') AS revision,                                        \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                                        \n" +
                "		cpd.shipQty AS qty,                                         \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                                        \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,                              \n" +
                "		CONCAT(                        \n" +
                "		IFNULL(replace(cpd.assyDescription,'\r','<br/>'), ''),'<br/>',                                             \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                                \n" +
                "                IFNULL(CONCAT(', ',                                                \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                                \n" +
                "                    ''),                                \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                                \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),                \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,                            \n" +
                "            IFNULL(replace(cpd.shippingNotes,'\r','<br/>'),'')) AS DESCRIPTION                           \n" +
                "  \n" +
                "	FROM                                              \n" +
                "		customer_packingslip_det cpd                 \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0                                                 \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                               \n" +
                "	WHERE                                              \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                                         \n" +
                "  \n" +
                "	SELECT  get_totalCustomerInvoiceReceivedAmountById(cpID) into vReceivedAmt;              \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                         \n" +
                "    SELECT                                                      \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                                         \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                                         \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 ) totalLinePrice,                                              \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod     \n" +
                "				WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det     \n" +
                "							WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice                                                  \n" +
                "			/*(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                                         \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                                         \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                                      \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                                         \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice*/                                        \n" +
                "		FROM customer_packingslip_det cpd                                             \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                                          \n" +
                "		AND cpd.isdeleted=0;                                              \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                                          \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                                          \n" +
                "                /* IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,                */    \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)),0) totalCIPrice,              \n" +
                "                vReceivedAmt totalRecvAmt,              \n" +
                "                (IFNULL(((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)) - ifnull(vReceivedAmt,0)) ,0)) totalBalAmt              \n" +
                "                FROM tempTotalPrice LIMIT 1;                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4957,'2.00','V1','Sproc_GetCustomerInvoiceReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4957:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021  *********************************** */
                "drop procedure if exists Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                                          \n" +
                "	IN cpid INT                                          \n" +
                ")  \n" +
                "BEGIN                                          \n" +
                "  \n" +
                "	SELECT                                       \n" +
                "    cp.id,                                  \n" +
                "    cp.status,                         \n" +
                "    cp.packingSlipType,                        \n" +
                "    cp.packingSlipNumber AS PackingSlip,                                      \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                                      \n" +
                "    cp.poDate AS PODate,                                      \n" +
                "    cp.soNumber AS SalesOrderNumber,                                      \n" +
                "    cp.poNumber AS PONumber,                  \n" +
                "    cp.packingSlipComment,                                      \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                                      \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                                      \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                                  \n" +
                "    cp.soDate AS SODate,                                      \n" +
                "    cp.sorevision AS SORevision,                                      \n" +
                "	cp.billingAddress AS SoldToAddress,                                \n" +
                "	cp.shippingAddress AS ShippingAddress,                       \n" +
                "	cp.intermediateAddress AS IntermediateAddress,                         \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,                                \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,        \n" +
                "    cp.revision packingSlipVersion  ,      \n" +
                "    '1.00' docNumber ,    \n" +
                "    cp.systemID AS legalNumber     \n" +
                "FROM                                      \n" +
                "    customer_packingslip cp                             \n" +
                "        LEFT JOIN                                      \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                                      \n" +
                "        AND sm.isDeleted = 0                                      \n" +
                "        LEFT JOIN                                      \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                                      \n" +
                "        AND gc.isDeleted = 0                                      \n" +
                "        AND gc.categoryType = 'Shipping Methods'                                      \n" +
                "        LEFT JOIN                                      \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                                      \n" +
                "        AND gcc.isDeleted = 0                                      \n" +
                "        AND gcc.categoryType = 'Payment Terms'                                    \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                                          \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                                   \n" +
                "WHERE                                      \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                                      \n" +
                "LIMIT 1;                                      \n" +
                "  \n" +
                "SELECT                                       \n" +
                "	cpd.lineID AS PSLine,                                \n" +
                "    cpd.id AS cpDetID,          \n" +
                "    ss.releaseNumber,                                \n" +
                "    cpd.refCustPackingSlipID AS cpID,                                 \n" +
                "    cpd.partId,                                \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                                  \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,                                  \n" +
                "    cpd.custPOLineID AS POLine,                          \n" +
                "    cpd.shippingNotes AS ShippingComment,                          \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN                                \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                                \n" +
                "		WHEN (c.iscustom = 1) THEN                                \n" +
                "		c.custAssyPN                                \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN                                \n" +
                "		c.mfgPN                                \n" +
                "		ELSE                                \n" +
                "		''                                \n" +
                "	END) AS PartNumber,                  \n" +
                "	CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,                                   \n" +
                "    IFNULL(c.rev, '') AS Revision,                                 \n" +
                "    c.partType,                                \n" +
                "    CONCAT(IFNULL(replace(cpd.assyDescription,'\n','<br/>'), ''), '<br/>',                                   \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                                      \n" +
                "            IFNULL(CONCAT(', ',                                      \n" +
                "                            cpd.standrads),                                      \n" +
                "                    ''),                                      \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                                      \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                      \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                                      \n" +
                "FROM                                      \n" +
                "    customer_packingslip_det cpd                                \n" +
                "        LEFT JOIN                                      \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                                      \n" +
                "        AND cp.isDeleted = 0                                      \n" +
                "        LEFT JOIN                                      \n" +
                "    component c ON c.id = cpd.partid                                      \n" +
                "        LEFT JOIN                                      \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                                      \n" +
                "        AND sd.isDeleted = 0                                     \n" +
                "        LEFT JOIN                                     \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                                      \n" +
                "        LEFT JOIN                                      \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID           \n" +
                "    LEFT JOIN          \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId     	                                \n" +
                "        LEFT JOIN                                      \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                                      \n" +
                "        AND ra.partID = cpd.partId                                      \n" +
                "        LEFT JOIN                                      \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                                 \n" +
                "WHERE                              \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4958,'2.00','V1','Sproc_GetCustomerPackingslipReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4958:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetPackingSlipAssemblyDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(                        \n" +
                "	IN partID INT ,                            \n" +
                "	IN cpID INT                             \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "	# COFC Report Header details                    \n" +
                "	SELECT                                 \n" +
                "    cp.id,                    \n" +
                "    cp.packingSlipNumber AS PackingSlip,                              \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                              \n" +
                "    cp.soNumber AS SalesOrderNumber,                              \n" +
                "    cp.poNumber AS PONumber,                             \n" +
                "	 cp.soDate AS SODate,                                \n" +
                "    cp.sorevision AS SORevision,                            \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                              \n" +
                "    (select initialName from employees emp         \n" +
                "		join department dept on dept.deptMngrId = emp.id  and dept.isDeleted = 0 and dept.deptID = -1) AS DepartmentName,                              \n" +
                "    'Paul Khunt' AS ManagerName                              \n" +
                "FROM                              \n" +
                "    customer_packingslip cp                          \n" +
                "        LEFT JOIN                              \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                              \n" +
                "        AND mfg.isDeleted = 0                              \n" +
                "WHERE                              \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID                      \n" +
                "LIMIT 1;                              \n" +
                "  \n" +
                "  # COFC Report Table details                            \n" +
                "	SELECT                           \n" +
                "    cpd.id AS cpDetID,                        \n" +
                "	cpd.custPOLineID AS POLine,              \n" +
                "	ss.releaseNumber,                                 \n" +
                "	cpd.lineID AS PSLine,                            \n" +
                "    sum(CASE WHEN (c.partType = 3 or  (c.partType = 2 and cpd.componentStockType = 1)) THEN sa.shippedqty     \n" +
                "					ELSE cpd.shipQty END) AS ShippedQty,                               \n" +
                "    cpd.poQty AS OrderQty,                              \n" +
                "     (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                              \n" +
                "	WHEN (c.iscustom = 1) THEN c.custAssyPN                              \n" +
                "	WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN c.mfgPN                              \n" +
                "	ELSE '' END) AS PartNumber,                            \n" +
                "    IFNULL(c.rev, '') AS Revision,                              \n" +
                "    ifnull(sa.woNumber,'N/A') AS WorkOrderNumber,                                   \n" +
                "      (CASE WHEN sa.woNumber IS NOT NULL THEN fun_getCertificationByWoNumber(sa.woNumber) 		        \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) AND cpd.standrads IS NULL THEN 'N/A'        \n" +
                "        ELSE cpd.standrads END) AS Standards,        \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,    	                \n" +
                "     CONCAT(IFNULL(Replace(cpd.assyDescription,'\n','<br/>'), ''), '<br/>',                                   \n" +
                "            IFNULL(CONCAT(' ', rr.name), '')) AS Descripton ,                  \n" +
                "     c.partType,                                   \n" +
                "   (case when sa.woNumber is not null then (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1)         \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN 'Per Part Label'        \n" +
                "        else 'N/A'end) AS DateCode,       \n" +
                "     (case when sa.workorderID is not null then wo.dateCodeFormat         \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN ''        \n" +
                "        when sa.stockType = 'OS' then 'WWYY'                 \n" +
                "        else '' end) AS DateCodeFormat  ,      \n" +
                "        c.RoHSStatusID      \n" +
                "FROM  	customer_packingslip_det cpd                              \n" +
                "		INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0                \n" +
                "		LEFT JOIN  salesshippingmst ss ON ss.shippingID=cpd.shippingId                       \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0                      \n" +
                "        LEFT JOIN workorder wo ON wo.woID = sa.workorderID and sa.isDeleted = 0         \n" +
                "		LEFT JOIN  rfq_rohsmst rr ON rr.id = c.rohsStatusID and rr.isDeleted = 0      \n" +
                "WHERE                              \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID                       \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber,cpd.poQty;                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4959,'2.00','V1','Sproc_GetPackingSlipAssemblyDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4959:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetPurchaseOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(                        \n" +
                "	IN pid INT                        \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "  \n" +
                "    # Purchase Order Master details                        \n" +
                "    SELECT  po.id,                         \n" +
                "		po.status,                        \n" +
                "		po.poNumber,                        \n" +
                "        po.poRevision,                        \n" +
                "        po.poDate,         \n" +
                "        po.poWorkingStatus,                       \n" +
                "        po.supplierAddress,                        \n" +
                "		po.shippingAddress,                 \n" +
                "        po.intermediateAddress,                \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                          \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                        \n" +
                "        po.shippingInsurance,                        \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,                        \n" +
                "        po.poComment,                        \n" +
                "        po.serialNumber,                       \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                        \n" +
                "		us.emailAddress,                        \n" +
                "		emp.phExtension  ,    \n" +
                "        '1.00' AS docNumber    \n" +
                "	FROM purchase_order_mst po                        \n" +
                "         INNER JOIN                              \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID                              \n" +
                "        AND gcs.isDeleted = 0                              \n" +
                "        INNER JOIN                              \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID                              \n" +
                "        AND gcp.isDeleted = 0                        \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy                                \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                          \n" +
                "        WHERE po.isDeleted = 0 AND po.id = pid;                        \n" +
                "  \n" +
                "	# Purchase Order Line details                        \n" +
                "    SELECT  pod.lineID,                        \n" +
                "		pod.id AS pODetID,                        \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,                \n" +
                "		(CASE WHEN (c.iscustom=1) THEN                             \n" +
                "			c.custAssyPN                            \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                             \n" +
                "			c.mfgPN                             \n" +
                "        ELSE ''  END) AS mfgPN ,                      \n" +
                "        IFNULL(c.rev, '') AS revision,                        \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,                        \n" +
                "		pod.supplierQuoteNumber,                        \n" +
                "        pod.internalRef,                        \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,                        \n" +
                "        pod.qty,                        \n" +
                "        'EA' uom,                        \n" +
                "        pod.price,      \n" +
                "        (SELECT SUM(IFNULL(pold.receivedQty,0)) FROM purchase_order_line_release_det pold WHERE pold.isdeleted=0 AND pold.refPurchaseOrderDetID=pod.id) receivedQty,         \n" +
                "       fun_getMFGPNByID(pod.supplierPartID) supplierPN,                         \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,               \n" +
                "        CONCAT(IFNULL(replace(pod.partDescription,'\n','<br/>'), ''),CASE WHEN (fun_getCertificationByPartID(pod.mfgPartID) IS NULL AND c.htsCode IS NULL AND c.countryOfOrigin IS NULL) THEN '' ELSE '<br/>' END,               \n" +
                "            IFNULL(CONCAT(                                        \n" +
                "                            fun_getCertificationByPartID(pod.mfgPartID)),                                        \n" +
                "                    ''),                        \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                        \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                      \n" +
                "        pod.lineComment                        \n" +
                "	 FROM purchase_order_det pod                        \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)                         \n" +
                "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid                         \n" +
                "	 ORDER BY pod.lineID ASC;	                        \n" +
                "  \n" +
                "	# Get purchase order Total Price table details                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                                   \n" +
                "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud                       \n" +
                "				INNER JOIN component cm ON cm.id = pud.mfgPartID                        \n" +
                "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 AND cm.partType <> 4) totalLinePrice ,                            \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,                                \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd                         \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID                        \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 AND c.partType = 4) totalPOMiscPrice                                \n" +
                "		FROM purchase_order_det pd                           \n" +
                "		WHERE pd.refPurchaseOrderID= pid                        \n" +
                "		AND pd.isdeleted=0;                 \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                        \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                        \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,                   \n" +
                "				IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0),0) totalPOPrice FROM tempTotalPrice LIMIT 1;                                 \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4960,'2.00','V1','Sproc_GetPurchaseOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4960:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetSalesOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(	                                                  \n" +
                "	IN pid INT(11)                                        \n" +
                "    )  \n" +
                "BEGIN                                                  \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,                                          \n" +
                "		sm.soDate,                                                \n" +
                "		sm.status,    \n" +
                "		sm.serialNumber,                    \n" +
                "		sm.shippingComment,                                                \n" +
                "		mfg.mfgName AS customer,                                                \n" +
                "		gctsm.gencCategoryName AS shippingMethod,                                                \n" +
                "		gctpm.gencCategoryName AS paymentMethod,                      \n" +
                "		-- get intermediate shipment address                      \n" +
                "		CASE                                                 \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN                                                        \n" +
                "	(                                                        \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                                \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                             \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                     \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                     \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                    \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                            \n" +
                "	FROM customer_addresses ca                                                            \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                            \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0                                                         \n" +
                "	) END AS intermediateShippingAddress,                      \n" +
                "  \n" +
                "        -- get shipping detils of customer                                                         \n" +
                "        CASE                                                 \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN                                                        \n" +
                "	(                                                        \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                                \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                             \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                     \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                     \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                    \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                            \n" +
                "	FROM customer_addresses ca                                                            \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                            \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                                                         \n" +
                "	) END AS shippingAddress,                                                \n" +
                "	-- get billing Address                                                \n" +
                "	CASE                                                 \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN                                                        \n" +
                "	(                                                        \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                             \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),                                    \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                     \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                    \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                            \n" +
                "	FROM customer_addresses ca                                                            \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID                                                            \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'                                                       \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,                                   \n" +
                "    '1.00' docNumber      \n" +
                "  \n" +
                "	FROM salesordermst sm                                                  \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)                                                \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)                                                  \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0                                    \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId                                      \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo                                              \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);                                              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT                         \n" +
                "    sd.lineID,                        \n" +
                "    c.PIDCode,                        \n" +
                "    sd.id AS sDetID,                        \n" +
                "    (CONCAT(CASE                        \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN                        \n" +
                "        ELSE c.custAssyPN                        \n" +
                "    END)) mfgPN,                        \n" +
                "    c.rev revision,                 \n" +
                "    CONCAT(IFNULL(replace(sd.partDescription,'\n','<br/>'), ''), '<br/>',                                   \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),                                      \n" +
                "            IFNULL(CONCAT(', ',                                      \n" +
                "                            fun_getCertificationByPartID(sd.partID)),                                      \n" +
                "                    ''),                                      \n" +
                "            IFNULL(CONCAT(', Quote#', CASE                        \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                        \n" +
                "        ELSE sd.quoteNumber                        \n" +
                "    END), ''),                                      \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                      \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                       \n" +
                "    sd.qty,                        \n" +
                "    sd.price,                        \n" +
                "    sd.qty * sd.price AS extPrice,                        \n" +
                "    sd.materialTentitiveDocDate,                    \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,                       \n" +
                "    CASE                        \n" +
                "        WHEN sd.partCategory = 2 THEN NULL                        \n" +
                "        ELSE sd.shippingQty                        \n" +
                "    END shippingQty,                        \n" +
                "    ro.rohsIcon AS rohsIcon,                        \n" +
                "    ro.name AS rohsStatus,                        \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,                        \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,        \n" +
                "    su.emailAddress,                        \n" +
                "    sd.custPOLineNumber,                        \n" +
                "    CASE                        \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                        \n" +
                "        ELSE sd.quoteNumber                        \n" +
                "    END quoteNumber,                        \n" +
                "    sd.remark,                        \n" +
                "    emp.phExtension,                  \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser                        \n" +
                "FROM                        \n" +
                "    salesorderdet sd                        \n" +
                "        JOIN                        \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id                        \n" +
                "        AND sm.deletedAt IS NULL)                        \n" +
                "        JOIN                        \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)                        \n" +
                "        JOIN                        \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id                        \n" +
                "        AND ro.deletedAt IS NULL)                        \n" +
                "        LEFT JOIN                        \n" +
                "    users su ON su.id = sm.updatedBy                        \n" +
                "        LEFT JOIN                        \n" +
                "    employees emp ON emp.id = su.employeeID                        \n" +
                "        LEFT JOIN                        \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                        \n" +
                "        LEFT JOIN                        \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                        \n" +
                "        AND ra.partID = sd.partID                        \n" +
                "        LEFT JOIN                        \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                        \n" +
                "WHERE                        \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)                        \n" +
                "        AND sm.id = pid                        \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;	                                    \n" +
                "  \n" +
                "        -- get salesorder level total details for                                    \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                    \n" +
                "	SELECT SUM(sd.qty * sd.price) totalLinePrice,                                    \n" +
                "	(SELECT SUM(sod.qty * sod.price) FROM salesorder_otherexpense_details sod WHERE sod.refSalesOrderDetID IN (SELECT s.id FROM salesorderdet s JOIN component c ON c.id=s.partID AND c.isdeleted=0 WHERE s.refsalesorderID=pid                \n" +
                "                	AND s.isDeleted=0 ) AND sod.isdeleted=0) totalLineMiscPrice,                                    \n" +
                "	(SELECT SUM(ssd.qty * ssd.price) FROM salesorderdet ssd JOIN component c ON c.id=ssd.partID AND c.isdeleted=0  WHERE ssd.refsalesorderID=pid AND c.partType=4 AND ssd.isdeleted=0) totalSOMiscPrice                                  \n" +
                "                	FROM salesorderdet sd  JOIN component c ON c.id=sd.partID AND c.isdeleted=0                                 \n" +
                "                	WHERE sd.refsalesorderID=pid  AND sd.isdeleted=0;                         \n" +
                "  \n" +
                "	SELECT                         \n" +
                "    IFNULL(totalLinePrice,0) totalLinePrice,                        \n" +
                "    IFNULL(totalLineMiscPrice, 0) totalLineMiscPrice,                       \n" +
                "    (IFNULL(totalLinePrice,0) + IFNULL(totalLineMiscPrice, 0)) totalSOPrice                        \n" +
                "FROM                        \n" +
                "    tempTotalPrice;                                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4961,'2.00','V1','Sproc_GetSalesOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4961:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetConnectorTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetConnectorTypesForElastic`(	                                                \n" +
                "	IN pId INT,    \n" +
                "    In pFromdate date,    \n" +
                "    In pTodate date,    \n" +
                "    IN pRequiredCount tinyint(1)                                                     \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);          \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "  \n" +
                "	IF(pRequiredCount)     \n" +
                "	THEN    \n" +
                "		SELECT         \n" +
                "			 count(1) totalCount                  \n" +
                "		FROM rfq_connectertypemst  AS rfqCtm        \n" +
                "		WHERE rfqCtm.isDeleted = 0;     \n" +
                "    ELSE    \n" +
                "		SELECT         \n" +
                "			rfqCtm.id        \n" +
                "			,rfqCtm.isDeleted                \n" +
                "			,NAME   \n" +
                "			,description        \n" +
                "			,(CASE WHEN (isActive = 0) THEN 'Disable'                         \n" +
                "					WHEN (isActive = 1) THEN 'Enable' ELSE '' END) AS STATUS        \n" +
                "			,(SELECT GROUP_CONCAT(alias SEPARATOR ', ') AS aliaslist           \n" +
                "				FROM component_fields_genericalias_mst           \n" +
                "				WHERE isdeleted = 0 AND  refTableName ='rfq_connectertypemst'           \n" +
                "			  AND refId = rfqCtm.id) AS aliaslist   \n" +
                "		FROM rfq_connectertypemst  AS rfqCtm        \n" +
                "		WHERE rfqCtm.id = IFNULL(pId, rfqCtm.id) AND    \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN    \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(rfqCtm.createdAt,v_TimeZone)) between pFromdate and pTodate)    \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(rfqCtm.updatedAt,v_TimeZone)) between pFromdate and pTodate))                  \n" +
                "					ELSE 1 = 1 END);     \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUOMDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUOMDetailForElastic`(      \n" +
                "	IN pId INT,    \n" +
                "    In pFromdate date,    \n" +
                "    In pTodate date,    \n" +
                "    IN pRequiredCount tinyint(1)        \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);           \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "  \n" +
                "	IF(pRequiredCount)     \n" +
                "	THEN    \n" +
                "		SELECT     \n" +
                "			count(1) totalCount    \n" +
                "		FROM uoms um      \n" +
                "		LEFT JOIN measurement_types mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0      \n" +
                "		WHERE  um.isdeleted = 0;      \n" +
                "    ELSE    \n" +
                "		SELECT um.id,    \n" +
                "			mt.name measurementtype,      \n" +
                "			um.abbreviation,      \n" +
                "			um.unitName,      \n" +
                "			CONCAT('1 ', um.abbreviation) AS 1UOM,   \n" +
                "            um.operator,     \n" +
                "			FUN_CONVERTUOMFORUOMLIST(um.id,      \n" +
                "					CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE)      \n" +
                "						AS SIGNED),      \n" +
                "					1) AS unitConvertValue,      \n" +
                "			(CASE WHEN (`um`.`isFormula` = 0)      \n" +
                "				THEN FUN_CONVERTUOMFORUOMLIST(um.id, CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE) AS SIGNED), 1)      \n" +
                "				ELSE NULL      \n" +
                "			END) AS baseEquivalent,      \n" +
                "			(SELECT GROUP_CONCAT(alias) AS aliaslist      \n" +
                "				FROM component_fields_genericalias_mst      \n" +
                "				WHERE isdeleted = 0      \n" +
                "					AND refTableName = 'Uoms'      \n" +
                "					AND refId = um.id      \n" +
                "				GROUP BY refId) AS aliaslist,      \n" +
                "			(CASE WHEN (um.defaultUOM = 1) THEN 'Yes'      \n" +
                "				ELSE 'No'      \n" +
                "			END) AS defaultUOMConvertedValue,      \n" +
                "			(CASE      \n" +
                "				WHEN (um.isFormula = 0) THEN 'No'      \n" +
                "				WHEN (um.isFormula = 1) THEN 'Yes'      \n" +
                "				ELSE ''      \n" +
                "			END) AS `isFormulaConvertedValue`,      \n" +
                "			um.description,      \n" +
                "			(CASE      \n" +
                "				WHEN (um.isSystemDefault = 0) THEN 'No'      \n" +
                "				WHEN (um.isSystemDefault = 1) THEN 'Yes'      \n" +
                "				ELSE ''      \n" +
                "			END) AS `isSystemDefaultConvertedValue`,      \n" +
                "			um.measurementTypeID,      \n" +
                "			um.ord AS displayOrder,      \n" +
                "			mt.displayOrder AS measurementTypeOrder,      \n" +
                "			FUN_GETBASEUNIT(um.measurementTypeID, TRUE) AS baseUnitValue      \n" +
                "            ,um.isDeleted    \n" +
                "		FROM uoms um      \n" +
                "		LEFT JOIN measurement_types mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0      \n" +
                "		WHERE um.id = IFNULL(pId, um.id)  AND    \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN    \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(um.createdAt,v_TimeZone)) between pFromdate and pTodate)     \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(um.updatedAt,v_TimeZone)) between pFromdate and pTodate)) OR    \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(mt.createdAt,v_TimeZone)) between pFromdate and pTodate)      \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(mt.updatedAt,v_TimeZone)) between pFromdate and pTodate))                    \n" +
                "                ELSE 1 = 1 END);      \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4962,'2.00','V1','Bug 35115: QA Testing of User Story 34159: Restore database for elastic search and update document - Copy - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4962:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021 *********************************** */
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive,  createdBy,  isDeleted, parentTabID, isDisplay, displayMenuName, isAllowAsHomePage,  isPopup)  \n" +
                "VALUES ('Customer Refund', '0', NULL, 'Financialmanagement.customeraccounting.customerrefund', 'app.transaction.customerrefund', '/customerRefundlist', 'Refund', NULL, NULL, '0', '15.06000000', NULL, 'icons-customer-refund', '1', '1', '0', NULL, '1', 'Customer Refund', '1', '0');  \n" +
                "  \n" +
                "SELECT pageid INTO @pageidAcc FROM page_detail WHERE pageName ='Customer Accounting' and isdeleted = 0;  \n" +
                "UPDATE page_detail SET parentPageID=@pageidAcc WHERE pageName = 'Customer Refund' and isdeleted = 0;   \n" +
                "  \n" +
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive,  createdBy,  isDeleted, parentTabID, isDisplay, displayMenuName, isAllowAsHomePage,  isPopup)  \n" +
                "VALUES ('Customer Refund Details', '0', NULL, NULL, 'app.transaction.customerrefund.detail', '/detaillist', 'Customer Refund Details', NULL, NULL, '0', NULL, NULL, 'icons-customer-refund', '1', '1', '0', NULL, '0', 'Customer Refund Details', '1', '0');  \n" +
                "  \n" +
                "SELECT pageid INTO @pageidRef FROM page_detail WHERE pageName ='Customer Refund' and isdeleted = 0;  \n" +
                "UPDATE page_detail SET parentPageID=@pageidRef WHERE pageName = 'Customer Refund Details' and isdeleted = 0;   \n" +
                "  \n" +
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive,  createdBy,  isDeleted, parentTabID, isDisplay, displayMenuName, isAllowAsHomePage,  isPopup)  \n" +
                "VALUES ('Customer Refund Summary', '0', NULL, NULL, 'app.transaction.customerrefund.summary', '/summarylist', 'Customer Refund Summary', NULL, NULL, '0', NULL, NULL, 'icons-customer-refund', '1', '1', '0', NULL, '0', 'Customer Refund Summary', '1', '0');  \n" +
                "  \n" +
                "SELECT pageid INTO @pageidSum FROM page_detail WHERE pageName ='Customer Refund' and isdeleted = 0;  \n" +
                "UPDATE page_detail SET parentPageID=@pageidSum WHERE pageName = 'Customer Refund Summary' and isdeleted = 0;   \n" +
                "  \n" +
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, isActive,  createdBy,  isDeleted, parentTabID, isDisplay, displayMenuName, isAllowAsHomePage, isPopup)  \n" +
                "VALUES ('Manage Customer Refund Main', '0', NULL, NULL, 'app.transaction.customerrefund.main', '/customerrefund', 'Customer Refund', NULL, NULL, '0', NULL, NULL,  '1', '1', '0', NULL, '0', 'Customer Refund', '0', '0');  \n" +
                "  \n" +
                "SELECT pageid INTO @pageidMain FROM page_detail WHERE pageName ='Customer Refund' and isdeleted = 0;  \n" +
                "UPDATE page_detail SET parentPageID=@pageidMain WHERE pageName = 'Manage Customer Refund Main' and isdeleted = 0;   \n" +
                "  \n" +
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive,  createdBy,  isDeleted, parentTabID, isDisplay, displayMenuName, isAllowAsHomePage, isPopup)  \n" +
                "VALUES ('Manage Customer Refund', '0', NULL, NULL, 'app.transaction.customerrefund.main.manage', '/manage/:id', 'Add Customer Refund', NULL, NULL, '0', NULL, NULL, 'icons-add-customer-refund', '1', '1', '0', NULL, '1', 'Customer Refund', '1', '0');  \n" +
                "  \n" +
                "SELECT pageid INTO @pageidRMain FROM page_detail WHERE pageName ='Manage Customer Refund Main' and isdeleted = 0;  \n" +
                "UPDATE page_detail SET parentPageID=@pageidRMain WHERE pageName = 'Manage Customer Refund' and isdeleted = 0;   \n" +
                "  \n" +
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive,  createdBy,  isDeleted, parentTabID, isDisplay, displayMenuName, isAllowAsHomePage, isPopup)  \n" +
                "VALUES ('Manage Customer Refund Documents', '0', NULL, NULL, 'app.transaction.customerrefund.main.documents', '/documents/:id', 'Manage Customer Payment Documents', NULL, NULL, '0', NULL, NULL, 'icons-customer-refund', '1', '1', '0', NULL, '1', 'Customer Refund', '0', '0');  \n" +
                "  \n" +
                "SELECT pageid INTO @pageidRefDoc FROM page_detail WHERE pageName ='Manage Customer Refund Main' and isdeleted = 0;  \n" +
                "UPDATE page_detail SET parentPageID=@pageidRefDoc WHERE pageName = 'Manage Customer Refund Documents' and isdeleted = 0;   \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO identity(`type`, `prefix`, `maxvalue`, `numberLength`, remark, isdeleted, createdby, updatedBy,createByRoleId,updateByRoleId, systemGenerated)   \n" +
                "VALUES ('CustomerRefundSystemID','CR',1,9,'Customer Refund systemid generate from this id',0,1,1,1,1,1);  \n" +
                "  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4963,'2.00','V1',' Insert Customer Refund pages - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4963:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021 *********************************** */
                "ALTER TABLE employees  \n" +
                "ADD COLUMN defaultCustRefundListTabID INT COMMENT '0-Summary tab , 1-Detail tab';  \n" +
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4964,'2.00','V1',' Alter Employee Table for Refund Tab - Heena  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4964:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateCustomerRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(                      \n" +
                "	IN pCustPaymentDetList JSON,   \n" +
                "    IN pCustCMDetList JSON,   \n" +
                "	IN pMfgcodeID INT,                      \n" +
                "	IN pPaymentNumber VARCHAR(50),                      \n" +
                "	IN pPaymentDate DATE,                      \n" +
                "	IN pPaymentAmount DECIMAL(18,8),                      \n" +
                "	IN pPaymentType INT,                      \n" +
                "	IN pAccountReference VARCHAR(50),                      \n" +
                "	IN pBankAccountMasID INT,                      \n" +
                "	IN pBankAccountNo VARCHAR(50),                      \n" +
                "	IN pBankName VARCHAR(255),                      \n" +
                "	IN pRemark VARCHAR(1000),                      \n" +
                "	IN pRefPaymentMode VARCHAR(10),                      \n" +
                "	IN pTotSelectedPayOfCust INT,     \n" +
                "    IN pTotSelectedCMOfCust INT,     \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,                   \n" +
                "	IN pSystemID VARCHAR(20),                  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,   \n" +
                "	IN pUserID INT,                      \n" +
                "	IN pUserRoleID INT,  \n" +
                "    IN pRefGencTransModeID INT,  \n" +
                "    IN pOffsetAmount DECIMAL(18,8)  \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "	DECLARE insertedRefundMstID INT;                  \n" +
                "	DECLARE vCountExistsCheckNo INT;             \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;           \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CR'  AND pisConfmTakenForDuplicateCheckNo = 0) THEN                  \n" +
                "		/* check duplicate check number if confirmation not taken >> CR - Customer Refund */                    \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                            \n" +
                "		FROM packingslip_invoice_payment                            \n" +
                "		WHERE refPaymentMode = pRefPaymentMode           \n" +
                "		AND paymentNumber = pPaymentNumber                            \n" +
                "		AND mfgcodeID = pMfgcodeID                  \n" +
                "		AND isPaymentVoided = 0                  \n" +
                "		AND isdeleted = 0    ;                  \n" +
                "  \n" +
                "	END IF;               \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedPayOfCust > 0                   \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN                      \n" +
                "  \n" +
                "		/* get/map all Customer payment Detail List send from UI */                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS                                                                  \n" +
                "		SELECT 	*                                                                   \n" +
                "		FROM 	JSON_TABLE(                           \n" +
                "			pCustPaymentDetList,                                                                  \n" +
                "				\"$[*]\" COLUMNS(                          \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",                                                           \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                      \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,   \n" +
                "                    `comment`  varchar(2000) PATH \"$.comment\"   \n" +
                "				)                        \n" +
                "			) AS CustPaymentDetList_JT ;                       \n" +
                "  \n" +
                "	/* get all customer payment > against total payment list > available in data base */	                     \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS   \n" +
                "			SELECT psip.id AS paymentMstID,                       \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,                      \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id                   \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0) AS totalRefundIssuedAmount                      \n" +
                "			FROM packingslip_invoice_payment psip                      \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)                       \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)                       \n" +
                "			> if selected payment not found from db                      \n" +
                "			> original Agreed Refund Amount Of Payment  mismatch                      \n" +
                "			> Total Refund Issued Amount mismatch                      \n" +
                "			*/	                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                       \n" +
                "			SELECT tucipl.*                      \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl                      \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID                      \n" +
                "			WHERE (                      \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))                        \n" +
                "				OR                      \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))	                      \n" +
                "				OR                      \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))                      \n" +
                "				)                      \n" +
                "			;      \n" +
                "  \n" +
                "	ELSEIF (vCountExistsCheckNo = 0 AND pTotSelectedCMOfCust > 0                   \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN   \n" +
                "             /* get/map all Customer CM Detail List send from UI */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS                                                                  \n" +
                "		SELECT 	*                                                                   \n" +
                "		FROM 	JSON_TABLE(                           \n" +
                "			pCustCMDetList,                                                                  \n" +
                "				\"$[*]\" COLUMNS(                          \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",     \n" +
                "                    `custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",     \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                      \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,   \n" +
                "                    `comment`  varchar(2000) PATH \"$.comment\"   \n" +
                "				)                        \n" +
                "			) AS CustCMDetList_JT ;                       \n" +
                "	 -- select * from temp_UI_CustCMDetList;  \n" +
                "	/* get all customer Refund > against total CM list > available in data base */	                     \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS   \n" +
                "			SELECT cps.id AS custCreditMemoMstID,   \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,   \n" +
                "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment      \n" +
                "				WHERE refCustCreditMemoID = cps.id     \n" +
                "				AND refPaymentMode = 'CA'      \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
                "			 cps.agreedRefundAmt AS agreedRefundAmount ,    \n" +
                "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id                    \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount   \n" +
                "		FROM customer_packingslip AS cps    \n" +
                "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "		AND cps.isDeleted = 0 ;  \n" +
                "         -- select * from temp_DB_Available_CustCMDetList;  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)                       \n" +
                "			> if selected CM not found from db                      \n" +
                "			> original Agreed Refund Amount Of Refund mismatch                      \n" +
                "			> Total Refund Issued Amount mismatch                      \n" +
                "			*/	                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                       \n" +
                "			SELECT tucml.*                      \n" +
                "			FROM temp_UI_CustCMDetList tucml                      \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID                      \n" +
                "			WHERE (                      \n" +
                "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))                        \n" +
                "				OR                      \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))	                      \n" +
                "				OR                      \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))                      \n" +
                "				)                      \n" +
                "			;     \n" +
                "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	/* set up default temp table if not created */           \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                        \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;   \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                        \n" +
                "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;      \n" +
                "  \n" +
                "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))  AND (vCountExistsCheckNo = 0)) THEN   \n" +
                "  \n" +
                "	INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,                      \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,                      \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,                 \n" +
                "			`depositBatchNumber` ,    \n" +
                "			 `offsetAmount`,`refGencTransModeID`,         \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,            \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)                      \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,                      \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,                      \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,                      \n" +
                "			pDepositBatchNumber,     \n" +
                "			pOffsetAmount , pRefGencTransModeID ,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,             \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;        \n" +
                "  \n" +
                "		SET insertedRefundMstID = LAST_INSERT_ID();    \n" +
                "  \n" +
                "		IF(pTotSelectedPayOfCust > 0) THEN      \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,           \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,            \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)                      \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,          \n" +
                "				comment ,        \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,             \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList ;         \n" +
                "  \n" +
                "		ELSE IF(pTotSelectedCMOfCust > 0) THEN      \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,           \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,            \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)                      \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,          \n" +
                "				comment ,        \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,             \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList ;           \n" +
                "  \n" +
                "			END IF;   \n" +
                "		END IF;                      \n" +
                "	END IF;      \n" +
                "	/* Resp[0] - store procedure status */                        \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR (vCountExistsCheckNo > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN                              \n" +
                "		SELECT 0 AS 'spStatus' ;                        \n" +
                "	ELSE                        \n" +
                "		SELECT 1 AS 'spStatus' ;                        \n" +
                "	END IF;       \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted payment/CM */                        \n" +
                "	  SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;                       \n" +
                "	  SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	/* Resp[2] - newly inserted refund master id for Refund Transaction  */                       \n" +
                "		SELECT insertedRefundMstID AS insertedRefundMstID;                   \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */                    \n" +
                "	IF (vCountExistsCheckNo > 0) THEN                  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                        \n" +
                "	ELSE                        \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                        \n" +
                "	END IF;          \n" +
                "  \n" +
                "/*	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                       \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                       \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;    */                \n" +
                "  \n" +
                "    END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */

                "DROP procedure IF EXISTS `Sproc_GetAllCreditMemoOfCustomerRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllCreditMemoOfCustomerRefund`(    \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pCustRefundMstID INT,  \n" +
                "	IN pCreditMemoTransType VARCHAR(255),  \n" +
                "    IN pRefPaymentMode VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN    \n" +
                "SELECT * FROM (   \n" +
                "SELECT  NULL As paymentDetMstID , cps.id  AS custCreditMemoMstID,   \n" +
                "			'CREDIT MEMO' As refTransModeType,  \n" +
                "            fun_getMfgCodeAndNameByID(cps.customerID) AS mfgFullName ,   \n" +
                "			cps.isMarkForRefund , cps.agreedRefundAmt AS agreedRefundAmount ,   \n" +
                "            cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "			cps.customerID , psipd.paymentAmount AS paymentAmountForSelectedCM ,  \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,  \n" +
                "			 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id                   \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount ,  \n" +
                "                     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment      \n" +
                "				WHERE refCustCreditMemoID = cps.id     \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo   \n" +
                "				FROM customer_packingslip cps  \n" +
                "                LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id AND psipd.isPaymentVoided = 0                      \n" +
                "					AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID  \n" +
                "				WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1  \n" +
                "				AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2 ) tempCrditMemoList  \n" +
                "                WHERE (              \n" +
                "				( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0                \n" +
                "						 /* get all peding for refund */	              \n" +
                "			) ;  \n" +
                "else  \n" +
                "	SELECT * FROM (  \n" +
                "SELECT  psipd.id As paymentDetMstID , cps.id  AS custCreditMemoMstID,   \n" +
                "			'CREDIT MEMO' As refTransModeType,  \n" +
                "            fun_getMfgCodeAndNameByID(cps.customerID) AS mfgFullName ,   \n" +
                "			cps.isMarkForRefund , cps.agreedRefundAmt AS agreedRefundAmount ,   \n" +
                "            cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "			cps.customerID , psipd.paymentAmount AS paymentAmountForSelectedCM ,  \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,  \n" +
                "			 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id                  \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount ,  \n" +
                "                     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment      \n" +
                "				WHERE refCustCreditMemoID = cps.id     \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo   \n" +
                "				FROM customer_packingslip cps  \n" +
                "                LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0                      \n" +
                "					AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID  \n" +
                "				WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1  \n" +
                "				AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2 ) tempCrditMemoList  \n" +
                "				WHERE               \n" +
                "					(              \n" +
                "						(IFNULL(tempCrditMemoList.paymentAmountForSelectedCM,0) > 0)   \n" +
                "								 /* get  paid CM*/	              \n" +
                "					)   \n" +
                "		UNION  \n" +
                "  \n" +
                "        	SELECT * FROM (  \n" +
                "SELECT  NULL As paymentDetMstID , cps.id  AS custCreditMemoMstID,   \n" +
                "			'CREDIT MEMO' As refTransModeType,  \n" +
                "            fun_getMfgCodeAndNameByID(cps.customerID) AS mfgFullName ,   \n" +
                "			cps.isMarkForRefund , cps.agreedRefundAmt AS agreedRefundAmount ,   \n" +
                "            cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "			cps.customerID , psipd.paymentAmount AS paymentAmountForSelectedCM ,  \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,  \n" +
                "			 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id                   \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount ,  \n" +
                "                     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment      \n" +
                "				WHERE refCustCreditMemoID = cps.id     \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo   \n" +
                "				FROM customer_packingslip cps  \n" +
                "                LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0                      \n" +
                "					AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID  \n" +
                "				WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1  \n" +
                "				AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2 AND cps.id NOT IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det              \n" +
                "								WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0            \n" +
                "								AND isDeleted = 0 GROUP BY refPayementid)) tempCrditMemoList   \n" +
                "                WHERE (              \n" +
                "				( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0                \n" +
                "						 /* get all peding for refund */	              \n" +
                "			)    \n" +
                "            ;   \n" +
                "	END IF;  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */

                "DROP procedure IF EXISTS `Sproc_GetAllPaymentOfCustomerRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllPaymentOfCustomerRefund`(  \n" +
                "IN pCustomerID INT,  \n" +
                "IN pCustRefundMstID INT,  \n" +
                "IN pRefPaymentMode VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN              \n" +
                "SELECT *     \n" +
                "FROM (SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,    \n" +
                "                psip.mfgcodeID,                                                \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                       \n" +
                "                psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "                psip.refVoidedPaymentNumber,                      \n" +
                "                psip.refVoidedPaymentId,                                  \n" +
                "                psip.paymentNumber,                                                    \n" +
                "                psip.bankName,                                                    \n" +
                "                psip.bankAccountNo,                                                    \n" +
                "                psip.paymentType,                                                    \n" +
                "                psip.bankAccountMasID,                   \n" +
                "                psip.systemId ,     \n" +
                "                psip.isMarkForRefund ,    \n" +
                "                case when pRefPaymentMode = 'R' then 'PAYMENT' END As refPaymentType,  \n" +
                "		psip.paymentDate,                                              \n" +
                "                psip.agreedRefundAmt AS agreedRefundAmount ,   \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id                   \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    )  As totalRefundIssuedAmount ,  \n" +
                "				psip.paymentAmount As totalPaymentAmount,   \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                          \n" +
                "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,             \n" +
                "				psip.payToAddress payToAddress,                                                             \n" +
                "                psip.accountReference,                                              \n" +
                "                psip.remark, psip.offsetAmount ,                    \n" +
                "                psip.lockStatus,   \n" +
                "                    (SELECT comment  \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) comment,  \n" +
                "                     (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) paymentAmountForSelectedPayment  \n" +
                "	   FROM packingslip_invoice_payment psip   \n" +
                "       LEFT JOIN (SELECT psipd.refPayementid,   \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount   \n" +
                "				    FROM packingslip_invoice_payment_det psipd   \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "											AND cps.isDeleted = 0    \n" +
                "				     WHERE psipd.isDeleted = 0        \n" +
                "					 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "                     ON psip.id = payDetTemp.refPayementid    \n" +
                "             WHERE psip.isMarkForRefund = 1 and psip.mfgcodeID = pCustomerID and psip.isDeleted = 0 and psip.isPaymentVoided = 0   \n" +
                "             and psip.refPaymentMode = pRefPaymentMode)  \n" +
                "             tempPay              \n" +
                "		WHERE               \n" +
                "			(              \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0                \n" +
                "						 /* get all peding to refund */	              \n" +
                "			)              \n" +
                "		;    \n" +
                "ELSE  \n" +
                "	SELECT *     \n" +
                "	FROM (SELECT psip.id AS paymentMstID,   \n" +
                "					(SELECT id   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) AS paymentDetMstID ,                                                           \n" +
                "                psip.mfgcodeID,                                                \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                       \n" +
                "                psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "                psip.refVoidedPaymentNumber,                      \n" +
                "                psip.refVoidedPaymentId,                                  \n" +
                "                psip.paymentNumber,                                                    \n" +
                "                psip.bankName,                                                    \n" +
                "                psip.bankAccountNo,                                                    \n" +
                "                psip.paymentType,                                                    \n" +
                "                psip.bankAccountMasID,                   \n" +
                "                psip.systemId ,     \n" +
                "                psip.isMarkForRefund ,    \n" +
                "                case when pRefPaymentMode = 'R' then 'PAYMENT' END As refPaymentType,  \n" +
                "		psip.paymentDate,                                              \n" +
                "               psip.agreedRefundAmt AS agreedRefundAmount ,   \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id                   \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) As totalRefundIssuedAmount ,  \n" +
                "				psip.paymentAmount As totalPaymentAmount,   \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                          \n" +
                "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,             \n" +
                "				psip.payToAddress payToAddress,                                                             \n" +
                "                psip.accountReference,                                              \n" +
                "                psip.remark, psip.offsetAmount ,                    \n" +
                "                psip.lockStatus,    \n" +
                "                (SELECT comment  \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) comment,  \n" +
                "                    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) paymentAmountForSelectedPayment  \n" +
                "	   FROM packingslip_invoice_payment psip   \n" +
                "       LEFT JOIN (SELECT psipd.refPayementid,   \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount   \n" +
                "				    FROM packingslip_invoice_payment_det psipd   \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "											AND cps.isDeleted = 0    \n" +
                "				     WHERE psipd.isDeleted = 0        \n" +
                "					 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "                     ON psip.id = payDetTemp.refPayementid    \n" +
                "             WHERE psip.isMarkForRefund = 1 and psip.mfgcodeID = pCustomerID and psip.isDeleted = 0 and psip.isPaymentVoided = 0   \n" +
                "             and psip.refPaymentMode = pRefPaymentMode)  \n" +
                "             tempPay              \n" +
                "				WHERE               \n" +
                "					(              \n" +
                "						(tempPay.paymentAmountForSelectedPayment > 0)   \n" +
                "								 /* get all paid */	              \n" +
                "					)      \n" +
                "		UNION   \n" +
                "		SELECT *     \n" +
                "		FROM (SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,                                                                     \n" +
                "						psip.mfgcodeID,                                                \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                       \n" +
                "                psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "                psip.refVoidedPaymentNumber,                      \n" +
                "                psip.refVoidedPaymentId,                                  \n" +
                "                psip.paymentNumber,                                                    \n" +
                "                psip.bankName,                                                    \n" +
                "                psip.bankAccountNo,                                                    \n" +
                "                psip.paymentType,                                                    \n" +
                "                psip.bankAccountMasID,                   \n" +
                "                psip.systemId ,     \n" +
                "                psip.isMarkForRefund ,    \n" +
                "                case when pRefPaymentMode = 'R' then 'PAYMENT' END As refPaymentType,  \n" +
                "		psip.paymentDate,                                              \n" +
                "                psip.agreedRefundAmt AS agreedRefundAmount ,   \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id                   \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    )  As totalRefundIssuedAmount ,  \n" +
                "				psip.paymentAmount As totalPaymentAmount,   \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                          \n" +
                "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,             \n" +
                "				psip.payToAddress payToAddress,                                                             \n" +
                "                psip.accountReference,                                              \n" +
                "                psip.remark, psip.offsetAmount ,                    \n" +
                "                psip.lockStatus,   \n" +
                "                (SELECT comment  \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) comment,  \n" +
                "                    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) paymentAmountForSelectedPayment  \n" +
                "	   FROM packingslip_invoice_payment psip   \n" +
                "       LEFT JOIN (SELECT psipd.refPayementid, psipd.id AS paymentDetMstID ,   \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount   \n" +
                "				    FROM packingslip_invoice_payment_det psipd   \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "											AND cps.isDeleted = 0    \n" +
                "				     WHERE psipd.isDeleted = 0        \n" +
                "					 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "                     ON psip.id = payDetTemp.refPayementid    \n" +
                "             WHERE psip.isMarkForRefund = 1 and psip.mfgcodeID = pCustomerID and psip.isDeleted = 0 and psip.isPaymentVoided = 0   \n" +
                "             and psip.refPaymentMode = pRefPaymentMode and psip.id NOT IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det              \n" +
                "								WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0            \n" +
                "								AND isDeleted = 0 GROUP BY refPayementid)) tempPay   \n" +
                "  \n" +
                "			WHERE               \n" +
                "			(              \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0                \n" +
                "						 /* get all peding to refund  */	              \n" +
                "			)              \n" +
                "		;    \n" +
                "	END IF;  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */

                "DROP procedure IF EXISTS `Sproc_GetCustomerRefundByMstID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(          \n" +
                "	IN pCustRefundMstID INT ,  \n" +
                "    IN pRefPaymentMode VARCHAR(5)  \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                   \n" +
                "		DECLARE v_TimeZone VARCHAR(50);                                          	          \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;                                                          \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    	          \n" +
                "  \n" +
                "		SELECT 	psip.id,                                                                    \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,          \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,            \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,           \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,    \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,           \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,                                                                     \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "            fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby    \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip                                           \n" +
                "		WHERE id = pCustRefundMstID          \n" +
                "		AND refPaymentMode = pRefPaymentMode   \n" +
                "		AND psip.isDeleted = 0                \n" +
                "		;          \n" +
                "	END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */

                "DROP procedure IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
                "	IN pPageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "	IN pCustomerIDs VARCHAR(16383),    \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),   \n" +
                "    IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,    \n" +
                "    IN pPaymentNumber VARCHAR(1000),   \n" +
                "    IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "    IN pAmount VARCHAR(50),     \n" +
                "	IN pExactRefundAmountSearch TINYINT,    \n" +
                "	IN pFromDate DATE,    \n" +
                "	IN pToDate DATE,    \n" +
                "	IN pFromCMPaymentDate DATE,    \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(10),  \n" +
                "    IN pTransModeType INT  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);    \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);    \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);    \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "        SET v_CMDateCon = '';    \n" +
                "        SET v_PaymentDateCon = '';    \n" +
                "  \n" +
                "        set v_CMPaymentDateWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  		SET pWhereClause = '1=1' ;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');    \n" +
                "		END IF;   \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');    \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');    \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');    \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN    \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN    \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');    \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');    \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN    \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');    \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');    \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN    \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');    \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');    \n" +
                "		END IF;   \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('		  \n" +
                "			AND    \n" +
                "			(		  \n" +
                "				EXISTS(    \n" +
                "					SELECT  1    \n" +
                "					FROM packingslip_invoice_payment_det pipddt   \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id    \n" +
                "					',v_PaymentDateCon,'    \n" +
                "					AND pipddt.isDeleted=0    \n" +
                "				 )  \n" +
                "				 OR  \n" +
                "				 EXISTS(    \n" +
                "					SELECT  1    \n" +
                "					FROM packingslip_invoice_payment_det pipddt   \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id    \n" +
                "					',v_CMDateCon,'    \n" +
                "					AND pipddt.isDeleted=0    \n" +
                "				 )  \n" +
                "			)  \n" +
                "  \n" +
                "		');  \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"    \n" +
                "		SELECT  psip.id,    \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,    \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,   \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  'Paid' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,    \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,    \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,    \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')    \n" +
                "									ELSE NULL END) AS voidedAt,   \n" +
                "			psip.bankName,    \n" +
                "			psip.bankAccountNo,    \n" +
                "			psip.paymentType,    \n" +
                "			psip.bankAccountMasID,    \n" +
                "			psip.systemId ,    \n" +
                "			psip.paymentDate AS refundDate,    \n" +
                "			psip.paymentAmount,    \n" +
                "			psip.accountReference,    \n" +
                "			psip.remark,   \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,    \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,   \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList   \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
                "				ELSE NULL END) AS paymentCMList ,   \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList   \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,   \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'    \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,   \n" +
                "			psip.offsetAmount ,   \n" +
                "			psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,    \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,    \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole   \n" +
                "		FROM packingslip_invoice_payment psip    \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0    \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0    \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList  \n" +
                "					FROM packingslip_invoice_payment_det psipd    \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL   \n" +
                "					AND psipd.isDeleted = 0    \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp   \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid   \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList  \n" +
                "					 FROM packingslip_invoice_payment_det psipd    \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0   \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL   \n" +
                "					AND psipd.isDeleted = 0    \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp   \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid 		  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'   \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		AND psip.isDeleted = 0   \n" +
                "		\",v_CMPaymentDateWhereClause,\"  \n" +
                "            \");  \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;             \n" +
                "  \n" +
                "			/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */

                "DROP procedure IF EXISTS `Sproc_RetrieveCustomerAllRefundDetailLst`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerAllRefundDetailLst`(  \n" +
                "	IN pPageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),     \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "	IN pCustomerIDs VARCHAR(16383),    \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),   \n" +
                "    IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,    \n" +
                "    IN pPaymentNumber VARCHAR(1000),   \n" +
                "    IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "    IN pAmount VARCHAR(50),    \n" +
                "	IN pExactRefundAmountSearch TINYINT,    \n" +
                "	IN pFromDate DATE,    \n" +
                "	IN pToDate DATE,    \n" +
                "	IN pFromCMPaymentDate DATE,    \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(10),  \n" +
                "    IN pTransModeType INT  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "		DECLARE pOffset INT;    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "		DECLARE v_TimeZone VARCHAR(50);    \n" +
                "        -- DECLARE v_PaymentNumberWhereClause VARCHAR(5000);   \n" +
                "        -- DECLARE v_CMNumberWhereClause VARCHAR(5000);   \n" +
                "		DECLARE v_CMPaymentWhereClause VARCHAR(1000);    \n" +
                "        DECLARE v_PaymentDateCon VARCHAR(1000);    \n" +
                "        DECLARE v_CMDateCon VARCHAR(1000);    \n" +
                "        DECLARE v_paymentDateWhereClause VARCHAR(1000);    \n" +
                "        DECLARE v_CMDateWhereClause VARCHAR(1000);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "        -- SET v_PaymentNumberWhereClause = '';  \n" +
                "        -- SET v_CMNumberWhereClause = '';  \n" +
                "        SET v_CMDateCon = '';    \n" +
                "        SET v_PaymentDateCon = '';    \n" +
                "        SET v_paymentDateWhereClause = '';  \n" +
                "        SET v_CMDateWhereClause = '';  \n" +
                "  \n" +
                "        IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  		SET pWhereClause = '1=1' ;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "        IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');    \n" +
                "		END IF;   \n" +
                "  \n" +
                "        IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "        IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "        IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF(pPaymentNumber IS NOT NULL) THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMNumber = \"', pPaymentCMNumber ,'\" ');    \n" +
                "	end if;  \n" +
                "  \n" +
                "    IF (pAmount IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');    \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');    \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');    \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate >= \"',pFromCMPaymentDate,'\" AND paymentCMDate <= \"',pToCMPaymentDate,'\" ');    \n" +
                "	ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate >= \"',pFromCMPaymentDate,'\" ');    \n" +
                "	ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate <= \"',pToCMPaymentDate,'\" ');    \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,    \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,    \n" +
                "			psip.bankName,    \n" +
                "			psip.bankAccountNo,    \n" +
                "			psip.paymentType,    \n" +
                "			psip.bankAccountMasID,    \n" +
                "			psip.systemId ,    \n" +
                "			psip.paymentDate AS refundDate,    \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.remark,     \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,    \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,   \n" +
                "             (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totalAmount   \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.payPaymentAmout  \n" +
                "				ELSE NULL END) AS paymentCMAmount ,   \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber   \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,   \n" +
                "                 (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.id   \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.id  \n" +
                "				ELSE NULL END) AS paymentCMMstID ,   \n" +
                "                (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS paymentAmountForPaymentCM ,   \n" +
                "                (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM ,  \n" +
                "		(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,		  \n" +
                "			 psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,    \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,    \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole   \n" +
                "		FROM packingslip_invoice_payment psip    \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0   \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0    \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentAmount As payPaymentAmout,  \n" +
                "						psipt.paymentNumber, psipt.id, psipt.paymentDate	  \n" +
                "					FROM packingslip_invoice_payment_det psipd    \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL   \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp   \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid   \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment,   \n" +
                "						 cps.creditMemoNumber, cps.id, cps.creditMemoDate , cps.totalAmount   \n" +
                "					 FROM packingslip_invoice_payment_det psipd    \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0   \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL   \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp   \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid 		  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'   \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		AND psip.isPaymentVoided = 0    \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		 \"  \n" +
                "            );  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;             \n" +
                "  \n" +
                "			/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */

                "DROP procedure IF EXISTS `Sproc_UpdateCustomerRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(                      \n" +
                "	IN pCustPaymentDetList JSON,    \n" +
                "    IN pCustCMDetList JSON,    \n" +
                "	IN pCustRefundMstID INT,                      \n" +
                "	IN pMfgcodeID INT,                      \n" +
                "	IN pPaymentNumber VARCHAR(50),                       \n" +
                "	IN pPaymentDate DATE,                      \n" +
                "	IN pPaymentAmount DECIMAL(18,8),                      \n" +
                "	IN pPaymentType INT,                      \n" +
                "	IN pAccountReference VARCHAR(50),                      \n" +
                "	IN pBankAccountMasID INT,                      \n" +
                "	IN pBankAccountNo VARCHAR(50),                      \n" +
                "	IN pBankName VARCHAR(255),                      \n" +
                "	IN pRemark VARCHAR(1000),                      \n" +
                "	IN pRefPaymentMode VARCHAR(10),                      \n" +
                "	IN pTotSelectedPayOfCust INT,   \n" +
                "    IN pTotSelectedCMOfCust INT,   \n" +
                "	IN pDeleteCustPaymentDetList JSON,     \n" +
                "    IN pDeleteCustCMDetList JSON,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,                    \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,            \n" +
                "	IN pUserID INT,                      \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8)	  \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "	DECLARE vCountExistsCheckNo INT;            \n" +
                "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;                   \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;                    \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN                    \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */                      \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                              \n" +
                "		FROM packingslip_invoice_payment                              \n" +
                "		WHERE refPaymentMode = pRefPaymentMode                     \n" +
                "		AND paymentNumber = pPaymentNumber                              \n" +
                "		AND mfgcodeID = pMfgcodeID                     \n" +
                "		AND id != pCustRefundMstID                    \n" +
                "		AND isPaymentVoided = 0                    \n" +
                "		AND isdeleted = 0    ;     \n" +
                "		-- select vCountExistsCheckNo ;  \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedPayOfCust > 0                     \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN                      \n" +
                "		/* get/map all Customer Payment Detail List send from UI */                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS                                                                  \n" +
                "		SELECT 	*                                                                   \n" +
                "		FROM 	JSON_TABLE(                           \n" +
                "			pCustPaymentDetList,                                                                  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",                                                           \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                      \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,   \n" +
                "                    `comment`  varchar(2000) PATH \"$.comment\"   \n" +
                "				)                        \n" +
                "			) AS CustPaymentDetList_JT ;     \n" +
                "		-- select * from temp_UI_CustPaymentDetList;  \n" +
                "  \n" +
                "      /* get all customer refund > against total payment list > available in data base */	                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS 	                      \n" +
                "			SELECT psip.id AS paymentMstID,   \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,   \n" +
                "				psipd.id AS paymentDetMstID,                   \n" +
                "			(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)   \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundPaymentID = psip.id             \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    )  As totalRefundIssuedAmount   \n" +
                "			FROM packingslip_invoice_payment psip   \n" +
                "            LEFT JOIN packingslip_invoice_payment_det psipd   \n" +
                "            ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0      \n" +
                "			WHERE  psip.isDeleted = 0 AND  psip.isPaymentVoided = 0 AND  \n" +
                "            psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList);  \n" +
                "  \n" +
                "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
                "  \n" +
                "            /* get all mis match amount records (compare UI data and db available data)                       \n" +
                "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL                      \n" +
                "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL                      \n" +
                "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL                      \n" +
                "			*/	                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                       \n" +
                "			SELECT tucipl.*                      \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl                      \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID                      \n" +
                "			WHERE (                      \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))                        \n" +
                "				OR                      \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))	                      \n" +
                "				OR                      \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))                      \n" +
                "				)                      \n" +
                "			;                        \n" +
                "		 -- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "            /* get/map all deleting customer Payment Detail List send from UI */                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;                                                        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS                                                                  \n" +
                "				SELECT 	*                                                                   \n" +
                "				FROM 	JSON_TABLE(                           \n" +
                "					pDeleteCustPaymentDetList,                                                                  \n" +
                "						\"$[*]\" COLUMNS(                          \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",                      \n" +
                "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"                                                         \n" +
                "						)                        \n" +
                "				) AS DeleteCustPaymentDetList_JT ;     \n" +
                "  \n" +
                "				 /* get all deleted invoice payment det (passed from UI but not in db)                       \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */                      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;                                                        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS                       \n" +
                "					select id from packingslip_invoice_payment_det   \n" +
                "					Where id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;   \n" +
                "  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)                      \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN                      \n" +
                "  \n" +
                "            /* start - create/update/delete payment refund process */  \n" +
                "            IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN            \n" +
                "				/* delete those which are unselected(from UI) payment det */                      \n" +
                "				UPDATE packingslip_invoice_payment_det                       \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,                       \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()                       \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)                     \n" +
                "				AND isPaymentVoided = 0                      \n" +
                "				AND isDeleted = 0 ;                     \n" +
                "  			END IF;                      \n" +
                "  \n" +
                "			/* update all payment det amount whose amount is changed from UI */                      \n" +
                "			UPDATE packingslip_invoice_payment_det pipd                      \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , comment                    \n" +
                "					FROM temp_UI_CustPaymentDetList                      \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl                      \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID           \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),             \n" +
                "				pipd.comment = tucipdl.comment ,            \n" +
                "				pipd.updatedBy = pUserID,                         \n" +
                "				pipd.updateByRoleId = pUserRoleID ,                        \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID      \n" +
                "			AND pipd.isPaymentVoided = 0                     \n" +
                "			AND pipd.isDeleted = 0                       \n" +
                "			;                     \n" +
                "            -- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
                "			/* insert newly selected payment det */                      \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,            \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)                      \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,             \n" +
                "				comment ,     \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID                      \n" +
                "			FROM temp_UI_CustPaymentDetList                       \n" +
                "			WHERE paymentDetMstID IS NULL                      \n" +
                "			;                      \n" +
                "  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "    /* customer credit memo refund cases */      \n" +
                "	ELSEIF (vCountExistsCheckNo = 0 AND pTotSelectedCMOfCust > 0                   \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN   \n" +
                "	        /* get/map all Customer CM Detail List send from UI */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS                                                                  \n" +
                "		SELECT 	*                                                                   \n" +
                "		FROM 	JSON_TABLE(                           \n" +
                "			pCustCMDetList,                                                                  \n" +
                "				\"$[*]\" COLUMNS(            \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",     \n" +
                "                    `custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",     \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                      \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,   \n" +
                "                    `comment`  varchar(2000) PATH \"$.comment\"   \n" +
                "				)                        \n" +
                "			) AS CustCMDetList_JT ;                       \n" +
                "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "	/* get all customer Refund > against total CM list > available in data base */	                     \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS   \n" +
                "			SELECT cps.id AS custCreditMemoMstID,  \n" +
                "			 cps.agreedRefundAmt AS agreedRefundAmount ,    \n" +
                "            (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
                "					FROM packingslip_invoice_payment_det                      \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id                    \n" +
                "					AND isPaymentVoided = 0                      \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount   \n" +
                "		FROM customer_packingslip AS cps   \n" +
                "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "		AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)                       \n" +
                "			> if selected CM not found from db                      \n" +
                "			> original Agreed Refund Amount Of Refund mismatch                      \n" +
                "			> Total Refund Issued Amount mismatch                      \n" +
                "			*/	                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                       \n" +
                "			SELECT tucml.*                      \n" +
                "			FROM temp_UI_CustCMDetList tucml                      \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID                      \n" +
                "			WHERE (                   \n" +
                "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))                        \n" +
                "				OR   \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))	                      \n" +
                "				OR                      \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))                      \n" +
                "				)                      \n" +
                "			;     \n" +
                "		-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;   \n" +
                "  \n" +
                "        /* get/map all deleting customer CM Detail List send from UI */                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;                                                        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS                                                                  \n" +
                "				SELECT 	*                                                                   \n" +
                "				FROM 	JSON_TABLE(                           \n" +
                "					pDeleteCustCMDetList,                                                                  \n" +
                "						\"$[*]\" COLUMNS(                          \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",                      \n" +
                "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"                                                         \n" +
                "						)                        \n" +
                "				) AS DeleteCustCMtDetList_JT ;     \n" +
                "                -- select * from temp_UI_Delete_CustCMDetList;  \n" +
                "                 /* get all deleted invoice payment det (passed from UI but not in db)                       \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */                      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;                                                        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS                       \n" +
                "					select id from packingslip_invoice_payment_det   \n" +
                "					Where id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;    \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)                      \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN                      \n" +
                "  \n" +
                "            IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN                       \n" +
                "				/* delete those which are unselected(from UI) CM det */                      \n" +
                "				UPDATE packingslip_invoice_payment_det                       \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,                       \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()                       \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)                     \n" +
                "				AND isPaymentVoided = 0                      \n" +
                "				AND isDeleted = 0 ;                    \n" +
                "					-- select 'deleted refund for CM list' ;  \n" +
                "			END IF;                      \n" +
                "  \n" +
                "  \n" +
                "			/* update all CM det amount whose amount is changed from UI */                      \n" +
                "			UPDATE packingslip_invoice_payment_det pipd                      \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , comment                     \n" +
                "					FROM temp_UI_CustCMDetList                      \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl                      \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID                   \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),             \n" +
                "				pipd.comment = tucipdl.comment ,            \n" +
                "				pipd.updatedBy = pUserID,                         \n" +
                "				pipd.updateByRoleId = pUserRoleID ,                        \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID   \n" +
                "			AND pipd.isPaymentVoided = 0                     \n" +
                "			AND pipd.isDeleted = 0                       \n" +
                "			;                      \n" +
                "  \n" +
                "			/* insert newly selected CM det */                      \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,            \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)                      \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,             \n" +
                "				comment ,     \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID                      \n" +
                "			FROM temp_UI_CustCMDetList                       \n" +
                "			WHERE paymentDetMstID IS NULL                      \n" +
                "			;                      \n" +
                "  \n" +
                "		END IF;	               \n" +
                "  \n" +
                "	END IF;                      \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0) THEN  \n" +
                "  \n" +
                "		/* update payment master details */      \n" +
                "		UPDATE packingslip_invoice_payment                      \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,                      \n" +
                "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,                      \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,                      \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,     \n" +
                "			updatedBy = pUserID, offsetAmount = pOffsetAmount,                       \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()                       \n" +
                "		WHERE id = pCustRefundMstID                    \n" +
                "		AND isPaymentVoided = 0	                    \n" +
                "		AND isDeleted = 0 ;            \n" +
                "  \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */                        \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS                        \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS                        \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                        \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                        \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;      \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */                        \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)                       \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)    \n" +
                "        OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)                       \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN                        \n" +
                "		SELECT 0 AS 'spStatus' ;                        \n" +
                "	ELSE                        \n" +
                "		SELECT 1 AS 'spStatus' ;                        \n" +
                "	END IF;                \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted payment/CM det (passed from UI but not in db) */                        \n" +
                "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
                "     SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted  */                        \n" +
                "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;                     \n" +
                "     SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;                     \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */                      \n" +
                "	IF (vCountExistsCheckNo > 0) THEN                    \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                          \n" +
                "	ELSE                          \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                          \n" +
                "	END IF;         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                       \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;                                        \n" +
                "  \n" +
                "    END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */

                "DROP procedure IF EXISTS `Sproc_getRefTransDetailForDocument`;  \n" +
                "CREATE PROCEDURE `Sproc_getRefTransDetailForDocument`(    \n" +
                "	pGencFileOwnerType VARCHAR(255),    \n" +
                "    pRefTransID INT,    \n" +
                "    pIsReturnDetail TINYINT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	# This variable is used in dynamic query to update document path and each case block need set table name value    \n" +
                "	DECLARE vTableName VARCHAR(100);    \n" +
                "    # All table PK name is 'id' but in some thable it is different so set value of this variable if PK name is not 'id'    \n" +
                "    DECLARE vTableIdentityColumnName VARCHAR(50);    \n" +
                "    DECLARE vEixstingDocumentPath VARCHAR(500);    \n" +
                "    DECLARE vNewDocumentPath VARCHAR(500);    \n" +
                "    DECLARE vCreatedDate DATETIME;     \n" +
                "    DECLARE vPIDCode VARCHAR(150);    \n" +
                "	DECLARE vReplaceString VARCHAR(50);    \n" +
                "  \n" +
                "		SET vTableIdentityColumnName = 'Id';    \n" +
                "  \n" +
                "		#In below cases get already stored documentPath and generate new documentPath based on requirement    \n" +
                "		CASE pGencFileOwnerType    \n" +
                "			WHEN 'component_sid_stock' THEN    \n" +
                "				-- Comp_sid_stock/Year/{UMID}/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('UMID/', DATE_FORMAT(createdAt,'%Y'), '/', uid, '/', id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	component_sid_stock    \n" +
                "				WHERE 	id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'component_sid_stock';    \n" +
                "  \n" +
                "		 WHEN 'packing_slip' THEN    \n" +
                "				-- PS/{Supplier}/Year/Month/PS#/{id}    \n" +
                "				SELECT 	p.documentPath,			CONCAT('PS/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.packingSlipNumber, '/', p.id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	packing_slip_material_receive p    \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "				WHERE 	p.id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';    \n" +
                "  \n" +
                "		WHEN 'supplier_invoice' THEN    \n" +
                "				-- Invoice/DK/2020/04/Invoice#/{id}    \n" +
                "				SELECT 	p.documentPath,			CONCAT('Invoice/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.invoiceNumber, '/', p.id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	packing_slip_material_receive p    \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "				WHERE 	p.id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';    \n" +
                "  \n" +
                "		WHEN 'credit_memo' THEN    \n" +
                "				-- CreditMemo/DK/2020/04/CreditMemo#/{id}    \n" +
                "				SELECT 	p.documentPath,			CONCAT('CreditMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.creditMemoNumber, '/', p.id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	packing_slip_material_receive p    \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "				WHERE 	p.id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';    \n" +
                "		WHEN 'debit_memo' THEN    \n" +
                "				-- DebitMemo/DK/2020/04/DebitMemo#/{id}    \n" +
                "				SELECT 	p.documentPath,			CONCAT('DebitMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.debitMemoNumber, '/', p.id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	packing_slip_material_receive p    \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "				WHERE 	p.id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';    \n" +
                "		WHEN 'supplier_rma' THEN    \n" +
                "				-- PS/{Supplier}/Year/Month/PS#/{id}    \n" +
                "				SELECT 	p.documentPath,			CONCAT('SupplierRMA/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.packingSlipNumber, '/', p.id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	packing_slip_material_receive p    \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "				WHERE 	p.id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';    \n" +
                "		WHEN 'supplier_quote' THEN    \n" +
                "				-- SupplierQuote/DK/2020/04/Quote#/{id}    \n" +
                "				SELECT 	s.documentPath,			CONCAT('SupplierQuote/', m.mfgCode , '/', DATE_FORMAT(s.createdAt,'%Y'), '/', DATE_FORMAT(s.createdAt,'%m'), '/', s.quoteNumber, '/', s.id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	supplier_quote_mst s    \n" +
                "				JOIN 	mfgcodemst m ON m.id = s.supplierID    \n" +
                "				WHERE 	s.id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'supplier_quote_mst';    \n" +
                "		WHEN 'supplier' THEN    \n" +
                "				-- emp/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('supplier/', id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	mfgcodemst    \n" +
                "				WHERE 	id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'mfgcodemst';    \n" +
                "  \n" +
                "		WHEN 'customer' THEN    \n" +
                "				-- emp/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('customer/', id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	mfgcodemst    \n" +
                "				WHERE 	id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'mfgcodemst';    \n" +
                "  \n" +
                "		WHEN 'workorder' THEN    \n" +
                "				-- WO/Year/Month/{WO}/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('WO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', woNumber, '/', woID) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	workorder    \n" +
                "				WHERE 	woID = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'workorder';    \n" +
                "				SET vTableIdentityColumnName = 'woID';    \n" +
                "  \n" +
                "		WHEN 'workorder_operation' THEN    \n" +
                "			-- WO/Year/Month/{wo}/WO_OP/{WO_OP}/{id}    \n" +
                "			SELECT wo.documentPath, CONCAT('WO/', DATE_FORMAT(w.createdAt,'%Y'), '/', DATE_FORMAT(w.createdAt,'%m'), '/', w.woNumber, '/WO_OP/', wo.opNumber, '/', wo.woOPID) newDocumentPath    \n" +
                "			INTO vEixstingDocumentPath, vNewDocumentPath    \n" +
                "			FROM workorder_operation wo    \n" +
                "			JOIN workorder w ON wo.woID = w.woID    \n" +
                "			WHERE woOPID = pRefTransID;    \n" +
                "			SET vTableName = 'workorder_operation';    \n" +
                "			SET vTableIdentityColumnName = 'woOPID';    \n" +
                "  \n" +
                "		 WHEN 'salesorder' THEN    \n" +
                "				-- SO/Year/Month/{SO}/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('SO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', salesOrderNumber, '/', id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	salesordermst    \n" +
                "				WHERE 	id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'salesordermst';    \n" +
                "		 WHEN 'operations' THEN    \n" +
                "				-- OP/Year/{OPID}/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('OP/', DATE_FORMAT(createdAt,'%Y'), '/', opNumber, '/', opID) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	operations    \n" +
                "				WHERE 	opID = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'operations';    \n" +
                "				SET vTableIdentityColumnName = 'opID';    \n" +
                "		 WHEN 'certificate_standards' THEN    \n" +
                "				-- Cert_std/Year/{certificateStandardID}    \n" +
                "				SELECT 	documentPath,			CONCAT('Cert_std/', DATE_FORMAT(createdAt,'%Y'), '/', certificateStandardID) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	certificate_standards    \n" +
                "				WHERE 	certificateStandardID = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'certificate_standards';    \n" +
                "				SET vTableIdentityColumnName = 'certificateStandardID';    \n" +
                "		 WHEN 'component' THEN    \n" +
                "			 -- Comp/Year/{PID}/{id}    \n" +
                "			 SELECT 	documentPath, CONCAT('Comp/', DATE_FORMAT(createdAt,'%Y'), '/', fun_replaceSpecialCharacters(PIDCode), '/', id) newDocumentPath    \n" +
                "			 INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "			 FROM 	COMPONENT    \n" +
                "			 WHERE 	id = pRefTransID;    \n" +
                "			 SET vTableName = 'component';    \n" +
                "		 WHEN 'eco_request' THEN    \n" +
                "				-- eco_request/year/{ecoid}/{ecoReqID}    \n" +
                "				SELECT 	documentPath,			CONCAT('eco_request/', DATE_FORMAT(createdAt,'%Y'), '/', ecoReqID) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	eco_request    \n" +
                "				WHERE 	ecoReqID = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'eco_request';    \n" +
                "				SET vTableIdentityColumnName = 'ecoReqID';    \n" +
                "		 WHEN 'component_customer_loa' THEN    \n" +
                "				-- Comp_Cust_loa/{CustomerCode},{PIDCode}/{id}    \n" +
                "				SELECT 	cloa.documentPath,			CONCAT('Comp_Cust_loa/', m.mfgCode,'/', fun_replaceSpecialCharacters(co.PIDCode) ,'/', cloa.id) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	component_customer_loa cloa    \n" +
                "				JOIN	mfgcodemst m ON m.id = cloa.customerID    \n" +
                "                JOIN COMPONENT co ON co.id = cloa.componentID    \n" +
                "				WHERE 	cloa.id = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'component_customer_loa';    \n" +
                "		 WHEN 'equipment' THEN    \n" +
                "				-- equip/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('equip/', eqpID) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	equipment    \n" +
                "				WHERE 	eqpID = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'equipment';    \n" +
                "				SET vTableIdentityColumnName = 'eqpID';    \n" +
                "		 WHEN 'equipment_task' THEN    \n" +
                "				-- equip_task/{id}    \n" +
                "				SELECT 	documentPath,			CONCAT('equip_task/', eqpTaskID) newDocumentPath    \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "				FROM 	equipment_task    \n" +
                "				WHERE 	eqpTaskID = pRefTransID;    \n" +
                "  \n" +
                "				SET vTableName = 'equipment_task';    \n" +
                "				SET vTableIdentityColumnName = 'eqpTaskID';    \n" +
                "		WHEN 'employees' THEN    \n" +
                "			-- emp/{id}    \n" +
                "			SELECT 	documentPath,			CONCAT('emp/', id) newDocumentPath    \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "			FROM 	employees    \n" +
                "			WHERE 	id = pRefTransID;    \n" +
                "  \n" +
                "			SET vTableName = 'employees';    \n" +
                "		WHEN 'bom' THEN    \n" +
                "			-- rfq/custcode/year/{Groupid}/{pid}/{id}    \n" +
                "			SELECT 	ra.documentPath,			CONCAT('rfq/', m.mfgCode , '/', DATE_FORMAT(ra.createdAt,'%Y'), '/', ra.rfqrefID, '/', c.PIDCode, '/', ra.id) newDocumentPath    \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "			FROM 	rfq_assemblies ra    \n" +
                "			JOIN 	rfqforms rf ON rf.id = ra.rfqrefID    \n" +
                "			JOIN 	mfgcodemst m ON m.id = rf.customerId    \n" +
                "			JOIN 	COMPONENT c ON c.id = ra.partID    \n" +
                "			WHERE 	ra.id = pRefTransID;    \n" +
                "  \n" +
                "			SET vTableName = 'rfq_assemblies';    \n" +
                "  \n" +
                "  \n" +
                "		 WHEN 'cust_packingslip_invoice_payment' THEN    \n" +
                "			-- CustPay/{CustomerCode}/Year/Month/CheckOrPayment#/{id}    \n" +
                "			SELECT 	pip.documentPath,			CONCAT('CustPay/', m.mfgCode , '/', DATE_FORMAT(pip.createdAt,'%Y'), '/', DATE_FORMAT(pip.createdAt,'%m'), '/', pip.paymentNumber, '/', pip.id) newDocumentPath    \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "			FROM 	packingslip_invoice_payment pip    \n" +
                "			JOIN 	mfgcodemst m ON m.id = pip.mfgcodeID    \n" +
                "			WHERE 	pip.id = pRefTransID;    \n" +
                "  \n" +
                "			SET vTableName = 'packingslip_invoice_payment';    \n" +
                "  \n" +
                "  \n" +
                "		WHEN 'apply_cust_credit_memo_to_inv' THEN    \n" +
                "			-- AppliedCCM/{CustomerCode}/Year/Month/CheckOrPayment#/{id}    \n" +
                "			SELECT 	pip.documentPath,			CONCAT('AppliedCCM/', m.mfgCode , '/', DATE_FORMAT(pip.createdAt,'%Y'), '/', DATE_FORMAT(pip.createdAt,'%m'), '/', pip.paymentNumber, '/', pip.id) newDocumentPath    \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "			FROM 	packingslip_invoice_payment pip    \n" +
                "			JOIN 	mfgcodemst m ON m.id = pip.mfgcodeID    \n" +
                "			WHERE 	pip.id = pRefTransID;    \n" +
                "  \n" +
                "			SET vTableName = 'packingslip_invoice_payment';    \n" +
                "  \n" +
                "  \n" +
                "		WHEN 'apply_cust_write_off_to_inv' THEN    \n" +
                "			-- AppliedCustWOFF/{CustomerCode}/Year/Month/CheckOrPayment#/{id}    \n" +
                "			SELECT 	pip.documentPath,			CONCAT('AppliedCustWOFF/', m.mfgCode , '/', DATE_FORMAT(pip.createdAt,'%Y'), '/', DATE_FORMAT(pip.createdAt,'%m'), '/', pip.paymentNumber, '/', pip.id) newDocumentPath    \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "			FROM 	packingslip_invoice_payment pip    \n" +
                "			JOIN 	mfgcodemst m ON m.id = pip.mfgcodeID    \n" +
                "			WHERE 	pip.id = pRefTransID;    \n" +
                "  \n" +
                "			SET vTableName = 'packingslip_invoice_payment';    \n" +
                "  \n" +
                "		WHEN 'cust_payment_CM_Refund' THEN    \n" +
                "			-- CustRef/{CustomerCode}/Year/Month/CheckOrPayment#/{id}   \n" +
                "			SELECT 	pip.documentPath,			CONCAT('CustRef/', m.mfgCode , '/', DATE_FORMAT(pip.createdAt,'%Y'), '/', DATE_FORMAT(pip.createdAt,'%m'), '/', pip.paymentNumber, '/', pip.id) newDocumentPath    \n" +
                "			INTO 	vEixstingDocumentPath,	vNewDocumentPath    \n" +
                "			FROM 	packingslip_invoice_payment pip    \n" +
                "			JOIN 	mfgcodemst m ON m.id = pip.mfgcodeID    \n" +
                "			WHERE 	pip.id = pRefTransID;    \n" +
                "  \n" +
                "			SET vTableName = 'packingslip_invoice_payment';    \n" +
                "  \n" +
                "		ELSE    \n" +
                "			#This is default case so if case value is not match just set table name is null    \n" +
                "			SET vTableName = NULL;    \n" +
                "  \n" +
                "		END CASE;    \n" +
                "  \n" +
                "		#If table name is null, it means no need to do anything related to document path.    \n" +
                "		IF(vTableName IS NOT NULL) THEN    \n" +
                "  \n" +
                "			# Update document path if document path in record is null or new path not match with old path    \n" +
                "			IF(vEixstingDocumentPath IS NULL OR vEixstingDocumentPath != vNewDocumentPath) THEN    \n" +
                "            	-- SET @vSQLStatement = CONCAT(\"update \", vTableName, \" set documentPath = \\\"\", vNewDocumentPath, \"\\\" where \", vTableIdentityColumnName, \" = \", pRefTransID);    \n" +
                "            	SET @vSQLStatement = CONCAT(\"update \", vTableName, \" set documentPath = '\", vNewDocumentPath, \"' where \", vTableIdentityColumnName, \" = \", pRefTransID);    \n" +
                "                PREPARE query1 FROM @vSQLStatement;    \n" +
                "				EXECUTE query1;    \n" +
                "				DEALLOCATE PREPARE query1;    \n" +
                "			END IF;    \n" +
                "            IF(pIsReturnDetail = 1)THEN    \n" +
                "				SELECT 1 isBasedOnCreatedDate, pRefTransID refTransID, pGencFileOwnerType gencFileOwnerType,    \n" +
                "					vEixstingDocumentPath oldDocumentPath, vNewDocumentPath newDocumentPath;    \n" +
                "			END IF;    \n" +
                "		ELSEIF (pGencFileOwnerType = 'textAngular') THEN    \n" +
                "			SET vCreatedDate = fun_DatetimetoUTCDateTime();    \n" +
                "            IF(pIsReturnDetail = 1)THEN    \n" +
                "			SELECT 1 isBasedOnCreatedDate, NULL refTransID, pGencFileOwnerType gencFileOwnerType, NULL oldDocumentPath,    \n" +
                "					CONCAT('textAngular/', DATE_FORMAT(vCreatedDate,'%Y'), '/', DATE_FORMAT(vCreatedDate,'%m'))newDocumentPath;    \n" +
                "			END IF;    \n" +
                "		ELSE    \n" +
                "			IF(pIsReturnDetail = 1)THEN    \n" +
                "				SELECT 0 isBasedOnCreatedDate;    \n" +
                "            END IF;    \n" +
                "		END IF;    \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4965,'2.00','V1',' Add / Update Customer Refund and List Customer Refund - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4965:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(      \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN precordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,      \n" +
                "	IN pBinId INT,      \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),      \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),      \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),      \n" +
                "	IN pAssyIDs VARCHAR(16383),      \n" +
                "	IN pRestrictPart TINYINT,      \n" +
                "	IN pExpireMaterial TINYINT,      \n" +
                "	IN pPartId INT,      \n" +
                "	IN pIsShowPackagingAlias TINYINT,      \n" +
                "	IN pStandardIDs VARCHAR(16383),      \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),      \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),      \n" +
                "	IN pDateCode VARCHAR(16383),      \n" +
                "	IN pIsAvailableToSell TINYINT,      \n" +
                "	IN pIsRestrictedUMID TINYINT,      \n" +
                "	IN pIsInternalStock TINYINT,      \n" +
                "	IN pIsCustomerStock TINYINT,      \n" +
                "	IN pdepartmentIDs VARCHAR(16383),      \n" +
                "	IN pwarehouseType VARCHAR(255),      \n" +
                "	IN pWarehouse VARCHAR(16383),      \n" +
                "	IN pExpiredDay INT,      \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),      \n" +
                "	IN pCustomerId INT,      \n" +
                "	IN pFromDate DATE,      \n" +
                "	IN pToDate DATE,      \n" +
                "	IN pSearchTextAttribute LONGTEXT,      \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),      \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),      \n" +
                "	IN pInventoryType VARCHAR(255),      \n" +
                "    In pInnerQueryWhereClause VARCHAR(16383)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	DECLARE attributeSearchString LONGTEXT;                                                        \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;                                                        \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                        \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                   \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);          \n" +
                "    DECLARE v_ExpiryDate datetime;      \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);      \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "	SET v_DescriptionWhereClause = '';      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN      \n" +
                "		SET pWhereClause = ' 1=1';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN      \n" +
                "		SET pInnerQueryWhereClause = ' ';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/*left join filter*/      \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');      \n" +
                "	END IF;      \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN      \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN      \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))      \n" +
                "            into	v_PartIDs      \n" +
                "			FROM 	component c      \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0      \n" +
                "			WHERE 	c.id = pPartId      \n" +
                "			AND 	c.isDeleted = 0;      \n" +
                "		ELSE      \n" +
                "			select pPartId into v_PartIDs;      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/*below query need to refactor*/      \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN      \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;      \n" +
                "		SET attributeSearchString = pSearchTextAttribute;      \n" +
                "		do_this:      \n" +
                "		LOOP      \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);      \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);      \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);      \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);      \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');      \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');      \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN      \n" +
                "				LEAVE do_this;      \n" +
                "			END IF;      \n" +
                "		END LOOP do_this;      \n" +
                "	END IF;      \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN      \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs      \n" +
                "		FROM 	kit_allocation_assy_detail      \n" +
                "		WHERE 	deletedAt IS NULL      \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);      \n" +
                "	END IF;      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);      \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN      \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)      \n" +
                "		SELECT 	k.refUIDId      \n" +
                "		FROM 	kit_allocation k      \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)      \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)      \n" +
                "		AND	k.status = 'A';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;      \n" +
                "    CREATE temporary table temp_component_sid_stock(      \n" +
                "		   id int NOT NULL DEFAULT '0',      \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,      \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,      \n" +
                "		  uid varchar(15) DEFAULT NULL,      \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,      \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,      \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,      \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,      \n" +
                "		  fromUIDId int DEFAULT NULL,      \n" +
                "		  fromUID varchar(15) DEFAULT NULL,      \n" +
                "		  parentUIDId int DEFAULT NULL,      \n" +
                "		  parentUID varchar(15) DEFAULT NULL,      \n" +
                "		  mfgcodeID int NOT NULL,      \n" +
                "		  mfg text,      \n" +
                "		  refcompid int DEFAULT NULL,      \n" +
                "		  mfgPN varchar(100) NOT NULL,      \n" +
                "		  PIDCode varchar(109) NOT NULL,      \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,      \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,      \n" +
                "		  RoHSStatusID int NOT NULL,      \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,      \n" +
                "		  rohsName varchar(50) DEFAULT NULL,      \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',      \n" +
                "		  spq decimal(18,8) DEFAULT NULL,      \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,      \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,      \n" +
                "		  uom int DEFAULT NULL,      \n" +
                "		  uomName varchar(100) NOT NULL,      \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',      \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,      \n" +
                "		  packaginggroupID int DEFAULT NULL,      \n" +
                "		  packaging int DEFAULT NULL,      \n" +
                "		  packagingName varchar(100) NOT NULL,      \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',      \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',      \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,      \n" +
                "		  costCategoryID int DEFAULT NULL,      \n" +
                "		  costCategory varchar(147) DEFAULT NULL,      \n" +
                "		  lotCode varchar(255) DEFAULT NULL,      \n" +
                "		  dateCode varchar(10) DEFAULT NULL,      \n" +
                "		  UMIDrohsStatusID int NOT NULL,      \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,      \n" +
                "		  binID int DEFAULT NULL,      \n" +
                "		  location varchar(110) DEFAULT NULL,      \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',      \n" +
                "		  warehouseID int DEFAULT NULL,      \n" +
                "		  warehouse varchar(50) NOT NULL,      \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,      \n" +
                "		  department varchar(50) NOT NULL,      \n" +
                "		  departmentID int NOT NULL DEFAULT '0',      \n" +
                "		  fromBin int DEFAULT NULL,      \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,      \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',      \n" +
                "		  fromWarehouse int DEFAULT NULL,      \n" +
                "		  fromWHName varchar(50) NOT NULL,      \n" +
                "		  fromDepartment int DEFAULT NULL,      \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,      \n" +
                "		  orgRecBin int DEFAULT NULL,      \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,      \n" +
                "		  orgRecWarehouse int DEFAULT NULL,      \n" +
                "		  orgRecWHName varchar(50) NOT NULL,      \n" +
                "		  orgRecDepartment int DEFAULT NULL,      \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,      \n" +
                "		  expiryDate date DEFAULT NULL,      \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,      \n" +
                "		  pcbPerArray int DEFAULT NULL,      \n" +
                "		  nickName varchar(50) DEFAULT NULL,      \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,      \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,      \n" +
                "		  woNumber varchar(255) DEFAULT NULL,      \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,      \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,      \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',      \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',      \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',      \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,      \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,      \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,      \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,      \n" +
                "		  mountingTypeID int NOT NULL,      \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,      \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,      \n" +
                "		  partPackage varchar(50) DEFAULT NULL,      \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,      \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',      \n" +
                "		  detailDescription text,      \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',      \n" +
                "		  customerID int DEFAULT NULL,      \n" +
                "		  customer text,      \n" +
                "		  assyID int DEFAULT NULL,      \n" +
                "		  assembly varchar(109),      \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',      \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',      \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',      \n" +
                "		  cpnMFGCode text,      \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,      \n" +
                "		  cpnMFGPN varchar(100),      \n" +
                "		  refSupplierPartId int DEFAULT NULL,      \n" +
                "		  supplierMFGCode text,      \n" +
                "		  supplieMFGPN varchar(100),      \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,      \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,      \n" +
                "		  isTransit varchar(10) DEFAULT NULL,      \n" +
                "		  searchUser varchar(50) DEFAULT NULL,      \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,      \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,      \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,      \n" +
                "		  createdAt varchar(50) DEFAULT NULL,      \n" +
                "		  createdBy varchar(255) NOT NULL,      \n" +
                "		  createdByName varchar(50) DEFAULT NULL,      \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,      \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,      \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,      \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,      \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,      \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,      \n" +
                "		  allocatedToKit text,      \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,      \n" +
                "		  packingSupplierName text,      \n" +
                "		  packingSlipId int DEFAULT NULL,      \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,       \n" +
                "          cocDocumentCount int default 0,      \n" +
                "          parentCofCDocumentCount int default 0,      \n" +
                "          createByRoleId int default null,      \n" +
                "          updateByRoleId int default null      \n" +
                "		);      \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock      \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)      \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,      \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,      \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,      \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,      \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomName,				orgPkgUnit,      \n" +
                "							orgQty, 			packaginggroupID,	packaging,				packagingName,  		printStatus, 			tentativePrice,      \n" +
                "							costScrapQty,		costCategoryID,		costCategory,			lotCode,      \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,    	      \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin, 		       \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName, 	      \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,		      \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,	      \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,	                    \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,	      \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,        \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly, 	      \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCode, 		 	refCPNMFGPNID,	       	cpnMFGPN, 		      \n" +
                "							refSupplierPartId,	supplierMFGCode,	supplieMFGPN,			totalScrapUnit,			perScrapQty,           \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt, 		       \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt, 		              \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,    	      \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId      \n" +
                "		FROM 		(		                                                                                                        \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,	      \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'                                                        \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'      \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'      \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'      \n" +
                "										ELSE NULL      \n" +
                "								END) displayReceiveMaterialType,      \n" +
                "								css.stockInventoryType,                                                        \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'      \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'      \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'      \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'      \n" +
                "										ELSE NULL                                                        \n" +
                "								END) displayStockInventoryType,            \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,				      \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,					      \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,				      \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,					      \n" +
                "								css.pkgUnit,				css.uom,					u.unitName uomName,			IFNULL(css.orgPkgUnit, 0) orgPkgUnit,      \n" +
                "								css.orgQty,					c.packaginggroupID,			css.packaging,				cp.name packagingName,		css.printStatus,		      \n" +
                "								IFNULL(c.price, 0) tentativePrice,						((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,      \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,        \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,      \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,      \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,      \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,      \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,      \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,      \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,         \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,      \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,      \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,      \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,      \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,      \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,      \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,      \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,      \n" +
                "								css.assyID,					assy.PIDCode assembly,      \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,                                                                                                                           \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,                                                                                                        \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,				                                                                                                                   \n" +
                "								css.refCPNMFGPNID,		CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,      \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,      \n" +
                "								cssh.scrappedUnit totalScrapUnit,                              \n" +
                "								null isTransit,                                     \n" +
                "								null searchUser,      \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,                              \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				      \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,       \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,      \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					                              \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,      \n" +
                "								kit.kitname allocatedToKit,      \n" +
                "								null packingSlipName,                    \n" +
                "								null packingSupplierName,                         \n" +
                "								null packingSlipId,      \n" +
                "								null packingSlipSupplierId                     \n" +
                "					FROM 		component_sid_stock css       \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",      \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),      \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),      \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),      \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),      \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN      \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')      \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN      \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')      \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN      \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')      \n" +
                "								else ''      \n" +
                "                        end),      \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),      \n" +
                "                        /*below query need to refactor*/      \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN      \n" +
                "							' AND not exists (      \n" +
                "									SELECT 	1      \n" +
                "									FROM 	rfq_lineitems_alternatepart a      \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id      \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0      \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)      \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0      \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)      \n" +
                "								)       \n" +
                "						' else '' end),      \n" +
                "					\"                       \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id       \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id        \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id        \n" +
                "					inner join uoms u on css.uom = u.id      \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id      \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id      \n" +
                "					inner join binmst b on css.binID = b.id \" ,      \n" +
                "						(Case       \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')      \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')      \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')       \n" +
                "                            else ''       \n" +
                "						end),      \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",      \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),      \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",      \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),      \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id      \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id      \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id      \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id      \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id      \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id      \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id      \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id       \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0      \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'      \n" +
                "					left join (      \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit        \n" +
                "								FROM 		component_sid_stock_history cssh        \n" +
                "								where 		cssh.scrappedUnit > 0      \n" +
                "								GROUP BY 	cssh.refUIDId      \n" +
                "					) cssh on css.id = cssh.refUIDId      \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0      \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0      \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isCustom = 1  and cpn_comp.isDeleted = 0      \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0      \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0      \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0      \n" +
                "					left join (      \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict      \n" +
                "						from (      \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,      \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict      \n" +
                "							from component_sid_stock_restrict_umid rest_umid      \n" +
                "						) css_rst where css_rst.rnk = 1      \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id      \n" +
                "					left join (      \n" +
                "						SELECT 		k.refUIDId,       \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname	                        \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)                      \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3                       \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                        \n" +
                "						INNER JOIN	component c ON k.assyID = c.id                        \n" +
                "						WHERE 		k.status = 'A'                    \n" +
                "						GROUP BY 	k.refUIDId         \n" +
                "					) kit  ON kit.refUIDId = css.id      \n" +
                "					WHERE 	css.isdeleted = 0\",      \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN      \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')      \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN      \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')      \n" +
                "							  when (pCustomerId IS NOT NULL) then      \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')       \n" +
                "                            else ''      \n" +
                "						end),      \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),      \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),      \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),      \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),      \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),      \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),      \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),      \n" +
                "                        (case when (pExpireMaterial = 1) THEN      \n" +
                "									(case when (pExpiredDay = 0) THEN      \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')      \n" +
                "									ELSE      \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')      \n" +
                "									end)      \n" +
                "							  else ''      \n" +
                "						end),      \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN      \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')      \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN      \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')      \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN      \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')      \n" +
                "							 else ''      \n" +
                "                        end),      \n" +
                "						v_DescriptionWhereClause,      \n" +
                "                        pInnerQueryWhereClause,      \n" +
                "				\") As tempUMID\"      \n" +
                "			);      \n" +
                "	# select @temp_component_sid_stock;      \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;      \n" +
                "	EXECUTE tempSQLQuery;      \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;      \n" +
                "  \n" +
                "    # Update count for self documents      \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g      \n" +
                "	set t.cocDocumentCount = g.cofcCount      \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';      \n" +
                "  \n" +
                "	# Update count for paremt documents        \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g      \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount      \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';     \n" +
                "  \n" +
                "    # Update CofC detail      \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps      \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)    \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)     \n" +
                "										else null    \n" +
                "								  end),                    \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),                         \n" +
                "			t.packingSlipId = ps.packingSlipId,      \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId    \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)       \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');      \n" +
                "  \n" +
                "	# Update CofC detail      \n" +
                "	Update 	temp_component_sid_stock t       \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)      \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')      \n" +
                "	and		t.packingSlipId is null       \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);      \n" +
                "  \n" +
                "    # Update created by role      \n" +
                "    Update temp_component_sid_stock t      \n" +
                "    inner join roles r on r.id = t.createByRoleId      \n" +
                "	set t.createdbyRole = r.name;      \n" +
                "  \n" +
                "    # Update updated by role      \n" +
                "    Update temp_component_sid_stock t      \n" +
                "    inner join roles r on r.id = t.updateByRoleId      \n" +
                "	set t.updatedbyRole = r.name;      \n" +
                "  \n" +
                "    # Update created by name     \n" +
                "    Update temp_component_sid_stock t      \n" +
                "    inner join users u on u.id = t.createdBy      \n" +
                "    inner join employees emp on emp.id = u.employeeID      \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;      \n" +
                "  \n" +
                "    # Update updated by name      \n" +
                "    Update temp_component_sid_stock t      \n" +
                "    inner join users u on  u.id = t.updatedBy      \n" +
                "    inner join employees emp  on emp.id = u.employeeID      \n" +
                "	set t.umidModifiedBy = emp.initialName ;      \n" +
                "  \n" +
                "    # Update MFR Date Code Format      \n" +
                "    Update temp_component_sid_stock t      \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID      \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;      \n" +
                "  \n" +
                "    # Update In Transit Data                                 \n" +
                "	Update temp_component_sid_stock t      \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL      \n" +
                "	set t.isTransit = 'Yes',       \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)       \n" +
                "							when (messagetype = 1001) then 'Unauthorized'      \n" +
                "							else ''      \n" +
                "                        end);      \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                    \n" +
                "	EXECUTE query1;                                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                    \n" +
                "	EXECUTE query2;                                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE query2;                                 \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);        \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                    \n" +
                "	EXECUTE mainQuery;                                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE mainQuery;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4966,'2.00','V1',' Resolved issue of seacrh all stock for UMID list - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 4966:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(              \n" +
                "IN ppartID INT              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;              \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS              \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,                    \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,                    \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,         \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'               \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'               \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'               \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'               \n" +
                "        WHEN a.programingStatus = 5 THEN 'Who Will Program'               \n" +
                "        ELSE 'N/A' END) AS programingStatus,              \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,              \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,              \n" +
                "a.description, a.numOfPosition, a.numOfRows, a.customerRev,                    \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,              \n" +
                "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,              \n" +
                "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,              \n" +
                "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,              \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,              \n" +
                "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,              \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'               \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'               \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'               \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,                \n" +
                "a.isObsoleteLine,              \n" +
                "a.customerApprovalForQPAREFDESStep,              \n" +
                "a.customerApprovalForBuyStep,              \n" +
                "a.customerApprovalForPopulateStep,              \n" +
                "a.dnpQPARefDesStep,              \n" +
                "a.customerApprovalForDNPQPAREFDESStep,              \n" +
                "a.customerApprovalForDNPBuyStep,              \n" +
                "a.customerApprovalCPN,              \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,                \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,               \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,              \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,                \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,              \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,              \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,              \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,                \n" +
                "ac.description AS additionalComment,              \n" +
                "ac.id AS additionalCommentId              \n" +
                "FROM rfq_lineitems a              \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0              \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0              \n" +
                "WHERE a.isDeleted = 0 AND a.partID = ppartID;                 \n" +
                "  \n" +
                "SELECT b.id,                    \n" +
                "b.lineID,              \n" +
                "b.cust_lineID,              \n" +
                "b.qpa,              \n" +
                "b.refDesig,              \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,              \n" +
                "a.mfgCodeID,              \n" +
                "mcm.acquisitionDetail,              \n" +
                "a.mfgPN,              \n" +
                "a.mfgPNID,              \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,	              \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,              \n" +
                "a.distMfgCodeID,              \n" +
                "a.distPN,              \n" +
                "a.distMfgPNID,              \n" +
                "b.custPN,              \n" +
                "b.custPNID,              \n" +
                "b.isCustPN,              \n" +
                "b.uomID,              \n" +
                "b.programingStatus,              \n" +
                "b.substitutesAllow,              \n" +
                "b.allocatedInKit,              \n" +
                "a.description descriptionAlternate,              \n" +
                "b.description,              \n" +
                "b.numOfPosition,              \n" +
                "b.numOfRows,              \n" +
                "b.customerRev,                        \n" +
                "b.isCustPNProgrammingRequire,                      \n" +
                "b.customerDescription,              \n" +
                "b.customerPartDesc,              \n" +
                "b.isInstall,              \n" +
                "b.isPurchase,                 \n" +
                "b.isNotRequiredKitAllocation,              \n" +
                "b.isSupplierToBuy,                \n" +
                "b.dnpQty,              \n" +
                "b.dnpDesig,              \n" +
                "a.id AS rfqAlternatePartID,              \n" +
                "b.qpaDesignatorStep,             \n" +
                "b.duplicateCPNStep,              \n" +
                "b.restrictCPNUseWithPermissionStep,              \n" +
                "b.restrictCPNUsePermanentlyStep,              \n" +
                "b.restrictCPNUseInBOMStep,              \n" +
                "b.requireMountingTypeStep,              \n" +
                "b.requireFunctionalTypeStep,                \n" +
                "b.requireMountingTypeError,              \n" +
                "b.requireFunctionalTypeError,              \n" +
                "b.isBuyDNPQty,              \n" +
                "b.isObsoleteLine,              \n" +
                "b.customerApprovalForQPAREFDESStep,              \n" +
                "b.customerApprovalForBuyStep,              \n" +
                "b.customerApprovalForPopulateStep,                \n" +
                "b.dnpQPARefDesStep,              \n" +
                "b.customerApprovalForDNPQPAREFDESStep,              \n" +
                "b.customerApprovalForDNPBuyStep,              \n" +
                "b.customerApprovalCPN,              \n" +
                "b.qpaCustomerApprovalComment,                \n" +
                "b.dnpqpaCustomerApprovalComment,              \n" +
                "b.buyCustomerApprovalComment,                \n" +
                "b.buyDNPCustomerApprovalComment,              \n" +
                "b.populateCustomerApprovalComment,              \n" +
                "b.cpnCustomerApprovalComment,                \n" +
                "b.isCustomerApprovedQPA,               \n" +
                "b.isCustomerApprovedBuy,              \n" +
                "b.isCustomerApprovedDNPQPA,              \n" +
                "b.isCustomerApprovedBuyDNP,              \n" +
                "b.isCustomerApprovedPopulate,              \n" +
                "b.isCustomerApprovedCPN,                   \n" +
                "b.kitAllocationNotRequiredComment,              \n" +
                "b.isNotRequiredKitAllocationApproved,              \n" +
                "a.mfgVerificationStep,              \n" +
                "a.mfgDistMappingStep,              \n" +
                "a.mfgCodeStep,              \n" +
                "a.customerApproval,              \n" +
                "a.isCustomerUnAppoval,              \n" +
                "a.org_mfgCode,              \n" +
                "a.org_mfgPN,              \n" +
                "a.org_distributor,              \n" +
                "a.org_distPN,              \n" +
                "a.distVerificationStep,              \n" +
                "a.distCodeStep,              \n" +
                "a.getMFGPNStep,              \n" +
                "a.obsoletePartStep,              \n" +
                "a.mfgGoodPartMappingStep,              \n" +
                "a.mfgPNStep,              \n" +
                "a.distPNStep,              \n" +
                "a.badMfgPN,              \n" +
                "a.distGoodPartMappingStep,              \n" +
                "a.nonRohsStep,              \n" +
                "a.epoxyStep,              \n" +
                "a.invalidConnectorTypeStep,              \n" +
                "a.duplicateMPNInSameLineStep,              \n" +
                "a.mismatchMountingTypeStep,              \n" +
                "a.mismatchFunctionalCategoryStep,              \n" +
                "a.mismatchFunctionalCategoryStep,              \n" +
                "a.restrictUseWithPermissionStep,              \n" +
                "a.restrictUsePermanentlyStep,              \n" +
                "a.partPinIsLessthenBOMPinStep,                 \n" +
                "a.mismatchRequiredProgrammingStep,                       \n" +
                "a.mappingPartProgramStep,                         \n" +
                "a.exportControlledStep,              \n" +
                "a.tbdPartStep,              \n" +
                "a.userData1,              \n" +
                "a.userData2,              \n" +
                "a.userData3,              \n" +
                "a.userData4,              \n" +
                "a.userData5,              \n" +
                "a.userData6,              \n" +
                "a.userData7,              \n" +
                "a.userData8,              \n" +
                "a.userData9,              \n" +
                "a.userData10,              \n" +
                "a.pickupPadRequiredStep,              \n" +
                "a.matingPartRquiredStep,                   \n" +
                "a.suggestedGoodPartStep,                     \n" +
                "a.suggestedGoodDistPartStep,              \n" +
                "a.driverToolsRequiredStep,              \n" +
                "a.functionalTestingRequiredStep,              \n" +
                "a.mismatchCustomPartStep,              \n" +
                "a.mismatchValueStep,                     \n" +
                "a.approvedMountingType,              \n" +
                "a.mismatchPackageStep,              \n" +
                "a.mismatchPowerStep,              \n" +
                "a.mismatchToleranceStep,              \n" +
                "a.mismatchTempratureStep,              \n" +
                "a.mismatchNumberOfRowsStep,              \n" +
                "a.uomMismatchedStep,              \n" +
                "a.programingRequiredStep,              \n" +
                "a.mismatchProgrammingStatusStep,              \n" +
                "a.mismatchColorStep,              \n" +
                "a.restrictUseInBOMStep,              \n" +
                "a.restrictUseInBOMWithPermissionStep,              \n" +
                "a.restrictUseInBOMExcludingAliasStep,              \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,                     \n" +
                "a.restrictUseExcludingAliasStep,              \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,                     \n" +
                "a.unknownPartStep,              \n" +
                "a.defaultInvalidMFRStep,              \n" +
                "a.isUnlockApprovedPart,               \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                         \n" +
                "cpnPart.partTypeName                      \n" +
                "ELSE                         \n" +
                "part.partTypeName END) AS parttypeID,                       \n" +
                "a.parttypeID AS functionalID,                \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                         \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                         \n" +
                "cpnMount.name                     \n" +
                "ELSE                         \n" +
                "mount.name END) AS mountingtypeID,	                      \n" +
                "a.mountingtypeID AS mountingID,              \n" +
                "cat.categoryname partcategoryID,              \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,              \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,              \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,              \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,              \n" +
                "CASE WHEN              \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR              \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)              \n" +
                "THEN 1 ELSE 0 END isObsolete,              \n" +
                "co.PIDCode,               \n" +
                "co.mfgPNDescription,              \n" +
                "co.pitch,              \n" +
                "co.noOfRows,              \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,              \n" +
                "co.value,              \n" +
                "co.tolerance,              \n" +
                "co.voltage,                      \n" +
                "co.isCustom,              \n" +
                "co.packaging,              \n" +
                "co.deviceMarking,              \n" +
                "co.powerRating,              \n" +
                "co.minOperatingTemp,              \n" +
                "co.maxOperatingTemp,              \n" +
                "co.connecterTypeID,              \n" +
                "co.driverToolRequired,               \n" +
                "co.matingPartRquired,               \n" +
                "co.pickupPadRequired,               \n" +
                "co.programingRequired,               \n" +
                "co.dataSheetLink,                        \n" +
                "co.isCPN,                        \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,               \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,                    \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,                \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,              \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,              \n" +
                "co.isTemperatureSensitive,              \n" +
                "co.noOfPosition AS componentLead,              \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,              \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,              \n" +
                "co.createdBy,              \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,              \n" +
                "co.color,              \n" +
                "co.uom AS partUOMID,                    \n" +
                "co.serialNumber,                  \n" +
                "CASE WHEN                    \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c                    \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0                    \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1                    \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,                      \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,                \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,              \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,          \n" +
                "b.additionalComment ,              \n" +
                "b.additionalCommentId,                \n" +
                "a.suggestedByApplicationMsg,                \n" +
                "a.suggestedByApplicationStep,    \n" +
                "a.isMPNAddedinCPN, co.rev as  mfgPNrev  \n" +
                "FROM rfq_lineitems_alternatepart a              \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id              \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0              \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0              \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0              \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id                   \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id                        \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id                   \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id                   \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0              \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id              \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id                       \n" +
                "WHERE a.isDeleted = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4967,'2.00','V1','Bug 35041: QA Testing findings on #34040: CPN Master GUI Modification & give option to Delete MFR PN part from - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;     
                case 4967:
                allDbChangesArray.push(
                /* **************************** New Script -> 07-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pUserId INT,  \n" +
                "	IN pRoleId INT,  \n" +
                "	IN isShowDefault INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;  \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;  \n" +
                "  \n" +
                " 	IF (isShowDefault = 1) THEN  \n" +
                " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
                " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,  \n" +
                " 			`rp`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`  \n" +
                " 			FROM `rolepagedetail` AS `rp`  \n" +
                " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`  \n" +
                " 			WHERE `rp`.`roleID` = pRoleId  \n" +
                " 			AND `rp`.`deletedAt` IS NULL  \n" +
                " 			AND `pd`.`deletedAt` IS NULL  \n" +
                " 			AND `pd`.`isActive` = 1;  \n" +
                "  \n" +
                " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)  \n" +
                " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass  \n" +
                " 			FROM page_detail  \n" +
                " 			WHERE deletedAt IS NULL  \n" +
                " 			AND isActive = 1  \n" +
                " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail  \n" +
                " 			WHERE roleID = pRoleId AND deletedAt IS NULL);  \n" +
                " 	ELSE  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
                "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,  \n" +
                "			`up`.`IsShortcut` , `up`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`  \n" +
                "			FROM `userpagedetail` AS `up`  \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`  \n" +
                "			WHERE `up`.`userID` = pUserId  \n" +
                "			AND `up`.`roleID` = pRoleId  \n" +
                "			AND `up`.`deletedAt` IS NULL  \n" +
                "			AND `pd`.`deletedAt` IS NULL  \n" +
                "			AND `pd`.`isActive` = 1;  \n" +
                "  \n" +
                "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)  \n" +
                "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass  \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);  \n" +
                " 	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4968,'2.00','V1',' Sproc_GetPermissionsPageListByRole - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 4968:
                 allDbChangesArray.push(
                 /* **************************** New Script -> 07-07-2021 *********************************** */
                 "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
                    "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
                    "    FOR EACH ROW BEGIN  \n" +
                    "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
                    "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                    "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                    "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                    "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                    "  \n" +
                    "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                    "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                    "        INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
                    "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
                    "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,  \n" +
                    "					NEW.paymentNumber,								OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
                    "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
                    "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),  \n" +
                    "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                    "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                    "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),  \n" +
                    "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                    "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                    "		  FROM genericcategory  \n" +
                    "		 WHERE gencCategoryID = OLD.paymentType  \n" +
                    "		 LIMIT 1;  \n" +
                    "  \n" +
                    "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                    "		  FROM genericcategory  \n" +
                    "		 WHERE gencCategoryID = NEW.paymentType  \n" +
                    "		 LIMIT 1;  \n" +
                    "  \n" +
                    "         INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					\"Payment Method\",								vOldval,  \n" +
                    "					vNewval,									OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 		(vTableName,									NEW.id,  \n" +
                    "					\"Account Reference\",								OLD.accountReference,  \n" +
                    "					NEW.accountReference,								OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					\"Bank Account Code\",								OLD.bankAccountNo,  \n" +
                    "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,									NEW.id,  \n" +
                    "					\"Bank Name\",								OLD.bankName,  \n" +
                    "					NEW.bankName,								OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					\"Comments\",									OLD.remark,  \n" +
                    "					NEW.remark,									OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),  \n" +
                    "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "			 VALUES 	(vTableName,									NEW.id,  \n" +
                    "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
                    "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
                    "		IF NEW.isDeleted = TRUE THEN  \n" +
                    "			SET vNewval = 'Deleted';  \n" +
                    "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
                    "			SET vNewval = 'Restored';  \n" +
                    "		ELSE  \n" +
                    "			SET vNewval = 'Unknown action on delete';  \n" +
                    "        END IF;  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "                    Colname,									Oldval,  \n" +
                    "                    Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,								NEW.id,  \n" +
                    "                    vNewval,									NULL,  \n" +
                    "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                    "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                    "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                    "				END;  \n" +
                    "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                    "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                    "				END;  \n" +
                    "        INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Status\"  \n" +
                    "						WHEN old.refPaymentMode = \"CA\" THEN \"Write Off Status\"  \n" +
                    "						ELSE \"Payment Status\" END), 						vOldval,  \n" +
                    "					vNewval,									OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
                    "			INSERT INTO supplier_invoice_payment_history  \n" +
                    "							(tableName,									refPaymentID,  \n" +
                    "							Colname,									Oldval,  \n" +
                    "							Newval,										createdAt,  \n" +
                    "							createdBy,									createByRoleId,  \n" +
                    "							updatedAt,									updatedBy,  \n" +
                    "							updateByRoleId)  \n" +
                    "				  VALUES 	(vTableName,										NEW.id,  \n" +
                    "							\"Voided Date\",							'',  \n" +
                    "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,  \n" +
                    "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "			  INSERT INTO supplier_invoice_payment_history  \n" +
                    "							(tableName,									refPaymentID,  \n" +
                    "							Colname,									Oldval,  \n" +
                    "							Newval,										createdAt,  \n" +
                    "							createdBy,									createByRoleId,  \n" +
                    "							updatedAt,									updatedBy,  \n" +
                    "							updateByRoleId)  \n" +
                    "				  VALUES 	(vTableName,										NEW.id,  \n" +
                    "							\"Voided By\",									'',  \n" +
                    "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,  \n" +
                    "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "		  END IF;  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
                    "					WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
                    "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
                    "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                    "		INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
                    "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
                    "        INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                    "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
                    "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                    "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                    "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
                    "        INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					\"Locked Date\",									'',  \n" +
                    "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
                    "        INSERT INTO supplier_invoice_payment_history  \n" +
                    "					(tableName,									refPaymentID,  \n" +
                    "					Colname,									Oldval,  \n" +
                    "					Newval,										createdAt,  \n" +
                    "					createdBy,									createByRoleId,  \n" +
                    "					updatedAt,									updatedBy,  \n" +
                    "					updateByRoleId)  \n" +
                    "		  VALUES 	(vTableName,										NEW.id,  \n" +
                    "					\"Locked By\",									'',  \n" +
                    "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    IF NEW.refPaymentMode = 'P' THEN  \n" +
                    "  \n" +
                    "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                    "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                    "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
                    "				FROM mfgcodemst  \n" +
                    "				WHERE id =OLD.mfgcodeID  \n" +
                    "				ORDER BY id DESC LIMIT 1;  \n" +
                    "			END IF;  \n" +
                    "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                    "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
                    "				FROM mfgcodemst  \n" +
                    "				WHERE id =NEW.mfgcodeID  \n" +
                    "				ORDER BY id DESC LIMIT 1;  \n" +
                    "			END IF;  \n" +
                    "			  INSERT INTO supplier_invoice_payment_history  \n" +
                    "						(tableName,									refPaymentID,  \n" +
                    "						Colname,									Oldval,  \n" +
                    "						Newval,										createdAt,  \n" +
                    "						createdBy,									createByRoleId,  \n" +
                    "						updatedAt,									updatedBy,  \n" +
                    "						updateByRoleId)  \n" +
                    "			  VALUES 	(vTableName,										NEW.id,  \n" +
                    "						\"Supplier\",									vOldval,  \n" +
                    "						vNewval,												OLD.updatedAt,  \n" +
                    "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                    "			INSERT INTO supplier_invoice_payment_history  \n" +
                    "						(tableName,									refPaymentID,  \n" +
                    "						Colname,									Oldval,  \n" +
                    "						Newval,										createdAt,  \n" +
                    "						createdBy,									createByRoleId,  \n" +
                    "						updatedAt,									updatedBy,  \n" +
                    "						updateByRoleId)  \n" +
                    "			  VALUES 	(vTableName,										NEW.id,  \n" +
                    "						\"Pay To name\",									OLD.payToName,  \n" +
                    "						NEW.payToName,									OLD.updatedAt,  \n" +
                    "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	    END IF;  \n" +
                    "  \n" +
                    "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                    "			INSERT INTO supplier_invoice_payment_history  \n" +
                    "						(tableName,									refPaymentID,  \n" +
                    "						Colname,									Oldval,  \n" +
                    "						Newval,										createdAt,  \n" +
                    "						createdBy,									createByRoleId,  \n" +
                    "						updatedAt,									updatedBy,  \n" +
                    "						updateByRoleId)  \n" +
                    "			  VALUES 	(vTableName,										NEW.id,  \n" +
                    "						\"Pay To Address\",									OLD.payToAddress,  \n" +
                    "						NEW.payToAddress,								OLD.updatedAt,  \n" +
                    "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	    END IF;  \n" +
                    "  \n" +
                    "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
                    "			INSERT INTO supplier_invoice_payment_history  \n" +
                    "						(tableName,									refPaymentID,  \n" +
                    "						Colname,									Oldval,  \n" +
                    "						Newval,										createdAt,  \n" +
                    "						createdBy,									createByRoleId,  \n" +
                    "						updatedAt,									updatedBy,  \n" +
                    "						updateByRoleId)  \n" +
                    "			  VALUES 	(vTableName,										NEW.id,  \n" +
                    "						\"Bill To Name\",									OLD.billToName,  \n" +
                    "						NEW.billToName,									OLD.updatedAt,  \n" +
                    "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	    END IF;  \n" +
                    "  \n" +
                    "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
                    "			INSERT INTO supplier_invoice_payment_history  \n" +
                    "						(tableName,									refPaymentID,  \n" +
                    "						Colname,									Oldval,  \n" +
                    "						Newval,										createdAt,  \n" +
                    "						createdBy,									createByRoleId,  \n" +
                    "						updatedAt,									updatedBy,  \n" +
                    "						updateByRoleId)  \n" +
                    "			  VALUES 	(vTableName,										NEW.id,  \n" +
                    "						\"Bill To Address\",								OLD.billToAddress,  \n" +
                    "						NEW.billToAddress,								OLD.updatedAt,  \n" +
                    "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                    "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                    "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	    END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    ELSEIF NEW.refPaymentMode = 'R' THEN  \n" +
                    "  \n" +
                    "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
                    "			INSERT INTO supplier_invoice_payment_history  \n" +
                    "						(tableName,						refPaymentID,  \n" +
                    "						Colname,						Oldval,  \n" +
                    "						Newval,							createdAt,  \n" +
                    "						createdBy,						createByRoleId,  \n" +
                    "						updatedAt,						updatedBy,  \n" +
                    "						updateByRoleId)  \n" +
                    "			  VALUES 	(vTableName,							NEW.id,  \n" +
                    "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
                    "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
                    "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                    "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                    "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                    "	    END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    END IF;  \n" +
                    "END;  \n" +
                 /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                 "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                 "VALUES (4969,'2.00','V1',' Trg_AU_Packingslip_Invoice_Payment_History - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
                 );
                break;
                case 4969:
                    allDbChangesArray.push(
                    /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                    "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(        \n" +
                    "IN pPartID INT,        \n" +
                    "IN pUserID INT,        \n" +
                    "IN pRoleID INT        \n" +
                    ")  \n" +
                    "BEGIN        \n" +
                    "DECLARE totalCount INT DEFAULT 0;        \n" +
                    "DECLARE currIndex INT DEFAULT 0;        \n" +
                    "DECLARE prevLineID INT;        \n" +
                    "DECLARE currCustPNID INT;        \n" +
                    "DECLARE currMFGPNID INT;        \n" +
                    "DECLARE currLineID INT;        \n" +
                    "DECLARE mountingTypeID INT;        \n" +
                    "DECLARE functionalCategoryID INT;        \n" +
                    "DECLARE rohsStatusID INT;        \n" +
                    "DECLARE categoryID INT;        \n" +
                    "DECLARE partTypeID INT;        \n" +
                    "DECLARE statusID INT;        \n" +
                    "DECLARE mfgPNID INT;        \n" +
                    "DECLARE currCustRev VARCHAR(10);        \n" +
                    "DECLARE currCustPN VARCHAR(500);        \n" +
                    "DECLARE currCustomerPartDesc TEXT;        \n" +
                    "DECLARE mfgPN VARCHAR(500);        \n" +
                    "DECLARE mfgPID VARCHAR(500);        \n" +
                    "DECLARE maxDisplayOrder DECIMAL;        \n" +
                    "DECLARE pLiveInternalVersion INT;        \n" +
                    "DECLARE pLiveInternalVersionMethod VARCHAR(50);        \n" +
                    "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);        \n" +
                    "DECLARE pCompanyName VARCHAR(100);        \n" +
                    "DECLARE pMFGPN VARCHAR(100);        \n" +
                    "DECLARE pEpicoreType VARCHAR(100);        \n" +
                    "DECLARE vSerialNumer VARCHAR(20);        \n" +
                    "DECLARE v_message VARCHAR(20);        \n" +
                    "DECLARE maxPartId INT;        \n" +
                    "SET categoryID = 2;        \n" +
                    "SET partTypeID = 2;    \n" +
                    "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;    \n" +
                    "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';        \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN        \n" +
                    "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';        \n" +
                    "	ELSE        \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';        \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN        \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;        \n" +
                    "		ELSE        \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;        \n" +
                    "		END IF;        \n" +
                    "	END IF;        \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;        \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);      \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;        \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;        \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);      \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (        \n" +
                    "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,        \n" +
                    "		rla.mfgPNID,    c.RoHSStatusID        \n" +
                    "	FROM rfq_lineitems_alternatepart rla        \n" +
                    "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id        \n" +
                    "	JOIN component c ON c.id = rla.mfgPNID        \n" +
                    "	WHERE rl.custPN IS NOT NULL AND rl.custPN != \"\" AND rla.mfgPNID IS NOT NULL        \n" +
                    "	AND rl.partID = pPartID        \n" +
                    "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1    \n" +
                    "	AND rl.duplicateCPNStep = 1);    \n" +
                    "  \n" +
                    "  \n" +
                    "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;         \n" +
                    "    IF totalCount > 0 THEN        \n" +
                    "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;    \n" +
                    "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;    \n" +
                    "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;    \n" +
                    "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';        \n" +
                    "		IF functionalCategoryID IS NULL THEN        \n" +
                    "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;        \n" +
                    "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)        \n" +
                    "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);    \n" +
                    "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;        \n" +
                    "		END IF;        \n" +
                    "  \n" +
                    "		IF mountingTypeID IS NULL THEN        \n" +
                    "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);    \n" +
                    "			SELECT LAST_INSERT_ID() INTO mountingTypeID;        \n" +
                    "		END IF;        \n" +
                    "		SET prevLineID = 0;        \n" +
                    "		WHILE currIndex < totalCount DO        \n" +
                    "			SET currCustPN = NULL;        \n" +
                    "			SET currCustRev = NULL;        \n" +
                    "			SET currCustomerPartDesc = NULL;    \n" +
                    "  \n" +
                    "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc    \n" +
                    "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc     \n" +
                    "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;        \n" +
                    "  \n" +
                    "			SET currIndex = currIndex + 1;        \n" +
                    "  \n" +
                    "            SET pLiveInternalVersion = 0;        \n" +
                    "  \n" +
                    "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN        \n" +
                    "				IF (currCustPNID IS NOT NULL) THEN        \n" +
                    "					IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN        \n" +
                    "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);    \n" +
                    "  \n" +
                    "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;        \n" +
                    "  \n" +
                    "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;        \n" +
                    "  \n" +
                    "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );    \n" +
                    "  \n" +
                    "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;        \n" +
                    "						INSERT INTO rfq_assembly_history        \n" +
                    "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)        \n" +
                    "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFR PN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);        \n" +
                    "  \n" +
                    "						-- Update All Assembly for CPN change        \n" +
                    "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);        \n" +
                    "					END IF;        \n" +
                    "				END IF;        \n" +
                    "				IF (currCustPNID IS NULL) THEN        \n" +
                    "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN        \n" +
                    "						SET rohsStatusID = 0;        \n" +
                    "					ELSE        \n" +
                    "						SET rohsStatusID = 1;        \n" +
                    "					END IF;        \n" +
                    "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN        \n" +
                    "						SET currCustRev = \"-\";        \n" +
                    "					END IF;        \n" +
                    "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);    \n" +
                    "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;        \n" +
                    "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);        \n" +
                    "					SET mfgPNID = NULL;    \n" +
                    "  \n" +
                    "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;        \n" +
                    "					-- SELECT   mfgPNID;        \n" +
                    "					IF mfgPNID IS NULL THEN        \n" +
                    "					-- SELECT   mfgPNID;        \n" +
                    "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);    \n" +
                    "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;      \n" +
                    "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,        \n" +
                    "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,        \n" +
                    "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,        \n" +
                    "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription)        \n" +
                    "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,        \n" +
                    "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),        \n" +
                    "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,        \n" +
                    "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'));    \n" +
                    "						SELECT LAST_INSERT_ID() INTO maxPartId;        \n" +
                    "						IF(currMFGPNID > 0 ) THEN        \n" +
                    "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);        \n" +
                    "						END IF;    \n" +
                    "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;        \n" +
                    "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);        \n" +
                    "					ELSE        \n" +
                    "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN        \n" +
                    "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);        \n" +
                    "							SET currCustPNID = mfgPNID;    \n" +
                    "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;        \n" +
                    "							SET pLiveInternalVersion = pLiveInternalVersion + 1;        \n" +
                    "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );    \n" +
                    "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;        \n" +
                    "							INSERT INTO rfq_assembly_history        \n" +
                    "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,        \n" +
                    "								oldValue,newValue,changeVersion,        \n" +
                    "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)        \n" +
                    "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFR PN\",        \n" +
                    "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),        \n" +
                    "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);    \n" +
                    "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;        \n" +
                    "						-- Update All Assembly for CPN change        \n" +
                    "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);        \n" +
                    "						ELSE        \n" +
                    "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;        \n" +
                    "						END IF;        \n" +
                    "					END IF;        \n" +
                    "				END IF;        \n" +
                    "			END IF;        \n" +
                    "			END WHILE;    \n" +
                    "  \n" +
                    "			UPDATE component      \n" +
                    "			SET  liveInternalVersion = (liveInternalVersion + 1),    \n" +
                    "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))    \n" +
                    "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);        \n" +
                    "		END IF;        \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;        \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;    \n" +
                    "		SELECT  * FROM temp_new_cpn_id;        \n" +
                    "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);        \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_SaveCustMFGPn`;  \n" +
                    "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(      \n" +
                    "IN prefCPNPartID INT,      \n" +
                    "IN prefComponentIDs VARCHAR(5000),      \n" +
                    "IN puserID int,      \n" +
                    "IN pUserRoleID int      \n" +
                    ")  \n" +
                    "BEGIN      \n" +
                    "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                    "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);      \n" +
                    "	DECLARE pCompanyName VARCHAR(100);      \n" +
                    "	DECLARE pMFGPN VARCHAR(100);      \n" +
                    "	DECLARE pLiveInternalVersion INT;      \n" +
                    "	DECLARE totMFGPN INT DEFAULT 0;      \n" +
                    "	DECLARE i INT DEFAULT 0;                \n" +
                    "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                    "	BEGIN      \n" +
                    "		ROLLBACK;      \n" +
                    "		RESIGNAL;      \n" +
                    "	END;      \n" +
                    "	DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
                    "	  BEGIN      \n" +
                    "		ROLLBACK;      \n" +
                    "		RESIGNAL;      \n" +
                    "	END;      \n" +
                    "	START TRANSACTION;    */      \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;      \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;      \n" +
                    "	/*Generate Dummy data from string to row */      \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;      \n" +
                    "	CREATE TEMPORARY TABLE t_CustMFGPn( txt TEXT );      \n" +
                    "	INSERT INTO t_CustMFGPn VALUES(prefComponentIDs);      \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;      \n" +
                    "	CREATE TEMPORARY TABLE temp_CustMFGPn( val CHAR(255) );      \n" +
                    "	SET @SQL = CONCAT(\"insert into temp_CustMFGPn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_CustMFGPn), \",\", \"'),('\"),\"');\");      \n" +
                    "	PREPARE stmt1 FROM @SQL;      \n" +
                    "	EXECUTE stmt1;      \n" +
                    "	-- SELECT DISTINCT(val) FROM temp_CustMFGPn;      \n" +
                    "	/*Generate Dummy data from string to row */      \n" +
                    "  \n" +
                    "	-- SELECT mfgPN INTO pMFGPN FROM component WHERE id = prefCPNPartID;      \n" +
                    "  \n" +
                    "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = prefCPNPartID;      \n" +
                    "	SET pLiveInternalVersion  = pLiveInternalVersion  + 1;      \n" +
                    "  \n" +
                    "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                    "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';      \n" +
                    "	ELSE      \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';      \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                    "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;      \n" +
                    "		ELSE      \n" +
                    "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;      \n" +
                    "		END IF;      \n" +
                    "	END IF;      \n" +
                    "  \n" +
                    "	/* add all mapping mfgPN history with internal version */      \n" +
                    "	SELECT COUNT(*) FROM temp_CustMFGPn INTO totMFGPN;      \n" +
                    "	WHILE i < totMFGPN DO      \n" +
                    "	SET pMFGPN = NULL;      \n" +
                    "	SELECT mfgPN INTO pMFGPN FROM component WHERE deletedAt IS NULL      \n" +
                    "	AND id = (SELECT val FROM temp_CustMFGPn LIMIT i,1);      \n" +
                    "  \n" +
                    "	INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                    "						oldValue,newValue,changeVersion,createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)      \n" +
                    "	VALUES 	(\"component\", prefCPNPartID, NULL,NULL, prefCPNPartID, \"MFG PN\",      \n" +
                    "		NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)), fun_DatetimetoUTCDateTime(),puserID,pUserRoleID,fun_DatetimetoUTCDateTime(),puserID,pUserRoleID);      \n" +
                    "	SET i = i + 1;      \n" +
                    "	END WHILE;      \n" +
                    "	/* update component live internal version */      \n" +
                    "	UPDATE component      \n" +
                    "	SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = prefCPNPartID;      \n" +
                    "	/* add all mapping mfgPN against custpn */      \n" +
                    "	INSERT INTO component_cust_alias_rev_pn(refComponentID,refCPNPartID,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)      \n" +
                    "	SELECT DISTINCT(val) `refComponentID` , prefCPNPartID `refCPNPartID`, puserID `createdBy`,pUserRoleID , fun_DatetimetoUTCDateTime(),puserID,pUserRoleID    \n" +
                    "	FROM temp_CustMFGPn ;      \n" +
                    "	-- COMMIT;      \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                    /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                    /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                    /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (4970,'2.00','V1','Bug 35041: QA Testing findings on #34040: CPN Master GUI Modification & give option to Delete MFR PN part from - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                    break;
                    case 4970:
                        allDbChangesArray.push(
                        /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                        "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                        "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(        \n" +
                        "IN pPartID INT,        \n" +
                        "IN pUserID INT,        \n" +
                        "IN pRoleID INT        \n" +
                        ")  \n" +
                        "BEGIN        \n" +
                        "DECLARE totalCount INT DEFAULT 0;        \n" +
                        "DECLARE currIndex INT DEFAULT 0;        \n" +
                        "DECLARE prevLineID INT;        \n" +
                        "DECLARE currCustPNID INT;        \n" +
                        "DECLARE currMFGPNID INT;        \n" +
                        "DECLARE currLineID INT;        \n" +
                        "DECLARE mountingTypeID INT;        \n" +
                        "DECLARE functionalCategoryID INT;        \n" +
                        "DECLARE rohsStatusID INT;        \n" +
                        "DECLARE categoryID INT;        \n" +
                        "DECLARE partTypeID INT;        \n" +
                        "DECLARE statusID INT;        \n" +
                        "DECLARE mfgPNID INT;        \n" +
                        "DECLARE currCustRev VARCHAR(10);        \n" +
                        "DECLARE currCustPN VARCHAR(500);        \n" +
                        "DECLARE currCustomerPartDesc TEXT;        \n" +
                        "DECLARE mfgPN VARCHAR(500);        \n" +
                        "DECLARE mfgPID VARCHAR(500);        \n" +
                        "DECLARE maxDisplayOrder DECIMAL;        \n" +
                        "DECLARE pLiveInternalVersion INT;        \n" +
                        "DECLARE pLiveInternalVersionMethod VARCHAR(50);        \n" +
                        "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);        \n" +
                        "DECLARE pCompanyName VARCHAR(100);        \n" +
                        "DECLARE pMFGPN VARCHAR(100);        \n" +
                        "DECLARE pEpicoreType VARCHAR(100);        \n" +
                        "DECLARE vSerialNumer VARCHAR(20);        \n" +
                        "DECLARE v_message VARCHAR(20);        \n" +
                        "DECLARE maxPartId INT;        \n" +
                        "SET categoryID = 2;        \n" +
                        "SET partTypeID = 2;    \n" +
                        "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;    \n" +
                        "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';        \n" +
                        "	IF pLiveInternalVersionMethod = \"P\" THEN        \n" +
                        "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';        \n" +
                        "	ELSE        \n" +
                        "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';        \n" +
                        "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN        \n" +
                        "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;        \n" +
                        "		ELSE        \n" +
                        "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;        \n" +
                        "		END IF;        \n" +
                        "	END IF;        \n" +
                        "  \n" +
                        "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;        \n" +
                        "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);      \n" +
                        "  \n" +
                        "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;        \n" +
                        "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;        \n" +
                        "  \n" +
                        "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);      \n" +
                        "  \n" +
                        "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (        \n" +
                        "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,        \n" +
                        "		rla.mfgPNID,    c.RoHSStatusID        \n" +
                        "	FROM rfq_lineitems_alternatepart rla        \n" +
                        "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id        \n" +
                        "	JOIN component c ON c.id = rla.mfgPNID        \n" +
                        "	WHERE rl.custPN IS NOT NULL AND rl.custPN != \"\" AND rla.mfgPNID IS NOT NULL        \n" +
                        "	AND rl.partID = pPartID        \n" +
                        "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1    \n" +
                        "	AND rl.duplicateCPNStep = 1);    \n" +
                        "  \n" +
                        "  \n" +
                        "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;         \n" +
                        "    IF totalCount > 0 THEN        \n" +
                        "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;    \n" +
                        "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;    \n" +
                        "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;    \n" +
                        "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';        \n" +
                        "		IF functionalCategoryID IS NULL THEN        \n" +
                        "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;        \n" +
                        "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)        \n" +
                        "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);    \n" +
                        "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;        \n" +
                        "		END IF;        \n" +
                        "  \n" +
                        "		IF mountingTypeID IS NULL THEN        \n" +
                        "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);    \n" +
                        "			SELECT LAST_INSERT_ID() INTO mountingTypeID;        \n" +
                        "		END IF;        \n" +
                        "		SET prevLineID = 0;        \n" +
                        "		WHILE currIndex < totalCount DO        \n" +
                        "			SET currCustPN = NULL;        \n" +
                        "			SET currCustRev = NULL;        \n" +
                        "			SET currCustomerPartDesc = NULL;    \n" +
                        "  \n" +
                        "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc    \n" +
                        "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc     \n" +
                        "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;        \n" +
                        "  \n" +
                        "			SET currIndex = currIndex + 1;        \n" +
                        "  \n" +
                        "            SET pLiveInternalVersion = 0;        \n" +
                        "  \n" +
                        "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN        \n" +
                        "				IF (currCustPNID IS NOT NULL) THEN        \n" +
                        "					IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN        \n" +
                        "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);    \n" +
                        "  \n" +
                        "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;        \n" +
                        "  \n" +
                        "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;        \n" +
                        "  \n" +
                        "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );    \n" +
                        "  \n" +
                        "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;        \n" +
                        "						INSERT INTO rfq_assembly_history        \n" +
                        "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)        \n" +
                        "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFR PN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);        \n" +
                        "  \n" +
                        "						-- Update All Assembly for CPN change        \n" +
                        "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);        \n" +
                        "					END IF;        \n" +
                        "				END IF;        \n" +
                        "				IF (currCustPNID IS NULL) THEN        \n" +
                        "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN        \n" +
                        "						SET rohsStatusID = 0;        \n" +
                        "					ELSE        \n" +
                        "						SET rohsStatusID = 1;        \n" +
                        "					END IF;        \n" +
                        "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN        \n" +
                        "						SET currCustRev = \"-\";        \n" +
                        "					END IF;        \n" +
                        "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);    \n" +
                        "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;        \n" +
                        "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);        \n" +
                        "					SET mfgPNID = NULL;    \n" +
                        "  \n" +
                        "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;        \n" +
                        "					-- SELECT   mfgPNID;        \n" +
                        "					IF mfgPNID IS NULL THEN        \n" +
                        "					-- SELECT   mfgPNID;        \n" +
                        "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);    \n" +
                        "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;      \n" +
                        "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,        \n" +
                        "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,        \n" +
                        "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,        \n" +
                        "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription)        \n" +
                        "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,        \n" +
                        "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),        \n" +
                        "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,        \n" +
                        "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'));    \n" +
                        "						SELECT LAST_INSERT_ID() INTO maxPartId;        \n" +
                        "						IF(currMFGPNID > 0 ) THEN        \n" +
                        "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);        \n" +
                        "						END IF;    \n" +
                        "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = maxPartId;        \n" +
                        "						SET pLiveInternalVersion = pLiveInternalVersion + 1;        \n" +
                        "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );    \n" +
                        "						SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = maxPartId;        \n" +
                        "						INSERT INTO rfq_assembly_history        \n" +
                        "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,        \n" +
                        "							oldValue,newValue,changeVersion,        \n" +
                        "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)        \n" +
                        "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MFR PN\",        \n" +
                        "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),        \n" +
                        "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);    \n" +
                        "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;        \n" +
                        "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);        \n" +
                        "					ELSE        \n" +
                        "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN        \n" +
                        "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);        \n" +
                        "							SET currCustPNID = mfgPNID;    \n" +
                        "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;        \n" +
                        "							SET pLiveInternalVersion = pLiveInternalVersion + 1;        \n" +
                        "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );    \n" +
                        "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;        \n" +
                        "							INSERT INTO rfq_assembly_history        \n" +
                        "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,        \n" +
                        "								oldValue,newValue,changeVersion,        \n" +
                        "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)        \n" +
                        "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFR PN\",        \n" +
                        "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),        \n" +
                        "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);    \n" +
                        "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;        \n" +
                        "						-- Update All Assembly for CPN change        \n" +
                        "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);        \n" +
                        "						ELSE        \n" +
                        "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;        \n" +
                        "						END IF;        \n" +
                        "					END IF;        \n" +
                        "				END IF;        \n" +
                        "			END IF;        \n" +
                        "			END WHILE;    \n" +
                        "  \n" +
                        "			UPDATE component      \n" +
                        "			SET  liveInternalVersion = (liveInternalVersion + 1),    \n" +
                        "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))    \n" +
                        "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);        \n" +
                        "		END IF;        \n" +
                        "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;        \n" +
                        "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;    \n" +
                        "		SELECT  * FROM temp_new_cpn_id;        \n" +
                        "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);        \n" +
                        "END;  \n" +
                        /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                        "VALUES (4971,'2.00','V1','Bug 35041: QA Testing findings on #34040: CPN Master GUI Modification & give option to Delete MFR PN part from - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                        );
                        break;   
                case 4971:
                    allDbChangesArray.push(
                        /* **************************** New Script -> 07-07-2021 *********************************** */  
                        "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                        "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN            \n" +
                        "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;            \n" +
                        "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;          \n" +
                        "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;          \n" +
                        "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;          \n" +
                        "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;          \n" +
                        "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;         \n" +
                        "    IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),        \n" +
                        "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;           \n" +
                        "    IF IFNULL(OLD.externalSupplierOrder,0) != IFNULL(NEW.externalSupplierOrder,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Supplier API Request Order',CAST(OLD.externalSupplierOrder AS CHAR), CAST(NEW.externalSupplierOrder AS CHAR),        \n" +
                        "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;      \n" +
                        "    IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN            \n" +
                        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),       \n" +
                        "        CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                        "	END IF;       \n" +
                        "    IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                        "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Display Order',CAST(OLD.displayOrder AS CHAR), CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                        "	END IF;  \n" +
                        "END;  \n" +
                        /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                        "VALUES (4972,'2.00','V1',' Update Trg_AU_mfgcodemst trigger - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
                        );
                        break;       
              case 4972:
                  allDbChangesArray.push(
                  /* **************************** New Script -> 07-07-2021 *********************************** */
	                "DROP PROCEDURE IF EXISTS sproc_getAllECODFMRequestNumber;  \n" +
	                "CREATE PROCEDURE `sproc_getAllECODFMRequestNumber`(  \n" +
	                "	pSearchQuery Varchar(50),  \n" +
	                "    pRequestType tinyint  \n" +
	                ")  \n" +
	                "BEGIN  \n" +
	                "	DECLARE  vMfgFormat Varchar(500);  \n" +
	                "    select fun_getMFGCodeNameFormat() into vMfgFormat;  \n" +
	                "    SET @sqlStatement = concat('select eco.ecoReqID,  \n" +
	                "									eco.ecoNumber,  \n" +
	                "                                    eco.fromPartID,  \n" +
	                "									wo.woID,  \n" +
	                "									wo.woNumber,  \n" +
	                "                                    wo.partId,  \n" +
	                "                                    co.PIDCode,  \n" +
	                "                                    co.mfgPN,  \n" +
	                "									wo.customerId,                                      \n" +
	                "                                    concat(eco.ecoNumber,\" | \",co.PIDCode,\" | \",co.mfgPN,\" | \", wo.woNumber,\" | \",fun_GetFormattedMfgCode(customer.mfgCode,customer.mfgName,',vMfgFormat,')) ecoDfmDetail   \n" +
	                "							from ECO_Request eco   \n" +
	                "                            join workorder wo  on wo.woID = eco.woID and wo.isDeleted = 0  \n" +
	                "                            left join mfgcodemst customer on customer.id = wo.customerID and customer.isDeleted = 0  \n" +
	                "                            left join component co on co.id = wo.partId  and co.isDeleted = 0  \n" +
	                "                            where eco.requestType = ', pRequestType ,  \n" +
	                "                            ' and eco.isDeleted = 0  \n" +
	                "                            and (eco.ecoNumber like \"%' , pSearchQuery, '%\"',  \n" +
	                "								' or wo.woNumber like \"%' , pSearchQuery, '%\"',  \n" +
	                "                                ' or customer.mfgCode like \"%',pSearchQuery,'%\"',  \n" +
	                "                                ' or customer.mfgName like \"%',pSearchQuery,'%\"',  \n" +
	                "                                ' or customer.mfgName like \"%',pSearchQuery,'%\")');      \n" +
	                "  \n" +
	                "		PREPARE query1 FROM @sqlStatement;                        \n" +
	                "		EXECUTE query1;     	                   \n" +
	                "		DEALLOCATE PREPARE query1;                                         \n" +
	                "END;  \n" +
                  /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                  "VALUES (4973,'2.00','V1','sproc_getAllECODFMRequestNumber  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                  );
                break;
                case 4973:
                  allDbChangesArray.push(
                  /* **************************** New Script -> 07-07-2021 *********************************** */
	                "drop procedure if exists sproc_getAllWOForSearchAutoComplete;  \n" +
	                "CREATE PROCEDURE `sproc_getAllWOForSearchAutoComplete`(  \n" +
	                "	pSearchQuery Varchar(50)  \n" +
	                ")  \n" +
	                "BEGIN  \n" +
	                "	DECLARE  vMfgFormat Varchar(500);  \n" +
	                "    select fun_getMFGCodeNameFormat() into vMfgFormat;  \n" +
	                "    SET @sqlStatement = concat('select  wo.woID,  \n" +
	                "									wo.woNumber,  \n" +
	                "                                    wo.partId,  \n" +
	                "                                    co.PIDCode,  \n" +
	                "                                    co.mfgPN,  \n" +
	                "									wo.customerId,                                      \n" +
	                "                                    concat(wo.woNumber,\" | \",co.PIDCode,\" | \",co.mfgPN,\" | \",fun_GetFormattedMfgCode(customer.mfgCode,customer.mfgName,',vMfgFormat,')) woNumerWithDetail   \n" +
	                "							from workorder wo      \n" +
	                "                            left join mfgcodemst customer on customer.id = wo.customerID and customer.isDeleted = 0  \n" +
	                "                            left join component co on co.id = wo.partId  and co.isDeleted = 0  \n" +
	                "                            where wo.isDeleted = 0  \n" +
	                "                            and (wo.woNumber like \"%' , pSearchQuery, '%\"',  \n" +
	                "                                ' or customer.mfgCode like \"%',pSearchQuery,'%\"',  \n" +
	                "                                ' or customer.mfgName like \"%',pSearchQuery,'%\"',  \n" +
	                "                                ' or customer.mfgName like \"%',pSearchQuery,'%\")');      \n" +
	                "  \n" +
	                "		PREPARE query1 FROM @sqlStatement;                        \n" +
	                "		EXECUTE query1;     	                   \n" +
	                "		DEALLOCATE PREPARE query1;                                         \n" +
	                "END;  \n" +	
                  /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                  "VALUES (4974,'2.00','V1','sproc_getAllWOForSearchAutoComplete  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                  );
                break;
                case 4974:
                  allDbChangesArray.push(
                  /* **************************** New Script -> 07-07-2021 *********************************** */
	                "drop procedure if exists Sproc_getCustomerPackingSlipTransferQty;  \n" +
	                "CREATE PROCEDURE `Sproc_getCustomerPackingSlipTransferQty`(    \n" +
	                "	IN pPartID INT    \n" +
	                "	)  \n" +
	                "BEGIN    \n" +
	                "  \n" +
	                "		SELECT vucp.opStock,    \n" +
	                "		vucp.woID,    \n" +
	                "		vucp.lastWOOPID,    \n" +
	                "		vucp.woNumber,    \n" +
	                "		vucp.assyID,    \n" +
	                "		vucp.availableQty,    \n" +
	                "		#get available qty - shipped qty only, no need to deduct package qty of work order again    \n" +
	                "		-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `availableQty`,    \n" +
	                "		vucp.actualAvalilableQty,    \n" +
	                "		-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `actualAvalilableQty` ,    \n" +
	                "		vucp.partID,    \n" +
	                "		vucp.rohsIcon,    \n" +
	                "		vucp.rohsName,    \n" +
	                "		vucp.mfgPN,    \n" +
	                "		vucp.selectedQty,    \n" +
	                "		vucp.warehouseName,    \n" +
	                "		vucp.binName,    \n" +
	                "		vucp.binID,    \n" +
	                "		vucp.totalUMIDCount,    \n" +
	                "		vucp.departmentName,    \n" +
	                "		vucp.stockType,    \n" +
	                "		vucp.stockTypeName,    \n" +
	                "		GROUP_CONCAT(DISTINCT sm.salesorderNumber) AS soNumbers,    \n" +
	                "                (CASE WHEN vucp.woID IS NULL THEN vucp.poNumbers    \n" +
	                "			ELSE GROUP_CONCAT(DISTINCT sm.poNumber) END) AS poNumbers,    \n" +
	                "                w.buildQty,    \n" +
	                "                NULL AS UMID,    \n" +
	                "		NULL AS refsidid ,    \n" +
	                "		(CASE WHEN vucp.woID IS NULL THEN (SELECT GROUP_CONCAT(dateCode SEPARATOR ', ') FROM AssemblyStock WHERE woNumber = `vucp`.`woNumber`    \n" +
	                "								AND isDeleted = 0 AND `type` = 'OS')    \n" +
	                "				ELSE w.dateCode END) woDateCode    \n" +
	                "                FROM  vu_customer_packing_slip_qty  vucp    \n" +
	                "			LEFT JOIN workorder w ON w.woID=vucp.woID    \n" +
	                "			LEFT JOIN workorder_salesorder_details wsd ON wsd.woId=w.woID    \n" +
	                "			LEFT JOIN salesorderdet sd ON sd.id=wsd.salesOrderDetailId AND sd.partCategory=3    \n" +
	                "			LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID    \n" +
	                "		WHERE vucp.partID=pPartID    \n" +
	                "		GROUP BY vucp.opStock,    \n" +
	                "		vucp.woID,    \n" +
	                "		vucp.lastWOOPID,    \n" +
	                "		vucp.woNumber,    \n" +
	                "		vucp.assyID,    \n" +
	                "		vucp.availableQty,    \n" +
	                "		vucp.actualAvalilableQty,    \n" +
	                "		vucp.partID,    \n" +
	                "		vucp.rohsIcon,    \n" +
	                "		vucp.rohsName,    \n" +
	                "		vucp.mfgPN,    \n" +
	                "		vucp.selectedQty,    \n" +
	                "		vucp.warehouseName,    \n" +
	                "		vucp.binName,    \n" +
	                "		vucp.binID,    \n" +
	                "		vucp.totalUMIDCount,    \n" +
	                "		vucp.departmentName,    \n" +
	                "		vucp.stockType,    \n" +
	                "		vucp.stockTypeName,    \n" +
	                "		w.buildQty,w.dateCode    \n" +
	                "  \n" +
	                "		UNION ALL    \n" +
	                "  \n" +
	                "		SELECT /*SUM(css.pkgQty) AS opStock,*/    \n" +
	                "			SUM(css.orgQty) AS opStock,    \n" +
	                "			css.woID,    \n" +
	                "			NULL lastWOOPID,    \n" +
	                "			css.woNumber,    \n" +
	                "			 `fun_getAssyPIDCodeByID`(`css`.`refcompid`)  AS `assyID`,    \n" +
	                "			/*((SUM(`css`.`pkgQty`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss`    \n" +
	                "							WHERE `ss`.`isDeleted` = 0 AND `ss`.`woNumber` = `css`.`woNumber`    \n" +
	                "							AND `ss`.`partID` = `css`.`refcompid`    \n" +
	                "							AND `ss`.`refsidid` = `css`.`id` ))    \n" +
	                "						) AS `availableQty` ,   */    \n" +
	                "			SUM(`css`.`pkgQty`) AS `availableQty`  ,    \n" +
	                "			SUM(`css`.`pkgQty`) AS actualAvalilableQty,    \n" +
	                "			css.refcompid partID,    \n" +
	                "			`fun_getRoHSIconByPartID`(`css`.`refcompid`)  AS `rohsIcon`,    \n" +
	                "			`fun_getRoHSNameByPartID`(`css`.`refcompid`)  AS `rohsName`,    \n" +
	                "			`fun_getComponentNameByID`(`css`.`refcompid`)  AS `mfgPN`,    \n" +
	                "			0 AS selectedQty,    \n" +
	                "			`fun_getWarehouseNameByBinID`(`css`.`binID`)  AS `warehouseName`,    \n" +
	                "			`fun_getBinNameByID`(`css`.`binID`)  AS `binName`,    \n" +
	                "			css.binID,    \n" +
	                "			IFNULL(SUM(`css`.`pkgQty`),0) AS totalUMIDCount,    \n" +
	                "			`fun_getDepartmentNameByBinID`(`css`.`binID`)  AS `departmentName` ,    \n" +
	                "			'US' AS stockType,    \n" +
	                "			'UMID Stock' AS stockTypeName,    \n" +
	                "			vu_wsd.salesOrderNumber AS soNumbers,    \n" +
	                "			vu_wsd.poNumber AS poNumbers,    \n" +
	                "			wo.buildQty,    \n" +
	                "			css.uid AS UMID,    \n" +
	                "			css.id AS refsidid,    \n" +
	                "			(CASE WHEN css.woID IS NULL THEN (SELECT dateCode FROM AssemblyStock WHERE woNumber = `css`.`woNumber`    \n" +
	                "								AND isDeleted = 0 AND `type` = 'OS' LIMIT 1)    \n" +
	                "				ELSE wo.dateCode END) woDateCode    \n" +
	                "		FROM component_sid_stock css    \n" +
	                "			LEFT JOIN workorder wo ON wo.woID=css.woID    \n" +
	                "			LEFT JOIN vu_workorder_salesorder_details vu_wsd ON vu_wsd.woID=css.woID    \n" +
	                "		WHERE css.refcompid = pPartID    \n" +
	                "		AND css.stockInventoryType in ( 'AI'  ,'SI')  \n" +
	                "		AND IFNULL(css.pkgQty,0) > 0    \n" +
	                "		AND css.isDeleted = 0    \n" +
	                "		GROUP BY `css`.`woID` ,`css`.`woNumber` , `css`.`refcompid`, `css`.`binID`,    \n" +
	                "				vu_wsd.salesOrderNumber, vu_wsd.poNumber, wo.buildQty,    \n" +
	                "				css.uid, css.id, wo.dateCode  ;    \n" +
	                "  \n" +
	                "  \n" +
	                "    END;  \n" +
                  /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                  "VALUES (4975,'2.00','V1','Sproc_getCustomerPackingSlipTransferQty  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                  );
                break;
                case 4975:
                  allDbChangesArray.push(
                  /* **************************** New Script -> 07-07-2021 *********************************** */
	                "drop procedure if exists Sproc_GetUMIDListForCustomerPackingSlip;  \n" +
	                "CREATE PROCEDURE `Sproc_GetUMIDListForCustomerPackingSlip`(	         \n" +
	                "	IN pOrderBy VARCHAR(255),																																		        \n" +
	                "	IN pWhereClause VARCHAR(16383),                                                                                                          \n" +
	                "	IN pPartId INT,                                                                                            \n" +
	                "	IN pExpiredDay INT,                              \n" +
	                "	IN pPackingSlipDetId INT        \n" +
	                ")  \n" +
	                "BEGIN                                                                                                                                               \n" +
	                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                     \n" +
	                "	DECLARE v_TimeZone VARCHAR(50);               \n" +
	                "    DECLARE vUMIDWhereClause VARCHAR(1000);        \n" +
	                "	DECLARE vPackagingAliasPart VARCHAR(1000);      \n" +
	                "    DECLARE vCplAvlPart VARCHAR(1000);      \n" +
	                "  \n" +
	                "	SELECT fun_getTimeZone() INTO v_TimeZone;                            \n" +
	                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                            \n" +
	                "  \n" +
	                "	#SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';                                                                                                                \n" +
	                "	# Get AVL part list of CPN part      \n" +
	                "    SELECT GROUP_CONCAT(refComponentID) INTO vCplAvlPart      \n" +
	                "	FROM  component_cust_alias_rev_pn       \n" +
	                "    WHERE refCPNPartID = pPartId      \n" +
	                "    AND isDeleted = 0;      \n" +
	                "	#Get Packaging Alias part list      \n" +
	                "	SELECT GROUP_CONCAT(a.componentID) INTO vPackagingAliasPart      \n" +
	                "	FROM component_packagingalias   a      \n" +
	                "	WHERE a.aliasgroupID IN       \n" +
	                "	(SELECT b.aliasgroupID FROM component_packagingalias b WHERE b.componentID = pPartId)      \n" +
	                "	AND a.componentID <> pPartId      \n" +
	                "	AND a.isDeleted = 0;      \n" +
	                "  \n" +
	                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                          \n" +
	                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                                              \n" +
	                "	ELSE                                                                                                          \n" +
	                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                                                                                                          \n" +
	                "	END IF;                                                                                                          \n" +
	                "  \n" +
	                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                                                                                                  \n" +
	                "		SET pWhereClause = ' 1=1';                                                                                                            \n" +
	                "	END IF;	                                                                                              \n" +
	                "  \n" +
	                "	/*IF(pExpireMaterial = 1) THEN                                                      \n" +
	                "		IF(pExpiredDay = 0) THEN                                                       \n" +
	                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');                                                      \n" +
	                "		ELSE                                                      \n" +
	                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');                                                      \n" +
	                "		END IF;	                                                      \n" +
	                "	END IF;	                */        \n" +
	                "  \n" +
	                "#select    pPartId;       \n" +
	                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN                                                                                               \n" +
	                "		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);                 \n" +
	                "	END IF;         \n" +
	                "  \n" +
	                "#select    vPackagingAliasPart;          \n" +
	                "    IF vPackagingAliasPart IS NOT NULL THEN      \n" +
	                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in (' , vPackagingAliasPart,')');                 \n" +
	                "    END IF;      \n" +
	                "#select    vCplAvlPart;         \n" +
	                "    IF vCplAvlPart IS NOT NULL THEN      \n" +
	                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in ( ', vCplAvlPart, ')');                 \n" +
	                "    END IF;      \n" +
	                "#select     vUMIDWhereClause;      \n" +
	                "    IF (vUMIDWhereClause IS NOT NULL  OR  vUMIDWhereClause != '') THEN      \n" +
	                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ')');      \n" +
	                "    END IF;      \n" +
	                "    IF pPackingSlipDetId IS NOT NULL THEN        \n" +
	                "		SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.id in (select refsidid from shippedassembly sa where (sa.partID =', pPartId );        	    \n" +
	                "        IF vPackagingAliasPart IS NOT NULL THEN      \n" +
	                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in (' , vPackagingAliasPart,')');                 \n" +
	                "		END IF;      \n" +
	                "		IF vCplAvlPart IS NOT NULL THEN      \n" +
	                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in ( ', vCplAvlPart, ')');                 \n" +
	                "		END IF;             \n" +
	                "		SET pWhereClause  =  CONCAT(pWhereClause , ') and sa.refCustPackingSlipDetID =',pPackingSlipDetId, ') and  tempUMID.isinStk =0 ) ');        	            \n" +
	                "	END IF;         \n" +
	                "    SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.isinStk = 0 and tempUMID.pkgQty > 0 ) ');        \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;                                                                                    \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);                                                                                              \n" +
	                "	/*IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN                                                                                               \n" +
	                "		INSERT INTO tempAllocatedKitUIDs (refUidID)                                                                                               \n" +
	                "		SELECT 	k.refUIDId                                                                                               \n" +
	                "		FROM 	kit_allocation k                                                                                              \n" +
	                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)                                                                                              \n" +
	                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)                                                                                      \n" +
	                "		AND	k.status = 'A';                                                                		                              \n" +
	                "		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');                                                                                              \n" +
	                "	END IF;                      */        \n" +
	                "  \n" +
	                "	SET @vFromSQLQuery = CONCAT(\"                                                                                                          \n" +
	                "					SELECT 		id, 			scanlabel, 			uid, 			    	pkgQty, 			uom, 			                        \n" +
	                "							uomName,		printStatus, 		        costCategoryID,			costCategory,			lotCode, 		                        \n" +
	                "							dateCode,		refcompid,			mfgcodeID,		        mfgPN, 				PIDCode, 		                        \n" +
	                "							packaginggroupID,	mfg,				packageQty, 		         		                        \n" +
	                "							RoHSStatusID,		rohsIcon, 		        rohsName,			binID,				warehouseID,		                        \n" +
	                "							location,		warehouse,			department, 		        customerID,			receiveMaterialType,	                        \n" +
	                "							displayReceiveMaterialType,				spq,				pcbPerArray, 		        stockInventoryType, 	                        \n" +
	                "							customer,			pkgUnit,   		        orgPkgUnit, 		                        \n" +
	                "							cpn,				mfgAvailable, 		        customerConsign,                                                                                                     \n" +
	                "							refCPNMFGPNID, 		        mfgPNDescription,		nickName, 		                        \n" +
	                "							refSupplierPartId,	supplierMFGCode, 	        supplieMFGPN,			packaging,			packagingName, 		                        \n" +
	                "							expiryDate,		allocatedToKit,			orgQty, 		        orgRecBin,			orgRecBinName,		                        \n" +
	                "							orgRecWarehouse,	orgRecWHName,			fromBin, 		        fromBinName, 		        fromWarehouse, 			                        \n" +
	                "							fromWHName,		fromDepartment,			fromDepartmentName, 	        specialNote,			orgRecDepartment, 		                        \n" +
	                "							orgRecDepartmentName,	updatedAt, 		        updatedBy,			umidModifiedBy, 	        createdAt, 			                        \n" +
	                "							createdBy,		createdByName,			isinStk,			packingSlipId,		        	                        \n" +
	                "							packingSupplierName, 	expiredStatus,			umidPrefix,                     createdbyRole,			updatedbyRole,			                \n" +
	                "							refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		        restrictUsePermanently,		restrictUSEwithpermission,	                \n" +
	                "							restrictPackagingUsePermanently,			restrictPackagingUseWithpermission,						                \n" +
	                "							countOfRestrictUMID,	departmentID,			warehouseType,			totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,           	                \n" +
	                "							tentativePrice,		((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,	isTransit,		                                                       \n" +
	                "									               externalPartPackage,		partPackage,			createdUserCode, 	                        \n" +
	                "							mfrDateCodeFormatID,	mfrDateCodeFormat,		mfrDateCode,           		        			                       \n" +
	                "							UMIDrohsStatusID,       UMIDrohsStatus,        		isCustom,        		internalPartPackage,    	woNumber,          \n" +
	                "							detailDescription ,reservedForCustomer,isEachUOM                \n" +
	                "		FROM 		(		                                                                                                    \n" +
	                "					SELECT 		css.id,			css.scanlabel,			css.uid,			css.pkgQty,			css.uom,						                          \n" +
	                "							fun_getUnitNameByID(css.uom) uomName,			css.printStatus,		css.costCategoryID,                  			                          \n" +
	                "							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,			css.lotCode,			css.dateCode,                  				                          \n" +
	                "							css.refcompid,		c.mfgcodeID,			c.mfgPN,			c.PIDCode,			c.packaginggroupID,				                          \n" +
	                "							fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg,		c.packageQty,			                                    \n" +
	                "							css.prefix umidPrefix,	        \n" +
	                "                            c.RoHSStatusID,					                          \n" +
	                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,			css.binID,    					                          \n" +
	                "							fun_getBinNameByID(css.binID) location,			css.customerID,			fun_getMfgCodeAndNameByID(css.customerID) customer,                                                                                                    \n" +
	                "							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,			css.pkgUnit,					                \n" +
	                "							fun_getWarehouseNameByBinID(css.binID) warehouse,	        \n" +
	                "                            fun_getWarehouseIDByBinID(css.binID) warehouseID,		        \n" +
	                "                            fun_getDepartmentNameByBinID(css.binID) department,                                                                                                    \n" +
	                "							(                          \n" +
	                "								CASE                           \n" +
	                "									WHEN (css.cpn = 0) THEN 'No'                           \n" +
	                "									WHEN (css.cpn = 1) THEN 'Yes'                           \n" +
	                "									ELSE ''                           \n" +
	                "								END                          \n" +
	                "							) AS cpn,                                                                                                                       \n" +
	                "							(                          \n" +
	                "								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'                           \n" +
	                "									WHEN (css.mfgAvailabel = 1) THEN 'Yes'                           \n" +
	                "									ELSE ''                           \n" +
	                "								END                          \n" +
	                "							) AS mfgAvailable,                                                                                                    \n" +
	                "							(                          \n" +
	                "								CASE 	WHEN (css.customerConsign = 0) THEN 'No'                           \n" +
	                "									WHEN (css.customerConsign = 1) THEN 'Yes'                           \n" +
	                "									ELSE ''                           \n" +
	                "								END                          \n" +
	                "							) AS customerConsign,				                                                                                                               \n" +
	                "							css.refCPNMFGPNID,			                                    \n" +
	                "							c.mfgPNDescription,			css.receiveMaterialType,							        \n" +
	                "                            css.spq,                                                    \n" +
	                "							(                                                    \n" +
	                "								CASE                                                     \n" +
	                "									WHEN  css.receiveMaterialType = 'PP' THEN                                                    \n" +
	                "										'Purchased Part'                                                    \n" +
	                "									WHEN  css.receiveMaterialType = 'WC' THEN                                                    \n" +
	                "										'Customer Consigned (with CPN) Part'                                                    \n" +
	                "									WHEN  css.receiveMaterialType = 'WOC' THEN                                                    \n" +
	                "										'Customer Consigned (without CPN) Part'                                                    \n" +
	                "									WHEN  css.receiveMaterialType = 'PR' THEN                                                    \n" +
	                "										'Purchased & Reserved Part'                                                    \n" +
	                "									ELSE                                                    \n" +
	                "										NULL                                                    \n" +
	                "								END                                                    \n" +
	                "  \n" +
	                "							) displayReceiveMaterialType,         \n" +
	                "                            fun_getMfgNameByID(css.customerId) As reservedForCustomer,        \n" +
	                "							css.stockInventoryType,                                          							                                                    \n" +
	                "							css.pcbPerArray,				css.nickName,					css.packaging,					                          \n" +
	                "							fun_getPackagingNameByID(css.packaging) packagingName,						css.refSupplierPartId, 				                          \n" +
	                "							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	          		fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,                                                                                                                      \n" +
	                "							css.expiryDate,					        \n" +
	                "                            fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,                                                                                                    \n" +
	                "							css.orgQty,					css.specialNote,				css.fromBin,					                          \n" +
	                "							fun_getBinNameByID( css.fromBin) fromBinName,		css.fromWarehouse,      			                          \n" +
	                "							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,						css.fromDepartment,     			                          \n" +
	                "							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,				css.orgRecBin,          			                          \n" +
	                "							fun_getBinNameByID(css.orgRecBin) orgRecBinName,						css.orgRecWarehouse,    			                          \n" +
	                "							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName, 					css.orgRecDepartment,   			                          \n" +
	                "							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,                                                                                                    \n" +
	                "							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					                          \n" +
	                "							css.updatedBy,					fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,                                                                                                      \n" +
	                "							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				                          \n" +
	                "							css.createdAt createdAtFilter,                      \n" +
	                "							css.createdBy,					fun_getUserNameByID(css.createdBy) createdByName,                                                                                                \n" +
	                "							css.isinStk,                                                            \n" +
	                "							fun_getRoleByID(css.createByRoleId) createdbyRole,                                                              \n" +
	                "		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  					                                                                        							          \n" +
	                "							(                                                  \n" +
	                "								CASE                                                  \n" +
	                "									WHEN  css.stockInventoryType in ('NI','SI') THEN                                                    \n" +
	                "										CONCAT('(', a.mfgCode, ') ', a.mfgName)                \n" +
	                "									ELSE                \n" +
	                "										NULL                \n" +
	                "								END                                                  \n" +
	                "							) packingSupplierName,                     \n" +
	                "							a.packingSlipId,                                                        \n" +
	                "							 fun_getDepartmentIDByBinID(css.binID) departmentID,                                                             \n" +
	                "							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,                                                                                  \n" +
	                "							(                          \n" +
	                "								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'                           \n" +
	                "									ELSE NULL                           \n" +
	                "								END                          \n" +
	                "							) AS expiredStatus,                                                                              \n" +
	                "							refRestrictUMIDId, 				  	isUMIDRestrict,                                                                              \n" +
	                "							(                          \n" +
	                "								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'                           \n" +
	                "									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'                           \n" +
	                "									ELSE ''                           \n" +
	                "								END                          \n" +
	                "							) AS UMIDRestricted,                                                                          \n" +
	                "							c.restrictUsePermanently,						c.restrictUSEwithpermission,                                                                           \n" +
	                "							c.restrictPackagingUsePermanently,					c.restrictPackagingUseWithpermission,                                                          							        \n" +
	                "							IFNULL(c.price, 0) tentativePrice,					fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,                          \n" +
	                "							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,         	fun_getUMIDTransitStatus(css.uid) isTransit,                                 \n" +
	                "							c.partPackage externalPartPackage,                                      \n" +
	                "							fun_getPackageCaseNameByID(c.partPackageID) partPackage,		                          \n" +
	                "							fun_getUserCodeByID(css.createdBy) createdUserCode,                   	css.mfrDateCodeFormatID,                                                \n" +
	                "							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,                          \n" +
	                "							css.mfrDateCode,		css.rohsStatusID UMIDrohsStatusID,                          \n" +
	                "							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,			c.isCustom,                        \n" +
	                "							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage,    	css.woNumber,          \n" +
	                "							c.detailDescription,    \n" +
	                "                            (case when css.uom = -1 then true else false end) isEachUOM    \n" +
	                "					FROM 		component_sid_stock css force index(FK_component_sid_stock_refcompid)                                                                                                        \n" +
	                "					INNER JOIN 	component c on css.refcompid = c.id         \n" +
	                "					LEFT JOIN 	(                \n" +
	                "								SELECT 		cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id packingSlipId                \n" +
	                "								FROM 		component_sid_stock_packing_detail cspd                          \n" +
	                "								INNER JOIN 	packing_slip_material_receive_det psd force index(PRIMARY) ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0                \n" +
	                "								INNER JOIN 	packing_slip_material_receive ps force index(PRIMARY) ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0                \n" +
	                "								INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0                \n" +
	                "								GROUP BY 	cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id                \n" +
	                "							) a ON a.refComponentSidStockID = ifnull(css.parentUIDId , css.id)                                                        \n" +
	                "					WHERE 		(css.isdeleted is null or css.isdeleted = 0)\",                                                                                               \n" +
	                "								vUMIDWhereClause,\") As tempUMID                                                                                                     \n" +
	                "				WHERE\", pWhereClause                          \n" +
	                "			);                                                                                      \n" +
	                "  \n" +
	                "  \n" +
	                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                \n" +
	                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                \n" +
	                "	EXECUTE query1;                                                                                                                                                \n" +
	                "	DEALLOCATE PREPARE query1;                                                                                                            \n" +
	                "  \n" +
	                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                                          \n" +
	                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                \n" +
	                "	EXECUTE query2;                                                                                                                                                \n" +
	                "	DEALLOCATE PREPARE query2;                             \n" +
	                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy);                     \n" +
	                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                \n" +
	                "	EXECUTE mainQuery;                                                                                                                                                \n" +
	                "	DEALLOCATE PREPARE mainQuery;                                                                                                         \n" +
	                "  \n" +
	                "END;  \n" +
                  /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                  "VALUES (4976,'2.00','V1','Sproc_GetUMIDListForCustomerPackingSlip  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                  );
                break;
                case 4976:
                  allDbChangesArray.push(
                  /* **************************** New Script -> 07-07-2021 *********************************** */
	                "drop procedure if exists Sproc_SaveShippedAssemblyDetFromPackingSlip;  \n" +
	                "CREATE PROCEDURE `Sproc_SaveShippedAssemblyDetFromPackingSlip`(          \n" +
	                "	IN pShipAssyList JSON,          \n" +
	                "	IN pIsConfirmationTakenForDeallocateUMID INT,          \n" +
	                "	IN pPartID INT,          \n" +
	                "	IN pRefCustPackingSlipDetID INT,          \n" +
	                "	IN pCustomerID INT,          \n" +
	                "	IN pShippedNotes TEXT,          \n" +
	                "	IN pShippingId INT,          \n" +
	                "	IN pToBinIDOfEmptyBin INT,          \n" +
	                "	IN pTransTypeForUMID VARCHAR(100),          \n" +
	                "	IN pActionPerformedForUMIDZeroOut VARCHAR(100),          \n" +
	                "	IN pActionPerformedForUMIDConsumed VARCHAR(100),          \n" +
	                "	IN pActionPerformedForUMIDAdjust VARCHAR(100),          \n" +
	                "	IN pUserID VARCHAR(50),                    \n" +
	                "	IN pUserRoleID VARCHAR(50) ,        \n" +
	                "    IN pIsComponentStock TINYINT        \n" +
	                "    )  \n" +
	                "BEGIN          \n" +
	                "  \n" +
	                "	DECLARE i INT DEFAULT 0;                                        \n" +
	                "	DECLARE totUIShipAssy INT DEFAULT 0;            \n" +
	                "	DECLARE lv_sa_woNumber VARCHAR(20);          \n" +
	                "	DECLARE lv_sa_refsidid INT;          \n" +
	                "	DECLARE lv_sa_pkid INT;          \n" +
	                "	DECLARE lv_sa_umid VARCHAR(20);          \n" +
	                "	DECLARE lv_sa_shippedqty INT;          \n" +
	                "	DECLARE lv_db_sa_shippedqty INT;          \n" +
	                "	DECLARE lv_cpsd_refSalesorderDetid INT;          \n" +
	                "	DECLARE lv_uomIDOfAssy INT;          \n" +
	                "	DECLARE vPackagingAliasPart VARCHAR(1000);      \n" +
	                "    DECLARE vCplAvlPart VARCHAR(1000);      \n" +
	                "  \n" +
	                "	# Get AVL part list of CPN part      \n" +
	                "    select group_concat(refComponentID) into vCplAvlPart      \n" +
	                "	from  component_cust_alias_rev_pn       \n" +
	                "    where refCPNPartID = pPartID      \n" +
	                "    and isDeleted = 0;      \n" +
	                "	#Get Packaging Alias part list      \n" +
	                "	select group_concat(a.componentID) into vPackagingAliasPart      \n" +
	                "	from component_packagingalias   a      \n" +
	                "	where a.aliasgroupID in       \n" +
	                "	(select b.aliasgroupID from component_packagingalias b where b.componentID = pPartId)      \n" +
	                "	and a.componentID <> pPartID      \n" +
	                "	and a.isDeleted = 0;      \n" +
	                "  \n" +
	                "	/* get/map all ship assembly list passed from UI */          \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList;                                          \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UIShipAssyList AS                                                    \n" +
	                "	SELECT 	*                                                     \n" +
	                "	FROM 	JSON_TABLE(             \n" +
	                "		pShipAssyList,                                                    \n" +
	                "			\"$[*]\" COLUMNS(    				                                             \n" +
	                "				`shippedqty` INT PATH \"$.shippedqty\",                                                    \n" +
	                "				`woOPID` INT PATH \"$.woOPID\" ,                                                    \n" +
	                "				`workorderID` INT PATH \"$.workorderID\",        \n" +
	                "				`partID` INT PATH \"$.partID\",                                                    \n" +
	                "				`woNumber` VARCHAR(20) PATH \"$.woNumber\",                                                    \n" +
	                "				`stockType` VARCHAR(10) PATH \"$.stockType\",                                      \n" +
	                "				`refsidid` INT PATH \"$.refsidid\" ,          \n" +
	                "				`originalQty` INT PATH \"$.originalQty\" ,          \n" +
	                "				`UMID` VARCHAR(20) PATH \"$.UMID\"  ,        \n" +
	                "                `shippedUom` INT PATH \"$.shippedUom\"        \n" +
	                "			)          \n" +
	                "		) AS ShipAssy_JT;          \n" +
	                "  \n" +
	                "	SELECT uom INTO lv_uomIDOfAssy          \n" +
	                "		FROM component          \n" +
	                "		WHERE id = pPartID ;          \n" +
	                "  \n" +
	                "	/* get all ship assembly/stock list available in data base */	          \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_DBAvailableAssyStockList;        \n" +
	                "    IF(pIsComponentStock IS NOT NULL AND pIsComponentStock = TRUE) THEN        \n" +
	                "    CREATE TEMPORARY TABLE IF NOT EXISTS temp_DBAvailableAssyStockList AS          \n" +
	                "			SELECT 0 opStock,                          \n" +
	                "			null woID,                                  \n" +
	                "			null woNumber,                          \n" +
	                "			null assyID,              \n" +
	                "			css.pkgQty availableQty,              			        \n" +
	                "			css.pkgQty actualAvalilableQty,             \n" +
	                "			css.refcompid partID,                                                  \n" +
	                "			null stockType,            \n" +
	                "			null stockTypeName,                     \n" +
	                "			css.orgQty buildQty,                    \n" +
	                "			css.uid UMID,                    \n" +
	                "			css.id refsidid                         \n" +
	                "			FROM  component_sid_stock  css                     				        \n" +
	                "			WHERE ( css.refcompid = pPartID or find_in_set(css.refcompid,vPackagingAliasPart ) or find_in_set(css.refcompid,vCplAvlPart) )    \n" +
	                "            and css.isDeleted = 0;        \n" +
	                "    ELSE         \n" +
	                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DBAvailableAssyStockList AS          \n" +
	                "			SELECT vucp.opStock,                          \n" +
	                "			vucp.woID,                                  \n" +
	                "			vucp.woNumber,                          \n" +
	                "			vucp.assyID,              \n" +
	                "			vucp.availableQty,                      \n" +
	                "			#get available qty - shipped qty only, no need to deduct package qty of work order again                   \n" +
	                "			-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `availableQty`,                                    \n" +
	                "			-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `actualAvalilableQty` ,            \n" +
	                "			vucp.actualAvalilableQty,             \n" +
	                "			vucp.partID,                          \n" +
	                "			-- vucp.selectedQty,                                            \n" +
	                "			vucp.stockType,            \n" +
	                "			vucp.stockTypeName,                     \n" +
	                "					w.buildQty,                    \n" +
	                "					NULL AS UMID,                    \n" +
	                "			NULL AS refsidid                         \n" +
	                "					FROM  vu_customer_packing_slip_qty  vucp                             \n" +
	                "				LEFT JOIN workorder w ON w.woID=vucp.woID AND w.isDeleted = 0                           \n" +
	                "				LEFT JOIN workorder_salesorder_details wsd ON wsd.woId=w.woID AND wsd.isDeleted = 0                    \n" +
	                "				LEFT JOIN salesorderdet sd ON sd.id=wsd.salesOrderDetailId AND sd.partCategory=3 AND sd.isDeleted = 0						          \n" +
	                "				-- LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID                            \n" +
	                "			WHERE vucp.partID=pPartID                          \n" +
	                "			GROUP BY vucp.opStock,                          \n" +
	                "			vucp.woID,                          \n" +
	                "			vucp.lastWOOPID,                          \n" +
	                "			vucp.woNumber,                          \n" +
	                "			vucp.assyID,                          \n" +
	                "			vucp.availableQty,                          \n" +
	                "			vucp.actualAvalilableQty,                          \n" +
	                "			vucp.partID,                          \n" +
	                "			vucp.rohsIcon,                          \n" +
	                "			vucp.rohsName,                          \n" +
	                "			vucp.mfgPN,                          \n" +
	                "			vucp.selectedQty,                          \n" +
	                "			vucp.warehouseName,                          \n" +
	                "			vucp.binName,                          \n" +
	                "			vucp.binID,                          \n" +
	                "			vucp.totalUMIDCount,                          \n" +
	                "			vucp.departmentName,                       \n" +
	                "			vucp.stockType,                      \n" +
	                "			vucp.stockTypeName,                         \n" +
	                "			w.buildQty,w.dateCode                    \n" +
	                "  \n" +
	                "			UNION ALL                    \n" +
	                "  \n" +
	                "			SELECT SUM(css.orgQty) AS opStock,                          \n" +
	                "				css.woID,                                     \n" +
	                "				css.woNumber,                        \n" +
	                "				 `fun_getAssyPIDCodeByID`(`css`.`refcompid`)  AS `assyID`,                  \n" +
	                "				SUM(`css`.`pkgQty`)  AS `availableQty` ,                              \n" +
	                "				SUM(`css`.`pkgQty`) AS actualAvalilableQty,                          \n" +
	                "				css.refcompid partID,                   \n" +
	                "				-- 0 AS selectedQty,                          \n" +
	                "				'US' AS stockType,           \n" +
	                "				'UMID Stock' AS stockTypeName,                                \n" +
	                "				wo.buildQty,                    \n" +
	                "				css.uid AS UMID,                    \n" +
	                "				css.id AS refsidid                    \n" +
	                "			FROM component_sid_stock css                    \n" +
	                "				LEFT JOIN workorder wo ON wo.woID=css.woID                            \n" +
	                "				LEFT JOIN vu_workorder_salesorder_details vu_wsd ON vu_wsd.woID=css.woID                     \n" +
	                "			WHERE  css.refcompid = pPartID     \n" +
	                "			AND css.stockInventoryType in('SI', 'AI')                    \n" +
	                "			AND IFNULL(css.pkgQty,0) > 0                    \n" +
	                "			AND css.isDeleted = 0                    \n" +
	                "			GROUP BY `css`.`woID` ,`css`.`woNumber` , `css`.`refcompid`, `css`.`binID`,                    \n" +
	                "					vu_wsd.salesOrderNumber, vu_wsd.poNumber, wo.buildQty,                    \n" +
	                "					css.uid, css.id, wo.dateCode                    \n" +
	                "			;          \n" +
	                "	END IF;        \n" +
	                "  \n" +
	                "	/* get all added shipped asembly details for ref customer packing slip det */          \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet;                                          \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet AS          \n" +
	                "	SELECT 	id, partID, workorderID, shippedqty, customerID,           \n" +
	                "			refCustPackingSlipDetID, woNumber, stockType, refsidid          \n" +
	                "	FROM 	shippedassembly          \n" +
	                "	WHERE 	refCustPackingSlipDetID = pRefCustPackingSlipDetID          \n" +
	                "	AND 	isDeleted = 0 ;	          \n" +
	                "  \n" +
	                "  \n" +
	                "	/* get all not available qty count (ship specific from UI but total not available in db)  */	          \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_UINotAvailableQtyShipList;                                          \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UINotAvailableQtyShipList AS          \n" +
	                "	SELECT  tsal.shippedqty,           \n" +
	                "		tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,          \n" +
	                "		tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock	          \n" +
	                "	FROM temp_UIShipAssyList tsal          \n" +
	                "		JOIN temp_DBAvailableAssyStockList tdaasl           \n" +
	                "			ON (tsal.woNumber = tdaasl.woNumber AND tsal.refsidid <=> tdaasl.refsidid)          \n" +
	                "		LEFT JOIN temp_DB_ShipAssyList_Of_RefCustPSDet tdsarcps	          \n" +
	                "			ON (tsal.woNumber = tdsarcps.woNumber AND tsal.refsidid <=> tdsarcps.refsidid)          \n" +
	                "	WHERE (tdaasl.availableQty - (IFNULL(tsal.shippedqty,0) - IFNULL(tdsarcps.shippedqty,0))) < 0  ;          \n" +
	                "  \n" +
	                "  \n" +
	                "	/* if all ship qty from UI is available (available in db to ship)  */          \n" +
	                "	IF ((SELECT COUNT(1) FROM temp_UINotAvailableQtyShipList) = 0) THEN          \n" +
	                "  #select pIsConfirmationTakenForDeallocateUMID;        \n" +
	                "		/***************** UMID: kit deallocation confirmation *******************/          \n" +
	                "		IF(pIsConfirmationTakenForDeallocateUMID = 0) THEN          \n" +
	                "			IF(pIsComponentStock IS NOT NULL AND pIsComponentStock = TRUE) THEN        \n" +
	                "				DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList;                                          \n" +
	                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS          \n" +
	                "					SELECT tusal.shippedqty,           \n" +
	                "						tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,          \n" +
	                "						tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock          \n" +
	                "					FROM temp_UIShipAssyList tusal           \n" +
	                "						JOIN temp_DBAvailableAssyStockList tdaasl  ON tusal.refsidid <=> tdaasl.refsidid        \n" +
	                "					WHERE tusal.refsidid IS NOT NULL           \n" +
	                "					AND tusal.UMID IS NOT NULL           \n" +
	                "                    AND tusal.shippedqty > 0        \n" +
	                "					AND tusal.shippedqty > (          \n" +
	                "							(SELECT SUM(pkgQty) FROM component_sid_stock                  \n" +
	                "								WHERE uid = tusal.UMID AND isDeleted = 0) /* tot_stock_umid */          \n" +
	                "							   -           \n" +
	                "							   (SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0)))           \n" +
	                "								FROM kit_allocation WHERE uid = tusal.UMID AND STATUS IN ('A','R')                  \n" +
	                "								GROUP BY uid) /* allocated_stock_umid */          \n" +
	                "							   )  ;         \n" +
	                "			ELSE        \n" +
	                "				DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList;                                          \n" +
	                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS          \n" +
	                "					SELECT tusal.shippedqty,           \n" +
	                "						tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,          \n" +
	                "						tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock          \n" +
	                "					FROM temp_UIShipAssyList tusal           \n" +
	                "						JOIN temp_DBAvailableAssyStockList tdaasl           \n" +
	                "							ON (tusal.woNumber = tdaasl.woNumber AND tusal.refsidid <=> tdaasl.refsidid)          \n" +
	                "					WHERE tusal.refsidid IS NOT NULL           \n" +
	                "					AND tusal.UMID IS NOT NULL           \n" +
	                "					AND tusal.shippedqty > (          \n" +
	                "							(SELECT SUM(pkgQty) FROM component_sid_stock                  \n" +
	                "								WHERE uid = tusal.UMID AND isDeleted = 0) /* tot_stock_umid */          \n" +
	                "							   -           \n" +
	                "							   (SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0)))           \n" +
	                "								FROM kit_allocation WHERE uid = tusal.UMID AND STATUS IN ('A','R')                  \n" +
	                "								GROUP BY uid) /* allocated_stock_umid */          \n" +
	                "							   )  ;         \n" +
	                "            END IF;        \n" +
	                "		ELSE           \n" +
	                "			/* set up default temp table if not created */          \n" +
	                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS          \n" +
	                "				SELECT 1 FROM temp_UINotAvailableQtyShipList WHERE 1=0 ;          \n" +
	                "		END IF;	          \n" +
	                "  \n" +
	                "		/* if confirmation already taken or no any confirmation list then go for create/update */ 	           \n" +
	                "		IF(pIsConfirmationTakenForDeallocateUMID = 1 OR          \n" +
	                "			(SELECT COUNT(1) FROM temp_UMID_Confirmation_Require_ShipAssyList) = 0) THEN          \n" +
	                "  \n" +
	                "			/*****************  create/update shipped assebly table     *******************/          \n" +
	                "  \n" +
	                "			/* get all UMID details for ref customer packing slip det */          \n" +
	                "			DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list;                                          \n" +
	                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_db_comp_sid_stock_list AS                                                                    \n" +
	                "			SELECT 	csd.id,			csd.uid,		csd.refcompid,                          \n" +
	                "				csd.binID,		b.warehouseID,		w.parentWHID deptWHID,	                          \n" +
	                "				csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,		                          \n" +
	                "				csd.pkgUnit,		csd.uom,		csd.createdAt                                                              \n" +
	                "			FROM 	component_sid_stock   csd                          \n" +
	                "				JOIN 	binmst b ON csd.binID = b.id                          \n" +
	                "				JOIN 	warehousemst w ON b.warehouseID = w.id                          \n" +
	                "			WHERE   csd.id IN (SELECT refsidid FROM temp_UIShipAssyList WHERE refsidid IS NOT NULL AND UMID IS NOT NULL)                           \n" +
	                "			AND 	csd.isdeleted = 0 ;          \n" +
	                "  \n" +
	                "			/* get required customer_packingslip_details */          \n" +
	                "			SELECT refSalesorderDetid INTO lv_cpsd_refSalesorderDetid          \n" +
	                "			FROM customer_packingslip_det          \n" +
	                "			WHERE id = pRefCustPackingSlipDetID AND isDeleted = 0 ;          \n" +
	                "  \n" +
	                "  \n" +
	                "  \n" +
	                "  \n" +
	                "			SELECT COUNT(1) INTO totUIShipAssy FROM temp_UIShipAssyList ;          \n" +
	                "			SET i=0;                                      \n" +
	                "  #select totUIShipAssy;        \n" +
	                "  \n" +
	                "			temp_UIShipAssyListLoop: WHILE i < totUIShipAssy DO          \n" +
	                "  \n" +
	                "				SET lv_sa_woNumber = NULL;          \n" +
	                "				SET lv_sa_refsidid = NULL;          \n" +
	                "				SET lv_sa_umid = NULL;          \n" +
	                "				SET lv_sa_shippedqty = 0;          \n" +
	                "  \n" +
	                "				SELECT woNumber, refsidid, umid, shippedqty           \n" +
	                "					INTO lv_sa_woNumber , lv_sa_refsidid , lv_sa_umid , lv_sa_shippedqty          \n" +
	                "				FROM temp_UIShipAssyList LIMIT i,1 ;          \n" +
	                "  \n" +
	                "  #select 'Line 261';        \n" +
	                "				SET lv_sa_pkid = NULL;          \n" +
	                "				SET lv_db_sa_shippedqty = NULL;          \n" +
	                "  \n" +
	                "				/* get id from db data if exists in shipped assembly table */          \n" +
	                "                /* in case of component stock  there will be no stock */        \n" +
	                "				SELECT id,shippedqty INTO lv_sa_pkid , lv_db_sa_shippedqty          \n" +
	                "				FROM (          \n" +
	                "					SELECT id , shippedqty            \n" +
	                "					FROM temp_DB_ShipAssyList_Of_RefCustPSDet          \n" +
	                "					WHERE (partID = pPartID or find_in_set(partID,vPackagingAliasPart ) or find_in_set(partID,vCplAvlPart) )    \n" +
	                "					AND case when pIsComponentStock = 1 then 1=1 else woNumber = lv_sa_woNumber  end        \n" +
	                "					AND refCustPackingSlipDetID = pRefCustPackingSlipDetID          \n" +
	                "					AND (CASE WHEN lv_sa_refsidid IS NULL THEN refsidid IS NULL          \n" +
	                "						ELSE refsidid = lv_sa_refsidid END)          \n" +
	                "					UNION          \n" +
	                "					SELECT NULL AS id , 0 AS shippedqty          \n" +
	                "					LIMIT 1          \n" +
	                "				) tdbsa ;          \n" +
	                "				/* shipped qty from UI =  db value then no change so no need to process */          \n" +
	                "				IF(IFNULL(lv_sa_shippedqty,0) = IFNULL(lv_db_sa_shippedqty,0)) THEN          \n" +
	                "					SET i = i + 1;          \n" +
	                "					ITERATE temp_UIShipAssyListLoop;          \n" +
	                "				END IF;          \n" +
	                "  \n" +
	                "  #select  'line 286',lv_sa_shippedqty, lv_db_sa_shippedqty,lv_uomIDOfAssy;        \n" +
	                "				IF(lv_sa_umid IS NOT NULL) THEN            \n" +
	                "				/* if change stock from UMID then check consume/adjustment UMID case */          \n" +
	                "					CALL Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS(lv_sa_umid, lv_sa_refsidid,          \n" +
	                "						lv_sa_shippedqty, lv_db_sa_shippedqty, pToBinIDOfEmptyBin, pTransTypeForUMID,          \n" +
	                "						pActionPerformedForUMIDZeroOut, pActionPerformedForUMIDConsumed, pActionPerformedForUMIDAdjust,           \n" +
	                "						lv_cpsd_refSalesorderDetid, pPartID,lv_uomIDOfAssy, pUserID, pUserRoleID);                               \n" +
	                "				END IF;           \n" +
	                "  #select lv_sa_pkid;        \n" +
	                "				IF(lv_sa_pkid IS NULL OR lv_sa_pkid = '') THEN          \n" +
	                "					/* create new entry of shippedassembly */          \n" +
	                "					INSERT INTO shippedassembly(`partID`,`workorderID`,`shippingId`,`shippedqty`,          \n" +
	                "						`customerID`,`woOPID`,`shippedNotes`,`refCustPackingSlipDetID`,          \n" +
	                "						`woNumber`,`stockType`,`refsidid`,`originalQty`,          \n" +
	                "						`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`shippedUom`)          \n" +
	                "					SELECT partID, workorderID, pShippingId, shippedqty,           \n" +
	                "						pCustomerID, woOPID, pShippedNotes, pRefCustPackingSlipDetID,          \n" +
	                "						woNumber, stockType, refsidid, originalQty,          \n" +
	                "						pUserID, pUserID, pUserRoleID, pUserRoleID,shippedUOM          \n" +
	                "					FROM temp_UIShipAssyList           \n" +
	                "					LIMIT i,1 ; 	          \n" +
	                "  \n" +
	                "  \n" +
	                "				ELSE          \n" +
	                "					/* update exists entry of shippedassembly */          \n" +
	                "					UPDATE shippedassembly salo          \n" +
	                "						JOIN (SELECT lv_sa_pkid AS id, shippedqty           \n" +
	                "								FROM temp_UIShipAssyList LIMIT i,1) tsali          \n" +
	                "						ON salo.id = tsali.id          \n" +
	                "					SET salo.shippedqty = tsali.shippedqty,           \n" +
	                "						salo.shippingId = pShippingId,           \n" +
	                "						salo.updatedBy = pUserID,           \n" +
	                "						salo.updateByRoleId = pUserRoleID ,          \n" +
	                "						salo.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
	                "					WHERE salo.id = lv_sa_pkid ;           \n" +
	                "  \n" +
	                "  \n" +
	                "				END IF;          \n" +
	                "  \n" +
	                "  \n" +
	                "				SET i = i + 1;                                        \n" +
	                "			END WHILE temp_UIShipAssyListLoop;          \n" +
	                "		END IF;           \n" +
	                "  \n" +
	                "	END IF;	          \n" +
	                "  \n" +
	                "  \n" +
	                "	/* set up default temp table if not created */          \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS          \n" +
	                "		SELECT 1 FROM temp_UINotAvailableQtyShipList WHERE 1=0 ;          \n" +
	                "  \n" +
	                "  \n" +
	                "	/* Resp[0] - store procedure status */          \n" +
	                "	IF((SELECT COUNT(1) FROM temp_UINotAvailableQtyShipList) > 0 OR          \n" +
	                "		(SELECT COUNT(1) FROM temp_UMID_Confirmation_Require_ShipAssyList) > 0) THEN          \n" +
	                "		SELECT 0 AS 'spStatus' ;          \n" +
	                "	ELSE          \n" +
	                "		SELECT 1 AS 'spStatus' ;          \n" +
	                "	END IF;          \n" +
	                "  \n" +
	                "	/* Resp[1] - get all ship list > not available qty(mismatch qty)  */          \n" +
	                "	SELECT * FROM temp_UINotAvailableQtyShipList ;          \n" +
	                "  \n" +
	                "	/* Resp[2] - get all ship list > confirmation required for deallocate kit  */          \n" +
	                "	SELECT * FROM temp_UMID_Confirmation_Require_ShipAssyList ;		          \n" +
	                "  \n" +
	                "	/*          \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList;          \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_DBAvailableAssyStockList;              \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_UINotAvailableQtyShipList;            \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet;           \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList ;          \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list ;          \n" +
	                "  	*/          \n" +
	                "  \n" +
	                "  \n" +
	                "    END;  \n" +	
                  /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                  "VALUES (4977,'2.00','V1','Sproc_SaveShippedAssemblyDetFromPackingSlip  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                  );
                break;
        case 4977:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-07-2021 *********************************** */
                "UPDATE page_detail   \n" +
                "SET menuName = 'Manage Customer Refund Documents'  \n" +
                "Where pageName = 'Manage Customer Refund Documents';  \n" +

                "UPDATE page_detail   \n" +
                "SET paramDet = \"({id:'0'})\"  \n" +
                "Where pageName = 'Manage customer refund';  \n" +

                /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4978,'2.00','V1',' Update Menu name - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4978:
            allDbChangesArray.push(
            /* **************************** New Script -> 07-07-2021 *********************************** */
            "drop trigger if exists `Trg_BI_packingslip_invoice_payment_det`;  \n" +
            "CREATE TRIGGER `Trg_BI_packingslip_invoice_payment_det` BEFORE INSERT ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN        \n" +
            "	DECLARE v_receiptType VARCHAR(1);        \n" +
            "	DECLARE v_invoiceTotal DECIMAL(18,8);        \n" +
            "	DECLARE v_totalPayment DECIMAL(18,8);        \n" +
            "    DECLARE v_newPaymentAmount DECIMAL(18,8);        \n" +
            "	DECLARE v_isTariffInvoice TINYINT;        \n" +
            "	DECLARE v_refPaymentMode VARCHAR(5);        \n" +
            "	DECLARE vMessage VARCHAR(500);        \n" +
            "  \n" +
            "	SELECT 	a.refPaymentMode        \n" +
            "	INTO 	v_refPaymentMode        \n" +
            "	FROM 	packingslip_invoice_payment a        \n" +
            "	WHERE 	a.isDeleted = 0        \n" +
            "		   AND a.isPaymentVoided = 0        \n" +
            "		   AND a.id = NEW.refPayementid LIMIT 1;        \n" +
            "  \n" +
            "	IF v_refPaymentMode = 'P' THEN        \n" +
            "		/*getting invoice amount and type*/        \n" +
            "		SELECT 	a.receiptType,      \n" +
            "				(IFNULL(SUM(b.extendedPrice),0)+IFNULL(sum(a.markedForRefundAmt),0)),      \n" +
            "				a.isTariffInvoice        \n" +
            "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice        \n" +
            "		FROM 	packing_slip_material_receive a        \n" +
            "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id        \n" +
            "		WHERE 	a.id = NEW.refPackingslipInvoiceID        \n" +
            "				AND a.isDeleted = 0        \n" +
            "				AND b.isDeleted = 0        \n" +
            "		GROUP BY a.receiptType, a.isTariffInvoice;        \n" +
            "  \n" +
            "		/*getting total payment amount including new added payment */        \n" +
            "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))        \n" +
            "			INTO 	v_totalPayment        \n" +
            "			FROM 	packingslip_invoice_payment_det b        \n" +
            "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID        \n" +
            "				AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'P')      \n" +
            "                AND b.isPaymentVoided = 0        \n" +
            "                AND b.isDeleted = 0        \n" +
            "                AND b.refCustPackingslipInvoiceID IS NULL;        \n" +
            "  \n" +
            "		IF v_receiptType IN ('D', 'C') THEN        \n" +
            "			IF IFNULL(NEW.paymentAmount,0) >= 0 THEN        \n" +
            "			/*in case of debit/credit memo payment amount must be less then zero*/        \n" +
            "				SET vMessage = CONCAT('Debit or Credit Memo payment must be less than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));        \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;        \n" +
            "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) > 0 THEN        \n" +
            "			/*in case of debit/credit memo outstanding amount must be less or equal to zero*/        \n" +
            "				SET vMessage = CONCAT('Total payment amount for Debit or Credit Memo must be less or equal to zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));        \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;        \n" +
            "			/*ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  */      \n" +
            "			/*in case of debit/credit memo now if outstanding amount is zero then update debit/credit memo status to paid*/        \n" +
            "				/*UPDATE 	packing_slip_material_receive        \n" +
            "				SET 	`status` = 'P',        \n" +
            "					updatedBy = NEW.updatedBy,        \n" +
            "					updatedAt = NEW.updatedAt,        \n" +
            "					updateByRoleId = NEW.updateByRoleId        \n" +
            "				WHERE 	id = NEW.refPackingslipInvoiceID;  */      \n" +
            "			END IF;        \n" +
            "		ELSEIF v_receiptType = 'I' THEN        \n" +
            "			IF IFNULL(NEW.paymentAmount,0) <= 0 AND IFNULL(v_invoiceTotal,0) != 0 THEN        \n" +
            "			/*invoice payment amount must not negetive, if invoice amount is not zero*/        \n" +
            "				SET vMessage = CONCAT('Invoice Payment amount must be greater than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));        \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;        \n" +
            "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) < 0 THEN        \n" +
            "			/*invoice outstanding amount must not negetive*/        \n" +
            "				SET vMessage = CONCAT('Total payment amount for an Invoice can not less than zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));        \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;        \n" +
            "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN        \n" +
            "            /*if invoice outstanding amount zero then update invoice status to paid*/        \n" +
            "				UPDATE 	packing_slip_material_receive        \n" +
            "				SET 	`status` = 'P',        \n" +
            "					updatedBy = NEW.updatedBy,        \n" +
            "					updatedAt = NEW.updatedAt,        \n" +
            "					updateByRoleId = NEW.updateByRoleId        \n" +
            "				 WHERE 	id = NEW.refPackingslipInvoiceID;        \n" +
            "  \n" +
            "				 IF v_isTariffInvoice = FALSE THEN        \n" +
            "					/*in case of non tariff invoice update packing slip status to paid*/        \n" +
            "					UPDATE 	packing_slip_material_receive        \n" +
            "					SET 	`status` = 'P',        \n" +
            "						updatedBy = NEW.updatedBy,        \n" +
            "						updatedAt = NEW.updatedAt,        \n" +
            "						updateByRoleId = NEW.updateByRoleId        \n" +
            "					WHERE 	refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;        \n" +
            "				 END IF;        \n" +
            "			END IF;        \n" +
            "		END IF;        \n" +
            "  \n" +
            "    ELSEIF v_refPaymentMode = 'RR' THEN      \n" +
            "		/*getting invoice amount and type*/        \n" +
            "		SELECT 	a.receiptType,      \n" +
            "				IFNULL(sum(a.markedForRefundAmt),0),      \n" +
            "				a.isTariffInvoice        \n" +
            "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice        \n" +
            "		FROM 	packing_slip_material_receive a        \n" +
            "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id        \n" +
            "		WHERE 	a.id = NEW.refPackingslipInvoiceID        \n" +
            "				AND a.isDeleted = 0        \n" +
            "				AND b.isDeleted = 0        \n" +
            "		GROUP BY a.receiptType, a.isTariffInvoice;        \n" +
            "  \n" +
            "        /*getting total payment amount including new added payment */        \n" +
            "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))        \n" +
            "			INTO 	v_totalPayment        \n" +
            "			FROM 	packingslip_invoice_payment_det b        \n" +
            "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID        \n" +
            "				AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'RR')      \n" +
            "                AND b.isPaymentVoided = 0        \n" +
            "                AND b.isDeleted = 0        \n" +
            "                AND b.refCustPackingslipInvoiceID IS NULL;        \n" +
            "  \n" +
            "		IF v_totalPayment > v_invoiceTotal THEN      \n" +
            "			/*in case of debit/credit memo payment amount must be less then zero*/        \n" +
            "			SET vMessage = CONCAT('CM DM Refund must be less or equal to Marked for Refund Amount. actual amt is: ', ROUND((v_invoiceTotal - v_totalPayment),2),', Marked for Refund amt is: ',ROUND(IFNULL(v_invoiceTotal,0),2));      \n" +
            "			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;        \n" +
            "        END IF;      \n" +
            "    END IF;        \n" +
            "  \n" +
            "    if v_refPaymentMode in ('P','RR') then /*update status to paid*/      \n" +
            "		/*getting invoice amount and type*/        \n" +
            "		SELECT 	a.receiptType,      \n" +
            "				IFNULL(SUM(b.extendedPrice),0)      \n" +
            "		INTO 	v_receiptType, v_invoiceTotal      \n" +
            "		FROM 	packing_slip_material_receive a        \n" +
            "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id        \n" +
            "		WHERE 	a.id = NEW.refPackingslipInvoiceID        \n" +
            "				AND a.isDeleted = 0        \n" +
            "				AND b.isDeleted = 0        \n" +
            "		GROUP BY a.receiptType;        \n" +
            "  \n" +
            "		/*getting total payment amount including new added payment */  \n" +
            "		SELECT 	(ifnull(sum(case when b.paymentAmount > 0 then (b.paymentAmount *-1) else b.paymentAmount end),0) +  \n" +
            "				 IFNULL(case when NEW.paymentAmount > 0 then (NEW.paymentAmount *-1) else NEW.paymentAmount end,0))  \n" +
            "			INTO 	v_totalPayment  \n" +
            "			FROM 	packingslip_invoice_payment_det b  \n" +
            "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID  \n" +
            "                AND b.isPaymentVoided = 0  \n" +
            "                AND b.isDeleted = 0  \n" +
            "                AND b.refCustPackingslipInvoiceID IS NULL;  \n" +
            "		IF v_receiptType IN ('D', 'C') THEN  \n" +
            "			IF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  \n" +
            "				UPDATE 	packing_slip_material_receive  \n" +
            "				SET `status` = 'P',  \n" +
            "					updatedBy = NEW.updatedBy,  \n" +
            "					updatedAt = NEW.updatedAt,  \n" +
            "					updateByRoleId = NEW.updateByRoleId  \n" +
            "				WHERE 	id = NEW.refPackingslipInvoiceID;  \n" +
            "            END IF;  \n" +
            "        END IF;  \n" +
            "    end if;      \n" +
            "END;  \n" +
            "drop trigger if exists `Trg_AU_packingslip_invoice_payment`;  \n" +
            "CREATE TRIGGER `Trg_AU_packingslip_invoice_payment` AFTER UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN      \n" +
            "	if NEW.refPaymentMode in ('P','RR') then    \n" +
            "		if OLD.isPaymentVoided = false and NEW.isPaymentVoided = true then      \n" +
            "			update packing_slip_material_receive m      \n" +
            "				set m.`status` = 'A',      \n" +
            "					m.updatedBy = NEW.updatedBy,      \n" +
            "					m.updatedAt = NEW.updatedAt,      \n" +
            "					m.updateByRoleId = NEW.updateByRoleId      \n" +
            "			 where exists (select 1      \n" +
            "							 from packingslip_invoice_payment_det a      \n" +
            "							where a.refPackingslipInvoiceID = m.id      \n" +
            "							  and a.refPayementid = NEW.id);      \n" +
            "		elseif (OLD.isPaymentVoided = true and NEW.isPaymentVoided = false) then      \n" +
            "			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'Wrong transaction, please contact Administrator.';      \n" +
            "		end if;      \n" +
            "	end if;      \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 07-07-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (4979,'2.00','V1','Bug 35283: Transaction type not loading and Credit memo status not changing in Supplier Refund - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 4979:
             allDbChangesArray.push(
             /* **************************** New Script -> 07-07-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			SET vLockStatusToBe = 'NA' ;  \n" +
                "			IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "					SET vLockStatusToBe = 'RL' ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'  \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'  \n" +
                "							 ELSE paymentStatus END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** Add Script Version -> 07-07-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (4980,'2.00','V1',' Sproc_CreateCustomerPayment - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;


    }
    return allDbChangesArray;
});

// sample
//break;
//case 4777:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 07-07-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 07-07-2021 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (4778,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/