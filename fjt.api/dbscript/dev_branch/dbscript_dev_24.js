(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 4980:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-07-2021 *********************************** */
                /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4981,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4981:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPartsDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartsDetailForElastic`(          \n" +
                "	IN pId INT,                      \n" +
                "    In pFromdate date,      \n" +
                "    In pTodate date,      \n" +
                "    IN pRequiredCount tinyint(1)      \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "  \n" +
                "	if(pRequiredCount)    \n" +
                "    THEN      \n" +
                "		SELECT       \n" +
                "			count(1) totalCount       \n" +
                "		FROM      \n" +
                "		   component AS co      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id      \n" +
                "				AND (mfg.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id      \n" +
                "				AND (rohs.isDeleted  = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id      \n" +
                "				AND (cps.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id      \n" +
                "				AND (rpt.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id      \n" +
                "				AND (rmt.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id      \n" +
                "				AND (rct.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id      \n" +
                "				AND ( cpm.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id      \n" +
                "				AND (refSuppCom.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id      \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)      \n" +
                "		WHERE  (co.isDeleted = FALSE);        \n" +
                "    ELSE      \n" +
                "		SELECT    \n" +
                "			co.id,    co.custAssyPN,    co.mfgPN,	co.productionPN,	co.nickname,	co.PIDCode,	co.mfgPNDescription,	co.specialNote,	co.ltbDate,      \n" +
                "			co.eolDate,	co.deviceMarking,	co.partPackage,	co.powerRating,	co.feature,	co.color,	co.tolerance,	co.voltage,	co.value,	co.noOfPosition,	co.noOfRows,	          \n" +
                "			co.mfgcodeID,	mfg.mfgCode AS mfgCode,	mfg.mfgType AS mfgType,	mfg.isCustOrDisty AS isCustOrDisty,      \n" +
                "			co.RoHSStatusID,	rohs.name AS rohsName,      \n" +
                "			co.partStatus,	cps.name AS partStatusName,      \n" +
                "			co.functionalCategoryID,	rpt.partTypeName AS rptName,      \n" +
                "			co.mountingTypeID,	rmt.name AS mountingTypeName,      \n" +
                "			co.connecterTypeID,	rct.name AS rfqConnecterTypeName,      \n" +
                "			co.packagingID,	cpm.name AS packagingName,	      \n" +
                "			co.refSupplierMfgpnComponentID,      \n" +
                "			refSuppCom.mfgPN AS refSuppComMgPN,      \n" +
                "			refSuppCom.mfgcodeID AS refSuppComMfgcodeID,      \n" +
                "			refSuppComMfg.mfgCode AS refSuppComMfgCode,      \n" +
                "			refSuppComMfg.mfgType AS refSuppComMfgType,      \n" +
                "			refSuppComMfg.isCustOrDisty AS refSuppComIsCustOrDisty,      \n" +
                "            co.isDeleted      \n" +
                "		FROM      \n" +
                "		   component AS co      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id      \n" +
                "				AND (mfg.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id      \n" +
                "				AND (rohs.isDeleted  = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id      \n" +
                "				AND (cps.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id      \n" +
                "				AND (rpt.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id      \n" +
                "				AND (rmt.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id      \n" +
                "				AND (rct.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id      \n" +
                "				AND ( cpm.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id      \n" +
                "				AND (refSuppCom.isDeleted = FALSE)      \n" +
                "				LEFT OUTER JOIN      \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id      \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)      \n" +
                "		WHERE  (CASE WHEN pId is not null THEN (co.id = IFNULL(pId,co.id)     \n" +
                "        OR IFNULL(co.refSupplierMfgpnComponentID,0) = IFNULL(pId,IFNULL(co.refSupplierMfgpnComponentID,0))) ELSE 1 = 1 END) AND    \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN      \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(co.createdAt,v_TimeZone)) between pFromdate and pTodate)        \n" +
                "                    or (DATE(fun_CovnertDateTimeByTimezoneValue(co.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);      \n" +
                "		END IF;      \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMfgCodeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMfgCodeDetailForElastic`(	                                                                                        \n" +
                "	IN pId INT(11),                \n" +
                "    IN pIsCustOrDisty BIT,                \n" +
                "    IN pmfgType NVARCHAR(10),     \n" +
                "    In pFromdate date,    \n" +
                "    In pTodate date,    \n" +
                "    IN pRequiredCount tinyint(1)               \n" +
                ")  \n" +
                "BEGIN           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "  \n" +
                "     IF(pRequiredCount)     \n" +
                "	THEN    \n" +
                "		SELECT     \n" +
                "			count(1) totalCount    \n" +
                "		FROM mfgcodemst                    \n" +
                "		WHERE IFNULL(isDeleted,0) = 0 AND           \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType);    \n" +
                "	ELSE    \n" +
                "		SELECT  id,mfgCode,mfgName,primaryContactName,contact,faxNumber,isActive,mfgType,isCustOrDisty  ,         \n" +
                "            fun_getUserNameByEmployeID(salesCommissionTo) salesCommissionTo,      \n" +
                "            fun_getFOBById(freeOnBoardId) freeOnBoardMst ,      \n" +
                "			(SELECT gencCategoryName FROM genericcategory WHERE gencCategoryID = paymentTermsID) Terms,    \n" +
                "			isDeleted    \n" +
                "		FROM mfgcodemst                    \n" +
                "		WHERE  id = IFNULL(pId,id) AND           \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)      \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType) AND    \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN     \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)     \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))    \n" +
                "						ELSE 1 = 1 END);       \n" +
                "    END IF;    \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 07-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4982,'2.00','V1',' Bug 34848: QA Testing of User Story 34159: Restore database for elastic search and update document - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4982:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerRefundByMstID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(            \n" +
                "	IN pCustRefundMstID INT ,    \n" +
                "    IN pRefPaymentMode VARCHAR(5)    \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                     \n" +
                "		DECLARE v_TimeZone VARCHAR(50);                                          	            \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;                                                            \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    	            \n" +
                "  \n" +
                "		SELECT 	psip.id,                                                                      \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,            \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,              \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,             \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,      \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,    \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,             \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,                                                                       \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,    \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) As updatedByEmp ,  \n" +
                "            fun_getEmployeeIDByUserID(psip.createdBy) As createdByEmp ,  \n" +
                "            fun_getUserNameByID(psip.updatedBy) updatedbyInitial,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,      \n" +
                "			fun_getUserNameByID(psip.createdBy) createdbyInitial      \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip                                             \n" +
                "		WHERE id = pCustRefundMstID            \n" +
                "		AND refPaymentMode = pRefPaymentMode     \n" +
                "		AND psip.isDeleted = 0                  \n" +
                "		;             \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 08-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4983,'2.00','V1',' Updated SP for Last Modified By and Created By hyperlink - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4983:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN      \n" +
                "  \n" +
                "	DECLARE vPurchaseOrderID INT;      \n" +
                "	DECLARE vStatus VARCHAR(5);       \n" +
                "	DECLARE vPOStatus VARCHAR(5);      \n" +
                "  \n" +
                "    SELECT refPurchaseOrderID INTO vPurchaseOrderID FROM purchase_order_det WHERE id= NEW.refPurchaseOrderDetID;      \n" +
                "	SELECT poWorkingStatus INTO vPOStatus FROM purchase_order_mst WHERE id= vPurchaseOrderID;      \n" +
                "  \n" +
                "	IF ((NEW.isDeleted = TRUE OR (IFNULL(NEW.poLineWorkingStatus,0)!=IFNULL(OLD.poLineWorkingStatus,0))OR (IFNULL(NEW.receivedQty,0)!=IFNULL(OLD.receivedQty,0))) AND (vPOStatus!='CA')) THEN      \n" +
                "		SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=vPurchaseOrderID AND poLineWorkingStatus='P' LIMIT 1;      \n" +
                "		SET vStatus=IFNULL(vStatus,'C');  \n" +
                "		IF(vStatus='P') THEN      \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus=vStatus WHERE id=vPurchaseOrderID;      \n" +
                "		ELSE       \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus=vStatus,poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=vPurchaseOrderID;      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4984,'2.00','V1',' Updated TRG_AU_purchase_order_line_release_det Trigger - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4984:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetDownloadHelpBlogDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetDownloadHelpBlogDetails`(        \n" +
                "    IN phelpBlogId INT,       \n" +
                "    IN phelpBlogDetailId VARCHAR(5000)     \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;         \n" +
                "  \n" +
                "	IF(phelpBlogDetailId IS NOT NULL OR phelpBlogDetailId !='') AND (phelpBlogId IS NULL OR phelpBlogId ='')THEN     \n" +
                "		SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT hbd.title,  \n" +
                "			hbd.description,  \n" +
                "			hbd.isSystemGenerated,      \n" +
                "			hbd.displayOrder,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,'\",v_TimeZone,\"','\",v_DateTimeDisplayFormat,\"') lastModified,               \n" +
                "			fun_getUserNameByID(hbd.updatedBy) lastModifiedBy,      \n" +
                "			hb.title AS menuTitle       \n" +
                "			FROM help_blog hb       \n" +
                "			INNER JOIN help_blog_det hbd       \n" +
                "				ON hbd.helpBlogId = hb.id       \n" +
                "			WHERE hb.id in (\",phelpBlogId,\")       \n" +
                "				AND hbd.isdeleted=0  \n" +
                "				order by hbd.displayorder\"  \n" +
                "		);      \n" +
                "	ELSE    \n" +
                "		SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT hbd.title,hbd.description,hbd.isSystemGenerated,      \n" +
                "			hbd.displayOrder,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,'\",v_TimeZone,\"','\",v_DateTimeDisplayFormat,\"') lastModified,                \n" +
                "			fun_getUserNameByID(hbd.updatedBy) lastModifiedBy,      \n" +
                "			hb.title AS menuTitle       \n" +
                "			FROM help_blog hb       \n" +
                "			INNER JOIN help_blog_det hbd       \n" +
                "				ON hbd.helpBlogId = hb.id       \n" +
                "			WHERE hb.id = \",phelpBlogId,\"       \n" +
                "				AND hbd.isdeleted=0      \n" +
                "				AND hbd.id in (\",phelpBlogDetailId,\")  \n" +
                "				order by hbd.displayorder\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    PREPARE query2 FROM @SQLStatement2;                     \n" +
                "	EXECUTE query2;                                   \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4985,'2.00','V1',' Updated Sproc_GetDownloadHelpBlogDetails Trigger - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4985:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyListByFieldName`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyListByFieldName`(  \n" +
                "	IN psearchString VARCHAR(1000),  \n" +
                "	IN pfield VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    if pfield = 'PIDCode' then  \n" +
                "		select com.id, com.mfgCodeID, concat('(',mfg.mfgCode,') ',com.mfgPN) as mfgPN, concat('(',mfg.mfgCode,') ',PIDCode) as PIDCode  \n" +
                "		from component com  \n" +
                "		join mfgcodemst mfg on mfg.id = com.mfgcodeID  \n" +
                "		where com.PIDCode like concat('%',psearchString,'%') and com.isDeleted = 0 and com.category = 3;  \n" +
                "  \n" +
                "    end if;  \n" +
                "    if pfield = 'mfgPN' then  \n" +
                "		select com.id, com.mfgCodeID, concat('(',mfg.mfgCode,') ',com.mfgPN) as mfgPN, concat('(',mfg.mfgCode,') ',PIDCode) as PIDCode  \n" +
                "		from component com  \n" +
                "		join mfgcodemst mfg on mfg.id = com.mfgcodeID  \n" +
                "		where com.mfgPN like concat('%',psearchString,'%') and com.isDeleted = 0 and com.category = 3;  \n" +
                "	end if;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 09-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4986,'2.00','V1','User Story 28408: RFQ List Page: Improvement and Enhancement point - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4986:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(    \n" +
                "	IN pCustCreditMemoMstID INT ,    \n" +
                "	IN pCustomerPaymentMstID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "		DECLARE v_TimeZone VARCHAR(50);    \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate , cps.totalAmount , psip.paymentNumber ,    \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,    \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,    \n" +
                "			cps.agreedRefundAmt ,    \n" +
                "            fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,    \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN    \n" +
                "					(CASE WHEN (cps.paymentStatus = 'PE' ) THEN ''    \n" +
                "						  WHEN (cps.paymentStatus = 'RE' ) THEN 'Received & Applied'    \n" +
                "						  WHEN (cps.paymentStatus = 'PR' ) THEN 'Received' END)    \n" +
                "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,    \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby    \n" +
                "	FROM customer_packingslip AS cps    \n" +
                "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID    \n" +
                "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'    \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)    \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)    \n" +
                "	WHERE cps.id = pCustCreditMemoMstID    \n" +
                "	AND cps.isDeleted = 0    \n" +
                "		;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4987,'2.00','V1','Update Applied Credit memo Agreed Refund Amount - Heena'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4987:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(    \n" +
                "	IN pSearch VARCHAR(300),    \n" +
                "	IN pId INT,    \n" +
                "	IN pMfgType VARCHAR(50),    \n" +
                "	IN pRoHSStatusID VARCHAR(100),    \n" +
                "	IN pMfgCodeId INT,    \n" +
                "	IN pCategoryID INT,    \n" +
                "	IN pIsContainCPN TINYINT,    \n" +
                "	IN prefSupplierMfgpnComponentID INT,    \n" +
                "	IN ppackagingID INT,    \n" +
                "	IN pstrictCustomPart TINYINT,    \n" +
                "	IN psupplierID INT,    \n" +
                "	IN pofftheself TINYINT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	IF (pstrictCustomPart=1) THEN    \n" +
                "		/*<===this logic is added to compare invert rohs category */    \n" +
                "		/* this logic used in purchase order when supplier is strictly custom part */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcomponent;    \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent    \n" +
                "			SELECT smm.refMfgCodeMstID    \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID    \n" +
                "			UNION    \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0    \n" +
                "			UNION    \n" +
                "			SELECT psupplierID AS refMfgCodeMstID;    \n" +
                "		ELSE    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent    \n" +
                "			SELECT psupplierID AS refMfgCodeMstID    \n" +
                "			UNION    \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0    \n" +
                "			UNION    \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0    \n" +
                "			UNION    \n" +
                "			SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;    \n" +
                "		END IF;    \n" +
                "		SELECT * FROM    \n" +
                "			(    \n" +
                "				SELECT `com`.`id`,    \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "					`com`.`mfgPN` orgMfgPN,    \n" +
                "					`com`.`packaginggroupID`,    \n" +
                "					`com`.`packagingID`,    \n" +
                "					`com`.`PIDCode`,    \n" +
                "					`com`.`isGoodPart`,    \n" +
                "					`com`.`RoHSStatusID`,    \n" +
                "					`com`.`rohsgroupID`,    \n" +
                "					`com`.`mfgcodeID`,    \n" +
                "					`mfgCodemst`.`mfgCode` AS `mfgCode`,    \n" +
                "					`mfgCodemst`.`mfgType` AS `mfgType`,    \n" +
                "					`mfgCodemst`.`mfgName` AS `mfgName`,    \n" +
                "					`com`.`category`,    \n" +
                "					`com`.`imageURL`,    \n" +
                "					`com`.`documentPath`,    \n" +
                "					`com`.`mfgPNDescription`,    \n" +
                "					`com`.`minOperatingTemp`,    \n" +
                "					`com`.`maxOperatingTemp`,    \n" +
                "					`com`.`value`,    \n" +
                "					`com`.`partPackage`,    \n" +
                "					`com`.`powerRating`,    \n" +
                "					`com`.`functionalCategoryID`,    \n" +
                "					`com`.`mountingTypeID`,    \n" +
                "					`com`.`connecterTypeID`,    \n" +
                "					`com`.`noOfPosition`,    \n" +
                "					`com`.`noOfRows`,    \n" +
                "					`com`.`pitch`,    \n" +
                "					`com`.`pitchMating`,    \n" +
                "					`com`.`length`,    \n" +
                "					`com`.`width`,    \n" +
                "					`com`.`height`,    \n" +
                "					`com`.`voltage`,    \n" +
                "					`com`.`weight`,    \n" +
                "					`com`.`feature`,    \n" +
                "					`com`.`color`,    \n" +
                "					`com`.`partStatus`,    \n" +
                "					`com`.`uom`,    \n" +
                "					`com`.`uomClassID`,    \n" +
                "					`com`.`unit`,    \n" +
                "					`com`.`restrictUsePermanently`,    \n" +
                "					`com`.`restrictUSEwithpermission`,    \n" +
                "					`com`.`restrictPackagingUsePermanently`,    \n" +
                "					`com`.`restrictPackagingUseWithpermission`,    \n" +
                "					`u`.`abbreviation` AS uomName,    \n" +
                "					`u`.`unitName` AS  unitName,    \n" +
                "					`r`.`rohsIcon`,    \n" +
                "					`r`.`name` AS rohsName,    \n" +
                "					`com`.`partPackageID`,    \n" +
                "					`com`.`bomLock`,    \n" +
                "					`com`.`businessRisk`,    \n" +
                "					`com`.`costCategoryID`,    \n" +
                "					`com`.`deviceMarking`,    \n" +
                "					`com`.`driverToolRequired`,    \n" +
                "					`com`.`eau`,    \n" +
                "					`com`.`epicorType`,    \n" +
                "					`com`.`functionalTestingRequired`,    \n" +
                "					`com`.`heightText`,    \n" +
                "					`com`.`isCPN`,    \n" +
                "					`com`.`isCustom`,    \n" +
                "					`com`.`leadTime`,    \n" +
                "					`com`.`matingPartRquired`,    \n" +
                "					`com`.`maxPriceLimit`,    \n" +
                "					`com`.`maxQtyonHand`,    \n" +
                "					`com`.`minimum`,    \n" +
                "					`com`.`mult`,    \n" +
                "					`com`.`packageQty`,    \n" +
                "					`com`.`partType`,    \n" +
                "					`com`.`pcbPerArray`,    \n" +
                "					`com`.`pickupPadRequired`,    \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,    \n" +
                "					`com`.`plannedValuePerBuild`,    \n" +
                "					`com`.`programingRequired`,    \n" +
                "					`com`.`rfqOnly`,    \n" +
                "					`com`.`saftyStock`,    \n" +
                "					`com`.`scrapRatePercentagePerBuild`,    \n" +
                "					`com`.`scrapValuePerBuild`,    \n" +
                "					`com`.`selfLifeDays`,    \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,    \n" +
                "					`com`.`temperatureCoefficient`,    \n" +
                "					`com`.`temperatureCoefficientUnit`,    \n" +
                "					`com`.`temperatureCoefficientValue`,    \n" +
                "					`com`.`trackSerialNumber`,    \n" +
                "					`com`.`refSupplierMfgpnComponentID`,    \n" +
                "					`com`.`refMfgPNMfgCodeId`,    \n" +
                "					`com`.`internalReference`,    \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,    \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,    \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode    \n" +
                "				FROM `component` AS `com`    \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`     \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`     \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0     \n" +
                "                        AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "				JOIN `rfq_rohsmst` AS `r`     \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`    \n" +
                "				JOIN  `uoms` AS `u`     \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0    \n" +
                "				WHERE `com`.`isdeleted`=0    \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)    \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)    \n" +
                "					AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)    \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)    \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)    \n" +
                "					AND `com`.`mfgcodeid` IN (SELECT refMfgCodeMstID FROM tempcomponent)    \n" +
                "					AND (`com`.`isGoodPart`=1)    \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a    \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)     \n" +
                "			OR (pSearch IS NOT NULL     \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')     \n" +
                "					OR pidcode LIKE CONCAT('%', pSearch , '%')    \n" +
                "					OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))    \n" +
                "		)    \n" +
                "		ORDER BY mfgPN;    \n" +
                "	ELSEIF (pofftheself=1 AND pstrictCustomPart=0) THEN    \n" +
                "		/* this logic used in purchase order    \n" +
                "		packing slip    \n" +
                "		UMID management    \n" +
                "		Component Master    \n" +
                "		Reserve Stock    \n" +
                "		Component Assy DFM    \n" +
                "		Reports    \n" +
                "		Price Break Update    \n" +
                "		Customer Part    \n" +
                "		Good-Bad Mapping Part    \n" +
                "		Supplier Quote    \n" +
                "		Supplier RMA */    \n" +
                "		SELECT * FROM    \n" +
                "			(    \n" +
                "				SELECT `com`.`id`,    \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "					`com`.`mfgPN` orgMfgPN,    \n" +
                "					`com`.`packaginggroupID`,    \n" +
                "					`com`.`packagingID`,    \n" +
                "					`com`.`PIDCode`,    \n" +
                "					`com`.`isGoodPart`,    \n" +
                "					`com`.`RoHSStatusID`,    \n" +
                "					`com`.`rohsgroupID`,    \n" +
                "					`com`.`mfgcodeID`,    \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,    \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,    \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,    \n" +
                "					`com`.`category`,    \n" +
                "					`com`.`imageURL`,    \n" +
                "					`com`.`documentPath`,    \n" +
                "					`com`.`mfgPNDescription`,    \n" +
                "					`com`.`minOperatingTemp`,    \n" +
                "					`com`.`maxOperatingTemp`,    \n" +
                "					`com`.`value`,    \n" +
                "					`com`.`partPackage`,    \n" +
                "					`com`.`powerRating`,    \n" +
                "					`com`.`functionalCategoryID`,    \n" +
                "					`com`.`mountingTypeID`,    \n" +
                "					`com`.`connecterTypeID`,    \n" +
                "					`com`.`noOfPosition`,    \n" +
                "					`com`.`noOfRows`,    \n" +
                "					`com`.`pitch`,    \n" +
                "					`com`.`pitchMating`,    \n" +
                "					`com`.`length`,    \n" +
                "					`com`.`width`,    \n" +
                "					`com`.`height`,    \n" +
                "					`com`.`voltage`,    \n" +
                "					`com`.`weight`,    \n" +
                "					`com`.`feature`,    \n" +
                "					`com`.`color`,    \n" +
                "					`com`.`partStatus`,    \n" +
                "					`com`.`uom`,    \n" +
                "					`com`.`uomClassID`,    \n" +
                "					`com`.`unit`,    \n" +
                "					`com`.`restrictUsePermanently`,    \n" +
                "					`com`.`restrictUSEwithpermission`,    \n" +
                "					`com`.`restrictPackagingUsePermanently`,    \n" +
                "					`com`.`restrictPackagingUseWithpermission`,    \n" +
                "					`u`.`abbreviation` AS uomName,    \n" +
                "					`u`.`unitName` AS unitName,    \n" +
                "					`r`.`rohsIcon`,    \n" +
                "					`r`.`name` AS rohsName,    \n" +
                "					`com`.`partPackageID`,    \n" +
                "					`com`.`bomLock`,    \n" +
                "					`com`.`businessRisk`,    \n" +
                "					`com`.`costCategoryID`,    \n" +
                "					`com`.`deviceMarking`,    \n" +
                "					`com`.`driverToolRequired`,    \n" +
                "					`com`.`eau`,    \n" +
                "					`com`.`epicorType`,    \n" +
                "					`com`.`functionalTestingRequired`,    \n" +
                "					`com`.`heightText`,    \n" +
                "					`com`.`isCPN`,    \n" +
                "					`com`.`isCustom`,    \n" +
                "					`com`.`leadTime`,    \n" +
                "					`com`.`matingPartRquired`,    \n" +
                "					`com`.`maxPriceLimit`,    \n" +
                "					`com`.`maxQtyonHand`,    \n" +
                "					`com`.`minimum`,    \n" +
                "					`com`.`mult`,    \n" +
                "					`com`.`packageQty`,    \n" +
                "					`com`.`partType`,    \n" +
                "					`com`.`pcbPerArray`,    \n" +
                "					`com`.`pickupPadRequired`,    \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,    \n" +
                "					`com`.`plannedValuePerBuild`,    \n" +
                "					`com`.`programingRequired`,    \n" +
                "					`com`.`rfqOnly`,    \n" +
                "					`com`.`saftyStock`,    \n" +
                "					`com`.`scrapRatePercentagePerBuild`,    \n" +
                "					`com`.`scrapValuePerBuild`,    \n" +
                "					`com`.`selfLifeDays`,    \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,    \n" +
                "					`com`.`temperatureCoefficient`,    \n" +
                "					`com`.`temperatureCoefficientUnit`,    \n" +
                "					`com`.`temperatureCoefficientValue`,    \n" +
                "					`com`.`trackSerialNumber`,    \n" +
                "					`com`.`refSupplierMfgpnComponentID`,    \n" +
                "					`com`.`refMfgPNMfgCodeId`,    \n" +
                "					`com`.`internalReference`,    \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,    \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,    \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode    \n" +
                "				FROM `component` AS `com`    \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`     \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`     \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0     \n" +
                "						AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "				JOIN `rfq_rohsmst` AS `r`    \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`    \n" +
                "				JOIN  `uoms` AS `u`     \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0    \n" +
                "				WHERE (`com`.`isdeleted`=0)    \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)    \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)     \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)    \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)    \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)    \n" +
                "					AND `com`.`iscustom`=0     \n" +
                "                    AND `com`.`category`=2     \n" +
                "                    AND `com`.`iscpn`=FALSE    \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a    \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)     \n" +
                "			OR (pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')     \n" +
                "				OR (pidcode LIKE CONCAT('%', pSearch , '%'))    \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))    \n" +
                "		)    \n" +
                "		ORDER BY mfgPN;    \n" +
                "	ELSE    \n" +
                "		/* this logic used in purchase order    \n" +
                "		packing slip    \n" +
                "		UMID management    \n" +
                "		Component Master    \n" +
                "		Reserve Stock    \n" +
                "		Component Assy DFM    \n" +
                "		Reports    \n" +
                "		Price Break Update    \n" +
                "		Customer Part    \n" +
                "		Good-Bad Mapping Part    \n" +
                "		Supplier Quote    \n" +
                "		Supplier RMA */    \n" +
                "		SELECT * FROM    \n" +
                "			(    \n" +
                "				SELECT `com`.`id`,    \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "					`com`.`mfgPN` orgMfgPN,    \n" +
                "					`com`.`packaginggroupID`,    \n" +
                "					`com`.`packagingID`,    \n" +
                "					`com`.`PIDCode`,    \n" +
                "					`com`.`isGoodPart`,     \n" +
                "					`com`.`RoHSStatusID`,    \n" +
                "					`com`.`rohsgroupID`,    \n" +
                "					`com`.`mfgcodeID`,    \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,    \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,    \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,    \n" +
                "					`com`.`tolerance`,    \n" +
                "					`com`.`category`,    \n" +
                "					`com`.`imageURL`,    \n" +
                "					`com`.`documentPath`,    \n" +
                "					`com`.`mfgPNDescription`,    \n" +
                "					`com`.`minOperatingTemp`,    \n" +
                "					`com`.`maxOperatingTemp`,    \n" +
                "					`com`.`value`,    \n" +
                "					`com`.`partPackage`,    \n" +
                "					`com`.`powerRating`,    \n" +
                "					`com`.`functionalCategoryID`,    \n" +
                "					`com`.`mountingTypeID`,    \n" +
                "					`com`.`connecterTypeID`,    \n" +
                "					`com`.`noOfPosition`,    \n" +
                "					`com`.`noOfRows`,    \n" +
                "					`com`.`pitch`,    \n" +
                "					`com`.`pitchMating`,    \n" +
                "					`com`.`length`,    \n" +
                "					`com`.`width`,    \n" +
                "					`com`.`height`,    \n" +
                "					`com`.`voltage`,    \n" +
                "					`com`.`weight`,    \n" +
                "					`com`.`feature`,    \n" +
                "					`com`.`color`,    \n" +
                "					`com`.`partStatus`,    \n" +
                "					`com`.`uom`,    \n" +
                "					`com`.`uomClassID`,    \n" +
                "					`com`.`unit`,    \n" +
                "					`com`.`restrictUsePermanently`,    \n" +
                "					`com`.`restrictUSEwithpermission`,    \n" +
                "					`com`.`restrictPackagingUsePermanently`,    \n" +
                "					`com`.`restrictPackagingUseWithpermission`,    \n" +
                "					`com`.`packaging`,    \n" +
                "					`u`.`abbreviation` AS uomName,    \n" +
                "					`u`.`unitName` AS unitName,    \n" +
                "					`r`.`rohsIcon`,    \n" +
                "					`r`.`name` AS rohsName,    \n" +
                "					`com`.`partPackageID`,    \n" +
                "					`com`.`bomLock`,    \n" +
                "					`com`.`businessRisk`,    \n" +
                "					`com`.`costCategoryID`,    \n" +
                "					`com`.`deviceMarking`,    \n" +
                "					`com`.`driverToolRequired`,    \n" +
                "					`com`.`eau`,    \n" +
                "					`com`.`epicorType`,    \n" +
                "					`com`.`functionalTestingRequired`,    \n" +
                "					`com`.`heightText`,    \n" +
                "					`com`.`isCPN`,    \n" +
                "					`com`.`isCustom`,    \n" +
                "					`com`.`leadTime`,    \n" +
                "					`com`.`matingPartRquired`,    \n" +
                "					`com`.`maxPriceLimit`,    \n" +
                "					`com`.`maxQtyonHand`,    \n" +
                "					`com`.`minimum`,    \n" +
                "					`com`.`mult`,    \n" +
                "					`com`.`packageQty`,    \n" +
                "					`com`.`partType`,    \n" +
                "					`com`.`pcbPerArray`,    \n" +
                "					`com`.`pickupPadRequired`,    \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,    \n" +
                "					`com`.`plannedValuePerBuild`,    \n" +
                "					`com`.`programingRequired`,    \n" +
                "					`com`.`rfqOnly`,    \n" +
                "					`com`.`saftyStock`,    \n" +
                "					`com`.`scrapRatePercentagePerBuild`,    \n" +
                "					`com`.`scrapValuePerBuild`,    \n" +
                "					`com`.`selfLifeDays`,    \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,    \n" +
                "					`com`.`temperatureCoefficient`,    \n" +
                "					`com`.`temperatureCoefficientUnit`,    \n" +
                "					`com`.`temperatureCoefficientValue`,    \n" +
                "					`com`.`trackSerialNumber`,    \n" +
                "					`com`.`refSupplierMfgpnComponentID`,    \n" +
                "					`com`.`refMfgPNMfgCodeId`,    \n" +
                "					`com`.`internalReference`,    \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,    \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,    \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode    \n" +
                "				FROM `component` AS `com`    \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`     \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`     \n" +
                "						AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "				JOIN `rfq_rohsmst` AS `r`     \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`    \n" +
                "				JOIN `uoms` AS `u`     \n" +
                "					ON `u`.`id`= `com`.`uom`     \n" +
                "						AND `u`.`isdeleted`=0    \n" +
                "				WHERE `com`.`isdeleted`=0    \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)    \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)     \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)    \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)    \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)    \n" +
                "					AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)    \n" +
                "					AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)    \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a    \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)     \n" +
                "			OR (pSearch IS NOT NULL     \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')     \n" +
                "                OR (pidcode LIKE CONCAT('%', pSearch , '%'))    \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))    \n" +
                "		)    \n" +
                "		ORDER BY mfgPN;    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4988,'2.00','V1',' Bug 35310: Purchase Order: MPN and PID for inactive part is not derived while doing edit - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4988:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-07-2021 *********************************** */
                "insert into page_detail  \n" +
                "(pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute,  \n" +
                "parentPageID,  \n" +
                "hasChild, orderBy, tabLevel, iconClass, isActive, createdAt, updatedAt, createdBy, updatedBy,  isDeleted,  \n" +
                "parentTabID, isDisplay, displayMenuName, isAllowAsHomePage, createByRoleId, updateByRoleId, isPopup, popupFunName, isHideFromMenuList, paramDet, isReadOnlyDeveloped)  \n" +
                "values  \n" +
                "('Manage Parts RFQ', 0, 0, null, 'app.component.managecomponent.rfq', '/rfq/:mfgType/:coid', 'Manage Parts RFQ', null,  \n" +
                "(select a.pageID from page_detail a where a.pageName = 'Manage Parts'),  \n" +
                " 0, null, null, 'icons-manage-parts', 1, utc_timestamp(), utc_timestamp(), 1,1,0,  \n" +
                " null, 1, 'Part', 0, 1, 1, 0, null, 0, null, 0);  \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`)  \n" +
                "VALUES  \n" +
                "(1,(select pageID from page_detail where pageName = \"Manage Parts RFQ\"),0,0,1,0,utc_timestamp(),utc_timestamp(),1,1,0,1,0,1);  \n" +
                /* **************************** Add Script Version -> 12-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4989,'2.00','V1','User Story 32204: Add RFQ tab inside Part Master - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4989:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(    \n" +
                "	IN pPageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pReceiptType VARCHAR(30),    \n" +
                "	IN pMfgCodeIds LONGTEXT,    \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,    \n" +
                "	IN pDueDate DATE,    \n" +
                "	IN pAdditionalDays INT,    \n" +
                "	IN pTermsAndAboveDays INT,    \n" +
                "	IN pInvoiceNumber VARCHAR(50),    \n" +
                "	IN pIsExactSearch TINYINT,    \n" +
                "	IN pMfrPnId INT,    \n" +
                "    IN pInvoiceIds LONGTEXT,    \n" +
                "    IN pExactPaymentNumberSearch TINYINT,    \n" +
                "    IN pPaymentNumber VARCHAR(50),    \n" +
                "    IN pPaymentTermsIds LONGTEXT,    \n" +
                "    IN pInvoiceFromDate DATE,    \n" +
                "    IN pInvoiceToDate DATE    \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                                        \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                            \n" +
                "			SELECT 		p.id,                                          \n" +
                "					p.systemId,                                      \n" +
                "					p.poNumber,                                            \n" +
                "                    p.poDate,          \n" +
                "                    p.refPurchaseOrderID poId,                      \n" +
                "					p.mfgCodeID,                                            \n" +
                "					p.supplierSONumber,                                            \n" +
                "                    p.soDate,          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,                  \n" +
                "					p.packingSlipDate,                                            \n" +
                "					p.invoiceNumber,                                            \n" +
                "                    p.lockStatus invoiceLockStatus,                  \n" +
                "					p.invoiceDate,                                \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                                \n" +
                "					p.creditMemoNumber,                  \n" +
                "                    p.lockStatus creditMemoLockStatus,                  \n" +
                "					p.creditMemoDate,                                            \n" +
                "					p.debitMemoNumber,                                            \n" +
                "                    p.refSupplierCreditMemoNumber,          \n" +
                "                    p.lockStatus debitMemoLockStatus,                  \n" +
                "					p.debitMemoDate,                                            \n" +
                "					p.receiptDate,                                            \n" +
                "					p.description,                                            \n" +
                "					p.billToAddress,                                            \n" +
                "					p.shipToAddress,                                            \n" +
                "					p.poVersion,      \n" +
                "					p.isDeleted,      \n" +
                "					p.receiptType,      \n" +
                "					p.`status`,      \n" +
                "					p.applyDate,      \n" +
                "					p.refParentCreditDebitInvoiceno,      \n" +
                "					p.refPackingSlipNumberForInvoice,      \n" +
                "					p.invoiceTotalDue,      \n" +
                "					p.isTariffInvoice,      \n" +
                "					p.creditMemoType,      \n" +
                "                    (      \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN      \n" +
                "								'Invoice Credit Memo (Auto)'      \n" +
                "							WHEN p.creditMemoType = 'MC' THEN      \n" +
                "								'MISC Credit Memo'      \n" +
                "							WHEN p.creditMemoType = 'RC' THEN      \n" +
                "								'RMA Credit Memo'      \n" +
                "							WHEN p.creditMemoType = 'ID' THEN      \n" +
                "								'Invoice Debit Memo (Auto)'      \n" +
                "							WHEN p.creditMemoType = 'MD' THEN      \n" +
                "								'MISC Debit Memo'      \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN      \n" +
                "								'Invoice'      \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN      \n" +
                "								'MISC Invoice'      \n" +
                "						END      \n" +
                "					) subTypeValue,      \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,      \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,      \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,      \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                                       \n" +
                "                    m.mfgName supplierName,                        \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,                          \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(g.cnt,0)  \n" +
                "						FROM 	vu_genericfilescount g  \n" +
                "						WHERE 	g.refTransID = psm.id  \n" +
                "								AND g.entityID = -14  \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'  \n" +
                "					) packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "					psPay.paidAmount,  \n" +
                "					psPay.refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,    \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,    \n" +
                "					p.invoiceRequireManagementApproval,    \n" +
                "					(    \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN    \n" +
                "								'Yes'    \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN    \n" +
                "								'No'    \n" +
                "						END    \n" +
                "					) invoiceRequireManagementApprovalValue,    \n" +
                "					p.invoiceApprovalStatus,    \n" +
                "					(    \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN    \n" +
                "								'Approved'    \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN    \n" +
                "								'Pending'    \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN    \n" +
                "								'N/A'    \n" +
                "						END    \n" +
                "					) invoiceApprovalStatusValue,    \n" +
                "					p.invoiceApprovedBy,    \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,    \n" +
                "					p.invoiceApprovalDate,    \n" +
                "					p.invoiceApprovalComment,    \n" +
                "					p.internalRemark,    \n" +
                "                    p.remark,    \n" +
                "					p.lockStatus,    \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'    \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'    \n" +
                "						when p.lockStatus = 'LC' then 'Locked'    \n" +
                "						else null end    \n" +
                "					) lockStatusValue,    \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,    \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,    \n" +
                "                    case when p.receiptType = 'I' then    \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))              \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,            \n" +
                "					h1.refType as haltRefType,            \n" +
                "                    h1.status as haltStatus,            \n" +
                "                    (CASE WHEN h1.status = 'H' THEN            \n" +
                "								'Halted'        \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltStatusText,         \n" +
                "                    (CASE            \n" +
                "							WHEN h1.status = 'H' THEN            \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))            \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltReason,            \n" +
                "                    psh1.refType as haltRefTypeRefInv,            \n" +
                "                    psh1.status as haltStatusRefInv,            \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN            \n" +
                "								'Halted'        \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltReasonRefInvText,        \n" +
                "                    (CASE            \n" +
                "							WHEN psh1.status = 'H' THEN            \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))            \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltReasonRefInv,    \n" +
                "                    p.markedForRefund,    \n" +
                "                    (case when p.markedForRefund = 1 then 'Yes'    \n" +
                "						else 'No' end    \n" +
                "					) markedForRefundValue,    \n" +
                "                    p.markedForRefundAmt    \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id            \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/          \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID                \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0            \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno            \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                                            \n" +
                "			left join (            \n" +
                "							select 	a.refPackingSlipMaterialRecID,            \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,            \n" +
                "								sum(a.itemReceived) itemReceived,            \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,            \n" +
                "								sum(a.itemDisapproved) itemDisapproved,            \n" +
                "								sum(a.approveLineCount) approveLineCount,            \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,            \n" +
                "                                sum(discount) totalDiscount,            \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice            \n" +
                "							from 	(              \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,            \n" +
                "										psm.packingSlipSerialNumber,            \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,            \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,            \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/                    \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,                    \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,                    \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                            \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                            \n" +
                "										extendedPrice,                              \n" +
                "                                        discount,              \n" +
                "										extendedReceivedPrice              \n" +
                "									FROM 	packing_slip_material_receive_det psm                                            \n" +
                "									WHERE 	psm.isDeleted = 0                                            \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                            \n" +
                "								) a                                                                                \n" +
                "							group by a.refPackingSlipMaterialRecID                                                                      \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (    \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,    \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,    \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,    \n" +
                "    									sum(paidAmount) totalPaidDebitCreditAmount,    \n" +
                "                                        sum(refundAmount) totalRefundDebitCreditAmount    \n" +
                "							from 		packing_slip_material_receive ps    \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')    \n" +
                "									and ps.isDeleted = 0    \n" +
                "									and pd.isDeleted = 0    \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno    \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id    \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",    \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),    \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)    \n" +
                "	);    \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"    \n" +
                "				and exists (select 1    \n" +
                "							  from packingslip_invoice_payment pm    \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id    \n" +
                "							 where pm.isPaymentVoided = 0    \n" +
                "							   and pm.refPaymentMode = 'P'    \n" +
                "							   and pd.refPackingslipInvoiceID = p.id    \n" +
                "							   and pm.isDeleted = 0    \n" +
                "                               and pd.isDeleted = 0    \n" +
                "							   and pm.paymentNumber \",    \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END    \n" +
                "                               ,\") \");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");    \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'    \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");    \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'    \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN    \n" +
                "		IF pIsExactSearch = 1 THEN    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"    \n" +
                "									AND (    \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"    \n" +
                "									  \" ) \"    \n" +
                "						);    \n" +
                "		ELSE    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"    \n" +
                "									AND (    \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"    \n" +
                "									  \" ) \"    \n" +
                "						);    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN    \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (    \n" +
                "				SELECT 1    \n" +
                "				  FROM packing_slip_material_receive_det x    \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0    \n" +
                "			)    \n" +
                "		\");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );    \n" +
                "    PREPARE query1 FROM @SQLStatement1;    \n" +
                "    EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"    \n" +
                "			SELECT 	c.*,    \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,    \n" +
                "				round(c.paidAmount,2) totalPaidAmount,    \n" +
                "                round(c.refundAmount,2) totalRefundAmount,    \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,    \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,    \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete    \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c    \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_Packingslip_Invoice_Payment_Det_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_Det_History` AFTER UPDATE ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment_det\";    \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE vRefPaymentMode VARCHAR(10);  \n" +
                "    DECLARE vReceiptType VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT refPaymentMode INTO vRefPaymentMode    \n" +
                "	FROM packingslip_invoice_payment    \n" +
                "	WHERE id = NEW.refPayementid ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId,								refPackingslipInvoiceID)    \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,  \n" +
                "					(CASE WHEN vRefPaymentMode = 'CA' THEN 'Credit Memo AMT. Applied in Detail'  \n" +
                "						WHEN vRefPaymentMode = 'WOFF' THEN 'Write Off Amount in Detail ($)'  \n" +
                "                        ELSE 'Payment ($) in line Detail' END),			FORMAT(OLD.paymentAmount,2),  \n" +
                "					FORMAT(NEW.paymentAmount,2),						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,										OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,		OLD.refPackingslipInvoiceID);  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (vRefPaymentMode = 'CA' AND (IFNULL(OLD.appliedDate, \"\") != IFNULL(NEW.appliedDate, \"\"))) THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,    \n" +
                "					'Applied Credit Memo Date in Detail',						CAST(DATE_FORMAT(OLD.appliedDate, '%m/%d/%y') AS CHAR),    \n" +
                "					CAST(DATE_FORMAT(NEW.appliedDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF vRefPaymentMode = 'RR' AND OLD.isDeleted = 0 AND NEW.isDeleted = 1 THEN  \n" +
                "		select a.receiptType  \n" +
                "          into vReceiptType  \n" +
                "		  from packing_slip_material_receive a  \n" +
                "		 where id = OLD.refPackingslipInvoiceID;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId,								refPackingslipInvoiceID)    \n" +
                "		    VALUES (vTableName,								NEW.refPayementid,		NEW.id,  \n" +
                "					(CASE WHEN vReceiptType = 'C' THEN 'Credit Memo'  \n" +
                "						WHEN vReceiptType = 'D' THEN 'Debit Memo'  \n" +
                "                        ELSE '' END),							'',  \n" +
                "					'Deleted',									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,		OLD.refPackingslipInvoiceID);  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4990,'2.00','V1','Bug 35366: [Main Branch] Supplier Refund updating record is not working - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4990:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2021 *********************************** */
                "drop trigger if exists `Trg_AU_Packingslip_Invoice_Payment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";    \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"    \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"    \n" +
                "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,    \n" +
                "					NEW.paymentNumber,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"    \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"    \n" +
                "                        WHEN old.refPaymentMode = \"RR\" THEN \"Refund Date\"    \n" +
                "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),    \n" +
                "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "                        WHEN old.refPaymentMode = \"RR\" THEN \"Refund Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),  \n" +
                "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN    \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval    \n" +
                "		  FROM genericcategory    \n" +
                "		 WHERE gencCategoryID = OLD.paymentType    \n" +
                "		 LIMIT 1;    \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval    \n" +
                "		  FROM genericcategory    \n" +
                "		 WHERE gencCategoryID = NEW.paymentType    \n" +
                "		 LIMIT 1;    \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Payment Method\",								vOldval,    \n" +
                "					vNewval,									OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 		(vTableName,									NEW.id,    \n" +
                "					\"Account Reference\",								OLD.accountReference,    \n" +
                "					NEW.accountReference,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Bank Account Code\",								OLD.bankAccountNo,    \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,									NEW.id,    \n" +
                "					\"Bank Name\",								OLD.bankName,    \n" +
                "					NEW.bankName,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Comments\",									OLD.remark,    \n" +
                "					NEW.remark,									OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),    \n" +
                "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "			 VALUES 	(vTableName,									NEW.id,    \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),    \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN    \n" +
                "		IF NEW.isDeleted = TRUE THEN    \n" +
                "			SET vNewval = 'Deleted';    \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN    \n" +
                "			SET vNewval = 'Restored';    \n" +
                "		ELSE    \n" +
                "			SET vNewval = 'Unknown action on delete';    \n" +
                "        END IF;    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "                    Colname,									Oldval,    \n" +
                "                    Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,								NEW.id,    \n" +
                "                    vNewval,									NULL,    \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,    \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN    \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE    \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)    \n" +
                "				END;    \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE    \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)    \n" +
                "				END;    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Status\"    \n" +
                "						WHEN old.refPaymentMode = \"CA\" THEN \"Write Off Status\"    \n" +
                "						ELSE \"Payment Status\" END), 						vOldval,    \n" +
                "					vNewval,									OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "							(tableName,									refPaymentID,    \n" +
                "							Colname,									Oldval,    \n" +
                "							Newval,										createdAt,    \n" +
                "							createdBy,									createByRoleId,    \n" +
                "							updatedAt,									updatedBy,    \n" +
                "							updateByRoleId)    \n" +
                "				  VALUES 	(vTableName,										NEW.id,    \n" +
                "							\"Voided Date\",							'',    \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,    \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history    \n" +
                "							(tableName,									refPaymentID,    \n" +
                "							Colname,									Oldval,    \n" +
                "							Newval,										createdAt,    \n" +
                "							createdBy,									createByRoleId,    \n" +
                "							updatedAt,									updatedBy,    \n" +
                "							updateByRoleId)    \n" +
                "				  VALUES 	(vTableName,										NEW.id,    \n" +
                "							\"Voided By\",									'',    \n" +
                "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,    \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "		  END IF;    \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"    \n" +
                "					WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"    \n" +
                "                    WHEN old.refPaymentMode = \"RR\" THEN \"Void Refund Reason\"    \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,    \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,    \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'    \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),    \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'    \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'    \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Locked Date\",									'',    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Locked By\",									'',    \n" +
                "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'P' THEN    \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN    \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN    \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval    \n" +
                "				FROM mfgcodemst    \n" +
                "				WHERE id =OLD.mfgcodeID    \n" +
                "				ORDER BY id DESC LIMIT 1;    \n" +
                "			END IF;    \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN    \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval    \n" +
                "				FROM mfgcodemst    \n" +
                "				WHERE id =NEW.mfgcodeID    \n" +
                "				ORDER BY id DESC LIMIT 1;    \n" +
                "			END IF;    \n" +
                "			  INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Supplier\",									vOldval,    \n" +
                "						vNewval,												OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "		END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Pay To name\",									OLD.payToName,    \n" +
                "						NEW.payToName,									OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Pay To Address\",									OLD.payToAddress,    \n" +
                "						NEW.payToAddress,								OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Bill To Name\",									OLD.billToName,    \n" +
                "						NEW.billToName,									OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Bill To Address\",								OLD.billToAddress,    \n" +
                "						NEW.billToAddress,								OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "  \n" +
                "    ELSEIF NEW.refPaymentMode IN ('R','RR') THEN    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,						refPaymentID,    \n" +
                "						Colname,						Oldval,    \n" +
                "						Newval,							createdAt,    \n" +
                "						createdBy,						createByRoleId,    \n" +
                "						updatedAt,						updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,							NEW.id,    \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,    \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,    \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "    END IF;    \n" +
                "    IF NEW.refPaymentMode = 'RR' THEN  \n" +
                "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,									NEW.id,    \n" +
                "					\"Offset Refund Amount ($)\",						OLD.offsetAmount,    \n" +
                "					NEW.offsetAmount,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,								NEW.id,    \n" +
                "					\"COA\",											  \n" +
                "					(select concat('(',a.acct_code,') ', a.acct_name) from acct_acctmst a where a.acct_id = OLD.acctId),  \n" +
                "					(select concat('(',a.acct_code,') ', a.acct_name) from acct_acctmst a where a.acct_id = NEW.acctId),  \n" +
                "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
                "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
                "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePaymentHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentHistory`(  \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pPaymentID INT,    \n" +
                "	IN pRefPaymentMode VARCHAR(5)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;    \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN    \n" +
                "		CREATE TEMPORARY TABLE temp_custInvListOfPayment AS    \n" +
                "			SELECT id, invoiceNumber    \n" +
                "			FROM customer_packingslip    \n" +
                "			WHERE id IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE refPayementid = pPaymentID)    \n" +
                "			AND transType = 'I'    \n" +
                "			AND isDeleted = 0 ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_custInvListOfPayment AS    \n" +
                "		SELECT id, invoiceNumber FROM customer_packingslip WHERE 1=0;    \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierInvoicePaymentHistory = CONCAT(\"    \n" +
                "			SELECT    \n" +
                "				id, tableName , refPaymentID ,    \n" +
                "				colName,    \n" +
                "				oldVal,    \n" +
                "				newVal,    \n" +
                "				(CASE WHEN ('\",pRefPaymentMode,\"' = 'R' OR '\",pRefPaymentMode,\"' = 'CA' OR '\",pRefPaymentMode,\"' = 'WOFF')    \n" +
                "						AND siph.refPaymentDetID IS NOT NULL    \n" +
                "						THEN (SELECT invoiceNumber FROM temp_custInvListOfPayment    \n" +
                "							WHERE id = (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det    \n" +
                "												WHERE id = siph.refPaymentDetID))    \n" +
                "				      WHEN '\",pRefPaymentMode,\"' IN ('P','RR') THEN   \n" +
                "						  (select ifnull(a.creditMemoNumber, a.debitMemoNumber)  \n" +
                "						     from packing_slip_material_receive a  \n" +
                "						    where a.id = siph.refPackingslipInvoiceID)  \n" +
                "                      ELSE '' END) AS invoiceNumber ,    \n" +
                "				fun_getUserNameByID(updatedBy) updatedBy,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole    \n" +
                "			FROM    supplier_invoice_payment_history siph    \n" +
                "			WHERE   refPaymentID =\",pPaymentID,\"    \n" +
                "	\");    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4991,'2.00','V1','Bug 35366: [Main Branch] Supplier Refund updating record is not working - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4991:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2021  ********************************** */
                "INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy, updatedBy)  \n" +
                "VALUES ('Allow to Take Picture (IP Webcam) in Document', 1, 0, 1,1);  \n" +
                /* **************************** New Script -> 13-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4992,'2.00','V1','User Story 35381: Document Directive: Make Take Picture(IP Webcam) button Feature base - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4992:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pReceiptType VARCHAR(30),      \n" +
                "	IN pMfgCodeIds LONGTEXT,      \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "	IN pDueDate DATE,      \n" +
                "	IN pAdditionalDays INT,      \n" +
                "	IN pTermsAndAboveDays INT,      \n" +
                "	IN pInvoiceNumber VARCHAR(50),      \n" +
                "	IN pIsExactSearch TINYINT,      \n" +
                "	IN pMfrPnId INT,      \n" +
                "    IN pInvoiceIds LONGTEXT,      \n" +
                "    IN pExactPaymentNumberSearch TINYINT,      \n" +
                "    IN pPaymentNumber VARCHAR(50),      \n" +
                "    IN pPaymentTermsIds LONGTEXT,      \n" +
                "    IN pInvoiceFromDate DATE,      \n" +
                "    IN pInvoiceToDate DATE      \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "    DECLARE vCurrentDate DATE;    \n" +
                "    DECLARE vMfgCodeFormat INT;    \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;    \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;    \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;    \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                                          \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                              \n" +
                "			SELECT 		p.id,                                            \n" +
                "					p.systemId,                                        \n" +
                "					p.poNumber,                                              \n" +
                "                    p.poDate,            \n" +
                "                    p.refPurchaseOrderID poId,                        \n" +
                "					p.mfgCodeID,                                              \n" +
                "					p.supplierSONumber,                                              \n" +
                "                    p.soDate,            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                    \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,                    \n" +
                "					p.packingSlipDate,                                              \n" +
                "					p.invoiceNumber,                                              \n" +
                "                    p.lockStatus invoiceLockStatus,                    \n" +
                "					p.invoiceDate,                                  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                                  \n" +
                "					p.creditMemoNumber,                    \n" +
                "                    p.lockStatus creditMemoLockStatus,                    \n" +
                "					p.creditMemoDate,                                              \n" +
                "					p.debitMemoNumber,                                              \n" +
                "                    p.refSupplierCreditMemoNumber,            \n" +
                "                    p.lockStatus debitMemoLockStatus,                    \n" +
                "					p.debitMemoDate,                                              \n" +
                "					p.receiptDate,                                              \n" +
                "					p.description,                                              \n" +
                "					p.billToAddress,                                              \n" +
                "					p.shipToAddress,                                              \n" +
                "					p.poVersion,        \n" +
                "					p.isDeleted,        \n" +
                "					p.receiptType,        \n" +
                "					p.`status`,        \n" +
                "					p.applyDate,        \n" +
                "					p.refParentCreditDebitInvoiceno,        \n" +
                "					p.refPackingSlipNumberForInvoice,        \n" +
                "					p.invoiceTotalDue,        \n" +
                "					p.isTariffInvoice,        \n" +
                "					p.creditMemoType,        \n" +
                "                    (        \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN        \n" +
                "								'Invoice Credit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MC' THEN        \n" +
                "								'MISC Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'RC' THEN        \n" +
                "								'RMA Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'ID' THEN        \n" +
                "								'Invoice Debit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MD' THEN        \n" +
                "								'MISC Debit Memo'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN        \n" +
                "								'Invoice'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN        \n" +
                "								'MISC Invoice'        \n" +
                "						END        \n" +
                "					) subTypeValue,        \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,        \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,        \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                                         \n" +
                "                    m.mfgName supplierName,                          \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,                            \n" +
                "					m.mfgCode supplierCodeName,    \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,    \n" +
                "					(    \n" +
                "						SELECT 	IFNULL(g.cnt,0)    \n" +
                "						FROM 	vu_genericfilescount g    \n" +
                "						WHERE 	g.refTransID = psm.id    \n" +
                "								AND g.entityID = -14    \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'    \n" +
                "					) packingSlipDocCount,    \n" +
                "					pd.itemReceived,    \n" +
                "					pd.otherChargesItemReceived,    \n" +
                "					pd.itemDisapproved,    \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,    \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,    \n" +
                "					ps.status parentInvoiceStatus,    \n" +
                "					ps.invoiceNumber refInvoiceNumber,    \n" +
                "                    ps.lockStatus refInvoiceLockStatus,    \n" +
                "					ps.creditMemoType parentCreditMemoType,    \n" +
                "					pd.totalExtendedAmount,    \n" +
                "                    pd.totalDiscount,    \n" +
                "					pe.totalCreditAmount,    \n" +
                "					pe.totalDebitAmount,    \n" +
                "					(    \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)    \n" +
                "					) amountToPay,    \n" +
                "                    pd.totalExtendedReceivedPrice,    \n" +
                "					pd.packingDetailNote,    \n" +
                "					pd.approveLineCount,    \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN    \n" +
                "											p.debitMemoDate    \n" +
                "										WHEN p.receiptType = 'C' THEN    \n" +
                "											p.creditMemoDate    \n" +
                "										ELSE p.invoiceDate    \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,    \n" +
                "					g.gencCategoryName paymentTermName,    \n" +
                " 					m.paymentTermsID paymentTermsID,    \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,    \n" +
                "					psm.packingSlipModeStatus,    \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,    \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,    \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,      \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,      \n" +
                "					p.invoiceRequireManagementApproval,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN      \n" +
                "								'Yes'      \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN      \n" +
                "								'No'      \n" +
                "						END      \n" +
                "					) invoiceRequireManagementApprovalValue,      \n" +
                "					p.invoiceApprovalStatus,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN      \n" +
                "								'Approved'      \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN      \n" +
                "								'Pending'      \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN      \n" +
                "								'N/A'      \n" +
                "						END      \n" +
                "					) invoiceApprovalStatusValue,      \n" +
                "					p.invoiceApprovedBy,      \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,      \n" +
                "					p.invoiceApprovalDate,      \n" +
                "					p.invoiceApprovalComment,      \n" +
                "					p.internalRemark,      \n" +
                "                    p.remark,      \n" +
                "					p.lockStatus,      \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'      \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'      \n" +
                "						when p.lockStatus = 'LC' then 'Locked'      \n" +
                "						else null end      \n" +
                "					) lockStatusValue,      \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,      \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,      \n" +
                "                    case when p.receiptType = 'I' then      \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))                \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,              \n" +
                "					h1.refType as haltRefType,              \n" +
                "                    h1.status as haltStatus,              \n" +
                "                    (CASE WHEN h1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltStatusText,           \n" +
                "                    (CASE              \n" +
                "							WHEN h1.status = 'H' THEN              \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReason,              \n" +
                "                    psh1.refType as haltRefTypeRefInv,              \n" +
                "                    psh1.status as haltStatusRefInv,              \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInvText,          \n" +
                "                    (CASE              \n" +
                "							WHEN psh1.status = 'H' THEN              \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInv,      \n" +
                "                    p.markedForRefund,      \n" +
                "                    (case when p.markedForRefund = 1 then 'Yes'      \n" +
                "						else 'No' end      \n" +
                "					) markedForRefundValue,      \n" +
                "                    p.markedForRefundAmt      \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)    \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,    \n" +
                "							gFiles.gencFileOwnerType,    \n" +
                "							gFiles.refTransID,    \n" +
                "							gFiles.entityID    \n" +
                "						FROM genericfiles gFiles    \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0    \n" +
                "						and gFiles.entityID in (-13,-15,-16)    \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc    \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15    \n" +
                "																		WHEN p.receiptType = 'D' THEN -16    \n" +
                "																		ELSE -13    \n" +
                "																	END)    \n" +
                "				and psDoc.refTransID = p.id    \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id              \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where h2.refTransId = h1.refTransId    \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')    \n" +
                " 											  and h2.isDeleted = 0)*/            \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID                  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0              \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno              \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where psh1.refTransId = h2.refTransId    \n" +
                " 											  and h2.refType = 'SINV'    \n" +
                " 											  and h2.isDeleted = 0)*/    \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                                              \n" +
                "			left join (              \n" +
                "							select 	a.refPackingSlipMaterialRecID,              \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,              \n" +
                "								sum(a.itemReceived) itemReceived,              \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,              \n" +
                "								sum(a.itemDisapproved) itemDisapproved,              \n" +
                "								sum(a.approveLineCount) approveLineCount,              \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,              \n" +
                "                                sum(discount) totalDiscount,              \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice              \n" +
                "							from 	(                \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,              \n" +
                "										psm.packingSlipSerialNumber,              \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,              \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,              \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/                      \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,                      \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,                      \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                              \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                              \n" +
                "										extendedPrice,                                \n" +
                "                                        discount,                \n" +
                "										extendedReceivedPrice                \n" +
                "									FROM 	packing_slip_material_receive_det psm                                              \n" +
                "									WHERE 	psm.isDeleted = 0                                              \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                              \n" +
                "								) a                                                                                  \n" +
                "							group by a.refPackingSlipMaterialRecID                                                                        \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id    \n" +
                "				left join (select b.refPackingslipInvoiceID,    \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "							  from packingslip_invoice_payment a    \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "							 where a.refPaymentMode IN ('P','RR')    \n" +
                "							   and a.isPaymentVoided = 0    \n" +
                "							   and b.isDeleted = 0    \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id    \n" +
                "				left join (      \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,      \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,      \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,      \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,      \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount      \n" +
                "							from 		packing_slip_material_receive ps      \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID    \n" +
                "                            left join (select b.refPackingslipInvoiceID,    \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "										  from packingslip_invoice_payment a    \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "										 where a.refPaymentMode IN ('P','RR')    \n" +
                "										   and b.isPaymentVoided = 0    \n" +
                "										   and b.isDeleted = 0    \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID    \n" +
                "								  where ps.receiptType in ('C','D')      \n" +
                "									and ps.isDeleted = 0      \n" +
                "									and pd.isDeleted = 0      \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno      \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id      \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",      \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),      \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)      \n" +
                "	);      \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"      \n" +
                "				and exists (select 1      \n" +
                "							  from packingslip_invoice_payment pm      \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id      \n" +
                "							 where pm.isPaymentVoided = 0      \n" +
                "							   and pm.refPaymentMode = 'P'      \n" +
                "							   and pd.refPackingslipInvoiceID = p.id      \n" +
                "							   and pm.isDeleted = 0      \n" +
                "                               and pd.isDeleted = 0      \n" +
                "							   and pm.paymentNumber \",      \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END      \n" +
                "                               ,\") \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");      \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN      \n" +
                "		IF pIsExactSearch = 1 THEN      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		ELSE      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (      \n" +
                "				SELECT 1      \n" +
                "				  FROM packing_slip_material_receive_det x      \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0      \n" +
                "			)      \n" +
                "		\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );      \n" +
                "    PREPARE query1 FROM @SQLStatement1;      \n" +
                "    EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"      \n" +
                "			SELECT 	c.*,      \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,      \n" +
                "				round(c.paidAmount,2) totalPaidAmount,      \n" +
                "                round(c.refundAmount,2) totalRefundAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,      \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete      \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c      \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4993,'2.00','V1',' - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4993:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,      \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "	IN pDueDate DATE,      \n" +
                "	IN pAdditionalDays INT,      \n" +
                "	IN pTermsAndAboveDays INT,      \n" +
                "	IN pInvoiceNumber VARCHAR(50),      \n" +
                "	IN pIsExactSearch TINYINT,      \n" +
                "	IN pMfrPnId INT,      \n" +
                "    IN pInvoiceIds LONGTEXT,      \n" +
                "    IN pExactPaymentNumberSearch TINYINT,      \n" +
                "    IN pPaymentNumber VARCHAR(50),      \n" +
                "    IN pPaymentTermsIds LONGTEXT,      \n" +
                "    IN pInvoiceFromDate DATE,      \n" +
                "    IN pInvoiceToDate DATE      \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "    DECLARE vCurrentDate DATE;    \n" +
                "    DECLARE vMfgCodeFormat INT;    \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;    \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;    \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;    \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                                          \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                              \n" +
                "			SELECT 		p.id,                                            \n" +
                "					p.systemId,                                        \n" +
                "					p.poNumber,                                              \n" +
                "                    p.poDate,            \n" +
                "                    p.refPurchaseOrderID poId,                        \n" +
                "					p.mfgCodeID,                                              \n" +
                "					p.supplierSONumber,                                              \n" +
                "                    p.soDate,            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                    \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,                    \n" +
                "					p.packingSlipDate,                                              \n" +
                "					p.invoiceNumber,                                              \n" +
                "                    p.lockStatus invoiceLockStatus,                    \n" +
                "					p.invoiceDate,                                  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                                  \n" +
                "					p.creditMemoNumber,                    \n" +
                "                    p.lockStatus creditMemoLockStatus,                    \n" +
                "					p.creditMemoDate,                                              \n" +
                "					p.debitMemoNumber,                                              \n" +
                "                    p.refSupplierCreditMemoNumber,            \n" +
                "                    p.lockStatus debitMemoLockStatus,                    \n" +
                "					p.debitMemoDate,                                              \n" +
                "					p.receiptDate,                                              \n" +
                "					p.description,                                              \n" +
                "					p.billToAddress,                                              \n" +
                "					p.shipToAddress,                                              \n" +
                "					p.poVersion,        \n" +
                "					p.isDeleted,        \n" +
                "					p.receiptType,        \n" +
                "					p.`status`,        \n" +
                "					p.applyDate,        \n" +
                "					p.refParentCreditDebitInvoiceno,        \n" +
                "					p.refPackingSlipNumberForInvoice,        \n" +
                "					p.invoiceTotalDue,        \n" +
                "					p.isTariffInvoice,        \n" +
                "					p.creditMemoType,        \n" +
                "                    (        \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN        \n" +
                "								'Invoice Credit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MC' THEN        \n" +
                "								'MISC Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'RC' THEN        \n" +
                "								'RMA Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'ID' THEN        \n" +
                "								'Invoice Debit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MD' THEN        \n" +
                "								'MISC Debit Memo'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN        \n" +
                "								'Invoice'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN        \n" +
                "								'MISC Invoice'        \n" +
                "						END        \n" +
                "					) subTypeValue,        \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,        \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,        \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                                         \n" +
                "                    m.mfgName supplierName,                          \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,                            \n" +
                "					m.mfgCode supplierCodeName,    \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,    \n" +
                "					pg.packingSlipDocCount,    \n" +
                "					pd.itemReceived,    \n" +
                "					pd.otherChargesItemReceived,    \n" +
                "					pd.itemDisapproved,    \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,    \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,    \n" +
                "					ps.status parentInvoiceStatus,    \n" +
                "					ps.invoiceNumber refInvoiceNumber,    \n" +
                "                    ps.lockStatus refInvoiceLockStatus,    \n" +
                "					ps.creditMemoType parentCreditMemoType,    \n" +
                "					pd.totalExtendedAmount,    \n" +
                "                    pd.totalDiscount,    \n" +
                "					pe.totalCreditAmount,    \n" +
                "					pe.totalDebitAmount,    \n" +
                "					(    \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)    \n" +
                "					) amountToPay,    \n" +
                "                    pd.totalExtendedReceivedPrice,    \n" +
                "					pd.packingDetailNote,    \n" +
                "					pd.approveLineCount,    \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN    \n" +
                "											p.debitMemoDate    \n" +
                "										WHEN p.receiptType = 'C' THEN    \n" +
                "											p.creditMemoDate    \n" +
                "										ELSE p.invoiceDate    \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,    \n" +
                "					g.gencCategoryName paymentTermName,    \n" +
                " 					m.paymentTermsID paymentTermsID,    \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,    \n" +
                "					psm.packingSlipModeStatus,    \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,    \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,    \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,      \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,      \n" +
                "					p.invoiceRequireManagementApproval,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN      \n" +
                "								'Yes'      \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN      \n" +
                "								'No'      \n" +
                "						END      \n" +
                "					) invoiceRequireManagementApprovalValue,      \n" +
                "					p.invoiceApprovalStatus,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN      \n" +
                "								'Approved'      \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN      \n" +
                "								'Pending'      \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN      \n" +
                "								'N/A'      \n" +
                "						END      \n" +
                "					) invoiceApprovalStatusValue,      \n" +
                "					p.invoiceApprovedBy,      \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,      \n" +
                "					p.invoiceApprovalDate,      \n" +
                "					p.invoiceApprovalComment,      \n" +
                "					p.internalRemark,      \n" +
                "                    p.remark,      \n" +
                "					p.lockStatus,      \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'      \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'      \n" +
                "						when p.lockStatus = 'LC' then 'Locked'      \n" +
                "						else null end      \n" +
                "					) lockStatusValue,      \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,      \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,      \n" +
                "                    case when p.receiptType = 'I' then      \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))                \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,              \n" +
                "					h1.refType as haltRefType,              \n" +
                "                    h1.status as haltStatus,              \n" +
                "                    (CASE WHEN h1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltStatusText,           \n" +
                "                    (CASE              \n" +
                "							WHEN h1.status = 'H' THEN              \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReason,              \n" +
                "                    psh1.refType as haltRefTypeRefInv,              \n" +
                "                    psh1.status as haltStatusRefInv,              \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInvText,          \n" +
                "                    (CASE              \n" +
                "							WHEN psh1.status = 'H' THEN              \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInv,      \n" +
                "                    p.markedForRefund,      \n" +
                "                    (case when p.markedForRefund = 1 then 'Yes'      \n" +
                "						else 'No' end      \n" +
                "					) markedForRefundValue,      \n" +
                "                    p.markedForRefundAmt      \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)    \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,    \n" +
                "							gFiles.gencFileOwnerType,    \n" +
                "							gFiles.refTransID,    \n" +
                "							gFiles.entityID    \n" +
                "						FROM genericfiles gFiles    \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0    \n" +
                "						and gFiles.entityID in (-13,-15,-16)    \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc    \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15    \n" +
                "																		WHEN p.receiptType = 'D' THEN -16    \n" +
                "																		ELSE -13    \n" +
                "																	END)    \n" +
                "				and psDoc.refTransID = p.id    \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id              \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where h2.refTransId = h1.refTransId    \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')    \n" +
                " 											  and h2.isDeleted = 0)*/            \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID                  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0              \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno              \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where psh1.refTransId = h2.refTransId    \n" +
                " 											  and h2.refType = 'SINV'    \n" +
                " 											  and h2.isDeleted = 0)*/    \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0   \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14    \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'    \n" +
                "            ) pg on pg.refTransID = psm.id    \n" +
                "			left join (              \n" +
                "							select 	a.refPackingSlipMaterialRecID,              \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,              \n" +
                "								sum(a.itemReceived) itemReceived,              \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,              \n" +
                "								sum(a.itemDisapproved) itemDisapproved,              \n" +
                "								sum(a.approveLineCount) approveLineCount,              \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,              \n" +
                "                                sum(discount) totalDiscount,              \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice              \n" +
                "							from 	(                \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,              \n" +
                "										psm.packingSlipSerialNumber,              \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,              \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,              \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/                      \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,                      \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,                      \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                              \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                              \n" +
                "										extendedPrice,                                \n" +
                "                                        discount,                \n" +
                "										extendedReceivedPrice                \n" +
                "									FROM 	packing_slip_material_receive_det psm                                              \n" +
                "									WHERE 	psm.isDeleted = 0                                              \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                              \n" +
                "								) a                                                                                  \n" +
                "							group by a.refPackingSlipMaterialRecID                                                                        \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id    \n" +
                "				left join (select b.refPackingslipInvoiceID,    \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "							  from packingslip_invoice_payment a    \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "							 where a.refPaymentMode IN ('P','RR')    \n" +
                "							   and a.isPaymentVoided = 0    \n" +
                "							   and b.isDeleted = 0    \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id    \n" +
                "				left join (      \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,      \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,      \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,      \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,      \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount      \n" +
                "							from 		packing_slip_material_receive ps      \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID    \n" +
                "                            left join (select b.refPackingslipInvoiceID,    \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "										  from packingslip_invoice_payment a    \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "										 where a.refPaymentMode IN ('P','RR')    \n" +
                "										   and b.isPaymentVoided = 0    \n" +
                "										   and b.isDeleted = 0    \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID    \n" +
                "								  where ps.receiptType in ('C','D')      \n" +
                "									and ps.isDeleted = 0      \n" +
                "									and pd.isDeleted = 0      \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno      \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id      \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",      \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),      \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)      \n" +
                "	);      \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"      \n" +
                "				and exists (select 1      \n" +
                "							  from packingslip_invoice_payment pm      \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id      \n" +
                "							 where pm.isPaymentVoided = 0      \n" +
                "							   and pm.refPaymentMode = 'P'      \n" +
                "							   and pd.refPackingslipInvoiceID = p.id      \n" +
                "							   and pm.isDeleted = 0      \n" +
                "                               and pd.isDeleted = 0      \n" +
                "							   and pm.paymentNumber \",      \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END      \n" +
                "                               ,\") \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");      \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN      \n" +
                "		IF pIsExactSearch = 1 THEN      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		ELSE      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (      \n" +
                "				SELECT 1      \n" +
                "				  FROM packing_slip_material_receive_det x      \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0      \n" +
                "			)      \n" +
                "		\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );      \n" +
                "    PREPARE query1 FROM @SQLStatement1;      \n" +
                "    EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"      \n" +
                "			SELECT 	c.*,      \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,      \n" +
                "				round(c.paidAmount,2) totalPaidAmount,      \n" +
                "                round(c.refundAmount,2) totalRefundAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,      \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete      \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c      \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4994,'2.00','V1','Performance tuning of supplier invoice procedure - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4994:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2021 *********************************** */
                "drop procedure if exists `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @SQLStatement1=\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType \";  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE || pIsRestrictPackagingUseWithpermission = true || pIsRestrictUsePermanently = true || pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4995,'2.00','V1','Bug 35440: Part Master: Supplier Part List page showing the incorrect date and time - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4995:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-07-2021 *********************************** */
                "drop procedure if exists `Sproc_ManageHoldResumeTrans`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageHoldResumeTrans`(  \n" +
                "IN pRefTransId INT,  \n" +
                "IN pRefType VARCHAR(10),  \n" +
                "IN pStatus VARCHAR(4),  \n" +
                "IN pReason VARCHAR(500),  \n" +
                "IN pResumeReason VARCHAR(500),  \n" +
                "IN pEmployeeID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_isValidationPassed tinyint default true;  \n" +
                "    DECLARE v_Count int;  \n" +
                "    DECLARE v_Status VARCHAR(10);  \n" +
                "	DECLARE v_UpdateId INT;  \n" +
                "    DECLARE v_HEmployeeId INT;  \n" +
                "    DECLARE v_REmployeeId INT;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS  temp_HoldUnholdTrans_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_HoldUnholdTrans_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		ErrorCode INT,  \n" +
                "		HRStatus VARCHAR(50),  \n" +
                "		EmpName VARCHAR(50),  \n" +
                "		insertUpdatePKID INT  \n" +
                "	);  \n" +
                "	if pRefType in ('SINV','SDM','SCM') then  \n" +
                "		  select count(1) into v_Count  \n" +
                "			from packing_slip_material_receive  \n" +
                "		   where id = pRefTransId  \n" +
                "             and status = 'P';  \n" +
                "		if (v_Count <> 0) then  \n" +
                "			set v_isValidationPassed = false;  \n" +
                "            INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "					 VALUES (FALSE, 2,'ALREADY_PAID',fun_getUserNameByEmployeID(v_HEmployeeId));  \n" +
                "		else  \n" +
                "			select count(1) into v_Count  \n" +
                "			 from packing_slip_material_receive  \n" +
                "		    where id = pRefTransId  \n" +
                "              and lockStatus = 'LC';  \n" +
                "              if (v_Count <> 0) then  \n" +
                "				set v_isValidationPassed = false;  \n" +
                "				INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "						 VALUES (FALSE, 2,'ALREADY_LOCKED',fun_getUserNameByEmployeID(v_HEmployeeId));  \n" +
                "			 end if;  \n" +
                "        end if;  \n" +
                "    end if;  \n" +
                "    if (v_isValidationPassed = true) then  \n" +
                "		SELECT hut.id,hut.status,hut.holdEmployeeId,hut.unHoldEmployeeId INTO v_UpdateId,v_Status,v_HEmployeeId,v_REmployeeId  \n" +
                "		  FROM holdunholdtrans hut  \n" +
                "		  WHERE hut.id= (SELECT MAX(ht.id)  \n" +
                "						   FROM holdunholdtrans ht  \n" +
                "						  WHERE hut.refTransId = ht.refTransId  \n" +
                "							AND ht.refType = pRefType  \n" +
                "							AND ht.isDeleted = 0)  \n" +
                "		  AND hut.refTransId=pRefTransId;  \n" +
                "  \n" +
                "		IF (v_Status = pStatus) THEN  \n" +
                "				IF(v_Status = 'H') THEN  \n" +
                "					INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "					 VALUES (FALSE, 1,'halted',fun_getUserNameByEmployeID(v_HEmployeeId));  \n" +
                "			 ELSE  \n" +
                "					INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "					 VALUES (FALSE, 1,'resumed',fun_getUserNameByEmployeID(v_REmployeeId));  \n" +
                "			 END IF;  \n" +
                "		ELSE  \n" +
                "			IF (pStatus = 'H') THEN  \n" +
                "				INSERT INTO holdunholdtrans(refTransId,refType,STATUS,startDate,reason,holdEmployeeId,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "				VALUES (pRefTransId,pRefType,pStatus,fun_DatetimetoUTCDateTime(),pReason,pEmployeeID,pUserID,pUserID,pRoleID,pRoleID);  \n" +
                "                /*maintain hold resume transaction id to use on suppleir invoice list SP to display status*/  \n" +
                "                if pRefType in ('SINV','SDM','SCM') then  \n" +
                "					update packing_slip_material_receive  \n" +
                "                       set holdUnholdId = LAST_INSERT_ID()  \n" +
                "					 where id = pRefTransId  \n" +
                "                       and receiptType in ('I','C','D')  \n" +
                "                       and isDeleted = 0;  \n" +
                "                     if pRefType = 'SINV' then  \n" +
                "						update packing_slip_material_receive  \n" +
                "						   set refParentCreditDebitInvoiceHoldUnholdId = LAST_INSERT_ID()  \n" +
                "						 where refParentCreditDebitInvoiceno = pRefTransId  \n" +
                "                           and receiptType in ('C','D')  \n" +
                "                           and isDeleted = 0;  \n" +
                "                     end if;  \n" +
                "                end if;  \n" +
                "				INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,insertUpdatePKID) VALUES (TRUE, 0 , LAST_INSERT_ID());  \n" +
                "			ELSE  \n" +
                "					UPDATE holdunholdtrans  \n" +
                "					   SET STATUS = 'R',  \n" +
                "							endDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							unHoldEmployeeId = pEmployeeID,  \n" +
                "							resumeReason = pResumeReason,  \n" +
                "							updatedBy = pUserID,  \n" +
                "							updateByRoleId = pRoleID  \n" +
                "					  WHERE id = v_UpdateId;  \n" +
                "					INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,insertUpdatePKID) VALUES (TRUE, 0 , v_UpdateId);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT IsSuccess, ErrorCode, HRStatus, EmpName, insertUpdatePKID  \n" +
                "	FROM temp_HoldUnholdTrans_Error;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4996,'2.00','V1','Bug 35477: Supplier Invoice: Halt Invoice button is not working - hotfix - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4996:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL)THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL )THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY BinID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL)THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pMfgCodeIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (mfgCodeID in (',pMfgCodeIds,'))');  \n" +
                "   END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      	warehouseName,      	departmentId,      	departmentName,  \n" +
                "			PartId,  	packingSlipID, 		packingSlipName,  		poNumber,	 poID,		mfgCodeID,		supplierCodeName,  \n" +
                "            packagingType,        	packingSlipDate,       packingSlipNumber,  \n" +
                "            mfgName,				mfgPN,      pidCode,      	RoHSStatusID,      	rohsIcon,      		rohsName,      		nickname,		InQty,  \n" +
                "			UMIDCreatedQty,	returnQty,		BalanceQty,    		isCustom,           	receivedStatus,     	receivedStatusValue  \n" +
                "		FROM 	(  \n" +
                "				SELECT		vucp.BinID,      	w.ID WarehouseID,      		w.parentWHID departmentId,      	b.Name binName,  \n" +
                "						vucp.packingSlipID,	w.Name warehouseName,      	fun_getWarehouseNameByID(w.parentWHID) departmentName,  \n" +
                "						vucp.PartId,      	c.mfgPN As mfgPN,      		c.PIDCode As pidCode,      		c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						fun_getPackagingNameByID(vucp.packagingID) packagingType,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "                        ps.mfgCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,		vucp.UMIDCreatedQty,      	vucp.returnQty,  \n" +
                "						vucp.BalanceQty,	c.isCustom,		c.partType,  \n" +
                "						vucp.receivedStatus, 	fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = b.WarehouseID AND w.isdeleted= 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted =0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "	);  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4997,'2.00','V1','User Story 35332: UMID Pending Parts: Implement Advance Filter - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4997:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021 *********************************** */
                "ALTER TABLE component_price_break_details ADD COLUMN rfqAssyID INT AFTER rfqNumber;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "alter table component add column quoteValidTillDate date;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD COLUMN quoteValidTillDate DATE NULL;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "ALTER TABLE rfq_assemblies ADD COLUMN quoteValidTillDate DATE NULL;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "ALTER TABLE company_info ADD COLUMN unitOfTime VARCHAR(5) NOT NULL;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4998,'2.00','V1',' Alter component_price_break_details table - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4998:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesCommissionDetailsFromRfq` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesCommissionDetailsFromRfq`(  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRfqQuoteNumber VARCHAR(50),  \n" +
                "    IN pIsPushToPartMaster TINYINT,  \n" +
                "    IN pUserId INT,  \n" +
                "    IN pRoleId INT ,  \n" +
                "    IN pIsCallFromPartMaster TINYINT,  \n" +
                "    IN pProceedOverriderQuote TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE alreadyExistQuote INT;  \n" +
                "	declare v_rfqAssyID int;  \n" +
                "	declare v_quoteValidTill date;  \n" +
                "  \n" +
                "	select id,quoteValidTillDate into v_rfqAssyID,v_quoteValidTill from   rfq_assemblies where quoteNumber=pRfqQuoteNumber and isdeleted=0;  \n" +
                "	/*this SP used for two purpose 1. get quote data for assembly sales price matrix 2. push data to part master from RFQ page*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSalesCommission;  \n" +
                "  \n" +
                "    SET alreadyExistQuote = 0;  \n" +
                "    IF(pIsCallFromPartMaster = 1 OR pIsPushToPartMaster = 1)  \n" +
                "    THEN  \n" +
                "		SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND isDeleted = 0 AND isHistory = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(alreadyExistQuote > 0 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 0)  \n" +
                "    THEN  \n" +
                "		SELECT alreadyExistQuote;  \n" +
                "    ELSE  \n" +
                "		IF(alreadyExistQuote > 0 AND pIsCallFromPartMaster = 1 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 1)  \n" +
                "        THEN  \n" +
                "			-- Revert Existing History with Same Quote number  \n" +
                "			UPDATE component_price_break_details  \n" +
                "					   SET isHistory = 0, updatedBy = pUserId, updateByRoleId= pRoleId, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				 WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND `type` = 2 AND isHistory = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "			-- Update Part Quote# Part Master  \n" +
                "            UPDATE component  \n" +
                "				   SET rfqNumber = pRfqQuoteNumber,rfqAssyID=v_rfqAssyID,quoteValidTillDate=v_quoteValidTill,  updatedBy = pUserId, updateByRoleId = pRoleId, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				 WHERE id = pPartId AND isDeleted = 0;  \n" +
                "  \n" +
                "            -- Return reverted record to display  \n" +
                "			SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,  \n" +
                "					x.salesCommissionPercentage, x.isHistory,x.salesCommissionNotes,x.rfqAssyID  \n" +
                "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId  \n" +
                "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0  \n" +
                "                 ORDER BY priceBreak,turnTime ASC;  \n" +
                "        ELSE  \n" +
                "			-- Return RFQ Quote Data if exists with Passed RFQQuoteNumber  \n" +
                "			CREATE TEMPORARY TABLE tempSalesCommission AS  \n" +
                "			SELECT x.requestQty priceBreak, x.turnTime, x.unitOfTime, x.assemblyTotalRfqPrice unitPrice, x.salesCommissionAmount,  \n" +
                "					CASE WHEN IFNULL(x.assemblyTotalRfqPrice,0) != 0 THEN  \n" +
                "							ROUND(((x.assemblyTotalRfqPrice - (x.assemblyTotalRfqPrice - x.salesCommissionAmount)) *100/ (x.assemblyTotalRfqPrice - x.salesCommissionAmount)),2)  \n" +
                "						END salesCommissionPercentage,  \n" +
                "						FALSE isHistory,  \n" +
                "                        NULL salesCommissionNotes,  \n" +
                "                        v_rfqAssyID rfqAssyID  \n" +
                "			  FROM (SELECT a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime,  \n" +
                "							SUM(CASE WHEN qdfm.isCommission = 1 THEN raqac.amount ELSE 0 END) salesCommissionAmount,  \n" +
                "							fun_getAssemblyRfqTotalPrice(a.id) assemblyTotalRfqPrice  \n" +
                "					  FROM rfq_assy_quotations a  \n" +
                "					  LEFT JOIN rfq_assy_quotations_additionalcost raqac ON raqac.rfqAssyQuoteID = a.id AND raqac.isDeleted = 0  \n" +
                "					  LEFT JOIN quotecharges_dynamic_fields_mst qdfm ON qdfm.id = raqac.quoteChargeDynamicFieldID AND qdfm.isCommission = 1 AND qdfm.isDeleted = 0 AND qdfm.quoteAttributeType='R'  \n" +
                "					  JOIN rfq_assy_quantity raq ON raq.id = a.rfqAssyQtyID  \n" +
                "					  JOIN rfq_assy_quantity_turn_time raqt ON raqt.id = a.rfqAssyQtyTurnTimeID  \n" +
                "					 WHERE EXISTS (SELECT 1 FROM rfq_assemblies ra WHERE ra.id = a.rfqAssyID AND a.isDeleted = 0 AND ra.partID = pPartId )  \n" +
                "					   AND EXISTS (SELECT 1 FROM rfq_assemblies_quotation_submitted b WHERE b.id = a.refSubmittedQuoteID AND b.quoteNumber = pRfqQuoteNumber)  \n" +
                "					   AND a.isDeleted = 0  \n" +
                "					 GROUP BY a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime) X;  \n" +
                "  \n" +
                "			-- Check If data have to Push into part Master from RFQ Quote  \n" +
                "			IF pIsPushToPartMaster = TRUE THEN  \n" +
                "				SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND  \n" +
                "						rfqNumber = pRfqQuoteNumber AND isDeleted = 0;  \n" +
                "				-- Check Same RFQ Quote Number Record Exist  \n" +
                "				IF(alreadyExistQuote >= 1)  \n" +
                "				THEN  \n" +
                "					-- Check Same RFQ Quote Number Record Exist Then set all record for that Quote as Delete  \n" +
                "					UPDATE component_price_break_details  \n" +
                "					SET isDeleted = 1,  \n" +
                "						isHistory = 0,  \n" +
                "						deletedBy = pUserId,  \n" +
                "						deleteByRoleId= pRoleId,  \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					 WHERE mfgPNID = pPartId  \n" +
                "					   AND `type` = 2  \n" +
                "                       AND rfqNumber = pRfqQuoteNumber  \n" +
                "					   -- and isHistory = 0  \n" +
                "					   AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "					-- Update Other Quote# record as History  \n" +
                "					UPDATE component_price_break_details  \n" +
                "						   SET  isHistory = 1,  \n" +
                "								updatedBy = pUserId,  \n" +
                "								updateByRoleId= pRoleId,  \n" +
                "								updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					 WHERE mfgPNID = pPartId  \n" +
                "					   AND rfqNumber != pRfqQuoteNumber  \n" +
                "					   AND `type` = 2  \n" +
                "					   AND isHistory = 0  \n" +
                "					   AND isDeleted = 0;  \n" +
                "				-- END IF;  \n" +
                "  \n" +
                "				-- Update Part Quote# Part Master  \n" +
                "				UPDATE component  \n" +
                "				   SET rfqNumber = pRfqQuoteNumber,  \n" +
                "						updatedBy = pUserId,  \n" +
                "						quoteValidTillDate=v_quoteValidTill,  \n" +
                "						updateByRoleId = pRoleId,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				 WHERE id = pPartId  \n" +
                "				   AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- Insert RFQ Quote Detail into Comonent Price Break Detail(sales Price Metrix)  \n" +
                "				INSERT INTO component_price_break_details  \n" +
                "						(mfgPNID, priceBreak, unitPrice, isDeleted, createdAt, createdBy, updatedAt, updatedBy, updatedOn,  \n" +
                "						createByRoleId, updateByRoleId, `type`, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, rfqNumber, isHistory,rfqAssyID)  \n" +
                "				SELECT pPartId, priceBreak, unitPrice, 0 /*isDeleted*/, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(),  \n" +
                "						pRoleId, pRoleId, 2/*type*/, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, pRfqQuoteNumber,FALSE isHistory ,rfqAssyID  \n" +
                "				 FROM tempSalesCommission;  \n" +
                "  \n" +
                "                SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,  \n" +
                "					x.salesCommissionPercentage, x.isHistory, x.salesCommissionNotes,x.rfqAssyID  \n" +
                "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId  \n" +
                "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0  \n" +
                "                 ORDER BY priceBreak,turnTime ASC;  \n" +
                "			ELSE  \n" +
                "				SELECT * FROM tempSalesCommission ORDER BY priceBreak,turnTime ASC;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderHoldUnhold` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderHoldUnhold`(  \n" +
                "	IN psalesorderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	   SELECT id,`status`,  \n" +
                "	   fun_ApplyCommonDateTimeFormatByParaValue(endDate,v_TimeZone, v_DateTimeDisplayFormat)endDate,  \n" +
                "	   reason,  \n" +
                "	   refTransid,  \n" +
                "	   resumeReason,  \n" +
                "	   holdEmployeeId,  \n" +
                "	   CASE WHEN `status`='H' THEN CONCAT(reason, ' - Halt by ',fun_getUserNameByEmployeID(holdEmployeeId),' on ', fun_ApplyCommonDateTimeFormatByParaValue(startDate,v_TimeZone, v_DateTimeDisplayFormat)) ELSE '' END reasonPO,  \n" +
                "	   unHoldEmployeeId,  \n" +
                "	   fun_getEmployeeNameByEmpID(unHoldEmployeeId) unHoldEmpName  \n" +
                "	   FROM holdunholdtrans  \n" +
                "	   WHERE refType='PO' AND refTransid IN (SELECT sd.id FROM salesorderdet sd WHERE sd.refsalesorderid=psalesorderID);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(  \n" +
                "	IN prfqAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vAssyLevel INT;  \n" +
                "DECLARE	vAssyCount INT;  \n" +
                "DECLARE vQuoteCount INT;  \n" +
                "		SELECT (MAX(psar.LEVEL)+1) INTO vAssyLevel  \n" +
                "        FROM rfq_assemblies ra  \n" +
                "        JOIN part_sub_assy_relationship psar ON psar.partID = ra.partID AND psar.isdeleted = 0  \n" +
                "        WHERE ra.id = prfqAssyID;  \n" +
                "  \n" +
                "        SELECT COUNT(1) INTO vAssyCount FROM rfq_assemblies  \n" +
                "        WHERE rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID AND isdeleted=0) AND isdeleted = 0;  \n" +
                "  \n" +
                "        SELECT COUNT(1) INTO vQuoteCount FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,c.rev AS revision,  \n" +
                "	   jt.name AS jobType, CASE WHEN c.bomLock=0 THEN '' ELSE 'BOM is locked' END bomlockStatus,  \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,  \n" +
                "       fun_getSamplePicturesUploadCount(ra.partID) sampleImageCnt, mc.mfgType AS mfgType, vAssyLevel AS assyLevel, vAssyCount AS assyCount,  \n" +
                "       ra.quoteValidTillDate,  \n" +
                "	   c.liveVersion AS liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,  \n" +
                "	   vQuoteCount AS totalQuoteCount,  \n" +
                "	   rasq.quoteNumber AS quoteNumber, rasq.bomLastVersion AS bomLastVersion, rasq.quoteSubmitDate AS quoteSubmitDate, rasq.bomInternalVersion  AS bomInternalVersion, rasq.id lastQuoteID,  \n" +
                "	   (SELECT fun_getMfgCodeAndNameByID(rf.customerid) FROM rfqforms rf WHERE id=ra.rfqrefID LIMIT 1) AS customerName,  \n" +
                "	   (CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "		 WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "	   (CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "		 WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "	 	 WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "		 WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "         (  \n" +
                "			CASE  WHEN IFNULL(ra.isSummaryComplete,0)=0 THEN  \n" +
                "			(  \n" +
                "                SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')  \n" +
                "                FROM component_standard_details csd  \n" +
                "                LEFT JOIN certificate_standards cs ON csd.certificatestandardID=cs.certificatestandardid  \n" +
                "                LEFT JOIN standard_class css ON csd.classID=css.classID WHERE csd.componentid= ra.partID AND csd.isDeleted = 0  \n" +
                "			)  \n" +
                "            ELSE  \n" +
                "            (  \n" +
                "				SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')  \n" +
                "                FROM rfq_assy_standard_class_detail csd  \n" +
                "                LEFT JOIN certificate_standards cs ON csd.standardID=cs.certificatestandardid  \n" +
                "                LEFT JOIN standard_class css ON csd.standardClassIds=css.classID  \n" +
                "                WHERE csd.refSubmittedQuoteID=(SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1)  \n" +
                "			)  \n" +
                "			END  \n" +
                "		)AS standards, ra.isActivityStart, ra.activityStartBy, c.isCustom,c.custAssyPN  \n" +
                "	   FROM rfq_assemblies ra  \n" +
                "       INNER JOIN component c ON c.id=ra.partID  \n" +
                "       INNER JOIN mfgcodemst mc ON mc.id = c.mfgCodeID  \n" +
                "       INNER JOIN rfq_assy_typemst rat ON rat.id=ra.assemblyTypeID  \n" +
                "	   INNER JOIN rfq_rohsmst rh ON rh.id=c.RoHSStatusID  \n" +
                "	   INNER JOIN jobtype jt ON jt.id = ra.jobTypeID  \n" +
                "       LEFT JOIN (SELECT id,rfqAssyID,quoteNumber,bomLastVersion,bomInternalVersion,quoteSubmitDate  \n" +
                "					FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL ORDER BY id DESC LIMIT 1) rasq ON rasq.rfqAssyID = ra.id  \n" +
                "       WHERE ra.id= prfqAssyID AND ra.isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "INSERT INTO page_detail(pageName,RO,RW,pageRoute,pageURL,menuName,hasChild,isActive,createdBy,isDisplay,displayMenuName,isAllowAsHomePage)VALUES  \n" +
                "                        ('Company Profile Company Preferences',0,0,'app.companyprofile.companypreference','/companyprofile/companypreference','Company Profile Company Preferences',0,1,1,1,'Company Profile',0);  \n" +
                "  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName='Company Profile';  \n" +
                "                    UPDATE page_detail SET parentPageID=@pageID WHERE pageName='Company Profile Company Preferences';  \n" +

                "INSERT INTO systemconfigrations(`key`,`values`,isActive,createdBy,isEditable,description,displayName) VALUES  \n" +
                "('QuoteValidTillDays',180,1,1,1,'The text which is mentioned in the value field is a day till that day quote valid from quote submitted days. Days calculate based on setting by user in Company Profile->Company Preference.','Quote Valid Till (In Days)');  \n" +
                "INSERT INTO systemconfigrations(`key`,`values`,isActive,createdBy,isEditable,description,displayName) VALUES  \n" +
                "('DefaultSOPromisedShipDateDays',7,1,1,1,'The text which is mentioned in the value field is a day till that day promised ship date calculated from promised dock date. Days calculate based on setting by user in Company Profile->Company Preference.',  \n" +
                "'Default SO Promised Ship Date Days');  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BU_rfq_assemblies` ;  \n" +
                "CREATE TRIGGER `TRG_BU_rfq_assemblies` BEFORE UPDATE ON `rfq_assemblies`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "		DECLARE vUnitOfTime VARCHAR(5);  \n" +
                "		DECLARE vQuoteValidTillDays INT;  \n" +
                "		DECLARE vQuoteValidDate DATE;  \n" +
                " IF (NEW.quoteNumber IS NOT NULL AND NEW.quoteSubmitDate IS NOT NULL AND NEW.quoteValidTillDate IS NULL) THEN  \n" +
                "  \n" +
                "		SELECT unitOfTime INTO vUnitOfTime  FROM company_info WHERE isdeleted=0;  \n" +
                "  \n" +
                "		SELECT `values` INTO vQuoteValidTillDays FROM systemconfigrations WHERE `key`='QuoteValidTillDays' AND isactive=1;  \n" +
                "  \n" +
                "		SET vQuoteValidTillDays=IFNULL(vQuoteValidTillDays,180);  \n" +
                "  \n" +
                "       IF(vUnitOfTime='D' OR vUnitOfTime IS NULL)THEN  \n" +
                "	   SELECT DATE_ADD(NEW.quoteSubmitDate, INTERVAL IFNULL(vQuoteValidTillDays,180) DAY) INTO vQuoteValidDate;  \n" +
                "	   SET	NEW.quoteValidTillDate=vQuoteValidDate;  \n" +
                "       ELSE  \n" +
                "  \n" +
                "       SELECT DATE_ADD(  \n" +
                "			NEW.quoteSubmitDate,INTERVAL CASE  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=1 THEN (vQuoteValidTillDays +(FLOOR((vQuoteValidTillDays-0.5)/5)+1)*2 - 1)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=2 THEN (vQuoteValidTillDays +(FLOOR((vQuoteValidTillDays-0.5)/5)+1)*2)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=3 THEN (vQuoteValidTillDays-1 +(FLOOR(((vQuoteValidTillDays-1)-0.5)/5)+1)*2 + 1)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=4 THEN (vQuoteValidTillDays-2 +(FLOOR(((vQuoteValidTillDays-2)-0.5)/5)+1)*2 + 2)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=5 THEN (vQuoteValidTillDays-3 +(FLOOR(((vQuoteValidTillDays-3)-0.5)/5)+1)*2 + 3)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=6 THEN (vQuoteValidTillDays-4 +(FLOOR(((vQuoteValidTillDays-4)-0.5)/5)+1)*2 + 4)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=7 THEN (vQuoteValidTillDays-5 +(FLOOR(((vQuoteValidTillDays-5)-0.5)/5)+1)*2 + 5)  \n" +
                "             END DAY  \n" +
                "		) INTO vQuoteValidDate;  \n" +
                "  \n" +
                "		SET	NEW.quoteValidTillDate=vQuoteValidDate;  \n" +
                "       END IF;  \n" +
                "  END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BU_rfq_assemblies_quotation_submitted` ;  \n" +
                "CREATE TRIGGER `TRG_BU_rfq_assemblies_quotation_submitted` BEFORE UPDATE ON `rfq_assemblies_quotation_submitted`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "		DECLARE vUnitOfTime VARCHAR(5);  \n" +
                "		DECLARE vQuoteValidTillDays INT;  \n" +
                "		DECLARE vQuoteValidDate DATE;  \n" +
                " IF (NEW.quoteNumber is not null and NEW.quoteSubmitDate is not null and NEW.quoteValidTillDate is null) THEN  \n" +
                "  \n" +
                "		SELECT unitOfTime into vUnitOfTime  FROM company_info where isdeleted=0;  \n" +
                "  \n" +
                "		SELECT `values` into vQuoteValidTillDays FROM systemconfigrations where `key`='QuoteValidTillDays' and isactive=1;  \n" +
                "  \n" +
                "		set vQuoteValidTillDays=ifnull(vQuoteValidTillDays,180);  \n" +
                "  \n" +
                "       if(vUnitOfTime='D' or vUnitOfTime is null)then  \n" +
                "	   SELECT DATE_ADD(NEW.quoteSubmitDate, INTERVAL ifnull(vQuoteValidTillDays,180) DAY) into vQuoteValidDate;  \n" +
                "	   SET	NEW.quoteValidTillDate=vQuoteValidDate;  \n" +
                "       else  \n" +
                "  \n" +
                "       SELECT DATE_ADD(  \n" +
                "			NEW.quoteSubmitDate,INTERVAL CASE  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=1 THEN (vQuoteValidTillDays +(FLOOR((vQuoteValidTillDays-0.5)/5)+1)*2 - 1)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=2 THEN (vQuoteValidTillDays +(FLOOR((vQuoteValidTillDays-0.5)/5)+1)*2)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=3 THEN (vQuoteValidTillDays-1 +(FLOOR(((vQuoteValidTillDays-1)-0.5)/5)+1)*2 + 1)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=4 THEN (vQuoteValidTillDays-2 +(FLOOR(((vQuoteValidTillDays-2)-0.5)/5)+1)*2 + 2)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=5 THEN (vQuoteValidTillDays-3 +(FLOOR(((vQuoteValidTillDays-3)-0.5)/5)+1)*2 + 3)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=6 THEN (vQuoteValidTillDays-4 +(FLOOR(((vQuoteValidTillDays-4)-0.5)/5)+1)*2 + 4)  \n" +
                "                  WHEN DAYOFWEEK(NEW.quoteSubmitDate)=7 THEN (vQuoteValidTillDays-5 +(FLOOR(((vQuoteValidTillDays-5)-0.5)/5)+1)*2 + 5)  \n" +
                "             END DAY  \n" +
                "		) INTO vQuoteValidDate;  \n" +
                "  \n" +
                "		SET	NEW.quoteValidTillDate=vQuoteValidDate;  \n" +
                "       end if;  \n" +
                "  END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_rfq_assemblies` ;  \n" +
                "CREATE TRIGGER `Trg_AU_rfq_assemblies` AFTER UPDATE ON `rfq_assemblies`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "  \n" +
                "    IF(NEW.quoteInDate != OLD.quoteInDate) THEN  \n" +
                "	UPDATE rfq_assemblies_quotation_submitted SET quoteInDate = NEW.quoteInDate WHERE rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    IF(NEW.quoteDueDate != OLD.quoteDueDate) THEN  \n" +
                "	UPDATE rfq_assemblies_quotation_submitted SET quoteDueDate = NEW.quoteDueDate WHERE rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    IF(NEW.isDeleted != OLD.isDeleted) THEN  \n" +
                "	UPDATE rfq_assemblies_quotation_submitted SET isDeleted = NEW.isDeleted, deletedBy=NEW.deletedBy, deletedAt = fun_DatetimetoUTCDateTime() WHERE rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.reason,\"\") != IFNULL(NEW.reason,\"\") THEN  \n" +
                "       INSERT INTO rfq_assemblies_history  \n" +
                "		(refRfqId,					Colname,				Oldval,  \n" +
                "		 Newval,					createdBy,				createdAt)  \n" +
                "	VALUES(NEW.id,					'Quote Reason',			OLD.reason,  \n" +
                "		 NEW.reason,	 			NEW.updatedBy,		NEW.updatedAt);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.status,\"\") != IFNULL(NEW.status,\"\") THEN  \n" +
                "		IF OLD.status IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.status = 3 THEN  \n" +
                "										'Won'  \n" +
                "								WHEN OLD.status = 4 THEN  \n" +
                "										'Lost'  \n" +
                "								WHEN OLD.status = 5 THEN  \n" +
                "										'Canceled'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "        IF NEW.status IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.status = 3 THEN  \n" +
                "										'Won'  \n" +
                "								WHEN NEW.status = 4 THEN  \n" +
                "										'Lost'  \n" +
                "								WHEN NEW.status = 5 THEN  \n" +
                "										'Canceled'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	IF IFNULL(pOldValue,\"\") != IFNULL(pNewValue,\"\") THEN  \n" +
                "	       INSERT INTO rfq_assemblies_history  \n" +
                "			(refRfqId,					Colname,				Oldval,  \n" +
                "			 Newval,					createdBy,				createdAt)  \n" +
                "		VALUES(NEW.id,					'Completed Status',		pOldValue,  \n" +
                "			 pNewValue,	 				NEW.updatedBy,		NEW.updatedAt);  \n" +
                "	END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.winQuantity,\"\") != IFNULL(NEW.winQuantity,\"\") THEN  \n" +
                "       INSERT INTO rfq_assemblies_history  \n" +
                "		(refRfqId,					Colname,				Oldval,  \n" +
                "		 Newval,					createdBy,				createdAt)  \n" +
                "	VALUES(NEW.id,					'Win Quantity',			CAST(FORMAT(OLD.winQuantity,0) AS CHAR),  \n" +
                "		 CAST(FORMAT(NEW.winQuantity,0) AS CHAR),	 		NEW.updatedBy,		NEW.updatedAt);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.winPrice,\"\") != IFNULL(NEW.winPrice,\"\") THEN  \n" +
                "       INSERT INTO rfq_assemblies_history  \n" +
                "		(refRfqId,					Colname,				Oldval,  \n" +
                "		 Newval,					createdBy,				createdAt)  \n" +
                "	VALUES(NEW.id,					'Win Price',			CAST(FORMAT(OLD.winPrice,2) AS CHAR),  \n" +
                "		 CAST(FORMAT(NEW.winPrice,2) AS CHAR),	 			NEW.updatedBy,		NEW.updatedAt);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    if(NEW.quoteValidTillDate is not null)then  \n" +
                "    update rfq_assemblies_quotation_submitted set quoteValidTillDate=NEW.quoteValidTillDate where rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "    end if;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                "	IN pJobTypeIds VARCHAR(16383),  \n" +
                "	IN pAssyIds VARCHAR(16383),  \n" +
                "	IN pAssyNicknameIds LONGTEXT,  \n" +
                "	IN pIsExportControlled TINYINT,  \n" +
                "	IN pIsQuoteOverdue TINYINT,  \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pOlderThenDays INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "        DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		   (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		 (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                "        (CASE  \n" +
                "        WHEN rfq_statusID = 1 THEN  \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                "				quoteSubmitDate > quoteDueDate  \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				quoteClosedDate	> quoteDueDate  \n" +
                "            END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF; */  \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "            ra.isCustomPartDetShowInReport,  \n" +
                "            ra.quoteValidTillDate,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN fun_getUserNameByID(part.activityStartBy) ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') activityStartAt,  \n" +
                "			part.activityStartAt activityStartAtDateTime,  \n" +
                "            ra.isActivityStart as isCostingActivityStart, (CASE WHEN ra.isActivityStart THEN fun_getUserNameByID(ra.activityStartBy) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') costingActivityStartAt,  \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "		WHERE rf.isdeleted = 0  \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                "		else 1=1 end)  \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                "	EXECUTE RFQquery1;  \n" +
                "	DEALLOCATE PREPARE RFQquery1;  \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                "	EXECUTE RFQquery2;  \n" +
                "	DEALLOCATE PREPARE RFQquery2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyQuoteSummary` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyQuoteSummary`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "    START TRANSACTION;  \n" +
                "# copy  rfq_assy_quotations Detail with null ref submitted id  \n" +
                "		INSERT INTO `rfq_assy_quotations`  \n" +
                "		(`rfqAssyID`,`rfqAssyQtyID`,`rfqAssyQtyTurnTimeID`,`requestedQty`,`turnTime`,`timeType`,`unitPrice`,`materialCost`,`materialDays`,`total`,  \n" +
                "        `createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`excessQtyTotalPrice`,`days`,`nreCost`,`nreDays`,`toolingCost`,`toolingDays`,`laborCost`,`laborDays`,  \n" +
                "        `laborunitPrice`,`laborday`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`,`createByRoleId`,`updateByRoleId`, `overheadCost`,`overheadDays`, `allCost`, `allDays`,  \n" +
                "        `overheadUnitPrice`,`overheadDay`, `manualTurnTime`, `manualTurnType`)  \n" +
                "		SELECT rfqAssyID, rfqAssyQtyID, rfqAssyQtyTurnTimeID, requestedQty, turnTime, timeType, unitPrice, materialCost, materialDays, total,  \n" +
                "		pUserID AS `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID AS `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`, excessQtyTotalPrice, days,  \n" +
                "        aq.nreCost, aq.nreDays, aq.toolingCost, aq.toolingDays, laborCost, laborDays, laborunitPrice, laborday, rfqPriceGroupId, rfqPriceGroupDetailId,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`, aq.`overheadCost`, aq.`overheadDays`, aq.`allCost`, aq.`allDays`,aq.`overheadUnitPrice`,aq.`overheadDay`,  \n" +
                "        aq.`manualTurnTime`, aq.`manualTurnType`  \n" +
                "        FROM rfq_assy_quotations aq  \n" +
                "		WHERE aq.rfqAssyID = prfqAssyID AND aq.isDeleted = 0  \n" +
                "        AND aq.refSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1);  \n" +
                "	# copy  rfq_assy_quotations_customparts details for new generated quotaion records  \n" +
                "		INSERT INTO `rfq_assy_quotations_customparts`  \n" +
                "		(`rfqAssyQuoteId`,`mfgPNID`,`unitPrice`,`totalPrice`,`leadTimeDays`,`totalLeadTimeDays`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT raqn.id `rfqAssyQuoteID`, raqc.mfgPNID, raqc.unitPrice, raqc.totalPrice, raqc.leadTimeDays, raqc.totalLeadTimeDays,  \n" +
                "		pUserID AS `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID AS `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`, pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "		FROM rfq_assy_quotations_customparts raqc  \n" +
                "		JOIN rfq_assy_quotations raq ON raqc.rfqAssyQuoteID = raq.id AND raq.rfqAssyID = prfqAssyID AND raq.isDeleted = 0  \n" +
                "		AND refSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                "		LEFT JOIN rfq_assy_quotations raqn ON raqn.rfqAssyQtyID = raq.rfqAssyQtyID AND raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID AND raqn.refSubmittedQuoteID IS NULL  \n" +
                "		WHERE raqc.isDeleted = 0;  \n" +
                "# Copy rfq_assy_quotations_additionalcost details for new generated quotaion records  \n" +
                "/*        INSERT INTO `rfq_assy_quotations_additionalcost`  \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,  \n" +
                "        `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`,`toolingQty`)  \n" +
                "		select raqn.id `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,  \n" +
                "        pUserID `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() as `updatedAt`, raqa.`days`,raqa.`toolingQty`  \n" +
                "        from rfq_assy_quotations_additionalcost raqa  \n" +
                "		join rfq_assy_quotations raq on raqa.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0  \n" +
                "		and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and quoteNumber is not null order by id desc limit 1)  \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL  \n" +
                "        where raqa.isDeleted = 0;  \n" +
                "  */  \n" +
                "        INSERT INTO `rfq_assy_quotations_additionalcost`  \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,  \n" +
                "       `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`,`toolingQty`, `refCustomPartQuoteID`, `createByRoleId`, `updateByRoleId`)  \n" +
                "		SELECT raqn.id `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,  \n" +
                "		pUserID `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`, raqa.`days`, raqa.`toolingQty`,  \n" +
                "        (SELECT id FROM rfq_assy_quotations_customparts WHERE rfqAssyQuoteID = raqn.id AND mfgPNID = (SELECT mfgPNID FROM rfq_assy_quotations_customparts WHERE id = raqa.refCustomPartQuoteID)) AS `refCustomPartQuoteID`,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "		FROM rfq_assy_quotations_additionalcost raqa  \n" +
                "		JOIN rfq_assy_quotations raq ON raqa.rfqAssyQuoteID = raq.id AND raq.rfqAssyID = prfqAssyID AND raq.isDeleted = 0  \n" +
                "			AND refSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                "		LEFT JOIN rfq_assy_quotations raqn ON raqn.rfqAssyQtyID = raq.rfqAssyQtyID AND raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID AND raqn.refSubmittedQuoteID IS NULL  \n" +
                "		WHERE raqa.isDeleted = 0;  \n" +
                "  \n" +
                "# update rfq_assembly details  \n" +
                "       UPDATE rfq_assemblies ra,  \n" +
                "			(SELECT DATE_ADD(CURRENT_TIMESTAMP(), INTERVAL TIMESTAMPDIFF(DAY,quoteInDate,quoteDueDate) DAY) AS duedate  \n" +
                "			FROM rfq_assemblies WHERE id=prfqAssyID) ran  \n" +
                "		SET ra.isSummaryComplete = FALSE, ra.quoteSubmittedBy = NULL, ra.status = 1, ra.quoteFinalStatus = 2, ra.quoteNumber = NULL, ra.quoteSubmitDate = NULL,ra.quoteValidTillDate=NULL, ra.updatedAt = CURRENT_TIMESTAMP(),  \n" +
                "		ra.quoteInDate = CURRENT_TIMESTAMP(), ra.quoteDueDate = ran.duedate,updatedBy = prfqAssyID  \n" +
                "		WHERE ra.id = prfqAssyID;  \n" +
                "  \n" +
                "# insert in rfq_assemblies_quotation_submitted for quote preview  \n" +
                "		INSERT INTO `rfq_assemblies_quotation_submitted`  \n" +
                "		(`rfqAssyID`, `quoteInDate`, `quoteDueDate`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`,  \n" +
                "		`custBillingAddressID`, `custShippingAddressID`, `custTermsID`, `createByRoleId`, `updateByRoleId`)  \n" +
                "		SELECT ra.id `rfqAssyID`, ra.quoteInDate `quoteInDate`, ra.quoteDueDate `quoteDueDate`, pUserID AS `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID AS `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`,  \n" +
                "		(SELECT custBillingAddressID FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1) AS `custBillingAddressID`,  \n" +
                "		(SELECT custShippingAddressID FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1) AS `custShippingAddressID`,  \n" +
                "		(SELECT custTermsID FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1) AS `custTermsID`,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "		FROM rfq_assemblies ra  \n" +
                "		WHERE ra.id = prfqAssyID;  \n" +
                "  \n" +
                "# insert rfq_assy_quote_submitted_termsconditions as selected in erlier history  \n" +
                "		INSERT INTO `rfq_assy_quote_submitted_termsconditions`  \n" +
                "		(`RefSubmittedQuoteID`, `termsconditionCatID`, `termsconditionTypeValueID`, `note`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `createByRoleId`, `updateByRoleId`)  \n" +
                "		SELECT (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NULL ORDER BY id DESC LIMIT 1) `RefSubmittedQuoteID`,  \n" +
                "		`termsconditionCatID`, `termsconditionTypeValueID`, `note`, pUserID `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`,pUserID `updatedBy`,fun_DatetimetoUTCDateTime() AS `updatedAt`,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "		FROM rfq_assy_quote_submitted_termsconditions  \n" +
                "		WHERE isDeleted = 0 AND RefSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE quoteNumber IS NOT NULL AND rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1);  \n" +
                "# Insert Issue require customer engineering resolution in to new Quote submitted  \n" +
                "		INSERT INTO `rfq_quote_issue_history`  \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`PIDCode`,`lineID`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`, `createByRoleId`, `updateByRoleId`)  \n" +
                "        SELECT (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NULL) AS refSubmittedQuoteID,  \n" +
                "        prfqAssyID AS `rfqAssyID`, \"CustomerEngineeringResolution\" AS `issueType`,`PIDCode`,`lineID`,`BOMIssue`,  \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "        FROM rfq_quote_issue_history  \n" +
                "        WHERE isDeleted =0 AND issueType = \"CustomerEngineeringResolution\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE quoteNumber IS NOT NULL AND rfqAssyID = prfqAssyID);  \n" +
                "  \n" +
                "  SELECT * FROM rfq_assy_quotations WHERE rfqAssyID = prfqAssyID AND isDeleted = 0 AND refSubmittedQuoteID IS NULL;  \n" +
                "  SELECT * FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                " COMMIT;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSoRequestedPromisedDatefromDockDate` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSoRequestedPromisedDatefromDockDate`(  \n" +
                "	IN pdockDate DATE  \n" +
                "  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE vUnitOfTime VARCHAR(5);  \n" +
                "		DECLARE vPromisedShipDateDays INT;  \n" +
                "		DECLARE vPromisedShipDate DATE;  \n" +
                "  \n" +
                "		SELECT unitOfTime INTO vUnitOfTime  FROM company_info WHERE isdeleted=0;  \n" +
                "  \n" +
                "		SELECT `values` INTO vPromisedShipDateDays FROM systemconfigrations WHERE `key`='DefaultSOPromisedShipDateDays' AND isactive=1;  \n" +
                "  \n" +
                "		SET vPromisedShipDateDays=IFNULL(vPromisedShipDateDays,7);  \n" +
                "  \n" +
                "		IF(vUnitOfTime='D' OR vUnitOfTime IS NULL)THEN  \n" +
                "			SELECT DATE_ADD(pdockDate, INTERVAL vPromisedShipDateDays DAY) INTO vPromisedShipDate;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			SET vPromisedShipDate=pdockDate;  \n" +
                "				WHILE(vPromisedShipDateDays>0) DO  \n" +
                "					IF (WEEKDAY(vPromisedShipDate) < 4 OR WEEKDAY(vPromisedShipDate)=6) THEN  \n" +
                "						SELECT  DATE_SUB(vPromisedShipDate, INTERVAL 1 DAY) INTO vPromisedShipDate;  \n" +
                "						SET vPromisedShipDateDays=vPromisedShipDateDays-1;  \n" +
                "					ELSE  \n" +
                "						SELECT  DATE_SUB(vPromisedShipDate, INTERVAL 1 DAY) INTO vPromisedShipDate;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "				END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT vPromisedShipDate;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWinOrFollowRfqQuoteGroup` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWinOrFollowRfqQuoteGroup`(  \n" +
                "	IN ppartID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "     SELECT ra.id rfqAssyID,ra.rfqrefID,ra.status,ra.partID,ra.quoteNumber,ra.quoteValidTillDate  \n" +
                "     FROM rfq_assemblies ra  \n" +
                "	 WHERE  ra.partID=ppartID AND  \n" +
                "		   ra.status IN (2,3) AND  \n" +
                "           ra.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyQtyTurntimeByAssyID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyQtyTurntimeByAssyID`(  \n" +
                "	IN ppartid INT,  \n" +
                "    IN plineId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  declare vIsDeleted tinyint;  \n" +
                "  \n" +
                "	if (plineId > 0) then  \n" +
                "		select a.isDeleted into vIsDeleted  \n" +
                "		  from component_price_break_details  a  \n" +
                "		 where `type` = 2  \n" +
                "		   and (select 1 from salesorderdet d where a.id = d.refAssyQtyTurnTimeID and d.id = plineId)/*added to get delete data in case of edit*/  \n" +
                "		   and mfgPNID = ppartid;  \n" +
                "     end if;  \n" +
                "  \n" +
                "     if (vIsDeleted = 1) then  \n" +
                "		select a.id, CONCAT(\"(\",priceBreak,\") \",turnTime,\" \",fun_getRFQUnitOfTime(unitoftime)) qtyTurnTime, a.rfqNumber, a.priceBreak, a.unitPrice,c.quoteValidTillDate  \n" +
                "		  from component_price_break_details  a  JOIN component c ON c.id=a.mfgPNID  \n" +
                "		 where `type` = 2  \n" +
                "		   and (select 1 from salesorderdet d where a.id = d.refAssyQtyTurnTimeID and d.id = plineId)/*added to get delete data in case of edit*/  \n" +
                "		   and mfgPNID = ppartid  \n" +
                "		 order by qtyTurnTime;  \n" +
                "     else  \n" +
                "		select a.id, CONCAT(\"(\",priceBreak,\") \",turnTime,\" \",fun_getRFQUnitOfTime(unitoftime)) qtyTurnTime, a.rfqNumber, a.priceBreak, a.unitPrice,c.quoteValidTillDate  \n" +
                "		  from component_price_break_details  a   join component c on c.id=a.mfgPNID  \n" +
                "		 where `type` = 2  \n" +
                "		   and a.isDeleted = 0  \n" +
                "           and isHistory = 0  \n" +
                "		   and mfgPNID = ppartid  \n" +
                "		 order by qtyTurnTime;  \n" +
                "    end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCurrentQuoteStatusForCommission` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCurrentQuoteStatusForCommission`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "        IN pPartID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	declare v_quoteValidTillDate date;  \n" +
                "  \n" +
                "	if(prfqAssyID is not null) then  \n" +
                "  \n" +
                "		SELECT quoteValidTillDate into v_quoteValidTillDate FROM rfq_assemblies WHERE id=prfqAssyID;  \n" +
                "	else  \n" +
                "		SELECT quoteValidTillDate INTO v_quoteValidTillDate FROM component WHERE id=pPartID;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	select case when current_date>ifnull(v_quoteValidTillDate,CURRENT_DATE) then 'Expired' else 'Active' end as quoteStatus;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4999,'2.00','V1',' Alter Commission Procedures - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4999:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021 *********************************** */
                "drop procedure if exists `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(                                                      \n" +
                "	IN ppageIndex INT,        \n" +
                "	IN precordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pIsMFG TINYINT,        \n" +
                "    IN pMfgCodeIDs LONGTEXT,        \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,        \n" +
                "    IN pPackagingIDs LONGTEXT,        \n" +
                "    IN pPackageIDs LONGTEXT,        \n" +
                "    IN pPartStatusIDs LONGTEXT,        \n" +
                "    IN pMountingTypeIDs LONGTEXT,        \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,        \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,        \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,        \n" +
                "    IN pAttributesSearchHeader LONGTEXT,        \n" +
                "    IN pAttributesSearch LONGTEXT,        \n" +
                "    IN pPackagingAlias TEXT,        \n" +
                "    IN pAlternatePart TEXT,        \n" +
                "    IN pRoHSAlternatePart TEXT,        \n" +
                "    IN pPartUsedInAssembly TEXT,        \n" +
                "    IN pMultiplePartNumbers LONGTEXT,        \n" +
                "    IN pStockQuantity TEXT,        \n" +
                "    IN pPartTypeIDs LONGTEXT,        \n" +
                "    IN pCertificateStandardsIds LONGTEXT,        \n" +
                "    IN pStandardsClassIds LONGTEXT,        \n" +
                "    IN pAssemblyIds LONGTEXT,        \n" +
                "    IN pAssemblyTypeIds LONGTEXT,        \n" +
                "    IN pRohsIds LONGTEXT,        \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,        \n" +
                "    IN pOperationalAttributeIds LONGTEXT,        \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,        \n" +
                "    IN pComponentOrdering TEXT,        \n" +
                "    IN pComponentUsageCriteria TEXT,        \n" +
                "    IN pIsRefreshMasterFilters TINYINT,        \n" +
                "    IN pFromDate DATE,        \n" +
                "    IN pToDate DATE,        \n" +
                "    IN pIsReversal TINYINT,        \n" +
                "    IN pIsBOMActivityStarted TINYINT,        \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,        \n" +
                "    IN pIsSearchFromHeader TINYINT,        \n" +
                "    IN pIsExportControl TINYINT,        \n" +
                "    IN pObsoleteDate DATE,        \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,        \n" +
                "    IN pFromCreatedOnDate DATE,        \n" +
                "    IN pToCreatedOnDate DATE,        \n" +
                "    IN pIsIdenticalMfrPN TINYINT,        \n" +
                "    IN pIsProductionPNEmpty TINYINT,        \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,        \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,        \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),        \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,        \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,        \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,        \n" +
                "    IN pIsRestrictUsePermanently TINYINT,        \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT        \n" +
                "    )  \n" +
                "BEGIN                                                      \n" +
                "	DECLARE pOffset INT;                                                       \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                  \n" +
                "    DECLARE attributeSearchString LONGTEXT;                                                                  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;                                                                  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                                  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                                                                  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);                                                                  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);                                                                  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                     \n" +
                "    DECLARE vTimeZone VARCHAR(50);              \n" +
                "    DECLARE vCurrentSession datetime;        \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;             \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                            \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;          \n" +
                "  \n" +
                "  SET @SQLStatement1=\"                                                                          \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode        \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink        \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock        \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit        \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating        \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp        \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category      \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently        \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt        \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean        \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,                                                       \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,      \n" +
                "		gc.name AS partStatusValue,                                                      \n" +
                "        gc.displayOrder parStatusDisplayOrder,                                                      \n" +
                "		mf.mfgType \";                                                          \n" +
                "	IF pIsMFG = TRUE THEN                                                      \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                          \n" +
                "			null AliasMFGPN,                                                          \n" +
                "			null AliasMFGCode,                                                      \n" +
                "			null AliasMFGCodeID,                                                      \n" +
                "			null AliascompID,                                                      \n" +
                "			null AliasMFGName,                                                      \n" +
                "            null AliasMFGDisplayOrder\");                                                       \n" +
                "    ELSE                                                      \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                          \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/                                                          \n" +
                "         vu_co.MFGPN AliasMFGPN,    \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,                                                      \n" +
                "        mfc.id AliasMFGCodeID,                                                      \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,                                                      \n" +
                "        mfc.mfgName as AliasMFGName,                                                      \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");                                                       \n" +
                "	END IF;                                                          \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                          \n" +
                "		ro.name AS `rohsComplientConvertedValue`,                                                        \n" +
                "        ro.displayOrder rohsDisplayOrder,                                                      \n" +
                "		ro.rohsIcon AS `rohsIcon`,                                                          \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'                                                          \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'                                                          \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'                                                          \n" +
                "					ELSE '' END) AS `isGoodPartValue`,                                                          \n" +
                "		case when co.isCustom = 1 then                                                      \n" +
                "				'Yes'                                                      \n" +
                "			else 'No' end as isCustomValue,                                                           \n" +
                "		case when co.isCPN = 1 then                                                      \n" +
                "				'Yes'                                                      \n" +
                "			else 'No' end as isCPNValue,                                                      \n" +
                "		pt.partTypeName functionalCategoryName,                                                          \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,                                                      \n" +
                "		mt.name mountingTypeName,                                                          \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,                                                      \n" +
                "		pc.categoryName,      \n" +
                "		rct.name connecterTypeName,                                                          \n" +
                "		u.unitName,                                                          \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,                                                          \n" +
                "		pck.name packagingName,                                                          \n" +
                "        pck.displayOrder packagingDisplayOrder,                                                      \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'                                                          \n" +
                "					ELSE 'No' END) AS `reversalPart`, 	            \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,            \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,        \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,         \n" +
                "		rc.name as createdbyRoleValue,        \n" +
                "		ru.name as updatedbyRoleValue,                \n" +
                "        co.createdAt,        \n" +
                " 		co.updatedAt,        \n" +
                "        co.updatedAtApi,             \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'                                                          \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,                                                          \n" +
                "        pct.name packageCaseTypeValue,                                                          \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			fun_getSamplePicturesUploadCount(co.id)                                                          \n" +
                "		end uploadedSamplePicturesCount,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			vurfass.count                                                         \n" +
                "		end assemblyCount,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			 vurline.lineCount                                                    \n" +
                "		end bomLineCount,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			vurfass.quoteProgress                                                          \n" +
                "		end quoteProgress,                                                    \n" +
                "		CASE when co.category = 3 then                                                          \n" +
                "		 	vurfass.id        \n" +
                "		END rfqAssyID,                                                      \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,                                                          \n" +
                "		case when co.isActivityStart=true then                                                          \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')                                                          \n" +
                "			else null end activityStartTime,                                                          \n" +
                "		rat.name assemblyTypeName,                                \n" +
                "		CASE when co.frequency = 1 then                                                          \n" +
                "		 	'Every' when    co.frequency = 2 then                                   \n" +
                "		 	'First' when  co.frequency = 3 then                                 \n" +
                "		 	'Last' else ''                                                         \n" +
                "		END frequencyName,                                      \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,                              \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,                  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,                \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,                \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,          \n" +
                "        vucomstd.certificatelist\");                                                          \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");                                                          \n" +
                "	ELSE                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");                                                          \n" +
                "	END IF;                                                          \n" +
                "    IF pComponentOrdering = 'USAGE' THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");                                    \n" +
                "	ELSE                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");                                    \n" +
                "	END IF;                                                          \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)                                                          \n" +
                "													  from eco_request ec                                                          \n" +
                "													 where ec.isdeleted = 0                                                          \n" +
                "													   and ec.finalstatus = 'P'                                                          \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");                                    \n" +
                "	ELSE                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");                                    \n" +
                "	END IF;                                                     \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");                                    \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");                                    \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"                                                          \n" +
                "	FROM component co               \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType                                                          \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id                                                              \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus                                                              \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id                                                              \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                                                              \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                                                              \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID                                      \n" +
                " 		JOIN uoms u ON u.id = co.uom                                                          \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID                                                          \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID                                                          \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy                                                          \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType                                                          \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID                 \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId                \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId                    \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id        \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy        \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy                                                                \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId          \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId              \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id        \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");                                                       \n" +
                "    IF pIsMFG = FALSE THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                    \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId     \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");                                                    \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                    \n" +
                "    WHERE co.isdeleted = 0 \");                                                    \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN                                                    \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');                                                    \n" +
                "    ELSE                                                    \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');                                                    \n" +
                "    END IF;                                                    \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')                        \n" +
                "    THEN                        \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')                        \n" +
                "        THEN                          \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');                        \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')                        \n" +
                "        THEN                        \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');                        \n" +
                "		ELSE                                \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');                        \n" +
                "        END IF;                        \n" +
                "    END IF;                            \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                    \n" +
                "		IF pComponentOrdering = 'MFG' THEN                                                    \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                    \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);                                                    \n" +
                "            END IF;                                                    \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN                                                    \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                    \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);                                                    \n" +
                "			END IF;                                                    \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN                                                    \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);                                                    \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN                                                    \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);                                                    \n" +
                "		END IF;                                                    \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                    \n" +
                "	ELSE                                                    \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;                                                    \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                          \n" +
                "		SET pWhereClause = '1=1' ;                                                                          \n" +
                "	END IF;                                                                          \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                      \n" +
                "	ELSE                                                      \n" +
                "		SET rowNumWhere = '';                                                      \n" +
                "	END IF;                                                      \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN                                                      \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');                                                      \n" +
                "    END IF;                                                      \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN                                                      \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');                                                      \n" +
                "    END IF;                                                      \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');                                                                          \n" +
                "    END IF;                          \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');                                                                          \n" +
                "    END IF;                            \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN                                                                          \n" +
                "		IF pIsMFG = TRUE THEN                                                                          \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )                                                                        \n" +
                "																OR exists (select 1 from component_otherpn cp                                                                        \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                        \n" +
                "																)');                                                                          \n" +
                "		ELSE                                                                          \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )                                                                          \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID                                                        \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                        \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))                                                                        \n" +
                "                                                                OR exists (select 1 from component_otherpn cp                                                                        \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                        \n" +
                "                                                                )');                                                                          \n" +
                "        END IF;                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND                                                                          \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                          \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');                                                                          \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                              \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                              \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');                                                              \n" +
                "    END IF;                                                              \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');                                                                          \n" +
                "    END IF;                                            \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');                                                                          \n" +
                "    END IF;                                            \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN                                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');                                                                \n" +
                "    END IF;                                            \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN                                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');                                                                \n" +
                "    END IF;                                            \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');                                            \n" +
                "    END IF;                                            \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN                                                                  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");                                                                  \n" +
                "    END IF;                                      \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN                                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');                                                                \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                            \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');                                      \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                      \n" +
                "    END IF;                                      \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');                                    \n" +
                "    END IF;                                    \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd                                                                         \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false                                                                         \n" +
                "														 and cd.deletedat is null                                                                         \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');                                                                        \n" +
                "    END IF;                                  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN                                  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd                                  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false                                  \n" +
                "														 and cd.deletedat is null                                  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');                                  \n" +
                "    END IF;                                  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca                                                                        \n" +
                "														  where ca.isdeleted = false                                                                        \n" +
                "															and ca.deletedat is null                                                                        \n" +
                "															and ca.refComponentID = co.id                                                                        \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');                                                                        \n" +
                "    END IF;                                                                          \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE || pIsRestrictPackagingUseWithpermission = true || pIsRestrictUsePermanently = true || pIsRestrictPackagingUsePermanently = true)          \n" +
                "    THEN                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');          \n" +
                "        set @restricStatement = '';          \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN                                                                \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN                                                                \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');          \n" +
                "		END IF;          \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN                                                                \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');          \n" +
                "		END IF;          \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN                                                                \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');                                                            \n" +
                "		END IF;          \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');          \n" +
                "    END IF;          \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                    \n" +
                "																		AND isdeleted = 0                                                                   \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                                    \n" +
                "																		AND isdeleted = 0                                                                  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');                                                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                                                                        \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          IF pIsMFG = FALSE THEN                                                                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc                                                                         \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID                                                         \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                         \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )                                                                        \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))                                                                        \n" +
                "																		');                                                                          \n" +
                "          END IF;                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');                       \n" +
                "    END IF;                                                                  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                                                                  \n" +
                "		SET attributeSearchString = pAttributesSearch;                                                                  \n" +
                "       do_this:                                                                  \n" +
                "	  LOOP                                                                  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);                            \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);                            \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);                            \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);                            \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                    \n" +
                "																		AND isdeleted = 0                            \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                            \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                                   \n" +
                "																		AND  isdeleted = 0                            \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                            \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');                            \n" +
                "          /*IF pIsMFG = FALSE THEN                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');                            \n" +
                "          END IF;  */                            \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN                            \n" +
                "		  LEAVE do_this;                            \n" +
                "		END IF;                            \n" +
                "	  END LOOP do_this;                            \n" +
                "    END IF;                            \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN                            \n" +
                "		IF (pPackagingAlias = '1') THEN                            \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');                            \n" +
                "		ELSE                            \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');                            \n" +
                "		END IF;                            \n" +
                "	END IF;                            \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN                            \n" +
                "			IF (pAlternatePart = '1') THEN                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');                            \n" +
                "			ELSE                                                                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');                            \n" +
                "			END IF;                            \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');                            \n" +
                "		END IF;                            \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN                            \n" +
                "			IF (pRoHSAlternatePart = '1') THEN                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');                            \n" +
                "			ELSE                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');                            \n" +
                "			END IF;                            \n" +
                "		END IF;                            \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN                            \n" +
                "			SET vPartUsedInAssemblyExists = \" \";                            \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";                            \n" +
                "			IF (pPartUsedInAssembly = '1') THEN                            \n" +
                "				SET vPartUsedInAssemblyExists = \" \";                            \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";                            \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN                            \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";                            \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";                            \n" +
                "            END IF;                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2                            \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                            \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                            \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');                            \n" +
                "  \n" +
                "		END IF;                                    \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);                                    \n" +
                "	END IF;                                    \n" +
                "   IF pIsExportControl = 1 THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');                                    \n" +
                "   END IF;                                    \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');                        \n" +
                "	END IF;        \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;        \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData        \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,            \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,                                                    \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,                                                    \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue            \n" +
                "									from ( \", @SQLStatement1,\" ) c                                    \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);                                    \n" +
                "    /*main query create temp table*/         \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;           \n" +
                "  /* to get total count of rows */                                    \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);                            \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");             \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                     \n" +
                "	DEALLOCATE PREPARE query2;  */           \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");                                    \n" +
                "    /*main query create temp table*/         \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                 \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN                                    \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,                                    \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                    \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                    \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                    \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                    \n" +
                "											partType,categoryName,                                    \n" +
                "											functionalCategoryText,                                    \n" +
                "											mountingTypeText,                                    \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                    \n" +
                "											  rohsText,                                    \n" +
                "                                            AliasMFGCodeID,                                    \n" +
                "                                            AliasMFGCode,                                    \n" +
                "                                            AliasMFGName,                                    \n" +
                "                                            AliasMFGDisplayOrder,                                                                    \n" +
                "                                            packageCaseTypeValue,                        \n" +
                "                                            partPackageID                        \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"                                    \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,                                    \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                    \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                    \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                    \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                    \n" +
                "											partType,categoryName,                                    \n" +
                "											functionalCategoryText,                                    \n" +
                "											mountingTypeText,                                    \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                    \n" +
                "											  rohsText,                                                      \n" +
                "                                            AliasMFGCodeID,                                                      \n" +
                "                                            AliasMFGCode,                                                      \n" +
                "                                            AliasMFGName,                                                      \n" +
                "                                            AliasMFGDisplayOrder,                        \n" +
                "                                            packageCaseTypeValue,                        \n" +
                "                                            partPackageID\");                                         \n" +
                "		 PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;                                                \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )                                                          \n" +
                "									select * from                                                          \n" +
                "										(select case when stdc.classID is not null then                                                          \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)                                                          \n" +
                "													else cs.certificateStandardID end certificateStandardID,                                                          \n" +
                "												case when stdc.classID is not null then                                                          \n" +
                "													concat(cs.fullName,' ',stdc.classname)                                                          \n" +
                "													else cs.fullName end fullName,                                                          \n" +
                "												cs.displayOrder                                                          \n" +
                "										  from certificate_standards cs                                                          \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID                                                          \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID                                                          \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)                                                          \n" +
                "										) a group by certificateStandardID, fullName, displayOrder                                                          \n" +
                "										order by displayOrder,fullName\");                                                          \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;  */                                                        \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName                                                          \n" +
                "					  from component_acceptable_shipping_countries casc                                                          \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid                                                          \n" +
                "					 where casc.isdeleted = false                                                          \n" +
                "					   and casc.deletedat is null                                                          \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                          \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )                                                          \n" +
                "                                    order by cm.countryName\");                                                          \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;  */                                                        \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName                                                          \n" +
                "					  from component_dynamic_attribute_mapping_part cdam                                                          \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID                                                          \n" +
                "					 where cdam.isdeleted = false                                                          \n" +
                "					   and cdam.deletedat is null                                                          \n" +
                "					   and cda.isdeleted = false                                                          \n" +
                "					   and cda.deletedat is null                                                          \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                          \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )                                                          \n" +
                "                                     order by cda.attributeName\");                                                          \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;  */                                                        \n" +
                "    END IF;                                                          \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN                                                          \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/                                                          \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,                                                          \n" +
                "											null groupNameText,                                                          \n" +
                "											functionalCategoryID, mountingTypeID,                                                          \n" +
                "											count(1) recCount                                                          \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,                                                          \n" +
                "										' group by functionalCategoryName,mountingTypeName,                                      \n" +
                "													functionalCategoryID, mountingTypeID                                                          \n" +
                "											order by groupName, groupNameText, recCount desc');                                                          \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "			EXECUTE query3;                                                          \n" +
                "			DEALLOCATE PREPARE query3;                                                          \n" +
                "        END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5000,'2.00','V1', 'Bug 35440: Part Master: Supplier Part List page showing the incorrect date and time - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5000:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
                "	IN pAssyID INT,              \n" +
                "	IN pRefSalesOrderDetID INT,   \n" +
                "	IN pkitAllocationLineItemId INT,  \n" +
                "    IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pKitqty INT DEFAULT 0;  \n" +
                "    DECLARE pCustomer VARCHAR(1000);   \n" +
                "    DECLARE pCustomerID INT;  \n" +
                "  \n" +
                "    IF(pAssyID = 0) THEN      \n" +
                "		SELECT 	IFNULL(s.kitQty,0),  \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID    \n" +
                "			INTO pKitqty, pCustomer, pCustomerID  \n" +
                "				FROM salesorderdet s   \n" +
                "				JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "				 WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  IFNULL(k.totalAssyBuildQty,0),   \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID  \n" +
                "					FROM kit_allocation_assy_detail k   \n" +
                "					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID      \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "								AND k.partId = pAssyID      \n" +
                "								AND k.refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsConsolidated = 0) THEN  \n" +
                "		SELECT   \n" +
                "				c.id,			 refSalesOrderDetID,		partID,						PIDCode,  \n" +
                "				lineID,			 isCustom, 					pCustomer companyName, 		pCustomerID customerID,  \n" +
                "				FUN_GETUNITNAMEBYID(uomID) AS unitName, 	connecterTypeID,  \n" +
                "				fun_getRoHSNameByID(RoHSStatusID) rohsName,  numOfPosition,  \n" +
                "				fun_getRoHSIconByID(RoHSStatusID) rohsIcon,   \n" +
                "				allocatedQty,		allocatedUnit,			allocatedPins,   \n" +
                "                consumeUnits, 		consumePin,  \n" +
                "				(CASE  \n" +
                "					WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "				END) requiredQtyBuild,   \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(uomMismatchedStep = 0  \n" +
                "							OR connecterTypeID != - 2)  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "				END) requirePinsBuild,   \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						uomMismatchedStep = 0  \n" +
                "							OR isNotRequiredKitAllocation = 1  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE CASE  \n" +
                "						WHEN  \n" +
                "							connecterTypeID = - 2  \n" +
                "						THEN  \n" +
                "							CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "							END  \n" +
                "						ELSE CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "					END  \n" +
                "				END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(SELECT   \n" +
                "						k.id,	 		k.refSalesOrderDetID,	 k.partID,	  \n" +
                "						c.PIDCode,		c.isCustom,       		c.connecterTypeID,  \n" +
                "						c.RoHSStatusID,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "							THEN  \n" +
                "								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
                "									OR k.isBuyDNPQty = 'P'  \n" +
                "									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
                "								OR k.isBuyDNPQty = 'P'  \n" +
                "								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "						END) AS qpa,  \n" +
                "						k.lineID,			k.uomID,	 					k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "						k.numOfPosition,	k.isNotRequiredKitAllocation,	kal.uomMismatchedStep,  \n" +
                "						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "				FROM  \n" +
                "					kit_allocation_lineitems k  \n" +
                "				LEFT JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id  \n" +
                "				JOIN component c ON k.partID = c.id AND c.isGoodPart = 1  \n" +
                "				LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "					AND k.partID = ka.assyID  \n" +
                "					AND k.refRfqLineitem = ka.refBOMLineID  \n" +
                "				WHERE  \n" +
                "					k.id = pkitAllocationLineItemId) AS c  \n" +
                "			GROUP BY id, refSalesOrderDetID, partID, qpa, lineID, uomID, PIDCode,  \n" +
                "					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,   \n" +
                "					rfqLineItemsId, numOfPosition, connecterTypeID,	isCustom,  RoHSStatusID;  \n" +
                "		ELSE 	  \n" +
                "			SELECT   \n" +
                "					c.id,			 refSalesOrderDetID,		partID,					PIDCode,  \n" +
                "					lineID,			 isCustom, 					pCustomer companyName, 	pCustomerID customerID,  \n" +
                "					FUN_GETUNITNAMEBYID(uomID) AS unitName, 	connecterTypeID,  \n" +
                "					fun_getRoHSNameByID(RoHSStatusID) rohsName,  numOfPosition,  \n" +
                "					fun_getRoHSIconByID(RoHSStatusID) rohsIcon,   \n" +
                "					allocatedQty,		allocatedUnit,			allocatedPins,   \n" +
                "					consumeUnits, 		consumePin,  \n" +
                "					(CASE  \n" +
                "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,   \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(uomMismatchedStep = 0  \n" +
                "								OR connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,   \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							uomMismatchedStep = 0  \n" +
                "								OR isNotRequiredKitAllocation = 1  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE CASE  \n" +
                "							WHEN  \n" +
                "								connecterTypeID = - 2  \n" +
                "							THEN  \n" +
                "								CASE  \n" +
                "									WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "									ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "								END  \n" +
                "							ELSE CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "							END  \n" +
                "						END  \n" +
                "					END) shortagePerBuild  \n" +
                "				FROM  \n" +
                "					(SELECT   \n" +
                "							k.id,	 		k.refSalesOrderDetID,	 k.refAssyId partID,	  \n" +
                "							c.PIDCode,		c.isCustom,       		c.connecterTypeID,  \n" +
                "							c.RoHSStatusID,  \n" +
                "							k.kitQPAWithDNP AS qpa,  \n" +
                "							k.lineID,			k.uomID,	 					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
                "							k.numOfPosition,	k.isNotRequiredKitAllocation,	k.uomMismatchedStep,  \n" +
                "							IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "							IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "			FROM  \n" +
                "				kit_allocation_consolidate_line_detail k  \n" +
                "			LEFT JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id  \n" +
                "			JOIN component c ON k.refAssyId = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "				AND k.refAssyId = ka.assyID  \n" +
                "				AND k.rfqLineItemsId = ka.refBOMLineID  \n" +
                "			WHERE  \n" +
                "				k.id = pkitAllocationLineItemId) AS c  \n" +
                "		GROUP BY id, refSalesOrderDetID, partID, qpa, lineID, uomID, PIDCode,   \n" +
                "				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,   \n" +
                "				rfqLineItemsId, numOfPosition, connecterTypeID, isCustom,  RoHSStatusID;  \n" +
                "    END IF;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5001,'2.00','V1','Bug 35447: Kit allocation Stock pop-up issues given by DV 13/07/2021 [Main Branch] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5001:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "insert into rfq_lineitems_filter  \n" +
                "(filterCode, displayName, description, org_description, displayOrder, createdBy, createdAt, updatedBy, updatedAt, isDeleted, isErrorFilter, createByRoleId, updateByRoleId)  \n" +
                "values ('MISMATCHPITCH', 'Mismatched Pitch', '', '', 24.00, 1, utc_timestamp(), 1, utc_timestamp(), 0, 1, 1, 1),  \n" +
                "('CUSTOMERCONSIGNED', 'Customer Consigned Parts', '', '', 25.00, 1, utc_timestamp(), 1, utc_timestamp(), 0, 0, 1, 1);  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "alter table rfq_lineitems_alternatepart add column mismatchPitchStep tinyint default 1;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "update rfq_lineitems_errorcode set isdeleted = 0, deletedAt = null where errorCode = 'MISMATCHPITCH';  \n" +
                "  \n" +
                "update rfq_lineitems_filter set displayName = 'Various Internal Parts Issue (Mounting, Functional, pin, etc)' where filterCode = 'INTERNALPN';  \n" +
                "update rfq_lineitems_filter set displayName = 'Other than Each(UOM) Parts' where filterCode = 'NONEACHPART';  \n" +
                "update rfq_lineitems_filter set displayName = 'Duplicate part ( common)' where filterCode = 'DUPLICATEPID';  \n" +
                "update rfq_lineitems_filter set displayName = 'Parts Required Drive Tools' where filterCode = 'DRIVETOOLSPARTS';  \n" +
                "update rfq_lineitems_filter set displayName = 'Part Correct/Incorrect Status (TBD) ( Decision pending to its correct or incorrect) ' where filterCode = 'UNKNOWNPART';  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5002,'2.00','V1','User Story 33094: BOM Filters Improvement Points FEB-21 - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5002:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
                "IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;  \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS  \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,  \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,  \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'  \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'  \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                "        WHEN a.programingStatus = 5 THEN 'Who Will Program'  \n" +
                "        ELSE 'N/A' END) AS programingStatus,  \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,  \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,  \n" +
                "a.description, a.numOfPosition, a.numOfRows, a.customerRev,  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,  \n" +
                "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,  \n" +
                "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,  \n" +
                "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,  \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,  \n" +
                "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,  \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,  \n" +
                "a.isObsoleteLine,  \n" +
                "a.customerApprovalForQPAREFDESStep,  \n" +
                "a.customerApprovalForBuyStep,  \n" +
                "a.customerApprovalForPopulateStep,  \n" +
                "a.dnpQPARefDesStep,  \n" +
                "a.customerApprovalForDNPQPAREFDESStep,  \n" +
                "a.customerApprovalForDNPBuyStep,  \n" +
                "a.customerApprovalCPN,  \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,  \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,  \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,  \n" +
                "ac.description AS additionalComment,  \n" +
                "ac.id AS additionalCommentId  \n" +
                "FROM rfq_lineitems a  \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0  \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                "WHERE a.isDeleted = 0 AND a.partID = ppartID;  \n" +
                "  \n" +
                "SELECT b.id,  \n" +
                "b.lineID,  \n" +
                "b.cust_lineID,  \n" +
                "b.qpa,  \n" +
                "b.refDesig,  \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,  \n" +
                "a.mfgCodeID,  \n" +
                "mcm.acquisitionDetail,  \n" +
                "a.mfgPN,  \n" +
                "a.mfgPNID,  \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,  \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
                "a.distMfgCodeID,  \n" +
                "a.distPN,  \n" +
                "a.distMfgPNID,  \n" +
                "b.custPN,  \n" +
                "b.custPNID,  \n" +
                "b.isCustPN,  \n" +
                "b.uomID,  \n" +
                "b.programingStatus,  \n" +
                "b.substitutesAllow,  \n" +
                "b.allocatedInKit,  \n" +
                "a.description descriptionAlternate,  \n" +
                "b.description,  \n" +
                "b.numOfPosition,  \n" +
                "b.numOfRows,  \n" +
                "b.customerRev,  \n" +
                "b.isCustPNProgrammingRequire,  \n" +
                "b.customerDescription,  \n" +
                "b.customerPartDesc,  \n" +
                "b.isInstall,  \n" +
                "b.isPurchase,  \n" +
                "b.isNotRequiredKitAllocation,  \n" +
                "b.isSupplierToBuy,  \n" +
                "b.dnpQty,  \n" +
                "b.dnpDesig,  \n" +
                "a.id AS rfqAlternatePartID,  \n" +
                "b.qpaDesignatorStep,  \n" +
                "b.duplicateCPNStep,  \n" +
                "b.restrictCPNUseWithPermissionStep,  \n" +
                "b.restrictCPNUsePermanentlyStep,  \n" +
                "b.restrictCPNUseInBOMStep,  \n" +
                "b.requireMountingTypeStep,  \n" +
                "b.requireFunctionalTypeStep,  \n" +
                "b.requireMountingTypeError,  \n" +
                "b.requireFunctionalTypeError,  \n" +
                "b.isBuyDNPQty,  \n" +
                "b.isObsoleteLine,  \n" +
                "b.customerApprovalForQPAREFDESStep,  \n" +
                "b.customerApprovalForBuyStep,  \n" +
                "b.customerApprovalForPopulateStep,  \n" +
                "b.dnpQPARefDesStep,  \n" +
                "b.customerApprovalForDNPQPAREFDESStep,  \n" +
                "b.customerApprovalForDNPBuyStep,  \n" +
                "b.customerApprovalCPN,  \n" +
                "b.qpaCustomerApprovalComment,  \n" +
                "b.dnpqpaCustomerApprovalComment,  \n" +
                "b.buyCustomerApprovalComment,  \n" +
                "b.buyDNPCustomerApprovalComment,  \n" +
                "b.populateCustomerApprovalComment,  \n" +
                "b.cpnCustomerApprovalComment,  \n" +
                "b.isCustomerApprovedQPA,  \n" +
                "b.isCustomerApprovedBuy,  \n" +
                "b.isCustomerApprovedDNPQPA,  \n" +
                "b.isCustomerApprovedBuyDNP,  \n" +
                "b.isCustomerApprovedPopulate,  \n" +
                "b.isCustomerApprovedCPN,  \n" +
                "b.kitAllocationNotRequiredComment,  \n" +
                "b.isNotRequiredKitAllocationApproved,  \n" +
                "a.mfgVerificationStep,  \n" +
                "a.mfgDistMappingStep,  \n" +
                "a.mfgCodeStep,  \n" +
                "a.customerApproval,  \n" +
                "a.isCustomerUnAppoval,  \n" +
                "a.org_mfgCode,  \n" +
                "a.org_mfgPN,  \n" +
                "a.org_distributor,  \n" +
                "a.org_distPN,  \n" +
                "a.distVerificationStep,  \n" +
                "a.distCodeStep,  \n" +
                "a.getMFGPNStep,  \n" +
                "a.obsoletePartStep,  \n" +
                "a.mfgGoodPartMappingStep,  \n" +
                "a.mfgPNStep,  \n" +
                "a.distPNStep,  \n" +
                "a.badMfgPN,  \n" +
                "a.distGoodPartMappingStep,  \n" +
                "a.nonRohsStep,  \n" +
                "a.epoxyStep,  \n" +
                "a.invalidConnectorTypeStep,  \n" +
                "a.duplicateMPNInSameLineStep,  \n" +
                "a.mismatchMountingTypeStep,  \n" +
                "a.mismatchFunctionalCategoryStep,  \n" +
                "a.mismatchFunctionalCategoryStep,  \n" +
                "a.restrictUseWithPermissionStep,  \n" +
                "a.restrictUsePermanentlyStep,  \n" +
                "a.partPinIsLessthenBOMPinStep,  \n" +
                "a.mismatchRequiredProgrammingStep,  \n" +
                "a.mappingPartProgramStep,  \n" +
                "a.exportControlledStep,  \n" +
                "a.tbdPartStep,  \n" +
                "a.userData1,  \n" +
                "a.userData2,  \n" +
                "a.userData3,  \n" +
                "a.userData4,  \n" +
                "a.userData5,  \n" +
                "a.userData6,  \n" +
                "a.userData7,  \n" +
                "a.userData8,  \n" +
                "a.userData9,  \n" +
                "a.userData10,  \n" +
                "a.pickupPadRequiredStep,  \n" +
                "a.matingPartRquiredStep,  \n" +
                "a.suggestedGoodPartStep,  \n" +
                "a.suggestedGoodDistPartStep,  \n" +
                "a.driverToolsRequiredStep,  \n" +
                "a.functionalTestingRequiredStep,  \n" +
                "a.mismatchCustomPartStep,  \n" +
                "a.mismatchValueStep,  \n" +
                "a.approvedMountingType,  \n" +
                "a.mismatchPackageStep,  \n" +
                "a.mismatchPowerStep,  \n" +
                "a.mismatchToleranceStep,  \n" +
                "a.mismatchTempratureStep,  \n" +
                "a.mismatchNumberOfRowsStep,  \n" +
                "a.uomMismatchedStep,  \n" +
                "a.programingRequiredStep,  \n" +
                "a.mismatchProgrammingStatusStep,  \n" +
                "a.mismatchColorStep,  \n" +
                "a.restrictUseInBOMStep,  \n" +
                "a.restrictUseInBOMWithPermissionStep,  \n" +
                "a.restrictUseInBOMExcludingAliasStep,  \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "a.restrictUseExcludingAliasStep,  \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "a.unknownPartStep,  \n" +
                "a.defaultInvalidMFRStep,  \n" +
                "a.isUnlockApprovedPart,  \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                "cpnPart.partTypeName  \n" +
                "ELSE  \n" +
                "part.partTypeName END) AS parttypeID,  \n" +
                "a.parttypeID AS functionalID,  \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                "cpnMount.name  \n" +
                "ELSE  \n" +
                "mount.name END) AS mountingtypeID,  \n" +
                "a.mountingtypeID AS mountingID,  \n" +
                "cat.categoryname partcategoryID,  \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,  \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,  \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,  \n" +
                "CASE WHEN  \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)  \n" +
                "THEN 1 ELSE 0 END isObsolete,  \n" +
                "co.PIDCode,  \n" +
                "co.mfgPNDescription,  \n" +
                "co.pitch,  \n" +
                "co.noOfRows,  \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,  \n" +
                "co.value,  \n" +
                "co.tolerance,  \n" +
                "co.voltage,  \n" +
                "co.isCustom,  \n" +
                "co.packaging,  \n" +
                "co.deviceMarking,  \n" +
                "co.powerRating,  \n" +
                "co.minOperatingTemp,  \n" +
                "co.maxOperatingTemp,  \n" +
                "co.connecterTypeID,  \n" +
                "co.driverToolRequired,  \n" +
                "co.matingPartRquired,  \n" +
                "co.pickupPadRequired,  \n" +
                "co.programingRequired,  \n" +
                "co.dataSheetLink,  \n" +
                "co.isCPN,  \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,  \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,  \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
                "co.isTemperatureSensitive,  \n" +
                "co.noOfPosition AS componentLead,  \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,  \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,  \n" +
                "co.createdBy,  \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,  \n" +
                "co.color,  \n" +
                "co.uom AS partUOMID,  \n" +
                "co.serialNumber,  \n" +
                "CASE WHEN  \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c  \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,  \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                "b.additionalComment ,  \n" +
                "b.additionalCommentId,  \n" +
                "a.suggestedByApplicationMsg,  \n" +
                "a.suggestedByApplicationStep,  \n" +
                "a.isMPNAddedinCPN, co.rev as  mfgPNrev ,  \n" +
                "a.mismatchPitchStep  \n" +
                "FROM rfq_lineitems_alternatepart a  \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id  \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0  \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id  \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id  \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id  \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id  \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0  \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id  \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id  \n" +
                "WHERE a.isDeleted = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5003,'2.00','V1','User Story 33094: BOM Filters Improvement Points FEB-21 - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5003:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveCustRefundedListByRefTrans`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustRefundedListByRefTrans`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),   \n" +
                "	IN pPayCMID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),    \n" +
                "    IN pTransModeType INT  )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);   \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "	IF (pTransModeType IS NOT NULL) THEN  \n" +
                "		IF (pTransModeType = -9) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "			JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM ,   \n" +
                "					  psipd.comment AS commentForPaymentCM , psipt.paymentAmount As paymentCMAmount,  \n" +
                "								psipt.paymentNumber as paymentCMNumber, psipt.id as paymentCMMstID, psipt.paymentDate as paymentCMDate	  \n" +
                "							FROM packingslip_invoice_payment_det psipd    \n" +
                "								JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "							WHERE psipd.refRefundPaymentID = \",pPayCMID,\" AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "							 ) payCMRefundDetTemp   \n" +
                "						ON psip.id = payCMRefundDetTemp.refPayementid    \n" +
                "			\");  \n" +
                "        ELSEIF (pTransModeType = -6) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "			JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM , psipd.comment AS commentForPaymentCM,     \n" +
                "						 cps.creditMemoNumber AS paymentCMNumber, cps.id as paymentCMMstID, cps.creditMemoDate As paymentCMDate ,  \n" +
                "                         cps.totalAmount AS paymentCMAmount   \n" +
                "					 FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
                "					WHERE psipd.refRefundCustCreditMemoID = \",pPayCMID,\" AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0    \n" +
                "					) payCMRefundDetTemp     \n" +
                "				ON psip.id = payCMRefundDetTemp.refPayementid   \n" +
                "			\");  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustAllRefundTransactionPopupList = CONCAT(\"  \n" +
                "	SELECT  psip.id,      \n" +
                "			psip.mfgcodeID , psip.accountReference,   \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,      \n" +
                "			psip.bankName,      \n" +
                "			psip.bankAccountNo,      \n" +
                "			psip.paymentType,      \n" +
                "			psip.bankAccountMasID,      \n" +
                "			psip.paymentDate AS refundDate,      \n" +
                "			psip.paymentAmount,    \n" +
                "			psip.remark,       \n" +
                "			psip.paymentNumber,    \n" +
                "			gc.gencCategoryName paymentMethod,      \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,     \n" +
                "            payCMRefundDetTemp.paymentCMAmount ,   \n" +
                "			payCMRefundDetTemp.paymentCMNumber ,   \n" +
                "			payCMRefundDetTemp.paymentCMMstID ,   \n" +
                "			payCMRefundDetTemp.paymentAmountForPaymentCM ,   \n" +
                "			payCMRefundDetTemp.commentForPaymentCM ,  \n" +
                "			payCMRefundDetTemp.paymentCMDate,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,      \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,      \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole     \n" +
                "		FROM packingslip_invoice_payment psip      \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0     \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0      \n" +
                "		      \",paymentCMJoin,\"   \n" +
                "		WHERE psip.refPaymentMode = '\", pRefPaymentMode ,\"'    \n" +
                "		AND refGencTransModeID = '\",pTransModeType,\"'  \n" +
                "		AND psip.isPaymentVoided = 0      \n" +
                "		AND psip.isDeleted = 0  \"  \n" +
                "    );  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id ASC\");    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	-- select @SQLStatement1;    \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	-- select @SQLStatement2;    \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5004,'2.00','V1',' User Story 33544: Customer Refund: Add/Update Screen - Amount Hyperlink popup - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5004:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Allow to Lock Supplier Refund', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                /* **************************** Add Script Version -> 19-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5005,'2.00','V1','User Story 35370: Supplier Refund: Manage Lock Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5005:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	MAX(pds.id) stockId,  \n" +
                "			'PU' AS `type`,  \n" +
                "			'Pending UMID' AS `typeValue`,  \n" +
                "			NULL umidId,  \n" +
                "			NULL umid,  \n" +
                "			vu.PartId partId,  \n" +
                "			vu.packagingID packagingId,  \n" +
                "			NULL receiveMaterialType,  \n" +
                "			SUM(pd.receivedQty) receivedQty,  \n" +
                "			SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) availableQty,  \n" +
                "			SUM(IFNULL(pds.qty,0)) shipmentQty,  \n" +
                "			vu.BinID binId,  \n" +
                "			b.name binName,  \n" +
                "			b.WarehouseID,  \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            0 availableQtyAtRMA,  \n" +
                "            0 availableUnitAtRMA  \n" +
                "	FROM 		vu_umid_creation_pending vu  \n" +
                "	LEFT JOIN 	(  \n" +
                "				SELECT 		refPackingSlipMaterialRecID, SUM(receivedQty) receivedQty, SUM(umidCreatedQty) umidCreatedQty, packagingID, partID  \n" +
                "				FROM 		packing_slip_material_receive_det  \n" +
                "				WHERE 		isDeleted = 0  \n" +
                "				GROUP BY  	refPackingSlipMaterialRecID, packagingID, partID  \n" +
                "			) pd ON pd.refPackingSlipMaterialRecID = vu.packingSlipID AND pd.packagingID = vu.packagingID AND pd.partID = vu.PartId  \n" +
                "	LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId  \n" +
                "						AND pds.refPackingSlipId = vu.packingSlipID  \n" +
                "						AND pds.packagingId = vu.packagingID  \n" +
                "						AND pds.partId = vu.PartId  \n" +
                "						AND pds.isDeleted = 0  \n" +
                "						AND pds.type = 'PU'  \n" +
                "						AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "	LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "	WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "				AND vu.packagingID = pPackagingId  \n" +
                "				AND vu.partID = pPartId  \n" +
                "				AND b.isDeleted = 0  \n" +
                "	GROUP BY 	typeValue, umidId, umid, partId, packagingId, receiveMaterialType,binId, binName, WarehouseID, warehouseName, parentWarehouseName  \n" +
                "	having SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) > 0 or MAX(pds.id) is not null  \n" +
                "	UNION  \n" +
                "	SELECT 		cp.id stockId,  \n" +
                "			cp.type AS `type`,  \n" +
                "			'UMID' AS `typeValue`,  \n" +
                "			c.id umidId,  \n" +
                "			c.uid umid,  \n" +
                "			c.refcompid partId,  \n" +
                "			c.packaging packagingId,  \n" +
                "			c.receiveMaterialType,  \n" +
                "			pd.receivedQty receivedQty,  \n" +
                "			c.pkgQty availableQty,  \n" +
                "			cp.qty shipmentQty,  \n" +
                "			c.binID binId,  \n" +
                "			b.name binName,  \n" +
                "			b.WarehouseID,  \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            cp.availableQtyAtRMA,  \n" +
                "            cp.availableUnitAtRMA  \n" +
                "	FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "	WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId      and cp.refRMADetailid = pRMADetailLineId  \n" +
                "				AND cp.type = 'U'  \n" +
                "				AND cp.isDeleted = 0  \n" +
                "				AND c.isDeleted = 0  \n" +
                "				AND pd.isDeleted = 0  \n" +
                "				AND b.isDeleted = 0  \n" +
                "	UNION  \n" +
                "	SELECT 		NULL stockId,  \n" +
                "			'U' AS `type`,  \n" +
                "			'UMID' AS `typeValue`,  \n" +
                "			c.id umidId,  \n" +
                "			c.uid umid,  \n" +
                "			c.refcompid partId,  \n" +
                "			c.packaging packagingId,  \n" +
                "			c.receiveMaterialType,  \n" +
                "			pd.receivedQty receivedQty,  \n" +
                "			c.pkgQty availableQty,  \n" +
                "			0 shipmentQty,  \n" +
                "			c.binID binId,  \n" +
                "			b.name binName,  \n" +
                "			b.WarehouseID,  \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            c.pkgQty availableQtyAtRMA,  \n" +
                "            c.pkgUnit availableUnitAtRMA  \n" +
                "	FROM 		component_sid_stock_packing_detail cp  \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "	WHERE 		c.pkgQty > 0  \n" +
                "				AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "				AND cp.isDeleted = 0  \n" +
                "				AND c.isDeleted = 0  \n" +
                "				AND pd.isDeleted = 0  \n" +
                "				AND b.isDeleted = 0;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,  \n" +
                "				fun_getMfgCodeAndNameByID(inv.mfgcodeID) supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToAddress payToAddress,  \n" +
                "				inv.payToName,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetAllSupplierMemoListForRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllSupplierMemoListForRefund`(  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentID INT,  \n" +
                "    IN pIsVoidAndReissuePayment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vIsPaymentVoided tinyint;  \n" +
                "    DECLARE vMfgCodeID int;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	if pPaymentID is not null then  \n" +
                "		SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		select isPaymentVoided, mfgCodeID into vIsPaymentVoided, vMfgCodeID  \n" +
                "          from packingslip_invoice_payment x  \n" +
                "         where x.id = pPaymentID;  \n" +
                "  \n" +
                "        if pIsVoidAndReissuePayment = 1 then  \n" +
                "			set vIsPaymentVoided = true;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		select true isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "			  from (select pid.id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "									else '' end memoType,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "									else '' end memoNumber,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "									else '' end memoDate,  \n" +
                "							a.markedForRefundAmt,  \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,  \n" +
                "                            paymentAmount paymentAmountForSelectedInvoice  \n" +
                "					  from packing_slip_material_receive a  \n" +
                "					  JOIN packingslip_invoice_payment_det pid ON pid.refPackingslipInvoiceID = a.id  \n" +
                "					 where a.receiptType in ('C','D')  \n" +
                "					   and a.mfgCodeID = vMfgCodeID  \n" +
                "					   and pid.refPayementid = pPaymentID  \n" +
                "					   and exists (SELECT 1 FROM packingslip_invoice_payment X WHERE x.id = pid.refPayementid AND x.refPaymentMode = 'RR')  \n" +
                "					   and a.markedForRefund = 1  \n" +
                "					   and a.isDeleted = 0  \n" +
                "                       and pid.isDeleted = 0) a  \n" +
                "		union all  \n" +
                "		select false isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "			  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "									else '' end memoType,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "									else '' end memoNumber,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "									else '' end memoDate,  \n" +
                "							a.markedForRefundAmt,  \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,  \n" +
                "                            0 paymentAmountForSelectedInvoice  \n" +
                "					  from packing_slip_material_receive a  \n" +
                "					 where a.receiptType in ('C','D')  \n" +
                "					   and a.mfgCodeID = vMfgCodeID  \n" +
                "					   and not exists (select 1  \n" +
                "										 from packingslip_invoice_payment x  \n" +
                "										 join packingslip_invoice_payment_det pid ON pid.refPayementid = x.id  \n" +
                "										where pid.refPackingslipInvoiceID = a.id  \n" +
                "										  AND x.refPaymentMode = 'RR'  \n" +
                "										  and x.isPaymentVoided = 0  \n" +
                "                                          and x.isDeleted = 0  \n" +
                "                                          and pid.isDeleted=0)  \n" +
                "					   and a.markedForRefund = 1  \n" +
                "					   /*bellow case added to ignore new rows if payment is voided*/  \n" +
                "					   and case when vIsPaymentVoided = 0 then  \n" +
                "									1=1  \n" +
                "								when vIsPaymentVoided = 1 then  \n" +
                "									1=2  \n" +
                "								end  \n" +
                "					   and a.isDeleted = 0) a  \n" +
                "					 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;  \n" +
                "		select p.id, p.systemId, p.mfgcodeID, fun_getMfgCodeAndNameByID(p.mfgcodeID) mfgName,  \n" +
                "				p.paymentNumber, p.paymentDate, p.paymentAmount, p.paymentType, p.accountReference, p.bankAccountMasID, p.bankAccountNo,  \n" +
                "                p.bankName, p.remark, p.isPaymentVoided, p.voidPaymentReason, p.refVoidedPaymentNumber, p.refVoidedPaymentId, p.refPaymentMode,  \n" +
                "                p.documentPath, p.depositBatchNumber, p.offsetAmount, p.refGencTransModeID, p.acctId,  \n" +
                "                p.lockStatus, fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                g.modeName as transactionModeName  \n" +
                "		 from packingslip_invoice_payment p  \n" +
                "         join generic_transmode_mst g on g.id = p.refGencTransModeID and g.modeType = 'RR'  \n" +
                "		where p.id = pPaymentID;  \n" +
                "    else  \n" +
                "		select a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "		  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "						case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "							when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "								else '' end memoType,  \n" +
                "						case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "							when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "								else '' end memoNumber,  \n" +
                "						case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "							when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "								else '' end memoDate,  \n" +
                "						a.markedForRefundAmt,  \n" +
                "						get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount  \n" +
                "				  from packing_slip_material_receive a  \n" +
                "				 where a.receiptType in ('C','D')  \n" +
                "                   and a.mfgCodeID = pMfgcodeID  \n" +
                "				   and a.markedForRefund = 1  \n" +
                "				   and a.isDeleted = 0) a  \n" +
                "				 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;  \n" +
                "	end if;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5006,'2.00','V1','User Story 35370: Supplier Refund: Manage Lock Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5006:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 19-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                "	IN pJobTypeIds VARCHAR(16383),  \n" +
                "	IN pAssyIds VARCHAR(16383),  \n" +
                "	IN pAssyNicknameIds LONGTEXT,  \n" +
                "	IN pIsExportControlled TINYINT,  \n" +
                "	IN pIsQuoteOverdue TINYINT,  \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pOlderThenDays INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "        DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		   (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		 (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                "        (CASE  \n" +
                "        WHEN rfq_statusID = 1 THEN  \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                "				quoteSubmitDate > quoteDueDate  \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				quoteClosedDate	> quoteDueDate  \n" +
                "            END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF; */  \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                "            count(1) over (partition by ra.partID) as assyRFQCount,  \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "            ra.isCustomPartDetShowInReport,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN fun_getUserNameByID(part.activityStartBy) ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') activityStartAt,  \n" +
                "			part.activityStartAt activityStartAtDateTime,  \n" +
                "            ra.isActivityStart as isCostingActivityStart, (CASE WHEN ra.isActivityStart THEN fun_getUserNameByID(ra.activityStartBy) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') costingActivityStartAt,  \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "		WHERE rf.isdeleted = 0  \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                "		else 1=1 end)  \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                "	EXECUTE RFQquery1;  \n" +
                "	DEALLOCATE PREPARE RFQquery1;  \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                "	EXECUTE RFQquery2;  \n" +
                "	DEALLOCATE PREPARE RFQquery2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5007,'2.00','V1','Bug 35479: QA Testing findings for RFQ List Page - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5007:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop function if exists fun_getPaymentStatusByCustPackingSlipSubStatus ;  \n" +
                "CREATE FUNCTION `fun_getPaymentStatusByCustPackingSlipSubStatus`(  \n" +
                "	pSubStatus INT,  \n" +
                "    pTransType VARCHAR(2),  \n" +
                "    pPaymentStatus VARCHAR(2),  \n" +
                "    pReturnType VARCHAR(5)  \n" +
                ") RETURNS varchar(100) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(100);  \n" +
                "    IF  pReturnType = 'CODE' THEN  \n" +
                "		IF pTransType IN ( 'I' ,'P') THEN  \n" +
                "			Select case	when (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) and pPaymentStatus='PE' then 'NI'    \n" +
                "					when pSubStatus in (2,3) and pPaymentStatus='PE' then 'WP'    \n" +
                "					when pPaymentStatus='PR' then 'PR'    \n" +
                "					when pPaymentStatus='RE'then 'RE'    \n" +
                "                    when (pSubStatus IS NULL OR pSubStatus = '') and pTransType = 'P'  then 'PEN'  \n" +
                "				   else '' END as paymentStatusCode into vReturn;  \n" +
                "		ELSEIF pTransType = 'C' THEN  \n" +
                "			Select (CASE WHEN	pPaymentStatus='PE' then 'UC'    \n" +
                "						WHEN	pPaymentStatus='PR' THEN 'PCA'    \n" +
                "						WHEN	pPaymentStatus='RE' THEN 'FCA'   \n" +
                "						ELSE '' END)   AS creditAppliedStatus into vReturn;  \n" +
                "		END IF;  \n" +
                "    ELSE   \n" +
                "		IF pTransType IN ( 'I' ,'P') THEN  \n" +
                "			Select case	when (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) and pPaymentStatus='PE' then 'Not Invoiced'    \n" +
                "					when pSubStatus in (2,3) and pPaymentStatus='PE' then 'Waiting For Payment'    \n" +
                "					when pPaymentStatus='PR' then 'Partial Payment Received'    \n" +
                "					when pPaymentStatus='RE'then 'Payment Received'    \n" +
                "                    when (pSubStatus IS NULL OR pSubStatus = '') and pTransType = 'P'  then 'Pending'  \n" +
                "				   else '' END as paymentStatusCode into vReturn;  \n" +
                "		ELSEIF pTransType = 'C' THEN  \n" +
                "			Select (CASE WHEN	pPaymentStatus='PE' then 'Unapplied Credit'    \n" +
                "						WHEN	pPaymentStatus='PR' THEN 'Partial Credit Applied'    \n" +
                "						WHEN	pPaymentStatus='RE' THEN 'Full Credit Applied'   \n" +
                "						ELSE '' END)   AS creditAppliedStatus into vReturn;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "    RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5008,'2.00','V1','fun_getPaymentStatusByCustPackingSlipSubStatus - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5008:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop procedure if exists Sproc_GetCustomerInvoiceDetail ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(              \n" +
                "	IN invoiceID INT      ,              \n" +
                "    IN pTransType VARCHAR(5)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);              \n" +
                "	DECLARE vTimeZone VARCHAR(50);              \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;              \n" +
                "	                 SELECT inv.id,   inv.transType,              \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,              \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,              \n" +
                "                        cps.id packingSlipID,              \n" +
                "						inv.refSalesOrderId  ,              \n" +
                "                        inv.systemID,              \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,              \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,              \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,              \n" +
                "						inv.soNumber,inv.soDate,              \n" +
                "                        inv.packingSlipType,inv.`status`,              \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,              \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,              \n" +
                "						inv.invoiceNumber,inv.invoiceDate,              \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,              \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,              \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,              \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,              \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,              \n" +
                "                        inv.intermediateShipmentId ,              \n" +
                "						inv.billingAddress,              \n" +
                "						inv.shippingAddress,              \n" +
                "						inv.intermediateAddress,              \n" +
                "                        inv.isLocked,              \n" +
                "                        inv.subStatus,              \n" +
                "                        inv.paymentStatus,              \n" +
                "                        inv.packingSlipType,              \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,              \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,              \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,           \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,              \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,              \n" +
                "                        inv.isZeroValue,              \n" +
                "                        inv.revision,              \n" +
                "                        cps.subStatus packingSlipSubStatus,              \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))              \n" +
                "						ELSE '' END) materialStatus ,              \n" +
                "                        inv.isAlreadyPublished ,              \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,              \n" +
                "            cps.revision packingSlipVersion,            \n" +
                "            (CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)             \n" +
                "				WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)            \n" +
                "                ELSE NULL END) receivedAmount,        \n" +
                "                (SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'          \n" +
                "							AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,    \n" +
                "						fun_getUserNameByID(inv.updatedBy) updatedByInitial,    \n" +
                "						fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,    \n" +
                "						fun_getUserNameByID(inv.createdBy) createdByInitial,    \n" +
                "						fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,    \n" +
                "						inv.isAskForVersionConfirmation,    \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt,  \n" +
                "                        case when inv.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE') end paymentStatusCode  \n" +
                "						-- case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "		FROM customer_packingslip inv              \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'              \n" +
                "                 WHERE inv.id = invoiceID              \n" +
                "                 AND inv.transType = pTransType;              \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,              \n" +
                "					cpd.id,              \n" +
                "                    cpd.refCustPackingSlipID,              \n" +
                "					cpd.custPOLineID,              \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,              \n" +
                "                    cpd.lineID,              \n" +
                "                    co.PIDCode,              \n" +
                "                    co.mfgcodeID,              \n" +
                "                    ss.releaseNumber,              \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,              \n" +
                "					co.mfgpn,              \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,              \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,              \n" +
                "                    cpd.partId,              \n" +
                "                    cpd.refChargesTypeID,              \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,              \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,              \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,              \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,              \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,              \n" +
                "                    othercharges AS lineOtherCharges,              \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,              \n" +
                "					cpd.shippingNotes,              \n" +
                "                    cpd.internalComment,              \n" +
                "                    cpd.assyDescription,              \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,              \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,              \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,              \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,              \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,              \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,              \n" +
                "                    co.partType,              \n" +
                "                    vu.packingLineID,              \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,              \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,              \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert              \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID              \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,              \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,              \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,              \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'              \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'              \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )              \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn              \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0              \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,              \n" +
                "                    cpd.isZeroValue,              \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted              \n" +
                "				 FROM customer_packingslip_det cpd              \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0              \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0              \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId              \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0              \n" +
                "                 ORDER BY cpd.lineID ASC;              \n" +
                "  \n" +
                "                 SELECT cpOther.id,              \n" +
                "						cpOther.refCustomerPackingSlipDetID,              \n" +
                "						cpOther.partID,              \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,              \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,              \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,              \n" +
                "                        cpOther.qty,              \n" +
                "                        cpOther.price,              \n" +
                "                        cpOther.lineComment,              \n" +
                "                         cpOther.lineInternalComment,              \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,              \n" +
                "                        cpOther.frequency ,              \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'              \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'              \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'              \n" +
                "								ELSE ''              \n" +
                "						END) AS frequencyName              \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0              \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cpOther.isdeleted=0;              \n" +
                "  \n" +
                "                  --  Tracking Number              \n" +
                "                SELECT id,trackNumber              \n" +
                "                FROM customer_packing_slip_track_number              \n" +
                "                WHERE refCustPackingSlipID = invoiceID              \n" +
                "                AND isDeleted = 0;              \n" +
                "  \n" +
                "                -- sales commission attribute        \n" +
                "                SELECT cca.id,              \n" +
                "		    cca.refCustPackingSlipDetID,              \n" +
                "                    cca.unitPrice,           \n" +
                "                    cca.commissionPercentage,              \n" +
                "                    cca.commissionValue,              \n" +
                "                    cca.quoted_commissionPercentage,              \n" +
                "                    cca.quoted_commissionValue,              \n" +
                "                    cca.poQty,              \n" +
                "                    cca.partId,      \n" +
                "                    cca.quotedQty,      \n" +
                "                    cca.type,      \n" +
                "                    cca.rfqAssyID,      \n" +
                "                    cca.commissionCalculateFrom,      \n" +
                "                    cca.salesCommissionNotes,              \n" +
                "                    cca.refComponentSalesPriceBreakID,              \n" +
                "                    cca.quoted_unitPrice          \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0      \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cca.isdeleted=0;      \n" +
                "                 -- sales commission child attribute            \n" +
                "                SELECT cca.id,              \n" +
                "		    cca.refCustPackingSlipDetID,      \n" +
                "		    cca.refcustInvoiceCommissionID,              \n" +
                "                    cca.unitPrice,              \n" +
                "                    cca.refQuoteAttributeId,              \n" +
                "                    cca.commissionPercentage,              \n" +
                "                    cca.commissionValue,              \n" +
                "                    cca.org_commissionPercentage,              \n" +
                "                    cca.org_commissionValue,              \n" +
                "                    cca.category,              \n" +
                "                    cca.partId,              \n" +
                "                    cca.refComponentSalesPriceBreakID,              \n" +
                "                    cca.org_unitPrice,              \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,              \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,              \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName              \n" +
                "				FROM customer_packingslip_commission_attribute cca              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0              \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0              \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cca.isdeleted=0;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5009,'2.00','V1','Sproc_GetCustomerInvoiceDetail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5009:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop procedure if exists Sproc_RetrieveCustomerInvoiceDetails ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pFilterStatus LONGTEXT,    \n" +
                "    IN pDueDate DATE,    \n" +
                "    IN pAdditionalDays INT,    \n" +
                "    IN pTermsAndAboveDays INT,    \n" +
                "    IN pPoNumber VARCHAR(50),    \n" +
                "    IN pIsExactSearchPO TINYINT,    \n" +
                "    IN pMfgCodeIds LONGTEXT ,    \n" +
                "    IN pPaymentTermsIds LONGTEXT ,    \n" +
                "    IN pPartId INT,    \n" +
                "    IN pTransType VARCHAR(5) ,    \n" +
                "	IN pFromDate DATE,    \n" +
                "    IN pToDate DATE,    \n" +
                "    IN pPaymentStatusFilter VARCHAR(50) ,    \n" +
                "    IN pCreditAppliedStatusFilter  VARCHAR(100) ,    \n" +
                "    IN pZeroAmountFilter TINYINT    \n" +
                "    -- IN pChequeNumber  VARCHAR(50)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(100);    \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "	SET v_appliedCMPDJoin = '';    \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN    \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount , \");    \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'    \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");    \n" +
                "	ELSE    \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"    \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,    \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,    \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,    \n" +
                "        cp.invoiceNumber,cp.invoiceDate,    \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,    \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,    \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'    \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,    \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1    \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,    \n" +
                "        cp.soNumber,cp.soDate,    \n" +
                "		cp.sorevision,    \n" +
                "        cp.refSalesOrderID,    \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,    \n" +
                "        cp.refCustInvoiceID,    \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,    \n" +
                "		 cp.status,    \n" +
                "         cp.subStatus,    \n" +
                "         case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "         case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "         case when cp.transType = 'C' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end creditAppliedStatus,		   \n" +
                "		  cp.paymentStatus,    \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,    \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,    \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,    \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,    \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,    \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,    \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,    \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,    \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,    \n" +
                "		 m.mfgcode as customerCode,    \n" +
                "         cp.customerID,    \n" +
                "         cp.createdBy as createdById,    \n" +
                "		\",v_receivedAmtSF,\"    \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,    \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,    \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,    \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,    \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,    \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,    \n" +
                "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,    \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,    \n" +
                "         cp.termsDays termDays,    \n" +
                "         cp.freeOnBoardName,    \n" +
                "         cp.isLocked,    \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,    \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,    \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,    \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,    \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,    \n" +
                "         packingSlip.id packingSlipId,    \n" +
                "         (select group_concat(paymentNumber)    \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd    \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0    \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,    \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,    \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,    \n" +
                "  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,    \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,    \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,    \n" +
                "         m.paymentTermsID custPaymentTermsId,    \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,    \n" +
                "         gc.termsDays custTermsDays,    \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,    \n" +
                "         cp.revision    \n" +
                "	 FROM customer_packingslip cp    \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID    \n" +
                "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0    \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'    \n" +
                "		\" , v_appliedCMPDJoin ,\"    \n" +
                "	WHERE  cp.isDeleted=0    \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		IF pTransType = 'I' THEN    \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";    \n" +
                "        ELSE    \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";    \n" +
                "        END IF;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');    \n" +
                "    END IF;    \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN    \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');    \n" +
                "	# END IF;    \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");    \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN    \n" +
                "		IF pIsExactSearchPO = 1 THEN    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"    \n" +
                "						);    \n" +
                "		ELSE    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"    \n" +
                "						);    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;    \n" +
                "  IF pFromDate IS NOT NULL THEN    \n" +
                "        IF pTransType = 'I' THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");    \n" +
                "        ELSE    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");    \n" +
                "        END IF;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN    \n" +
                "        IF pTransType = 'I' THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");    \n" +
                "        ELSE    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");    \n" +
                "        END IF;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.creditAppliedStatus,''', pCreditAppliedStatusFilter ,''')');    \n" +
                "	END IF;    \n" +
                "    -- filter zero amount invoice    \n" +
                "    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,    \n" +
                "		 round((c.totalAmount),2) totalAmount,    \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,    \n" +
                "    				-- round((c.totalAmount - ifnull(c.receivedAmount,0)),2) pendingAmount,    \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)    \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,    \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)    \n" +
                "						else '' end) materialStatus from ( \",    \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "  \n" +
                "	--  select @SQLStatement2	;    \n" +
                "	PREPARE query1 FROM @SQLStatement2;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5010,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5010:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop procedure if exists Sproc_RetrieveCustomerPackingSlipDeatils ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(                                                                        \n" +
                "	IN ppageIndex INT,                                                                        \n" +
                "	IN precordPerPage INT,                                                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                                      \n" +
                "	IN pfilterStatus VARCHAR(1000),                              \n" +
                "	IN pmfgCodelist VARCHAR(16000),                              \n" +
                "	IN pmfgPartID  INT ,                              \n" +
                "	IN ppsSearchType VARCHAR(5),                              \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),                              \n" +
                "	IN pstatusIds VARCHAR(50),                              \n" +
                "	IN pfromDate DATE,                              \n" +
                "	IN ptoDate DATE                                                                     \n" +
                ")  \n" +
                "BEGIN                                                                        \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                        \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"                                                                    \n" +
                "		SELECT cd.id,                      \n" +
                "				cd.packingSlipNumber,                              \n" +
                "		       cd.packingslipDate,                              \n" +
                "		       cd.poNumber,                              \n" +
                "		       cd.soNumber,                              \n" +
                "		       cd.soDate,                              \n" +
                "		       cd.poDate,     \n" +
                "               cd.poRevision,    \n" +
                "		       ss.releaseNumber,                \n" +
                "		       ss.qty as releaseLineQty,                                \n" +
                "		       cd.customerID,                                                            \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,                                              \n" +
                "			cd.systemID,                                                         \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,                                                         \n" +
                "			cd.packingslipcomment,                              \n" +
                "			cd.refCustInvoiceID,                                \n" +
                "			cpd.internalComment,                                \n" +
                "			cd.headerComment,                               \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,                              \n" +
                "		cd.subStatus,                              \n" +
                "		cd.sorevision,                                              \n" +
                "              cpd.partId,                              \n" +
                "              fun_getRoHSNameByPartID(cpd.partId) rohsName,                              \n" +
                "              `cpd`.assyDescription,                                                             \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,                              \n" +
                "            c.mfgPN as assyName ,                              \n" +
                "            c.PIDCode as assyId,                              \n" +
                "            c.mfgCodeID,                              \n" +
                "            cd.termsID,                              \n" +
                "            cd.shippingmethodid,                          \n" +
                "            invoice.invoiceNumber,                          \n" +
                "            invoice.id as invoiceID,                                \n" +
                "            invoice.subStatus as invoiceSubstatus,                              \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,                  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,                             \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,                              \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,                                                    \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,                                                    \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,                      \n" +
                "            cd.refSalesOrderID,                                                            \n" +
                "cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,                                    \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,                                                            \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,                                                       \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,                                                    \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,                                                \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,                                              \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,                                            \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,                                                                \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,                                                                \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,                                                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,                                                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,                                                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt,                                                            \n" +
                "		 cd.isLocked,                                                  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,                                                  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,                                                  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,                                                  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,              \n" +
                "         (select group_concat(trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumber,       \n" +
                "         (select COUNT(trackNumber) from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumberCount,           \n" +
                "  \n" +
                "         cpd.quoteFrom,cpd.refAssyQtyTurnTimeID,cpd.assyQtyTurnTimeText,cpd.quoteNumber,cpd.refRFQGroupID,cpd.refRFQQtyTurnTimeID,            \n" +
                "		(case when cpd.quoteFrom = 1 then 'From RFQ' when cpd.quoteFrom = 3 then 'N/A' when cpd.quoteFrom = 2 then 'From Part Master' else '' end) quoteFromText,          \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))           \n" +
                "						else '' end) materialStatus,        \n" +
                "                        cd.revision        \n" +
                "		FROM customer_packingslip cd                                                   \n" +
                "		LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0                                                              \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid                  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId                                                   \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0                                \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0                                                               \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'                                                                      \n" +
                "	\");                                                                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                        \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";                                                              \n" +
                "	ELSE                                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                        \n" +
                "	END IF;	                                                                        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                        \n" +
                "		SET pWhereClause = '1=1' ;                                                                        \n" +
                "	END IF;	                                                      \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN                                                      \n" +
                "	SET pWhereClause=CONCAT(pWhereClause, ' and FIND_IN_SET(packingSlipStatusValue,''', pfilterStatus ,''')');                                                      \n" +
                "  END IF;                              \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN                                                      \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');                                                      \n" +
                "  END IF;                                  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN                                                      \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');                                                      \n" +
                "  END IF;                                \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN                                                      \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId= ',pmfgPartID);                                                      \n" +
                "  END IF;                               \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN                              \n" +
                "    IF(ppsSearchType='E')THEN                              \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',                              \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');                               \n" +
                "   ELSE                              \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',                              \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');                               \n" +
                "  END IF;                                                    \n" +
                "  END IF;                               \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN                              \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');                                         \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN                              \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');                                \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN                              \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');                                               \n" +
                "  END IF;                                 \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                        \n" +
                "	ELSE	                                                                        \n" +
                "		SET rowNumWhere = '';                                                                        \n" +
                "	END IF;	                                                                        \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                                           \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                                                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                          \n" +
                "	EXECUTE query2;                                                                          \n" +
                "	DEALLOCATE PREPARE query2;                                                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                          \n" +
                "	PREPARE query1 FROM @SQLStatement2;                          \n" +
                "	-- select @SQLStatement2;                                                                        \n" +
                "	EXECUTE query1;                                                                          \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5011,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5011:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentOtherPartList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentOtherPartList`(    \n" +
                "IN pRefComponentID INT    \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                                   \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "  \n" +
                "	select co.id, co.name, co.refComponentID, fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,vTimeZone, vDateTimeDisplayFormat) as createdAt,    \n" +
                "			fun_getUserNameByID(co.createdBy) fullName    \n" +
                "	  from component_otherpn co    \n" +
                "	 where co.refComponentID = pRefComponentID    \n" +
                "	   and co.isDeleted = 0    \n" +
                "	 order by co.name;    \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponentsOther`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveWhereUsedComponentsOther`(          \n" +
                "	IN pPageIndex INT,          \n" +
                "	IN pRecordPerPage INT,          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "    IN pPartID INT        \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT;          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);              \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;          \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;      \n" +
                "    CREATE TEMPORARY TABLE componentWhereUsedOther AS      \n" +
                "    select ca.id, ca.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,      \n" +
                "			m.id MID, 		m.mfgCode,		m.mfgType, fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) displayValue,        \n" +
                "			c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,          \n" +
                "			ro.rohsIcon,	ro.name rohsName,          \n" +
                "			case when ca.Type=1 then          \n" +
                "					'Alternate Parts'          \n" +
                "				  when ca.Type=2 then          \n" +
                "					'Pickup Pad'          \n" +
                "				  when ca.Type=3 then          \n" +
                "					'Program'          \n" +
                "				  when ca.Type=4 then          \n" +
                "					'Functional Testing Tools'          \n" +
                "				  when ca.Type=5 then          \n" +
                "					'Require Mating Parts'          \n" +
                "					end whereUsed,          \n" +
                "			case when ca.Type=1 then          \n" +
                "					1    \n" +
                "				  when ca.Type=2 then          \n" +
                "					7    \n" +
                "				  when ca.Type=4 then          \n" +
                "					8    \n" +
                "				  when ca.Type=5 then          \n" +
                "					6    \n" +
                "					end whereUsedOrder,          \n" +
                "			false isBOM,          \n" +
                "            c.isCustom          \n" +
                "		from component_alternatepn ca        \n" +
                "		join component c ON c.id = ca.refComponentID        \n" +
                "		JOIN mfgCodemst AS m ON c.mfgcodeID = m.id        \n" +
                "		JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id        \n" +
                "	  where ca.componentID = pPartID        \n" +
                "         and ca.isDeleted = 0        \n" +
                "         and c.isDeleted = 0        \n" +
                "		 union all          \n" +
                "		 select cp.id, cp.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,      \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType, fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) displayValue,          \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,          \n" +
                "				ro.rohsIcon,          \n" +
                "				ro.name rohsName,          \n" +
                "				'Process Material' whereUsed,          \n" +
                "                4 whereUsedOrder,    \n" +
                "				false isBOM,          \n" +
                "				c.isCustom          \n" +
                "		   from component_processmaterial cp          \n" +
                "		   join component c ON c.id = cp.refComponentID          \n" +
                "		   JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0        \n" +
                "		   JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id          \n" +
                "		  where cp.componentID = pPartID          \n" +
                "            and cp.isDeleted = 0        \n" +
                "		    and c.isDeleted = 0        \n" +
                "		union all          \n" +
                "        select cd.id, cd.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,      \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType,	fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) mfgFormattedName,        \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,          \n" +
                "				ro.rohsIcon,          \n" +
                "				ro.name rohsName,          \n" +
                "				'Drive Tools' whereUsed,          \n" +
                "                3 whereUsedOrder,    \n" +
                "				false isBOM,          \n" +
                "				c.isCustom          \n" +
                "		   from component_drivetools cd          \n" +
                "		   join component c ON c.id = cd.refComponentID          \n" +
                "			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0        \n" +
                "			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id          \n" +
                "		  where cd.componentID = pPartID          \n" +
                "            and cd.isDeleted = 0        \n" +
                "		    and c.isDeleted = 0        \n" +
                "		union all          \n" +
                "        select cc.id, cc.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,      \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType,	fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) displayValue,  \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,          \n" +
                "				ro.rohsIcon,          \n" +
                "				ro.name rohsName,          \n" +
                "				'Customer CPN' whereUsed,          \n" +
                "                5 whereUsedOrder,    \n" +
                "				false isBOM,          \n" +
                "				c.isCustom          \n" +
                "		   from component_cust_alias_rev_pn cc          \n" +
                "		   join component c ON c.id = cc.refCPNPartID          \n" +
                "			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0        \n" +
                "			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id          \n" +
                "		  where cc.refComponentID = pPartID        \n" +
                "            and cc.isDeleted = 0        \n" +
                "			and c.isDeleted = 0;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsedOrder ASC\") ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN          \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentWhereUsedOther where \", pWhereClause );            \n" +
                "	PREPARE query4 FROM @SQLStatement4;            \n" +
                "	EXECUTE query4;            \n" +
                "	DEALLOCATE PREPARE query4;            \n" +
                "  \n" +
                "	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentWhereUsedOther where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query5 FROM @SQLStatement5;            \n" +
                "	EXECUTE query5;            \n" +
                "	DEALLOCATE PREPARE query5;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5012,'2.00','V1',' Bug 35387: Part Master:  - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5012:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSplitUMIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSplitUMIDList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pUIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Offset INT;  \n" +
                "	DECLARE v_RowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pUIDId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND parentUIDId = \", pUIDId, \"\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET v_Offset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET v_RowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , v_Offset) ;  \n" +
                "	ELSE  \n" +
                "		SET v_RowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_Split_UMID = CONCAT(\"  \n" +
                "			SELECT 		css.id,	 	uid,	fromUIDId,	fromUID,	parentUIDId,	parentUID,  \n" +
                "						css.orgQty,		css.pkgQty, 	IFNULL(css.orgPkgUnit, 0) orgPkgUnit,	IFNULL(css.pkgUnit,0) pkgUnit,  \n" +
                "                        css.uom, 		u.unitName uomName,   u.measurementTypeID uomClassID,  \n" +
                "						css.fromBin,	fun_getBinNameByID(css.fromBin) fromBinName,  \n" +
                "						css.fromWarehouse,		fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,  \n" +
                "						css.fromDepartment,  	fun_getWarehouseNameByID(css.fromDepartment) fromDeptName,  \n" +
                "						css.binID, 		fun_getBinNameByID(css.binID) currentBinName,  \n" +
                "						fun_getWarehouseNameByBinID(css.binID) currentWHName,	fun_getDepartmentNameByBinID(css.binID) currentDeptName,  \n" +
                "						fun_getUserNameByID(css.updatedBy) AS updatedBy,   	fun_getUserNameByID(css.createdBy) createdBy,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_getRoleByID(css.createByRoleId) createdbyRole,		fun_getRoleByID(css.updateByRoleId) updatedbyRole  \n" +
                "            FROM		component_sid_stock css  \n" +
                "						INNER JOIN uoms u ON css.uom = u.id AND u.isDeleted = 0  \n" +
                "						AND css.isdeleted = 0 AND css.fromUIDId IS NOT NULL AND css.parentUIDId IS NOT NULL  \n" +
                "				  AND \", pWhereClause  \n" +
                "			);  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Split_UMID, \" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Split_UMID,\" ) c \" , pOrderBy , v_RowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5013,'2.00','V1','User Story #35425 Task 35552: Implement Count/Unit changes into Split UID list page for sample - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5013:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                "	IN pJobTypeIds VARCHAR(16383),  \n" +
                "	IN pAssyIds VARCHAR(16383),  \n" +
                "	IN pAssyNicknameIds LONGTEXT,  \n" +
                "	IN pIsExportControlled TINYINT,  \n" +
                "	IN pIsQuoteOverdue TINYINT,  \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pOlderThenDays INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "        DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		   (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		 (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                "        (CASE  \n" +
                "        WHEN rfq_statusID = 1 THEN  \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                "				quoteSubmitDate > quoteDueDate  \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				quoteClosedDate	> quoteDueDate  \n" +
                "            END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF; */  \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "            ra.isCustomPartDetShowInReport,  \n" +
                "            ra.quoteValidTillDate,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN fun_getUserNameByID(part.activityStartBy) ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') activityStartAt,  \n" +
                "			part.activityStartAt activityStartAtDateTime,  \n" +
                "            ra.isActivityStart as isCostingActivityStart, (CASE WHEN ra.isActivityStart THEN fun_getUserNameByID(ra.activityStartBy) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') costingActivityStartAt,  \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "		WHERE rf.isdeleted = 0  \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                "		else 1=1 end)  \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                "	EXECUTE RFQquery1;  \n" +
                "	DEALLOCATE PREPARE RFQquery1;  \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                "	EXECUTE RFQquery2;  \n" +
                "	DEALLOCATE PREPARE RFQquery2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5014,'2.00','V1',' Alter procedure Sproc_GetRFQList-Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5014:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)  \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);  \n" +
                "    ELSE  \n" +
                "		SELECT 		psmr.id  \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.receiptType AS receiptType  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.supplierSONumber  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.invoiceNumber  \n" +
                "				, psmr.invoiceDate  \n" +
                "				, psmr.creditMemoNumber  \n" +
                "				, psmr.creditMemoDate  \n" +
                "				, psmr.debitMemoNumber  \n" +
                "				, psmr.debitMemoDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate  \n" +
                "				, psmr.chequeNumber  \n" +
                "				, psmr.chequeAmount  \n" +
                "				, psmr.chequeDate  \n" +
                "				, psmr.creditMemoType  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) creditMemoTypeValue  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) debitMemoTypeValue  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber  \n" +
                "				, psmrd.orderedQty  \n" +
                "				, psmrd.packingSlipQty  \n" +
                "				, psmrd.invoicePrice  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, psmrd.purchasePrice  \n" +
                "				, psmrd.extendedPrice  \n" +
                "				, psmrd.extendedReceivedPrice  \n" +
                "				, psmrd.nickname  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_getMfgCodeAndNameByID(mfgMst.id) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty  \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId  \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber  \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber  \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber  \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN  \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) refPackingSlipIdForMemo  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "				, psmrd.receivedStatus  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "                        WHEN psmrd.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) AS receivedStatusValue  \n" +
                "				, psmrd.remark,  \n" +
                "				(case when psmr.lockStatus = 'LC' then  \n" +
                "							'Locked'  \n" +
                "						when psmr.lockStatus = 'RL' then  \n" +
                "							'Ready To Lock'  \n" +
                "						when psmr.lockStatus = 'NA' then  \n" +
                "							'Not Applicable'  \n" +
                "						else '' end  \n" +
                "				) lockStatus,  \n" +
                "				(case when h.status ='H' then  \n" +
                "						'Halted'  \n" +
                "					else '' end) haltStatus,  \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted,  \n" +
                "                psmr.refPurchaseOrderID  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'  \n" +
                "        WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5015,'2.00','V1',' Bug 35543: PO and PS: Data update with Enterprise Search - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5015:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForComponent`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForComponent`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pShowPackagingAlias TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vFromSQLQuery VARCHAR(16383);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY PIDCode, uid\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"' OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET vFromSQLQuery = CONCAT(\"  \n" +
                "		SELECT kitAllocationId,	id,		refSalesOrderDetID,	salesOrderNumber,	poNumber,  \n" +
                "			assyID,		nickname,		assyPIDCode,	        assyPN,  \n" +
                "			assyRohsId, 	assyRohsIcon,		assyRohsName,  \n" +
                "			kitName,  \n" +
                "			lineID,		refRfqLineitem, 	qpa,			kitQty,  \n" +
                "			requireUnitsForBuild,  \n" +
                "			partId,  \n" +
                "			mfgPart,  \n" +
                "			component,  \n" +
                "			mfgPN,  \n" +
                "			refUIDId,	uid,			pkgQty,			pkgUnit,		uom,  \n" +
                "			allocatedQty,	allocatedUnit,		allocatedUOM,		allocatedUOMID, 	allocatedPins  \n" +
                "		FROM 	(  \n" +
                "				select 	k.id kitAllocationId,	 kl.id,		k.refSalesOrderDetID,	s.salesOrderNumber,		s.poNumber,  \n" +
                "					k.assyID,		assy.nickname,		assy.PIDCode assyPIDCode,	assy.mfgPN assyPN,  \n" +
                "					assy.rohsStatusId assyRohsId,  \n" +
                "					fun_getRoHSIconByID(assy.rohsStatusId) assyRohsIcon,  \n" +
                "					fun_getRoHSNameByID(assy.rohsStatusId) assyRohsName,  \n" +
                "					kl.lineID,		kl.refRfqLineitem,	 kl.qpa,			ka.kitQty,  \n" +
                "					concat(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode) kitName,  \n" +
                "					(kl.qpa * ka.kitQty) requireUnitsForBuild,  \n" +
                "					k.partId,  \n" +
                "					-- (select GROUP_CONCAT(DISTINCT(kalt.mfgPNID)) from kit_allocation_lineitems_alternatepart kalt where kalt.partID = k.assyID AND kalt.mfgPNID = \", pPartID, \" AND kalt.refSalesOrderDetID = k.refSalesOrderDetID)  mfgPart,  \n" +
                "					(select GROUP_CONCAT(DISTINCT(p.mfgPNID))  \n" +
                "				from 	(  \n" +
                "						select 	kalt.mfgPNID  \n" +
                "						from 	kit_allocation_lineitems_alternatepart kalt  \n" +
                "						where 	kalt.partID =  k.assyID  \n" +
                "						AND  	kalt.refRfqLineitem = k.refBOMLineID  \n" +
                "						union  \n" +
                "						SELECT 	componentID as mfgPNID  \n" +
                "						FROM 	component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias  \n" +
                "							WHERE 	componentID in (  \n" +
                "								select 	kalt.mfgPNID  \n" +
                "								from 	kit_allocation_lineitems_alternatepart kalt  \n" +
                "								where 	kalt.partID = k.assyID  \n" +
                "										AND  kalt.refRfqLineitem = k.refBOMLineID  \n" +
                "							)  \n" +
                "							AND deletedAt IS NULL  \n" +
                "						) AND deletedAt IS NULL  \n" +
                "					) as p  \n" +
                "			)  mfgPart,  \n" +
                "			fun_getKitAllocationPIDsForComponent(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") component,  \n" +
                "			fun_getKitAllocationPIDsForMfgPN(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") mfgPN,  \n" +
                "			k.refUIDId,		csd.uid,		csd.pkgQty,			csd.pkgUnit,  \n" +
                "			fun_getUnitNameByID(csd.uom) uom,  \n" +
                "			k.allocatedQty,	k.allocatedUnit,  \n" +
                "			fun_getUnitNameByID(k.allocatedUOM) allocatedUOM,  \n" +
                "			k.allocatedUOM allocatedUOMID,  \n" +
                "			fun_getKitAllocatedPin(k.assyID, k.refSalesOrderDetID, k.refBOMLineID, NULL, kl.numOfPosition, FALSE) allocatedPins  \n" +
                "		from 	kit_allocation k  \n" +
                "		inner join	kit_allocation_lineitems kl on k.refBOMLineID = kl.refRfqLineitem and k.refSalesOrderDetID = kl.refSalesOrderDetID  \n" +
                "		inner join	kit_allocation_assy_detail ka on k.assyID = ka.partId and k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "		inner join 	salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "		inner join 	salesordermst s on sd.refSalesOrderID = s.id  \n" +
                "		inner join	component assy on k.assyID = assy.id  \n" +
                "		inner join	component c on k.partId = c.id  \n" +
                "		inner join	component_sid_stock csd on k.refUIDId = csd.id  \n" +
                "		where 		k.status = 'A'  \n" +
                "				AND	(  \n" +
                "					k.partId IN (  \n" +
                "							SELECT 	componentID  \n" +
                "							FROM 	component_packagingalias  \n" +
                "							WHERE 	aliasgroupID IN (  \n" +
                "									SELECT 	aliasgroupID  \n" +
                "									FROM 	component_packagingalias  \n" +
                "									WHERE 	componentID = \",pPartID,\"  \n" +
                "									AND 	deletedAt is null  \n" +
                "								      )  \n" +
                "							AND deletedAt is null  \n" +
                "						)  \n" +
                "				OR k.partId = \",pPartID,\"  \n" +
                "			)  \n" +
                "		 ) As tempUMID  where\", pWhereClause);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetAllocatedKitForComponent;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetAllocatedKitForComponent AS \", vFromSQLQuery, \" \" , rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM temp_Sproc_GetAllocatedKitForComponent \", pOrderBy);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5016,'2.00','V1','Bug 35447: Kit allocation Stock pop-up issues given by DV 13/07/2021 [Main Branch] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5016:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-07-2021 *********************************** */
                "ALTER TABLE salesorderdet ADD COLUMN frequency INT COMMENT 'Every-1,First-2,Last-3';  \n" +
                "ALTER TABLE salesorderdet ADD COLUMN refSODetID INT,ADD COLUMN refSOReleaseLineID INT;  \n" +
                "ALTER TABLE customer_packingslip_det ADD COLUMN refCustPackingSlipDetID INT;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5017,'2.00','V1',' Alter table salesorderdet-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5017:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSalesOrderReleaseDetailLine` ;  \n" +
                "CREATE FUNCTION `fun_getSalesOrderReleaseDetailLine`(  \n" +
                "	psalesOrderReleaseLineID INT  \n" +
                "  \n" +
                ") RETURNS VARCHAR(255) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_soReleaseLineDet VARCHAR(255);  \n" +
                "  \n" +
                "		SELECT CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\"%m/%d/%y\")) INTO v_soReleaseLineDet FROM salesshippingmst  \n" +
                "		       WHERE shippingID=psalesOrderReleaseLineID;  \n" +
                "  \n" +
                "  \n" +
                "		RETURN v_soReleaseLineDet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "SELECT `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,`a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "`a`.`poNumber` AS `Po Number`,`a`.`poDate` AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "`a`.`shippingMethodID` AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`partID` AS `PartID`,`a`.`PIDCode` AS `Assy ID`,`a`.`mfgPN` AS `Assy Name`,`a`.`rev` AS `Assy Revision`,  \n" +
                "`a`.`nickName` AS `NickName`,`a`.`liveVersion` AS `liveVersion`,`a`.`mfgPNDescription` AS `AssyDescr`,`a`.`isCustomPart` AS `isCustomPart`,`a`.`qty` AS `PO Qty`,  \n" +
                "`a`.`ShippedQty` AS `Shipped Qty`,`a`.`shippingQty` AS `shippingQty`,`a`.`companyName` AS `Company Name`,`a`.`internalPO` AS `internalPO`,`a`.`mfgCode` AS `mfgCode`,  \n" +
                "`a`.`fullName` AS `Full Name`,`a`.`gencCategoryCode` AS `GencCategory Code`,`a`.`isCancle` AS `isCancle`,`a`.`cancleReason` AS `cancleReason`,`a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "`a`.`materialDueDate` AS `materialDueDate`,`a`.`shippingDate` AS `shippingDate`,`a`.`prcNumberofWeek` AS `prcNumberofWeek`,`a`.`remark` AS `remark`,`a`.`price` AS `price`,`a`.`mrpQty` AS `mrpQty`,  \n" +
                "`a`.`kitQty` AS `kitQty`,`a`.`isHotJob` AS `isHotJob`,`a`.`RoHSStatusID` AS `RoHSStatusID`,`a`.`RoHSName` AS `RoHSName`,`a`.`rohsIcon` AS `RohsIcon`,`a`.`lineID` AS `lineID`,`a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "`a`.`manufacturerName` AS `manufacturerName`,(IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,  \n" +
                "(CASE WHEN (`a`.`isCancle` = 1) THEN 'Canceled' WHEN ((`a`.`salesOrderDetStatus` = 1) OR (`a`.`salesOrderDetailId` IS NULL)) THEN 'In Progress' ELSE 'Completed' END) AS `Status`,  \n" +
                "`a`.`modifyDate` AS `modifyDate`,`a`.`createdDate` AS `createdDate`,`a`.`soModifiedBy` AS `soModifiedBy`,`a`.`soCreatedBy` AS `soCreatedBy`,`a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "`a`.`createdbyRole` AS `createdbyRole`,`a`.`deletedbyRole` AS `deletedbyRole`,`a`.`salesOrderDetailId` AS `SalesOrderDetailId`,`a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "`a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,`a`.`kitnumber` AS `kitnumber`,`a`.`isSkipKitCreation` AS `isSkipKitCreation`,`a`.`partDescription` AS `partDescription`,  \n" +
                "`a`.`custPOLineNumber` AS `custPOLineNumber`,`a`.`freeOnBoardId` AS `Free On Board`,`a`.`intermediateShipmentId` AS `intermediateShipmentId`,`a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "`a`.`shippingAddressID` AS `shippingAddressID`,`a`.`internalCommentSo` AS `internalCommentSo`,`a`.`internalComment` AS `internalComment`,`a`.`partCategory` AS `partCategory`,  \n" +
                "`a`.`serialNumber` AS `serialNumber`,`a`.`isBlanketPO` AS `isBlanketPO`,`a`.`blanketPOText` AS `blanketPOText`,`a`.`poRevision` AS `poRevision`,`a`.`partType` AS `partType`,  \n" +
                "(CASE WHEN (`a`.`isCancle` = 1) THEN -(1) ELSE `a`.`salesOrderDetStatus` END) AS `salesOrderDetStatus`,`a`.`completeStatusReason` AS `completeStatusReason`,`a`.`frequency` AS `frequency`,  \n" +
                "`a`.`refSODetID` AS `refSODetID`,`a`.`refSOReleaseLineID` AS `refSOReleaseLineID` FROM (SELECT `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,  \n" +
                "`sm`.`poDate` AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,`sm`.`shippingMethodID` AS `shippingMethodID`,`sm`.`status` AS `status`,  \n" +
                "`sm`.`revision` AS `revision`,`sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID` AS `termsID`,`sm`.`soDate` AS `soDate`,`sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "`sm`.`shippingAddressID` AS `shippingAddressID`,`sm`.`freeOnBoardId` AS `freeOnBoardId`,`sm`.`intermediateShipmentId` AS `intermediateShipmentId`,`sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "`sm`.`serialNumber` AS `serialNumber`,`sm`.`isBlanketPO` AS `isBlanketPO`,(CASE WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes' ELSE 'No' END) AS `blanketPOText`,`sm`.`poRevision` AS `poRevision`,  \n" +
                "`FUN_GETUSERNAMEBYID`(`sm`.`updatedBy`) AS `soModifiedBy`,`FUN_GETUSERNAMEBYID`(`sm`.`createdBy`) AS `soCreatedBy`,`FUN_GETROLEBYID`(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "`FUN_GETROLEBYID`(`sm`.`createByRoleId`) AS `createdbyRole`,`FUN_GETROLEBYID`(`sm`.`deleteByRoleId`) AS `deletedbyRole`,`FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "`FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "(SELECT 1 FROM `workorder_salesorder_details` `x` WHERE ((`x`.`salesOrderDetailID` = `a`.`id`) AND (`x`.`isDeleted` = 0)) LIMIT 1) AS `wosalesOrderDetail`,`co`.`PIDCode` AS `PIDCode`,  \n" +
                "`co`.`mfgPN` AS `mfgPN`,`co`.`rev` AS `rev`,`co`.`nickName` AS `nickName`,`co`.`liveVersion` AS `liveVersion`,`co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "`co`.`isCustom` AS `isCustomPart`,`co`.`partType` AS `partType`,`co`.`mfgcodeID` AS `mfgcodeID`,CONCAT('(',`cu`.`mfgCode`,') ',`cu`.`mfgName`) AS `companyName`,  \n" +
                "`cu`.`mfgCode` AS `mfgCode`,`cu`.`isCompany` AS `internalPO`,`mg`.`mfgName` AS `manufacturerName`,CONCAT(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,  \n" +
                "`gc`.`gencCategoryCode` AS `gencCategoryCode`,`co`.`RoHSStatusID` AS `RoHSStatusID`,`roh`.`name` AS `RoHSName`,`roh`.`rohsIcon` AS `rohsIcon`,`a`.`qty` AS `qty`,  \n" +
                "`a`.`id` AS `salesOrderDetailId`,`a`.`kitNumber` AS `kitnumber`,`a`.`isSkipKitCreation` AS `isSkipKitCreation`,`a`.`partDescription` AS `partDescription`,  \n" +
                "`a`.`partID` AS `partID`,`a`.`isCancle` AS `isCancle`,`a`.`isHotJob` AS `isHotJob`,`a`.`cancleReason` AS `cancleReason`,`a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "(SELECT MIN(IFNULL(`ssm`.`requestedDockDate`,`ssm`.`shippingDate`)) FROM `salesshippingmst` `ssm` WHERE ((`ssm`.`sDetID` = `a`.`id`) AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "`a`.`materialDueDate` AS `materialDueDate`,`a`.`prcNumberofWeek` AS `prcNumberofWeek`,`a`.`remark` AS `remark`,`a`.`price` AS `price`,`a`.`mrpQty` AS `mrpQty`,`a`.`kitQty` AS `kitQty`,  \n" +
                "`a`.`shippingQty` AS `shippingQty`,`a`.`custPOLineNumber` AS `custPOLineNumber`,`a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,`a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "`a`.`internalComment` AS `internalComment`,`a`.`partCategory` AS `partCategory`,`a`.`lineID` AS `lineID`,  \n" +
                "(CASE WHEN (`a`.`frequency` = 1) THEN 'Every' WHEN (`a`.`frequency` = 2) THEN 'First' WHEN (`a`.`frequency` = 3) THEN 'Last' ELSE '' END) AS `frequency`,`a`.`refSODetID` AS `refSODetID`,  \n" +
                "`a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,(SELECT IFNULL(SUM(`customer_packingslip_det`.`shipQty`),0) FROM `customer_packingslip_det`  \n" +
                "WHERE ((`customer_packingslip_det`.`partId` = `a`.`partID`) AND (`customer_packingslip_det`.`isDeleted` = 0)  \n" +
                "AND `customer_packingslip_det`.`refCustPackingSlipID` IN (SELECT `cps`.`id` FROM `customer_packingslip` `cps` WHERE (`cps`.`transType` = 'P'))  \n" +
                "AND (`customer_packingslip_det`.`refSalesorderDetid` = `a`.`id`))) AS `ShippedQty`,`k`.`releasedWorkorder` AS `releasedWorkorder`,`k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "FROM ((((((((`salesordermst` `sm` LEFT JOIN `salesorderdet` `a` ON(((`sm`.`id` = `a`.`refSalesOrderID`) AND (`a`.`deletedAt` IS NULL) AND (`sm`.`deletedAt` IS NULL))))  \n" +
                "LEFT JOIN `mfgcodemst` `cu` ON(((`sm`.`customerID` = `cu`.`id`) AND (`cu`.`deletedAt` IS NULL)))) LEFT JOIN `component` `co` ON((`a`.`partID` = `co`.`id`)))  \n" +
                "LEFT JOIN `mfgcodemst` `mg` ON(((`mg`.`id` = `co`.`mfgcodeID`) AND (`mg`.`isDeleted` = 0)))) LEFT JOIN `rfq_rohsmst` `roh` ON(((`roh`.`id` = `co`.`RoHSStatusID`) AND (`roh`.`deletedAt` IS NULL))))  \n" +
                "LEFT JOIN `customer_contactperson` `cc` ON(((`sm`.`contactPersonID` = `cc`.`personId`) AND (`cc`.`deletedAt` IS NULL))))  \n" +
                "LEFT JOIN `genericcategory` `gc` ON(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) AND (`gc`.`deletedAt` IS NULL))))  \n" +
                "LEFT JOIN (SELECT `s`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`refAssyId` AS `refAssyId`,GROUP_CONCAT(DISTINCT ' ',`wo`.`woNumber` SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "GROUP_CONCAT(DISTINCT ' ',CONCAT(`wo`.`woID`,'###',`wo`.`woNumber`) SEPARATOR ',') AS `releasedWorkorderNmberAndId` FROM (`salesorder_plan_detailsmst` `s`  \n" +
                "LEFT JOIN `workorder` `wo` ON((`wo`.`woID` = `s`.`woID`))) GROUP BY `s`.`salesOrderDetID`) `k` ON((`k`.`salesOrderDetID` = `a`.`id`))) WHERE (`sm`.`deletedAt` IS NULL)) `a`;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesorderdet` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),  \n" +
                "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(CAST(OLD.price AS DECIMAL(15,5)) AS CHAR),  \n" +
                "      CAST(CAST(new.price AS DECIMAL(15,5)) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),  \n" +
                "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),  \n" +
                "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),  \n" +
                "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),  \n" +
                "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),  \n" +
                "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),  \n" +
                "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),  \n" +
                "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),  \n" +
                "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),  \n" +
                "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(old.custPOLineNumber,\"\")!=IFNULL(NEW.custPOLineNumber,\"\")THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',OLD.custPOLineNumber,  \n" +
                "       new.custPOLineNumber,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "       END IF;  \n" +
                "       IF IFNULL(old.salesOrderDetStatus,0)!=IFNULL(NEW.salesOrderDetStatus,0)THEN  \n" +
                "		   INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		   VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'Status',CASE  WHEN OLD.salesOrderDetStatus=1 THEN 'InProgress' WHEN OLD.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END ,  \n" +
                "		   CASE WHEN NEW.salesOrderDetStatus=1 THEN 'InProgress' WHEN NEW.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "       END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isSkipKitCreation,0) != IFNULL(NEW.isSkipKitCreation,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISKIPKITCREATION',CASE WHEN OLD.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTENUMBER',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "       CAST(new.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.frequency,0) != IFNULL(NEW.frequency,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'FREQUENCY',CAST(CASE WHEN OLD.frequency=1 THEN 'Every' WHEN OLD.frequency=2 THEN 'First' WHEN OLD.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),  \n" +
                "       CAST(CASE WHEN new.frequency=1 THEN 'Every' WHEN new.frequency=2 THEN 'First' WHEN new.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTEFROM',  \n" +
                "       CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ'  \n" +
                "			WHEN OLD.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN OLD.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		CASE WHEN new.quoteFrom = 1 THEN 'From RFQ'  \n" +
                "			WHEN new.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN new.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetForOtherCharges` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetForOtherCharges`(  \n" +
                "	IN psalesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		NULL releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "         pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			NULL releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "			LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		WHERE sd.refSalesOrderID = psalesorderID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "		AND sd.isCancle=0  \n" +
                "		AND sd.partCategory = 2  \n" +
                "		AND sd.refSODetID IS NULL  \n" +
                "		AND c.partType  =4  \n" +
                "    ) a  WHERE a.poQty - IFNULL(a.shippedQty,0) > 0;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "	IFNULL(sd.custPOLineNumber ,1)   custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        ss.releaseNotes,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "         c.mfgpn,  \n" +
                "         c.mfgpndescription,  \n" +
                "         c.pidcode,  \n" +
                "         fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "         c.nickName,  \n" +
                "         c.mfgcodeID,  \n" +
                "         fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "	(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "	fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "	fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "	fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "	CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT(IFNULL(ss.shippingDate,ss.requestedDockDate), '%m-%d-%y')) shipping,  \n" +
                "	(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
                "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
                "		AND cpd.isdeleted=0) shippedQty ,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "		ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "        (SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "        sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID, sd.refRFQGroupID, sd.refRFQQtyTurnTimeID  ,  \n" +
                "        IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "						c.category partCategory  \n" +
                "        FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "  \n" +
                "WHERE sd.id=psalesorderDetID  \n" +
                "AND  sd.isDeleted = 0 AND  \n" +
                "(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
                "	ss.qty > (SELECT  \n" +
                "	IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
                "		AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  \n" +
                "		SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
                "ELSE  \n" +
                "	ss.qty=ss.qty  \n" +
                "END)  \n" +
                "AND ss.isdeleted=0  \n" +
                "ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "-- all list of shipping line with other charges  \n" +
                "SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		NULL releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "                  pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        refSODetID,  \n" +
                "        refSOReleaseLineID,  \n" +
                "        frequency  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			NULL releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 sd.refSODetID,  \n" +
                "			 sd.refSOReleaseLineID,  \n" +
                "			 sd.frequency,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "			LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingShippingDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.binID, cpd.whID,  \n" +
                "			ss.qty as releaseLineQty,  \n" +
                "			cpd.standrads,  \n" +
                "			ss.releaseNumber,  \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			c.mfgpn,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,  \n" +
                "			cpd.reflineID as lineID ,  \n" +
                "			     fun_getMfgCodeAndNameByID(c.mfgcodeid) mfgName,  \n" +
                "			     c.mfgcodeid ,  \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
                "             cpd.refLineId soLineId ,  \n" +
                "             cpd.refCustPackingSlipDetID,  \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
                "             cpd.componentStockType,  \n" +
                "             if(cp.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "             c.isCustom,c.isCPN,  \n" +
                "             if(cp.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "			(case when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText  \n" +
                "		FROM `customer_packingslip_det` AS cpd  \n" +
                "			left join component c on c.id=cpd.partid  \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "        /* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteCustomerPackingslipDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteCustomerPackingslipDet`(  \n" +
                "	IN pRefCustPackingSlipDetIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pToBinIDOfEmptyBin INT,  \n" +
                "	IN pTransTypeForUMID VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100) ,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE totCustPackingSlipDet INT DEFAULT 0;  \n" +
                "	DECLARE j_cpd INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totUIShipAssyUMID INT DEFAULT 0;  \n" +
                "	DECLARE lv_sa_refsidid INT;  \n" +
                "	DECLARE lv_sa_umid VARCHAR(20);  \n" +
                "	DECLARE lv_sa_shippedqty INT;  \n" +
                "	DECLARE lv_cpsd_refSalesorderDetid INT;  \n" +
                "	DECLARE lv_cpsd_partID INT;  \n" +
                "	DECLARE lv_sa_partID INT;  \n" +
                "	DECLARE lv_currRefCustPackingSlipDetID INT;  \n" +
                "	DECLARE lv_uomIDOfAssy INT;  \n" +
                "/*  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "*/  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslipdet;  \n" +
                "  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslipdet as  \n" +
                "		(SELECT 0 cnt ,\"\" as msg)  \n" +
                "	');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslipdet t)=0 THEN  \n" +
                "			-- START TRANSACTION;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "			CREATE TEMPORARY TABLE t( txt TEXT );  \n" +
                "			INSERT INTO t VALUES(pRefCustPackingSlipDetIDs);  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_refSalesorderDetids;  \n" +
                "			CREATE TEMPORARY TABLE temp_refSalesorderDetids( val CHAR(255) );  \n" +
                "			SET @SQL = CONCAT(\"insert into temp_refSalesorderDetids (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");  \n" +
                "			PREPARE stmt1 FROM @SQL;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustPackingSlipDet FROM temp_refSalesorderDetids ;  \n" +
                "			SET j_cpd=0;  \n" +
                "			/* customer packing slip det loop */  \n" +
                "			WHILE j_cpd < totCustPackingSlipDet DO  \n" +
                "  \n" +
                "				SET lv_currRefCustPackingSlipDetID = NULL;  \n" +
                "				SET lv_cpsd_refSalesorderDetid = NULL;  \n" +
                "  \n" +
                "				SELECT val INTO lv_currRefCustPackingSlipDetID  \n" +
                "				FROM temp_refSalesorderDetids LIMIT j_cpd,1 ;  \n" +
                "  \n" +
                "				/* get all UMID details for ref customer packing slip det from shipped assembly */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList_UMID;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UIShipAssyList_UMID AS  \n" +
                "					SELECT sa.woNumber, sa.refsidid,  \n" +
                "						(SELECT uid FROM component_sid_stock WHERE id = sa.refsidid AND isDeleted = 0) AS umid,  \n" +
                "						shippedqty , partID  \n" +
                "					FROM shippedassembly sa  \n" +
                "					WHERE sa.refCustPackingSlipDetID = lv_currRefCustPackingSlipDetID  \n" +
                "					AND sa.refsidid IS NOT NULL  \n" +
                "					AND sa.isDeleted = 0 AND sa.shippedqty > 0 ;  \n" +
                "  \n" +
                "				/* if cust packing det contain any UMID as shipped assembly then only  \n" +
                "					required ajdjust UMID stock */  \n" +
                "				IF((SELECT COUNT(1) FROM temp_UIShipAssyList_UMID) > 0) THEN  \n" +
                "  \n" +
                "					/* get all UMID details for ref customer packing slip det from component sid stock */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS temp_db_comp_sid_stock_list AS  \n" +
                "					SELECT 	csd.id,			csd.uid,		csd.refcompid,  \n" +
                "						csd.binID,		b.warehouseID,		w.parentWHID deptWHID,  \n" +
                "						csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,  \n" +
                "						csd.pkgUnit,		csd.uom,		csd.createdAt  \n" +
                "					FROM 	component_sid_stock   csd  \n" +
                "						JOIN 	binmst b ON csd.binID = b.id  \n" +
                "						JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "					WHERE   csd.id IN (SELECT refsidid FROM temp_UIShipAssyList_UMID)  \n" +
                "					AND 	csd.isdeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "					/* get required customer_packingslip_details */  \n" +
                "					SELECT refSalesorderDetid, partId INTO lv_cpsd_refSalesorderDetid, lv_cpsd_partID  \n" +
                "					FROM customer_packingslip_det  \n" +
                "					WHERE id = lv_currRefCustPackingSlipDetID AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SELECT uom INTO lv_uomIDOfAssy  \n" +
                "					FROM component  \n" +
                "					WHERE id = lv_cpsd_partID ;  \n" +
                "  \n" +
                "					SELECT COUNT(1) INTO totUIShipAssyUMID FROM temp_UIShipAssyList_UMID ;  \n" +
                "					SET i=0;  \n" +
                "					WHILE i < totUIShipAssyUMID DO  \n" +
                "  \n" +
                "						SET lv_sa_refsidid = NULL;  \n" +
                "						SET lv_sa_umid = NULL;  \n" +
                "						SET lv_sa_shippedqty = 0;  \n" +
                "						SET lv_sa_partID = NULL;  \n" +
                "  \n" +
                "  \n" +
                "						SELECT refsidid, umid, shippedqty, partID  \n" +
                "							INTO lv_sa_refsidid , lv_sa_umid , lv_sa_shippedqty, lv_sa_partID  \n" +
                "						FROM temp_UIShipAssyList_UMID LIMIT i,1 ;  \n" +
                "  \n" +
                "  \n" +
                "						/* if change stock from UMID then check consume/adjustment UMID case */  \n" +
                "						CALL Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS(lv_sa_umid, lv_sa_refsidid,  \n" +
                "							0, lv_sa_shippedqty, pToBinIDOfEmptyBin, pTransTypeForUMID,  \n" +
                "							'', '', pActionPerformedForUMIDAdjust,  \n" +
                "							lv_cpsd_refSalesorderDetid, lv_sa_partID,lv_uomIDOfAssy, pUserID, pUserRoleID);  \n" +
                "  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET j_cpd = j_cpd + 1;  \n" +
                "			END WHILE;  \n" +
                "			/* to  update header amount when details deleted*/  \n" +
                "			CREATE TEMPORARY TABLE temp_removeAmt  \n" +
                "			SELECT cpd.refCustPackingSlipID AS id , SUM(extendedPrice) AS removeAmt  \n" +
                "			FROM customer_packingslip_det cpd  \n" +
                "			WHERE FIND_IN_SET(cpd.id,pRefCustPackingSlipDetIDs)  \n" +
                "			AND cpd.isDeleted = 0  \n" +
                "			GROUP BY cpd.refCustPackingSlipID;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip cp join temp_removeAmt tmp on tmp.id = cp.id set cp.totalAmount = cp.totalAmount - tmp.removeAmt where cp.id IN  ( select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.id in (',pRefCustPackingSlipDetIDs,') ) and cp.isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQL2 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in ( select refSalesorderDetid from customer_packingslip_det where  id in (',pRefCustPackingSlipDetIDs,') ) and sd.isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL2;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomerPackingslipdet WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "  \n" +
                "		-- COMMIT;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "		      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslipdet t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			FROM tempcustomerPackingslipdet t1  \n" +
                "			INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(t1.cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomerPackingslipdet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesCommissionDetailToExport` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesCommissionDetailToExport`(  \n" +
                "	pID INT,  \n" +
                "	pDetID INT,  \n" +
                "	pisFromSO TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "         IF(pisFromSO=1)THEN  \n" +
                "	   SELECT sc.unitPrice,sc.commissionPercentage,sc.commissionValue,sc.quoted_commissionPercentage,  \n" +
                "	   sc.quoted_commissionValue,sc.quoted_unitPrice,sc.poQty,sc.quotedQty,sc.type,sc.commissionCalculateFrom,  \n" +
                "	   sc.salesCommissionNotes,c.pidCode,(CASE WHEN sc.type=1 THEN 'From Part Master' WHEN sc.type=2 THEN 'From RFQ' ELSE 'MISC' END) typeName,  \n" +
                "	   (CASE WHEN sc.commissionCalculateFrom=1 THEN 'Sales Price Matrix' WHEN sc.commissionCalculateFrom=2 THEN 'RFQ Quote Summary' ELSE 'Manual' END) commissionCalculateFromText,  \n" +
                "	   sm.poNumber,sm.poDate,fun_getEmployeeInitialNameByEmpID(IFNULL(sd.salesCommissionTo,sm.salesCommissionTo)) salesCommissionTo,  \n" +
                "	   sd.custPOLineNumber,sd.lineID  \n" +
                "	    FROM salesorderdet_commission_attribute_mstdet sc  JOIN component c ON c.id=sc.partID  \n" +
                "	    JOIN salesorderdet sd ON sd.id=sc.refsalesorderdetid AND sd.isdeleted=0  \n" +
                "	    JOIN salesordermst sm ON sm.id=sd.refSalesOrderId  \n" +
                "	    WHERE sc.refsalesorderdetid=IFNULL(pDetID,sc.refsalesorderdetid) AND sd.refSalesOrderId=pID AND sc.isdeleted=0;  \n" +
                "	 ELSE  \n" +
                "		SELECT sc.unitPrice,  \n" +
                "		       sc.commissionPercentage,  \n" +
                "		       sc.commissionValue,  \n" +
                "		       sc.quoted_commissionPercentage,  \n" +
                "		       sc.quoted_commissionValue,  \n" +
                "		       sc.quoted_unitPrice,  \n" +
                "		       sc.poQty,  \n" +
                "		       sc.quotedQty,  \n" +
                "		       sc.type,  \n" +
                "		       sc.commissionCalculateFrom,  \n" +
                "		       sc.salesCommissionNotes,  \n" +
                "		       c.pidCode,  \n" +
                "		       sm.invoiceNumber,  \n" +
                "		       (CASE WHEN sc.type=1 THEN 'From Part Master' WHEN sc.type=2 THEN 'From RFQ' ELSE 'MISC' END) typeName,  \n" +
                "		      (CASE WHEN sc.commissionCalculateFrom=1 THEN 'Sales Price Matrix' WHEN sc.commissionCalculateFrom=2 THEN 'RFQ Quote Summary' ELSE 'Manual' END) commissionCalculateFromText,  \n" +
                "	   sm.poNumber,sm.poDate,fun_getEmployeeInitialNameByEmpID(sm.salesCommissionTo) salesCommissionTo,  \n" +
                "	   sd.custPOLineID custPOLineNumber,sd.lineID  \n" +
                "	    FROM customer_packingslip_commission_attribute_mstdet sc  JOIN component c ON c.id=sc.partID  \n" +
                "	    JOIN customer_packingslip_det sd ON sd.id=sc.refCustPackingSlipDetID AND sd.isdeleted=0  \n" +
                "	    JOIN customer_packingslip sm ON sm.id=sd.refCustPackingSlipID  \n" +
                "	    WHERE sc.refCustPackingSlipDetID=IFNULL(pDetID,sc.refCustPackingSlipDetID) AND sd.refCustPackingSlipID=pID AND sc.isdeleted=0;  \n" +
                "  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5018,'2.00','V1',' SO Other Charges Procedure-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5018:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-07-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,  \n" +
                "				fun_getMfgCodeAndNameByID(inv.mfgcodeID) supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToAddress payToAddress,  \n" +
                "				inv.payToName,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5019,'2.00','V1','Resolved parameter length issue - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5019:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesCommissionDetailsFromRfq` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesCommissionDetailsFromRfq`(  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRfqQuoteNumber VARCHAR(50),  \n" +
                "    IN pIsPushToPartMaster TINYINT,  \n" +
                "    IN pUserId INT,  \n" +
                "    IN pRoleId INT ,  \n" +
                "    IN pIsCallFromPartMaster TINYINT,  \n" +
                "    IN pProceedOverriderQuote TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE alreadyExistQuote INT;  \n" +
                "	DECLARE v_rfqAssyID INT;  \n" +
                "	DECLARE v_quoteValidTill DATE;  \n" +
                "  \n" +
                "	SELECT id,quoteValidTillDate INTO v_rfqAssyID,v_quoteValidTill FROM   rfq_assemblies WHERE quoteNumber=pRfqQuoteNumber AND isdeleted=0;  \n" +
                "	/*this SP used for two purpose 1. get quote data for assembly sales price matrix 2. push data to part master from RFQ page*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSalesCommission;  \n" +
                "  \n" +
                "    SET alreadyExistQuote = 0;  \n" +
                "    IF(pIsCallFromPartMaster = 1 OR pIsPushToPartMaster = 1)  \n" +
                "    THEN  \n" +
                "		SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND isDeleted = 0 AND isHistory = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(alreadyExistQuote > 0 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 0)  \n" +
                "    THEN  \n" +
                "		SELECT alreadyExistQuote;  \n" +
                "    ELSE  \n" +
                "		IF(alreadyExistQuote > 0 AND pIsCallFromPartMaster = 1 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 1)  \n" +
                "        THEN  \n" +
                "			-- Revert Existing History with Same Quote number  \n" +
                "			UPDATE component_price_break_details  \n" +
                "					   SET isHistory = 0, updatedBy = pUserId, updateByRoleId= pRoleId, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				 WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND `type` = 2 AND isHistory = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "			-- Update Part Quote# Part Master  \n" +
                "            UPDATE component  \n" +
                "				   SET rfqNumber = pRfqQuoteNumber,quoteValidTillDate=v_quoteValidTill,  updatedBy = pUserId, updateByRoleId = pRoleId, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				 WHERE id = pPartId AND isDeleted = 0;  \n" +
                "  \n" +
                "            -- Return reverted record to display  \n" +
                "			SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,  \n" +
                "					x.salesCommissionPercentage, x.isHistory,x.salesCommissionNotes,x.rfqAssyID  \n" +
                "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId  \n" +
                "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0  \n" +
                "                 ORDER BY priceBreak,turnTime ASC;  \n" +
                "        ELSE  \n" +
                "			-- Return RFQ Quote Data if exists with Passed RFQQuoteNumber  \n" +
                "			CREATE TEMPORARY TABLE tempSalesCommission AS  \n" +
                "			SELECT x.requestQty priceBreak, x.turnTime, x.unitOfTime, x.assemblyTotalRfqPrice unitPrice, x.salesCommissionAmount,  \n" +
                "					CASE WHEN IFNULL(x.assemblyTotalRfqPrice,0) != 0 THEN  \n" +
                "							ROUND(((x.assemblyTotalRfqPrice - (x.assemblyTotalRfqPrice - x.salesCommissionAmount)) *100/ (x.assemblyTotalRfqPrice - x.salesCommissionAmount)),2)  \n" +
                "						END salesCommissionPercentage,  \n" +
                "						FALSE isHistory,  \n" +
                "                        NULL salesCommissionNotes,  \n" +
                "                        v_rfqAssyID rfqAssyID  \n" +
                "			  FROM (SELECT a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime,  \n" +
                "							SUM(CASE WHEN qdfm.isCommission = 1 THEN raqac.amount ELSE 0 END) salesCommissionAmount,  \n" +
                "							fun_getAssemblyRfqTotalPrice(a.id) assemblyTotalRfqPrice  \n" +
                "					  FROM rfq_assy_quotations a  \n" +
                "					  LEFT JOIN rfq_assy_quotations_additionalcost raqac ON raqac.rfqAssyQuoteID = a.id AND raqac.isDeleted = 0  \n" +
                "					  LEFT JOIN quotecharges_dynamic_fields_mst qdfm ON qdfm.id = raqac.quoteChargeDynamicFieldID AND qdfm.isCommission = 1 AND qdfm.isDeleted = 0 AND qdfm.quoteAttributeType='R'  \n" +
                "					  JOIN rfq_assy_quantity raq ON raq.id = a.rfqAssyQtyID  \n" +
                "					  JOIN rfq_assy_quantity_turn_time raqt ON raqt.id = a.rfqAssyQtyTurnTimeID  \n" +
                "					 WHERE EXISTS (SELECT 1 FROM rfq_assemblies ra WHERE ra.id = a.rfqAssyID AND a.isDeleted = 0 AND ra.partID = pPartId )  \n" +
                "					   AND EXISTS (SELECT 1 FROM rfq_assemblies_quotation_submitted b WHERE b.id = a.refSubmittedQuoteID AND b.quoteNumber = pRfqQuoteNumber)  \n" +
                "					   AND a.isDeleted = 0  \n" +
                "					 GROUP BY a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime) X;  \n" +
                "  \n" +
                "			-- Check If data have to Push into part Master from RFQ Quote  \n" +
                "			IF pIsPushToPartMaster = TRUE THEN  \n" +
                "				SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND  \n" +
                "						rfqNumber = pRfqQuoteNumber AND isDeleted = 0;  \n" +
                "				-- Check Same RFQ Quote Number Record Exist  \n" +
                "				IF(alreadyExistQuote >= 1)  \n" +
                "				THEN  \n" +
                "					-- Check Same RFQ Quote Number Record Exist Then set all record for that Quote as Delete  \n" +
                "					UPDATE component_price_break_details  \n" +
                "					SET isDeleted = 1,  \n" +
                "						isHistory = 0,  \n" +
                "						deletedBy = pUserId,  \n" +
                "						deleteByRoleId= pRoleId,  \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					 WHERE mfgPNID = pPartId  \n" +
                "					   AND `type` = 2  \n" +
                "                       AND rfqNumber = pRfqQuoteNumber  \n" +
                "					   -- and isHistory = 0  \n" +
                "					   AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "					-- Update Other Quote# record as History  \n" +
                "					UPDATE component_price_break_details  \n" +
                "						   SET  isHistory = 1,  \n" +
                "								updatedBy = pUserId,  \n" +
                "								updateByRoleId= pRoleId,  \n" +
                "								updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					 WHERE mfgPNID = pPartId  \n" +
                "					   AND rfqNumber != pRfqQuoteNumber  \n" +
                "					   AND `type` = 2  \n" +
                "					   AND isHistory = 0  \n" +
                "					   AND isDeleted = 0;  \n" +
                "				-- END IF;  \n" +
                "  \n" +
                "				-- Update Part Quote# Part Master  \n" +
                "				UPDATE component  \n" +
                "				   SET rfqNumber = pRfqQuoteNumber,  \n" +
                "						updatedBy = pUserId,  \n" +
                "						quoteValidTillDate=v_quoteValidTill,  \n" +
                "						updateByRoleId = pRoleId,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				 WHERE id = pPartId  \n" +
                "				   AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- Insert RFQ Quote Detail into Comonent Price Break Detail(sales Price Metrix)  \n" +
                "				INSERT INTO component_price_break_details  \n" +
                "						(mfgPNID, priceBreak, unitPrice, isDeleted, createdAt, createdBy, updatedAt, updatedBy, updatedOn,  \n" +
                "						createByRoleId, updateByRoleId, `type`, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, rfqNumber, isHistory,rfqAssyID)  \n" +
                "				SELECT pPartId, priceBreak, unitPrice, 0 /*isDeleted*/, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(),  \n" +
                "						pRoleId, pRoleId, 2/*type*/, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, pRfqQuoteNumber,FALSE isHistory ,rfqAssyID  \n" +
                "				 FROM tempSalesCommission;  \n" +
                "  \n" +
                "                SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,  \n" +
                "					x.salesCommissionPercentage, x.isHistory, x.salesCommissionNotes,x.rfqAssyID  \n" +
                "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId  \n" +
                "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0  \n" +
                "                 ORDER BY priceBreak,turnTime ASC;  \n" +
                "			ELSE  \n" +
                "				SELECT * FROM tempSalesCommission ORDER BY priceBreak,turnTime ASC;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5020,'2.00','V1',' Alter procedure Sproc_getSalesCommissionDetailsFromRfq - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5020:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(  \n" +
                "	IN pVerificationType VARCHAR(100),  \n" +
                "	IN pUID VARCHAR(15),  \n" +
                "	IN pScanMFGPNLabel VARCHAR(1000),  \n" +
                "	IN pScanPID VARCHAR(50),  \n" +
                "	IN pScanCPN VARCHAR(50),  \n" +
                "	IN pScanUID VARCHAR(15),  \n" +
                "	IN pScanMFGPN VARCHAR(100),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pMFRId INT,  \n" +
                "	IN pBarcodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_mfgcodeID INT;  \n" +
                "	DECLARE v_mfgPN VARCHAR(100);  \n" +
                " 	DECLARE v_PIDCode VARCHAR(100);  \n" +
                " 	DECLARE v_PartDescription VARCHAR(2000);  \n" +
                "	DECLARE v_RoHSStatusID INT;  \n" +
                "	DECLARE v_compStockID INT;  \n" +
                "	DECLARE	v_pkgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_pkgUnit DECIMAL(18,8);  \n" +
                " 	DECLARE v_uom VARCHAR(255);  \n" +
                " 	DECLARE v_string2PartID INT;  \n" +
                " 	DECLARE v_scanString2MFG VARCHAR(100);  \n" +
                " 	DECLARE v_scanString2MFGPNID VARCHAR(100);  \n" +
                " 	DECLARE v_packingSlipId INT;  \n" +
                "	DECLARE	v_packingSlipNumber VARCHAR(255);  \n" +
                "	DECLARE	v_packingSlipSupplierId INT;  \n" +
                "	DECLARE	v_packingSlipSupplierCode VARCHAR(10);  \n" +
                "	DECLARE	v_cOfCValue VARCHAR(100);  \n" +
                "	DECLARE v_isCustom TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_successId INT;  \n" +
                "	DECLARE v_refcompid INT;  \n" +
                "    DECLARE v_mountingTypeID INT;  \n" +
                "    DECLARE v_partPackage VARCHAR(255);  \n" +
                "    DECLARE v_uomClassID INT;  \n" +
                "    DECLARE v_spq DECIMAL(18,8);  \n" +
                "    DECLARE v_orgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_imageURL VARCHAR(1000);  \n" +
                "    DECLARE v_documentPath VARCHAR(1000);  \n" +
                "    DECLARE v_mfgCode VARCHAR(255);  \n" +
                "    DECLARE v_mfgName VARCHAR(255);  \n" +
                "    DECLARE v_mfgType VARCHAR(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
                "		SELECT 		*,  \n" +
                "				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		*,  \n" +
                "							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,  \n" +
                "							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
                "                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN stockInventoryType = 'NI' THEN  \n" +
                "														fun_getUMIDPackingSlipNameByID(id)  \n" +
                "													WHEN stockInventoryType = 'SI' THEN  \n" +
                "														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
                "													ELSE  \n" +
                "														uid  \n" +
                "												END  \n" +
                "											)ELSE NULL END) cOfCValue  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
                "										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
                "								FROM 		component_sid_stock cs  \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
                "								WHERE 		cs.uid =  pUID  \n" +
                "								AND 		cs.isDeleted = 0  \n" +
                "								LIMIT 		1  \n" +
                "							) AS a  \n" +
                "				) AS b;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
                "		scanString1 VARCHAR(1000) NULL,  \n" +
                "		scanString2 VARCHAR(1000) NULL,  \n" +
                "		string1PartID INT(11) NULL,  \n" +
                "		scanString1MFG VARCHAR(100) NULL,  \n" +
                "		scanString1MFGPNID VARCHAR(100) NULL,  \n" +
                "		string2PartID INT(11) NULL,  \n" +
                "		scanString2MFG VARCHAR(100) NULL,  \n" +
                "		scanString2MFGPNID VARCHAR(100) NULL,  \n" +
                "		STATUS VARCHAR(100) NULL,  \n" +
                "		packingSlipId INT(11) NULL,  \n" +
                "		packingSlipNumber VARCHAR(255) NULL,  \n" +
                "		packingSlipSupplierId INT(11) NULL,  \n" +
                "		packingSlipSupplierCode VARCHAR(10) NULL,  \n" +
                "		cOfCValue VARCHAR(100) NULL,  \n" +
                "		isDeleted TINYINT(1) DEFAULT '0',  \n" +
                "		createdBy VARCHAR(255) NULL,  \n" +
                "		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP  \n" +
                "	);  \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,  \n" +
                "					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,  \n" +
                "					`packingSlipSupplierCode`,			`cOfCValue`)  \n" +
                "	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,  \n" +
                "		NULL string2PartID,  \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,  \n" +
                "		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,  \n" +
                "		supplierCode,			cOfCValue  \n" +
                "	FROM 	tempUIDDet UH;  \n" +
                "  \n" +
                "	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,  \n" +
                "			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClassID,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
                "            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL  \n" +
                "	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
                "			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClassID,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
                "            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL  \n" +
                "	FROM 	tempUIDDet u;  \n" +
                "  \n" +
                "	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN  \n" +
                "			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN  \n" +
                "				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS  \n" +
                "				SELECT * FROM tempUIDSuccessDetail;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS  \n" +
                "				SELECT * FROM tempUIDComponentDetail;  \n" +
                "				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;  \n" +
                "				IF (v_successId = 1) THEN  \n" +
                "					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;  \n" +
                "					IF (v_componentId = v_refcompid) THEN  \n" +
                "						SET uidVerified = 1;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					SET uidVerified = 0;  \n" +
                "				END IF;  \n" +
                "			-- END IF;  \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN  \n" +
                "			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	component c  \n" +
                "			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF	;  \n" +
                "		ELSEIF (pUID = pScanUID) THEN  \n" +
                "			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	tempUIDDet c;  \n" +
                "			SET uidVerified = 1;  \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN  \n" +
                "				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	tempUIDDet c;  \n" +
                "				SET uidVerified = 1;  \n" +
                "			ELSE  \n" +
                "				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	component c  \n" +
                "				WHERE 	c.mfgPN = pScanMFGPN;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		UPDATE 	tempUIDHistory  \n" +
                "		SET 	string2PartID = v_string2PartID,  \n" +
                "			scanString2MFG = v_scanString2MFG,  \n" +
                "			scanString2MFGPNID = v_scanString2MFGPNID;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
                "				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,  \n" +
                "						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,  \n" +
                "						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
                "						`status`,  \n" +
                "						`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),  \n" +
                "		UH.scanString1MFGPNID,	UH.string2PartID,  \n" +
                "		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,  \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`  \n" +
                "	FROM 	tempUIDHistory UH;  \n" +
                "  \n" +
                "	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
                "		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,  \n" +
                "        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,  \n" +
                "		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
                "		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClassID uomClassID,  \n" +
                "		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,  \n" +
                "		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,  \n" +
                "		v_cOfCValue cOfCValue,	v_isCustom isCustom  \n" +
                "	FROM 	uid_verification_history  \n" +
                "	WHERE 	id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN  \n" +
                "		SELECT * FROM tempUIDSuccessDetail;  \n" +
                "	ELSE  \n" +
                "		SELECT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
                "	pUMIDId INT,  \n" +
                "    pKitAllocationId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	Select  \n" +
                "		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        u.measurementTypeID as uomClassID,  \n" +
                "		rp.kitReleaseDate,  	rp.promiseShipDate,  \n" +
                "        fun_getKitReleaseStatus(ka.refSalesOrderDetID, NULL, ka.assyID, k.allocPerWithSubAssy, false) AS kitReleaseStatus  \n" +
                "	From (  \n" +
                "			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
                "					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
                "					k.allocatedUOM allocatedUOMID  \n" +
                "			FROM 	kit_allocation k  \n" +
                "			WHERE 	k.id = IFNULL(pKitAllocationId, k.id)  \n" +
                "			AND 	k.refUIDId = pUMIDId  \n" +
                "			AND 	k.status = 'A'  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
                "		) ka  \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3  \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id  \n" +
                "	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID  \n" +
                "	LEFT JOIN (  \n" +
                "				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "				FROM  \n" +
                "					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "									FROM  		vu_kit_allocation_detail vk  \n" +
                "									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    	vk.isNotRequiredKitAllocation != 1  \n" +
                "									GROUP BY 	vk.refSalesorderdetid, vk.assyID  \n" +
                "					) as k  \n" +
                "			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
                "	LEFT JOIN (  \n" +
                "		SELECT 	salesOrderDetID,  \n" +
                "				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,  \n" +
                "				MIN(poDueDate) promiseShipDate,  \n" +
                "				count(1) totalPlan,  \n" +
                "				sum(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalReleasedPlan  \n" +
                "		FROM 	vu_release_plan_detail  \n" +
                "		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
                "	ORDER BY (rp.kitReleaseDate IS NULL),  rp.kitReleaseDate ASC, ka.id ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_Transfer_Stock_History`;  \n" +
                "CREATE PROCEDURE `Sproc_Transfer_Stock_History`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pUID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pUID IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND refUIDId = \", pUID, \"\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_Transfer_Stock_History = CONCAT(\"  \n" +
                "			SELECT 		id,				refUIDId,			uid,				transType, 				actionPerformed,  \n" +
                "					binID, 				binName, 			warehouseID,    	warehouseName, 			deptWHID,  \n" +
                "                    departmentName, 						orgQty, 			orgUnit, 				currentQty,  \n" +
                "                    currentUnit, 		uom,         		uomName, 			uomClassID,				scrappedQty,  \n" +
                "					scrappedUnit, 		consumedQty, 		consumedUnit, 		adjustQty, 				adjustUnit,  \n" +
                "                    reason,         	refTransID, 		refTransTable, 		refTrans, 				createdAt,  \n" +
                "					createdByName,		createdbyRole,		updateByRole,       deallocatedKitDesc,		approvalReason,  \n" +
                "					approvedDate,		approvedBy,	 		approvedByRole ,  	splitQty,  				splitUnit,  \n" +
                "					splitUID , splitUIDId  \n" +
                "            FROM		(  \n" +
                "						SELECT 		css.id,			css.refUIDId,		css.uid,			css.transType,				css.actionPerformed,  \n" +
                "								css.binID,			b.name binName, 	css.warehouseID, 	w.name warehouseName,		css.deptWHID,  \n" +
                "								pw.name departmentName,					css.orgQty,			css.orgUnit,				css.currentQty,  \n" +
                "								css.currentUnit,	css.uom,			u.unitName uomName,    							u.measurementTypeID uomClassID,  \n" +
                "								css.scrappedQty,	css.scrappedUnit,	css.consumedQty,	css.consumedUnit,	   		css.adjustQty,  \n" +
                "								css.adjustUnit,		css.reason,			css.refTransID,     css.refTransTable,        	css.splitQty,  \n" +
                "								css.splitUnit,  	css.splitUID, 		css.splitUIDId,     ka.refTrans,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								fun_getUserNameByID(css.createdBy) createdByName,  \n" +
                "								fun_getRoleByID(css.createByRoleId) createdbyRole,  \n" +
                "								fun_getRoleByID(css.createByRoleId) updateByRole,  \n" +
                "                                css.deallocatedKitDesc,      			css.approvalReason,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.approvedDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') approvedDate,  \n" +
                "								fun_getUserNameByID(css.approvedBy) approvedBy,  \n" +
                "                                fun_getRoleByID(css.approvedByRoleId) approvedByRole  \n" +
                "						FROM 	component_sid_stock_history css  \n" +
                "						LEFT JOIN 	( SELECT componentSIDStockHistoryID,  \n" +
                "										GROUP_CONCAT(fun_getKitNameForHistory(refSalesOrderDetID, assyID, refUIDId)) as refTrans  \n" +
                "								FROM kit_allocation WHERE STATUS = 'R' GROUP BY componentSIDStockHistoryID  \n" +
                "									) ka  \n" +
                "									ON ka.componentSIDStockHistoryID = css.id  \n" +
                "						JOIN 		binmst b ON css.binID = b.id   AND b.isDeleted = 0  \n" +
                "						JOIN 		warehousemst w ON css.warehouseID = w.id  AND w.isDeleted = 0  \n" +
                "						JOIN 		warehousemst pw ON css.deptWHID = pw.id   AND pw.isDeleted = 0  \n" +
                "                        JOIN 		uoms u ON u.id = css.uom AND u.isDeleted = 0  \n" +
                "						WHERE 		css.isdeleted = 0  \n" +
                "				) As tempHistory where \", pWhereClause  \n" +
                "			);  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Transfer_Stock_History, \" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Transfer_Stock_History,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(  \n" +
                "	pComponentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalCustomerConsignStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPhysicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_CustomerConsignStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalAvailableInHouseStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalAvailableInHouseStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedToKitStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedCustomerConsignStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AvailableStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackaginggroupID INT;  \n" +
                "	DECLARE v_TotalPackagingStockInSystemRecord DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedPackagingStockToKitStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedPackagingStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPackagingPhysicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingAliasStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalInHouseStock DECIMAL(18,8);  \n" +
                "	DECLARE v_SafetyStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedLogicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_Shortage DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalUnitInUmid DECIMAL(18,8);  \n" +
                "	DECLARE v_MainPartNonUmidStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingPartNonUMIDStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingPartNonUMIDStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingStockInSystemRecordInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingReservedStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedPackagingStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedPackagingStockToKitStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPackagingPhysicalStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalInHouseStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AvailableStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingAliasStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_IsCPN TINYINT;  \n" +
                "	DECLARE v_PartIds VARCHAR(10000);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS  \n" +
                "	SELECT 	id,  \n" +
                "		receiveMaterialType,  \n" +
                "		customerID,  \n" +
                "		fun_getMfgCodeAndNameByID(customerID) customerFullName,  \n" +
                "		pkgQty,  \n" +
                "		pkgUnit,  \n" +
                "		customerConsign  \n" +
                "	FROM 	component_sid_stock  \n" +
                "	WHERE 	refcompid = pComponentID  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalStockInSystemRecord FROM tempStockRawDet;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalReservedStock FROM tempStockRawDet WHERE receiveMaterialType = 'PR';  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalCustomerConsignStock FROM tempStockRawDet WHERE customerConsign = 1;  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(allocatedQty), 0) INTO v_AllocatedToKitStock  \n" +
                "	FROM 	kit_allocation  \n" +
                "	WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)  \n" +
                "			AND `status` = 'A';  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0) INTO v_AllocatedReservedStock  \n" +
                "	FROM 	tempStockRawDet  \n" +
                "	WHERE 	receiveMaterialType = 'PR'  \n" +
                "			AND id IN (  \n" +
                "				SELECT 	refUIDId  \n" +
                "				FROM 	kit_allocation  \n" +
                "				WHERE 	`status` = 'A'  \n" +
                "			);  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0) INTO v_AllocatedCustomerConsignStock  \n" +
                "	FROM 	tempStockRawDet  \n" +
                "	WHERE 	customerConsign = 1  \n" +
                "			AND id IN (  \n" +
                "				SELECT 	refUIDId  \n" +
                "				FROM 	kit_allocation  \n" +
                "				WHERE 	`status` = 'A'  \n" +
                "			);  \n" +
                "  \n" +
                "	SET v_ReservedPhysicalStock = v_TotalReservedStock - v_AllocatedReservedStock;  \n" +
                "	SET v_CustomerConsignStock = v_TotalCustomerConsignStock - v_AllocatedCustomerConsignStock;  \n" +
                "	SET v_AvailableStock = (v_TotalStockInSystemRecord - v_ReservedPhysicalStock - v_CustomerConsignStock - v_AllocatedToKitStock);  \n" +
                "  \n" +
                "	-- Calculate Cumulative Stock  \n" +
                "	SELECT 	SUM(IFNULL(nonUMIDStock, 0)) INTO v_MainPartNonUmidStock  \n" +
                "	FROM 	(  \n" +
                "			SELECT 	IFNULL(SUM(availableQty), 0) nonUMIDStock  \n" +
                "			FROM 	vu_customer_packing_slip_qty  \n" +
                "			WHERE 	partID = pComponentID  \n" +
                "			UNION ALL  \n" +
                "			SELECT 	IFNULL(SUM(vu.BalanceQty), 0) nonUMIDStock  \n" +
                "			FROM 	vu_umid_creation_pending vu  \n" +
                "			WHERE 	vu.PartId = pComponentID  \n" +
                "					AND BalanceQty > 0  \n" +
                "	) AS a;  \n" +
                "  \n" +
                "	SET v_TotalAvailableInHouseStock = IFNULL(v_AvailableStock, 0) + IFNULL(v_CustomerConsignStock, 0) + IFNULL(v_MainPartNonUmidStock, 0) + IFNULL(v_ReservedPhysicalStock, 0);  \n" +
                "	SELECT packaginggroupID INTO v_PackaginggroupID FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasStockRawDet AS  \n" +
                "	SELECT 	c.id,  \n" +
                "		c.refcompid,  \n" +
                "		c.receiveMaterialType,  \n" +
                "		c.pkgQty,  \n" +
                "		c.pkgUnit  \n" +
                "	FROM 	component_sid_stock c, component_packagingalias cp  \n" +
                "	WHERE 	c.refcompid = cp.componentID  \n" +
                "			AND IFNULL(c.isDeleted,0) = 0  \n" +
                "			AND cp.componentID != pComponentID  \n" +
                "			AND cp.aliasgroupID = v_PackaginggroupID  \n" +
                "			AND IFNULL(cp.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalPackagingStockInSystemRecord FROM tempPackagingAliasStockRawDet;  \n" +
                "	SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingStockInSystemRecordInUnit FROM tempPackagingAliasStockRawDet;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(allocatedQty), 0), IFNULL(SUM(allocatedUnit), 0)  \n" +
                "	INTO v_AllocatedPackagingStockToKitStock, v_AllocatedPackagingStockToKitStockInUnit  \n" +
                "	FROM 	kit_allocation  \n" +
                "	WHERE 	refUIDId IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	tempPackagingAliasStockRawDet  \n" +
                "		)  \n" +
                "		AND `status` = 'A';  \n" +
                "  \n" +
                "	SELECT 		IFNULL(SUM(vu.BalanceQty), 0) AS packagingNonUMIDStock, SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS packagingNonUMIDStockInUnit  \n" +
                "	INTO	 	v_PackagingPartNonUMIDStock, v_PackagingPartNonUMIDStockInUnit  \n" +
                "	FROM 		vu_umid_creation_pending vu  \n" +
                "	INNER JOIN 	component c ON c.id = vu.PartId  \n" +
                "	WHERE 		vu.PartId IN (  \n" +
                "					SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "						SELECT aliasgroupID FROM component_packagingalias WHERE componentID = pComponentID  \n" +
                "					) AND isDeleted = 0 AND componentID != pComponentID  \n" +
                "				)  \n" +
                "				AND BalanceQty > 0;  \n" +
                "  \n" +
                "	SET v_PackagingAliasStock = (v_TotalPackagingStockInSystemRecord - v_AllocatedPackagingStockToKitStock);  \n" +
                "	SET v_PackagingAliasStockInUnit = (v_TotalPackagingStockInSystemRecordInUnit - v_AllocatedPackagingStockToKitStockInUnit);  \n" +
                "	-- End Calculate Cumulative Stock  \n" +
                "  \n" +
                "	SELECT IFNULL(fun_getStockInDefaultUnit(pComponentID,v_TotalAvailableInHouseStock),0) INTO v_TotalAvailableInHouseStockInUnit;  \n" +
                "  \n" +
                "	SET v_TotalInHouseStock = v_TotalAvailableInHouseStock + v_PackagingAliasStock;  \n" +
                "	SET v_TotalInHouseStockInUnit = v_TotalAvailableInHouseStockInUnit + v_PackagingAliasStockInUnit;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(saftyStock),0) INTO v_SafetyStock FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(r.count), 0) INTO v_ReservedLogicalStock FROM reserve_stock_request r WHERE r.partid = pComponentID AND r.isDeleted = 0;  \n" +
                "  \n" +
                "	SET v_Shortage = (v_TotalAvailableInHouseStock) - (v_SafetyStock + v_ReservedLogicalStock);  \n" +
                "  \n" +
                "	SELECT 	v_AvailableStock availableStock, 			v_CustomerConsignStock customerConsignStock, 			v_MainPartNonUmidStock mainPartNonUmidStock,  \n" +
                "		v_ReservedPhysicalStock reservedPhysicalStock,		v_TotalAvailableInHouseStock totalAvailableInHouseStock, 	v_ReservedLogicalStock reservedLogicalStock,  \n" +
                "		v_AllocatedToKitStock allocatedStock,			v_PackagingAliasStock packagingAliasStock,			v_PackagingPartNonUMIDStock packagingPartNonUMIDStock,  \n" +
                "		v_TotalInHouseStock totalInHouseStock,			v_SafetyStock safetyStock,					v_Shortage shortage;  \n" +
                "  \n" +
                "	SELECT 	fun_getStockInDefaultUnit(pComponentID,v_AvailableStock) availableStock,				fun_getStockInDefaultUnit(pComponentID,v_CustomerConsignStock) customerConsignStock,  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_MainPartNonUmidStock) mainPartNonUmidStock,			fun_getStockInDefaultUnit(pComponentID,v_ReservedPhysicalStock) reservedPhysicalStock,  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_TotalAvailableInHouseStock) totalAvailableInHouseStock,	fun_getStockInDefaultUnit(pComponentID,v_ReservedLogicalStock) reservedLogicalStock,  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_AllocatedToKitStock) allocatedStock,              		v_PackagingAliasStockInUnit packagingAliasStock,  \n" +
                "		v_PackagingPartNonUMIDStockInUnit packagingPartNonUMIDStock,						v_TotalInHouseStockInUnit totalInHouseStock,                  						fun_getStockInDefaultUnit(pComponentID,v_SafetyStock) safetyStock,  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_Shortage) shortage;  \n" +
                "  \n" +
                "	SELECT 	abbreviation, measurementTypeID AS uomClassID  \n" +
                "	FROM 	uoms  \n" +
                "	WHERE 	measurementTypeID = (  \n" +
                "			SELECT 	measurementTypeID  \n" +
                "			FROM 	uoms  \n" +
                "			WHERE 	id = (  \n" +
                "				SELECT 	uom  \n" +
                "				FROM 	component  \n" +
                "				WHERE 	id = pComponentID  \n" +
                "						AND isDeleted = 0  \n" +
                "				)  \n" +
                "				AND isDeleted = 0  \n" +
                "			)  \n" +
                "			AND defaultUOM = 1  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT 		customerID, 				fun_getMfgCodeAndNameByID(customerID) customerFullName,  \n" +
                "				SUM(pkgQty) totalQty,     	fun_getStockInDefaultUnit(pComponentID, SUM(pkgQty)) totalUnit  \n" +
                "	FROM 		tempStockRawDet  \n" +
                "	WHERE 		customerConsign = 1  \n" +
                "	GROUP BY 	customerID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForComponent`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForComponent`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pShowPackagingAlias TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vFromSQLQuery VARCHAR(16383);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY PIDCode, uid\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"' OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET vFromSQLQuery = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "				id,				refSalesOrderDetID,			salesOrderNumber,			poNumber,  \n" +
                "				assyID,			nickname,					assyPIDCode,				assyPN,  \n" +
                "				assyRohsId,		assyRohsIcon,				assyRohsName,				kitName,  \n" +
                "				lineID,			refRfqLineitem,				qpa,						kitQty,  \n" +
                "				requireUnitsForBuild,						partId,						mfgPart,  \n" +
                "				component,    	mfgPN,						refUIDId,					uid,  \n" +
                "				pkgQty,			pkgUnit,					uom,						uomClassID,  \n" +
                "                allocatedQty,	allocatedUnit,				allocatedUOM,				allocatedUOMID,  \n" +
                "				allocatedUOMClassID,						allocatedPins,				receiveMaterialType  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "					kl.id,		k.refSalesOrderDetID,		s.salesOrderNumber,			s.poNumber,  \n" +
                "					k.assyID,	assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "					assy.mfgPN assyPN,						assy.rohsStatusId assyRohsId,  \n" +
                "					FUN_GETROHSICONBYID(assy.rohsStatusId) assyRohsIcon,  \n" +
                "					FUN_GETROHSNAMEBYID(assy.rohsStatusId) assyRohsName,  \n" +
                "					kl.lineID,	kl.refRfqLineitem,		   kl.qpa,						ka.kitQty,  \n" +
                "					CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode) kitName,  \n" +
                "					(kl.qpa * ka.kitQty) requireUnitsForBuild,							k.partId,  \n" +
                "					(SELECT  \n" +
                "							GROUP_CONCAT(DISTINCT (p.mfgPNID))  \n" +
                "								FROM  \n" +
                "									(  \n" +
                "										SELECT kalt.mfgPNID  \n" +
                "										FROM kit_allocation_lineitems_alternatepart kalt  \n" +
                "											WHERE kalt.partID = k.assyID  \n" +
                "											AND kalt.refRfqLineitem = k.refBOMLineID  \n" +
                "									UNION  \n" +
                "										SELECT componentID AS mfgPNID	FROM component_packagingalias  \n" +
                "											WHERE aliasgroupID IN (  \n" +
                "																	SELECT aliasgroupID  \n" +
                "																		FROM component_packagingalias  \n" +
                "																		WHERE componentID IN (  \n" +
                "																								SELECT kalt.mfgPNID  \n" +
                "																								FROM kit_allocation_lineitems_alternatepart kalt  \n" +
                "																									WHERE kalt.partID = k.assyID  \n" +
                "																									AND kalt.refRfqLineitem = k.refBOMLineID  \n" +
                "																								)  \n" +
                "											AND isDeleted = 0)  \n" +
                "								AND isDeleted = 0)  \n" +
                "					AS p) mfgPart,  \n" +
                "					fun_getKitAllocationPIDsForComponent(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") component,  \n" +
                "					fun_getKitAllocationPIDsForMfgPN(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") mfgPN,  \n" +
                "					k.refUIDId,			csd.uid,		csd.pkgQty,			csd.pkgUnit,  \n" +
                "					u.unitName uom,    	u.measurementTypeID uomClassID,		csd.receiveMaterialType,  \n" +
                "					k.allocatedQty,		k.allocatedUnit,  \n" +
                "					ku.unitName allocatedUOM,    	ku.measurementTypeID allocatedUOMClassID,  \n" +
                "					k.allocatedUOM allocatedUOMID,  \n" +
                "					FUN_GETKITALLOCATEDPIN(k.assyID, k.refSalesOrderDetID, k.refBOMLineID, NULL, kl.numOfPosition, FALSE) allocatedPins  \n" +
                "				FROM  \n" +
                "					kit_allocation k  \n" +
                "				INNER JOIN kit_allocation_lineitems kl ON k.refBOMLineID = kl.refRfqLineitem  \n" +
                "					AND k.refSalesOrderDetID = kl.refSalesOrderDetID  \n" +
                "				INNER JOIN kit_allocation_assy_detail ka ON k.assyID = ka.partId  \n" +
                "					AND k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "				INNER JOIN salesorderdet sd ON k.refSalesOrderDetID = sd.id  \n" +
                "					AND sd.partCategory = 3  \n" +
                "				INNER JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "				INNER JOIN component assy ON k.assyID = assy.id  \n" +
                "				INNER JOIN component c ON k.partId = c.id  \n" +
                "				INNER JOIN component_sid_stock csd ON k.refUIDId = csd.id  \n" +
                "				INNER JOIN uoms u ON u.id = csd.uom AND u.isDeleted = 0  \n" +
                "                INNER JOIN uoms ku ON ku.id = k.allocatedUOM AND ku.isDeleted = 0  \n" +
                "				WHERE	k.status = 'A'  \n" +
                "				AND (k.partId IN (SELECT  \n" +
                "									componentID  \n" +
                "								FROM component_packagingalias  \n" +
                "								WHERE aliasgroupID IN (SELECT aliasgroupID FROM component_packagingalias  \n" +
                "														WHERE componentID = \",pPartID,\" AND isDeleted = 0)  \n" +
                "								AND isDeleted = 0)  \n" +
                "				OR k.partId = \",pPartID,\")) AS tempUMID  \n" +
                "			WHERE  \n" +
                "				\", pWhereClause);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetAllocatedKitForComponent;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetAllocatedKitForComponent AS \", vFromSQLQuery, \" \" , rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM temp_Sproc_GetAllocatedKitForComponent \", pOrderBy);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(255),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(255),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_WhareClause VARCHAR(255);  \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);  \n" +
                "	DECLARE v_AssyId INT;  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS salesOrderDetailID,		0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.salesOrderDetailID,					cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getDeallocatedUIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_getDeallocatedUIDList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "    IN pPartIDs LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Offset INT;  \n" +
                "	DECLARE v_RowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_mfgPnIds LONGTEXT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS  \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "	FROM 		component c  \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartIDs)  \n" +
                "				AND c.isDeleted = 0  \n" +
                "	GROUP BY 	mfrPNId;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SET v_mfgPnIds = (SELECT GROUP_CONCAT(m.mfrPNId) FROM temp_mainPartAndPackagingAliesPart m);  \n" +
                "  \n" +
                "    IF(v_mfgPnIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND partID IN (\" ,v_mfgPnIds , \")\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET v_Offset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET v_RowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , v_Offset) ;  \n" +
                "	ELSE  \n" +
                "		SET v_RowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_Deallocated_UMID = CONCAT(\" SELECT  \n" +
                "				cst.id,			cst.uid,				cst.refcompid,		cst.dateCode, 	   kl.lineID,  \n" +
                "				cst.rohsStatusID UMIDRohsStatusID, 		cst.binID,				cst.uom,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus, 		ka.refBOMLineID,  \n" +
                "				c.PIDCode,		c.mfgPN, 		c.RoHSStatusID rohsID, 		ka.refSalesOrderDetID, 		ka.assyID,  \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 				c.isCustom,  \n" +
                "                fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "                c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "                cst.isUMIDRestrict, 	ka.partID,    	c.connecterTypeID,  \n" +
                "                ka.allocatedQty, 		ka.allocatedUnit,  \n" +
                "                (CASE WHEN (c.connecterTypeID = - 2)  \n" +
                "						THEN  (IFNULL(ka.allocatedUnit, 0) * IFNULL(c.noOfPosition, 0))  \n" +
                "				ELSE  NULL  \n" +
                "								END) allocatedPins,  \n" +
                "                cst.pkgUnit,			cst.pkgQty,  \n" +
                "				(CASE WHEN (c.connecterTypeID = - 2)  \n" +
                "						THEN  (IFNULL(cst.pkgUnit, 0) * IFNULL(c.noOfPosition, 0))  \n" +
                "				ELSE NULL  \n" +
                "								END) currentPins,  \n" +
                "				fun_getBinNameByID(cst.binID) binName,  \n" +
                "                c.noOfPosition,  \n" +
                "                ka.remark,  \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,  \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,  \n" +
                "				u.unitName unitName,  \n" +
                "                u.measurementTypeID uomClassID,  \n" +
                "                fun_getUserNameByID(ka.updatedBy) updatedBy,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ka.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  AND c.isDeleted = 0  \n" +
                "        INNER JOIN uoms u ON u.id = cst.uom AND u.isDeleted = 0  \n" +
                "		INNER JOIN  kit_allocation ka ON cst.id = ka.refUIDId AND ka.status = 'D'  \n" +
                "		INNER JOIN 	kit_allocation_lineitems kl ON kl.refRfqLineitem = ka.refBOMLineID AND kl.refSalesOrderDetID = \", pRefSalesOrderID ,\"  \n" +
                "		WHERE 		ka.refSalesOrderDetID = \", pRefSalesOrderID ,\"  \n" +
                "					AND ka.assyID = IFNULL(\", pAssyID ,\",ka.assyID)  \n" +
                "					AND ka.status = 'D'  \n" +
                "					AND cst.isDeleted = 0  \n" +
                "		GROUP BY ka.id  \n" +
                "			\");  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Deallocated_UMID, \" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Deallocated_UMID,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , v_RowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    In pInnerQueryWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*left join filter*/  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	deletedAt IS NULL  \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		   id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomClassID, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCode, 		 	refCPNMFGPNID,	       	cpnMFGPN,  \n" +
                "							refSupplierPartId,	supplierMFGCode,	supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,		CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								cssh.scrappedUnit totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isCustom = 1  and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')  \n" +
                "									end)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	# select @temp_component_sid_stock;  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for paremt documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveReserveStockRequestList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReserveStockRequestList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS requestResult AS  \n" +
                "	SELECT 	r.id,		r.partID,		r.customerID,		r.nickName,  \n" +
                "			r.assyID,	r.transactionDate,					r.count,  \n" +
                "            r.unit,		r.uom,			u.measurementTypeID uomClassID,  \n" +
                "            r.description,  \n" +
                "			fun_getUserNameByID(r.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(r.createdBy) createdby,  \n" +
                "			fun_getRoleByID(r.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(r.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			0 mfgcodeID,  \n" +
                "			CAST(NULL AS CHAR(255)) mfgCode, 		CAST(NULL AS CHAR(500)) mfg,  \n" +
                "			CAST(NULL AS CHAR(100)) mfgPN,  \n" +
                "			0 roHSStatusID,							CAST(NULL AS CHAR(255)) rohsIcon, 		CAST(NULL AS CHAR(50)) rohsName,  \n" +
                "			CAST(NULL AS CHAR(500)) customerName,  \n" +
                "            CAST(NULL AS CHAR(255)) assyPIDCode,  \n" +
                "            0 assyRoHSStatusID,	 					CAST(NULL AS CHAR(255)) assyRohsIcon,	CAST(NULL AS CHAR(50)) assyRohsName,  \n" +
                "			u.unitName uomName,  \n" +
                "            CAST(NULL AS CHAR(255)) createdByName  \n" +
                "	FROM	reserve_stock_request r  \n" +
                "	INNER JOIN uoms u ON u.id = r.uom AND u.isDeleted = 0  \n" +
                "	AND   r.isDeleted = 0;  \n" +
                "  \n" +
                "	-- Set part detail  \n" +
                "    UPDATE 	requestResult r, component c  \n" +
                "	SET 	r.mfgcodeID = c.mfgcodeID, r.mfgPN = c.mfgPN, r.RoHSStatusID = c.RoHSStatusID  \n" +
                "	WHERE 	r.partID = c.id;  \n" +
                "  \n" +
                "	-- Set RoHS det of part  \n" +
                "	UPDATE 	requestResult r, rfq_rohsmst rohs  \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name  \n" +
                "	WHERE 	r.roHSStatusID = rohs.id;  \n" +
                "  \n" +
                "    -- Set manufacturer detail  \n" +
                "    UPDATE 	requestResult r, mfgcodemst m  \n" +
                "	SET 	r.mfgCode = m.mfgCode, r.mfg = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)  \n" +
                "	WHERE 	r.mfgcodeID = m.id;  \n" +
                "  \n" +
                "	-- set custmer name  \n" +
                "	UPDATE 	requestResult r, mfgcodemst m  \n" +
                "	SET 	r.customerName = CONCAT('(', m.mfgCode, ') ', m.mfgName)  \n" +
                "	WHERE 	r.customerID = m.id;  \n" +
                "  \n" +
                "	-- set assembly PID Code  \n" +
                "	UPDATE 	requestResult r, component c  \n" +
                "	SET 	r.assyPIDCode = c.PIDCode, r.assyRoHSStatusID = c.RoHSStatusID  \n" +
                "	WHERE 	r.assyID = c.id;  \n" +
                "  \n" +
                "    -- Set RoHS det  \n" +
                "	UPDATE 	requestResult r, rfq_rohsmst rohs  \n" +
                "	SET 	r.assyRohsIcon = rohs.rohsIcon, r.assyRohsName = rohs.name  \n" +
                "	WHERE 	r.assyRoHSStatusID = rohs.id;  \n" +
                "  \n" +
                "	-- set created by  \n" +
                "	UPDATE 	requestResult r, users u  \n" +
                "	SET 	r.createdByName = u.username  \n" +
                "	WHERE 	r.createdBy = u.id;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM requestResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  requestResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE requestResult;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5021,'2.00','V1','Bug 35447: Kit allocation Stock pop-up issues given by DV 13/07/2021 [Main Branch] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5021:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2021 *********************************** */
                "ALTER TABLE `component`  \n" +
                "ADD COLUMN `shelfLifeDateType` VARCHAR(1) NULL DEFAULT 'N';  \n" +
                /* **************************** Add Script Version -> 23-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5022,'2.00','V1',' User Story 35562: Part Master: Changes for Shelf Life Days - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5022:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(  \n" +
                "	pComponentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalCustomerConsignStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPhysicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_CustomerConsignStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalAvailableInHouseStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalAvailableInHouseStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedToKitStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedCustomerConsignStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AvailableStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackaginggroupID INT;  \n" +
                "	DECLARE v_TotalPackagingStockInSystemRecord DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedPackagingStockToKitStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedPackagingStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPackagingPhysicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingAliasStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalInHouseStock DECIMAL(18,8);  \n" +
                "	DECLARE v_SafetyStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedLogicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_Shortage DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalUnitInUmid DECIMAL(18,8);  \n" +
                "	DECLARE v_MainPartNonUmidStock DECIMAL(18,8);  \n" +
                "	DECLARE v_MainPartInitialStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingPartNonUMIDStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingPartNonUMIDStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingStockInSystemRecordInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingReservedStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedPackagingStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedPackagingStockToKitStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPackagingPhysicalStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalInHouseStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AvailableStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingAliasStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_IsCPN TINYINT;  \n" +
                "	DECLARE v_PartIds VARCHAR(10000);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS  \n" +
                "	SELECT 	id,  \n" +
                "		receiveMaterialType,  \n" +
                "		customerID,  \n" +
                "		fun_getMfgCodeAndNameByID(customerID) customerFullName,  \n" +
                "		pkgQty,  \n" +
                "		pkgUnit,  \n" +
                "		customerConsign  \n" +
                "	FROM 	component_sid_stock  \n" +
                "	WHERE 	refcompid = pComponentID  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalStockInSystemRecord FROM tempStockRawDet;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalReservedStock FROM tempStockRawDet WHERE receiveMaterialType = 'PR';  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalCustomerConsignStock FROM tempStockRawDet WHERE customerConsign = 1;  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(allocatedQty), 0) INTO v_AllocatedToKitStock  \n" +
                "	FROM 	kit_allocation  \n" +
                "	WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)  \n" +
                "			AND `status` = 'A';  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0) INTO v_AllocatedReservedStock  \n" +
                "	FROM 	tempStockRawDet  \n" +
                "	WHERE 	receiveMaterialType = 'PR'  \n" +
                "			AND id IN (  \n" +
                "				SELECT 	refUIDId  \n" +
                "				FROM 	kit_allocation  \n" +
                "				WHERE 	`status` = 'A'  \n" +
                "			);  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0) INTO v_AllocatedCustomerConsignStock  \n" +
                "	FROM 	tempStockRawDet  \n" +
                "	WHERE 	customerConsign = 1  \n" +
                "			AND id IN (  \n" +
                "				SELECT 	refUIDId  \n" +
                "				FROM 	kit_allocation  \n" +
                "				WHERE 	`status` = 'A'  \n" +
                "			);  \n" +
                "  \n" +
                "	SET v_ReservedPhysicalStock = v_TotalReservedStock - v_AllocatedReservedStock;  \n" +
                "	SET v_CustomerConsignStock = v_TotalCustomerConsignStock - v_AllocatedCustomerConsignStock;  \n" +
                "	SET v_AvailableStock = (v_TotalStockInSystemRecord - v_ReservedPhysicalStock - v_CustomerConsignStock - v_AllocatedToKitStock);  \n" +
                "  \n" +
                "    -- Start Calculate Cumulative Stock  \n" +
                "    # Calculate UMID Pending tock  \n" +
                "    SELECT 	SUM(IFNULL(nonUMIDStock, 0)) INTO v_MainPartNonUmidStock  \n" +
                "	FROM 	(  \n" +
                "			SELECT 	IFNULL(SUM(vu.BalanceQty), 0) nonUMIDStock  \n" +
                "			FROM 	vu_umid_creation_pending vu  \n" +
                "			WHERE 	vu.PartId = pComponentID  \n" +
                "					AND BalanceQty > 0  \n" +
                "	) AS a;  \n" +
                "  \n" +
                "     # Calculate UMID Initial tock  \n" +
                "	SELECT 	SUM(IFNULL(initialUMIDStock, 0)) INTO v_MainPartInitialStock  \n" +
                "	FROM 	(  \n" +
                "			SELECT 	IFNULL(SUM(availableQty), 0) initialUMIDStock  \n" +
                "			FROM 	vu_customer_packing_slip_qty  \n" +
                "			WHERE 	partID = pComponentID  \n" +
                "	) AS a;  \n" +
                "  \n" +
                "	SET v_TotalAvailableInHouseStock = IFNULL(v_AvailableStock, 0) + IFNULL(v_CustomerConsignStock, 0) + IFNULL(v_MainPartNonUmidStock, 0)+ IFNULL(v_MainPartInitialStock, 0) + IFNULL(v_ReservedPhysicalStock, 0);  \n" +
                "	SELECT packaginggroupID INTO v_PackaginggroupID FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasStockRawDet AS  \n" +
                "	SELECT 	c.id,  \n" +
                "		c.refcompid,  \n" +
                "		c.receiveMaterialType,  \n" +
                "		c.pkgQty,  \n" +
                "		c.pkgUnit  \n" +
                "	FROM 	component_sid_stock c, component_packagingalias cp  \n" +
                "	WHERE 	c.refcompid = cp.componentID  \n" +
                "			AND IFNULL(c.isDeleted,0) = 0  \n" +
                "			AND cp.componentID != pComponentID  \n" +
                "			AND cp.aliasgroupID = v_PackaginggroupID  \n" +
                "			AND IFNULL(cp.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalPackagingStockInSystemRecord FROM tempPackagingAliasStockRawDet;  \n" +
                "	SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingStockInSystemRecordInUnit FROM tempPackagingAliasStockRawDet;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(allocatedQty), 0), IFNULL(SUM(allocatedUnit), 0)  \n" +
                "	INTO v_AllocatedPackagingStockToKitStock, v_AllocatedPackagingStockToKitStockInUnit  \n" +
                "	FROM 	kit_allocation  \n" +
                "	WHERE 	refUIDId IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	tempPackagingAliasStockRawDet  \n" +
                "		)  \n" +
                "		AND `status` = 'A';  \n" +
                "  \n" +
                "	SELECT 		IFNULL(SUM(vu.BalanceQty), 0) AS packagingNonUMIDStock, SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS packagingNonUMIDStockInUnit  \n" +
                "	INTO	 	v_PackagingPartNonUMIDStock, v_PackagingPartNonUMIDStockInUnit  \n" +
                "	FROM 		vu_umid_creation_pending vu  \n" +
                "	INNER JOIN 	component c ON c.id = vu.PartId  \n" +
                "	WHERE 		vu.PartId IN (  \n" +
                "					SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "						SELECT aliasgroupID FROM component_packagingalias WHERE componentID = pComponentID  \n" +
                "					) AND isDeleted = 0 AND componentID != pComponentID  \n" +
                "				)  \n" +
                "				AND BalanceQty > 0;  \n" +
                "  \n" +
                "	SET v_PackagingAliasStock = (v_TotalPackagingStockInSystemRecord - v_AllocatedPackagingStockToKitStock);  \n" +
                "	SET v_PackagingAliasStockInUnit = (v_TotalPackagingStockInSystemRecordInUnit - v_AllocatedPackagingStockToKitStockInUnit);  \n" +
                "	-- End Calculate Cumulative Stock  \n" +
                "  \n" +
                "	SELECT IFNULL(fun_getStockInDefaultUnit(pComponentID,v_TotalAvailableInHouseStock),0) INTO v_TotalAvailableInHouseStockInUnit;  \n" +
                "  \n" +
                "	SET v_TotalInHouseStock = v_TotalAvailableInHouseStock + v_PackagingAliasStock;  \n" +
                "	SET v_TotalInHouseStockInUnit = v_TotalAvailableInHouseStockInUnit + v_PackagingAliasStockInUnit;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(saftyStock),0) INTO v_SafetyStock FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(r.count), 0) INTO v_ReservedLogicalStock FROM reserve_stock_request r WHERE r.partid = pComponentID AND r.isDeleted = 0;  \n" +
                "  \n" +
                "	SET v_Shortage = (v_TotalAvailableInHouseStock) - (v_SafetyStock + v_ReservedLogicalStock);  \n" +
                "  \n" +
                "	SELECT 	v_AvailableStock availableStock, 			v_CustomerConsignStock customerConsignStock, 			v_MainPartNonUmidStock mainPartNonUmidStock,  \n" +
                "		v_MainPartInitialStock mainPartInitialStock,	v_ReservedPhysicalStock reservedPhysicalStock,			v_TotalAvailableInHouseStock totalAvailableInHouseStock,  \n" +
                "        v_ReservedLogicalStock reservedLogicalStock,  	v_AllocatedToKitStock allocatedStock,					v_PackagingAliasStock packagingAliasStock,  \n" +
                "        v_PackagingPartNonUMIDStock packagingPartNonUMIDStock,  												v_TotalInHouseStock totalInHouseStock,  \n" +
                "        v_SafetyStock safetyStock,						v_Shortage shortage;  \n" +
                "  \n" +
                "	SELECT 	fun_getStockInDefaultUnit(pComponentID,v_AvailableStock) availableStock,				fun_getStockInDefaultUnit(pComponentID,v_CustomerConsignStock) customerConsignStock,  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_MainPartNonUmidStock) mainPartNonUmidStock,		fun_getStockInDefaultUnit(pComponentID,v_MainPartInitialStock) mainPartInitialStock,  \n" +
                "        fun_getStockInDefaultUnit(pComponentID,v_ReservedPhysicalStock) reservedPhysicalStock,  	fun_getStockInDefaultUnit(pComponentID,v_TotalAvailableInHouseStock) totalAvailableInHouseStock,  \n" +
                "        fun_getStockInDefaultUnit(pComponentID,v_ReservedLogicalStock) reservedLogicalStock,  		fun_getStockInDefaultUnit(pComponentID,v_AllocatedToKitStock) allocatedStock,  \n" +
                "        v_PackagingAliasStockInUnit packagingAliasStock,  											v_PackagingPartNonUMIDStockInUnit packagingPartNonUMIDStock,  \n" +
                "		v_TotalInHouseStockInUnit totalInHouseStock,                  								fun_getStockInDefaultUnit(pComponentID,v_SafetyStock) safetyStock,  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_Shortage) shortage;  \n" +
                "  \n" +
                "	SELECT 	abbreviation, measurementTypeID AS uomClassID  \n" +
                "	FROM 	uoms  \n" +
                "	WHERE 	measurementTypeID = (  \n" +
                "			SELECT 	measurementTypeID  \n" +
                "			FROM 	uoms  \n" +
                "			WHERE 	id = (  \n" +
                "				SELECT 	uom  \n" +
                "				FROM 	component  \n" +
                "				WHERE 	id = pComponentID  \n" +
                "						AND isDeleted = 0  \n" +
                "				)  \n" +
                "				AND isDeleted = 0  \n" +
                "			)  \n" +
                "			AND defaultUOM = 1  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT 		customerID, 				fun_getMfgCodeAndNameByID(customerID) customerFullName,  \n" +
                "				SUM(pkgQty) totalQty,     	fun_getStockInDefaultUnit(pComponentID, SUM(pkgQty)) totalUnit  \n" +
                "	FROM 		tempStockRawDet  \n" +
                "	WHERE 		customerConsign = 1  \n" +
                "	GROUP BY 	customerID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5023,'2.00','V1','User Story 35332: UMID Pending Parts: Implement Advance Filter - Part Master Changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5023:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pUserId INT,    \n" +
                "	IN pRoleId INT,    \n" +
                "	IN isShowDefault INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;    \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;    \n" +
                "  \n" +
                " 	IF (isShowDefault = 1) THEN    \n" +
                " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS    \n" +
                " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,    \n" +
                " 			`rp`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`, `pd`.`paramDet`    \n" +
                " 			FROM `rolepagedetail` AS `rp`    \n" +
                " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`    \n" +
                " 			WHERE `rp`.`roleID` = pRoleId    \n" +
                " 			AND `rp`.`deletedAt` IS NULL    \n" +
                " 			AND `pd`.`deletedAt` IS NULL    \n" +
                " 			AND `pd`.`isActive` = 1;    \n" +
                "  \n" +
                " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet)    \n" +
                " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet      \n" +
                " 			FROM page_detail    \n" +
                " 			WHERE deletedAt IS NULL    \n" +
                " 			AND isActive = 1    \n" +
                " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail    \n" +
                " 			WHERE roleID = pRoleId AND deletedAt IS NULL);    \n" +
                " 	ELSE    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS    \n" +
                "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,    \n" +
                "			`up`.`IsShortcut` , `up`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`, `pd`.`paramDet`    \n" +
                "			FROM `userpagedetail` AS `up`    \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`    \n" +
                "			WHERE `up`.`userID` = pUserId    \n" +
                "			AND `up`.`roleID` = pRoleId    \n" +
                "			AND `up`.`deletedAt` IS NULL    \n" +
                "			AND `pd`.`deletedAt` IS NULL    \n" +
                "			AND `pd`.`isActive` = 1;    \n" +
                "  \n" +
                "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet)    \n" +
                "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet   \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);    \n" +
                " 	END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_genericcategory`;    \n" +
                "CREATE TRIGGER `Trg_BI_genericcategory` BEFORE INSERT ON `genericcategory` FOR EACH ROW BEGIN         \n" +
                "    IF (SELECT COUNT(1) FROM genericcategory                             \n" +
                "       WHERE `categoryType` IN ('Printers','Label Templates','Document Type')         \n" +
                "        AND `categoryType` = NEW.categoryType                        \n" +
                "        AND `gencCategoryName`= NEW.gencCategoryName                 \n" +
                "        AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN                 \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';           \n" +
                "    ELSEIF (SELECT COUNT(1) FROM genericcategory                  \n" +
                "            WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',           \n" +
                "                    'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',                 \n" +
                "                    'Operation Types', 'Locations', 'Responsibilities', 'Shipping Methods',         \n" +
                "                    'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')        \n" +
                "            AND (`gencCategoryName`= NEW.gencCategoryName                 \n" +
                "            OR `gencCategoryCode` = NEW.gencCategoryCode)                 \n" +
                "            AND `categoryType` = NEW.categoryType                        \n" +
                "            AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN            \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';          \n" +
                "    END IF;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_genericcategory`;    \n" +
                "CREATE TRIGGER `Trg_BU_genericcategory` BEFORE UPDATE ON `genericcategory` FOR EACH ROW BEGIN               \n" +
                "        IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory              \n" +
                "                    WHERE `categoryType` IN ('Printers','Label Templates','Document Type')                         \n" +
                "                    AND `gencCategoryName` = NEW.gencCategoryName                                  \n" +
                "                    AND `categoryType` = NEW.categoryType                                         \n" +
                "                    AND isdeleted = 0 AND deletedAt IS NULL                                \n" +
                "                    AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN                       \n" +
                "                SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';                 \n" +
                "        ELSEIF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory                  \n" +
                "                WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',              \n" +
                "                        'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',                             \n" +
                "                        'Operation Types', 'Locations', 'Responsibilities', 'Shipping Methods',                       \n" +
                "                        'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')                                         \n" +
                "                AND (`gencCategoryName`= NEW.gencCategoryName                                                          \n" +
                "                OR `gencCategoryCode` = NEW.gencCategoryCode)                                                         \n" +
                "                AND `categoryType` = NEW.categoryType                                                                 \n" +
                "                AND isdeleted = 0 AND deletedAt IS NULL                                                               \n" +
                "                AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN                                                    \n" +
                "            SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';                                               \n" +
                "        END IF;                                                                                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5024,'2.00','V1','Merge DB Script - Vaibhav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5024:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster` CHANGE COLUMN `reportType` `reportViewType` TINYINT(1) NULL DEFAULT '0' ;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster` CHANGE COLUMN `reportCategory` `reportGenerationType` VARCHAR(1) NULL DEFAULT '1' ;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster`      \n" +
                "ADD COLUMN `reportCategoryId` INT NULL AFTER `reportGenerationType`,     \n" +
                "ADD INDEX `FK_reportmaster_reportCategoryId` (`reportCategoryId` ASC) VISIBLE;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster`      \n" +
                "ADD CONSTRAINT `FK_reportmaster_reportCategoryId`     \n" +
                "  FOREIGN KEY (`reportCategoryId`)     \n" +
                "  REFERENCES `genericcategory` (`gencCategoryID`)     \n" +
                "  ON DELETE NO ACTION     \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster` ADD COLUMN `isDefaultReport` TINYINT(1) NULL DEFAULT '0' AFTER `reportCategoryId`;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster`   \n" +
                "CHANGE COLUMN `fileName` `fileName` VARCHAR(255) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `draftFileName` `draftFileName` VARCHAR(255) NULL DEFAULT NULL ;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster` DROP COLUMN `isDraft`;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster` ADD COLUMN `reportTitle` VARCHAR(255) NULL AFTER `rdlcReportFileName`;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "CREATE TABLE `reportviewerparameter` (  \n" +
                "  `parameterGUID` char(36) NOT NULL,  \n" +
                "  `reportId` int NOT NULL,  \n" +
                "  `parameterValues` longtext,  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createByRoleId` int NOT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`parameterGUID`),  \n" +
                "  KEY `reportId_idx` (`reportId`),  \n" +
                "  CONSTRAINT `reportId` FOREIGN KEY (`reportId`) REFERENCES `reportmaster` (`id`)  \n" +
                ");  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "CREATE TABLE `reportmasterparameter` (  \n" +
                "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
                "  `reportId` int NOT NULL,  \n" +
                "  `parmeterMappingid` int NOT NULL,  \n" +
                "  `isRequired` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createByRoleId` int NOT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `reportId_idx` (`reportId`),  \n" +
                "  KEY `parmeterMappingid_idx` (`parmeterMappingid`),  \n" +
                "  CONSTRAINT `parmeterMappingid` FOREIGN KEY (`parmeterMappingid`) REFERENCES `report_parameter_setting_mapping` (`id`),  \n" +
                "  CONSTRAINT `reportId_` FOREIGN KEY (`reportId`) REFERENCES `reportmaster` (`id`)  \n" +
                ");  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportviewerparameter` ADD COLUMN `reportName` VARCHAR(255) NULL DEFAULT NULL AFTER `reportId`;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `report_parameter_setting_mapping` ADD COLUMN `isHiddenParameter` TINYINT(1) DEFAULT NULL DEFAULT '0' AFTER `displayName`;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5025,'2.00','V1',' Report Flow Changes - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5025:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getReportCategoryNameByCategoryID`;  \n" +
                "CREATE FUNCTION `fun_getReportCategoryNameByCategoryID`(            \n" +
                "	pCategoryId varchar(50)          \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN            \n" +
                "	DECLARE vCategoryName VARCHAR(50);           \n" +
                "		SELECT DISTINCT gc.gencCategoryName INTO vCategoryName       \n" +
                "		FROM genericcategory gc      \n" +
                "		join reportmaster r on gc.gencCategoryID = r.reportCategoryId    \n" +
                "		WHERE  gc.gencCategoryID = pCategoryId;        \n" +
                "	RETURN vCategoryName;        \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getReportNameByReportID`;  \n" +
                "CREATE FUNCTION `fun_getReportNameByReportID`(            \n" +
                "	pReportId INT          \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN            \n" +
                "	DECLARE vReportName VARCHAR(255);           \n" +
                "		SELECT DISTINCT r.reportName INTO vReportName       \n" +
                "		FROM reportmaster r  \n" +
                "		WHERE  r.id = pReportId ANd r.isDeleted = false;        \n" +
                "	RETURN vReportName;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5026,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5026:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `report_parameter_setting_mapping`   \n" +
                "ADD COLUMN `dataSourceId` INT NULL DEFAULT NULL AFTER `type`,  \n" +
                "ADD INDEX `dataSourceId_idx` (`dataSourceId` ASC) VISIBLE;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `report_parameter_setting_mapping`   \n" +
                "ADD CONSTRAINT `dataSourceId` FOREIGN KEY (`dataSourceId`) REFERENCES `fixed_entity_dataelement` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5027,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5027:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "INSERT INTO `fixed_entity_dataelement`   \n" +
                "(`tableName`, `displayColumnPKField`, `displayColumnField`, `createdAt`, `updatedAt`, `createdBy`, `isDeleted`, `filter`, `displayEntityName`)   \n" +
                "VALUES   \n" +
                "('rfq_mountingtypemst', 'id', 'name', fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1', '0', 'isActive = 1', 'Mounting Type'),  \n" +
                "('component_partstatusmst', 'id', 'name', fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1', '0', 'isActive = 1', 'Part Status'),   \n" +
                "('rfq_parttypemst', 'id', 'partTypeName', fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1', '0', 'isActive = 1', 'Functional Type'),  \n" +
                "('component', 'id', 'mfgPN', fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1', '0', null, 'Mfg PN'),  \n" +
                "('customer_packingslip', 'id', 'packingSlipNumber', fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1', '0', null, 'Packing Slip');  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id into @packingSlipSourceID from `fixed_entity_dataelement` where displayEntityName = 'Packing Slip';  \n" +
                "  \n" +
                "INSERT INTO `report_parameter_setting_mapping`  \n" +
                "(`reportParamName`,`dbColumnName`,`displayName`,`isHiddenParameter`,`type`,`dataSourceId`,`options`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "('Para_PackingSlipd','packingSlipId','Packing Slip',1,'A', @packingSlipSourceID, null,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "('Para_Report_Version','reportVersion','Version',1,'TB', null, null,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5028,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5028:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Customers';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'M', options = null WHERE reportParamName = 'Para_CustomerID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Mfg PN';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'A', options = null WHERE reportParamName = 'Para_PartID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Personnel';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'A', options = null WHERE reportParamName = 'Para_EmployeeID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Suppliers';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'M', options = null WHERE reportParamName = 'Para_SupplierID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Manufacturers';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'M', options = null WHERE reportParamName = 'Para_MfgCodeID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Assembly';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'A', options = null WHERE reportParamName = 'Para_AssyID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Mounting Type';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'M', options = null WHERE reportParamName = 'Para_MountingTypeID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Functional Type';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'M', options = null WHERE reportParamName = 'Para_FunctionalTypeID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Part Status' and tablename = 'component_partstatusmst'; /*Need Confirm with AP/VS */  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'M', options = null WHERE reportParamName = 'Para_PartStatusID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Work Orders';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'A', options = null WHERE reportParamName = 'Para_WorkorderID';  \n" +
                "  \n" +
                "select id INTO @entityId FROM fixed_entity_dataelement WHERE displayEntityName = 'Operations';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'A', options = null WHERE reportParamName = 'Para_OperationID';  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "UPDATE report_parameter_setting_mapping SET type= 'C', options = null WHERE reportParamName = 'Para_WithAlternateParts';  \n" +
                "UPDATE report_parameter_setting_mapping SET dataSourceId = @entityId,type= 'R', options = '{\"1\":{ \"Key\":\"Key1\", \"Value\":\"Key1Value\"},\"2\":{ \"Key\":\"Key2\", \"Value\":\"Key2Value\"}}' WHERE reportParamName = 'Para_RadioButtonFilter';  \n" +
                "UPDATE report_parameter_setting_mapping SET type= 'D' WHERE reportParamName = 'Para_FromDate';  \n" +
                "UPDATE report_parameter_setting_mapping SET type= 'D' WHERE reportParamName = 'Para_ToDate';  \n" +
                "UPDATE report_parameter_setting_mapping SET type= 'T' WHERE reportParamName = 'Para_FromTime';  \n" +
                "UPDATE report_parameter_setting_mapping SET type= 'T' WHERE reportParamName = 'Para_ToTime';  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5029,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5029:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `fixed_entity_dataelement` ADD COLUMN `displayFormattedColumnField` LONGTEXT NULL AFTER `displayColumnField`;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5030,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5030:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "INSERT INTO `genericcategory`  \n" +
                "(`gencCategoryName`,`categoryType`,`createdAt`,`createdBy`)  \n" +
                "VALUES  \n" +
                "('MFR','Report Category',fun_DatetimetoUTCDateTime(),'1'),  \n" +
                "('Part','Report Category',fun_DatetimetoUTCDateTime(),'1'),  \n" +
                "('Receiving','Report Category',fun_DatetimetoUTCDateTime(),'1'),  \n" +
                "('RFQ','Report Category',fun_DatetimetoUTCDateTime(),'1');  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5031,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5031:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "update reportmaster as rm set rm.reportCategoryId = (select gencCategoryID from genericcategory where gencCategoryName = rm.category and categoryType = 'Report Category');  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5032,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5032:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster` DROP COLUMN `category`;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `reportmaster`   \n" +
                "CHANGE COLUMN `status` `status` VARCHAR(1) NULL DEFAULT 'D' ;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5033,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5033:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "update `reportmaster` as rm Set rm.status = 'P' Where rm.status = '1';   \n" +
                "update `reportmaster` as rm Set rm.status = 'D' Where rm.status = '0';  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DELETE FROM fixed_entity_dataelement WHERE displayEntityName = 'Part Status' AND tableName = 'genericcategory';  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "UPDATE `report_parameter_setting_mapping` SET  `reportParamName` = 'Para_IncludePartTypes', `dbColumnName` ='includePartTypes', `displayName` = 'Include Part Types', `options` = '{\\\"1\\\":{ \\\"Key\\\":\\\"Include All Alternates and RoHS Replacement Parts\\\", \\\"Value\\\":\\\"1\\\"},\\\"2\\\":{ \\\"Key\\\":\\\"Include Alternates Parts Only\\\", \\\"Value\\\":\\\"2\\\"},\\\"3\\\":{ \\\"Key\\\":\\\"Include RoHS Replacement Parts Only\\\", \\\"Value\\\":\\\"3\\\"},\\\"4\\\":{ \\\"Key\\\":\\\"Exclude Alternates when RoHS Replacement Parts is Available\\\", \\\"Value\\\":\\\"4\\\"}}' WHERE (`reportParamName` = 'Para_RadioButtonFilter');  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5034,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5034:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCompanyReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN            \n" +
                "	# Company detail for Report                          \n" +
                "	SELECT CONCAT('S & M Group, Inc. d/b/a,','<br/>',cu.mfgName,'<br/>',cua.street1,'<br/>',cua.city,', ',cua.state,' ',cua.postcode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',cua.email,'<br/>','Phone: ',        \n" +
                "	cua.contact,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(cua.faxNumber,''))AS address,              \n" +
                "		cu.primaryContactName,cua.email,cua.faxNumber,cu.contact,cu.phExtension,cua.contact AS phoneNo,'' AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,            \n" +
                "		ci.ein, ci.remittanceAddress             \n" +
                "	FROM customer_addresses cua                                  \n" +
                "	JOIN mfgcodemst cu ON cu.id = cua.customerId            \n" +
                "	JOIN company_info ci ON ci.mfgCodeId = cu.id                 \n" +
                "	LEFT JOIN countrymst c ON cua.countryID=c.countryID                                 \n" +
                "	WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1      \n" +
                "	 AND cua.isDeleted = 0 AND ci.isDeleted=0 AND cu.isDeleted=0;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DROP procedure if exists `Sproc_GetObsoletePartDetailForCompanyReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetObsoletePartDetailForCompanyReport`(    \n" +
                "	IN pCustomerID text(11),    \n" +
                "    IN pWhereClause TEXT,    \n" +
                "    IN pWithAlternateParts TINYINT(1),    \n" +
                "    IN pFromDate DATE,    \n" +
                "    IN pToDate DATE    \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "DECLARE SQLStatement TEXT;    \n" +
                "		IF(pFromDate IS NULL OR pToDate IS NULL) THEN  \n" +
                "			SET @dateRangeStatement = ' 1=1 ';  \n" +
                "		ELSe  \n" +
                "            SET @dateRangeStatement = concat(\" c.obsoletedate between '\",pFromDate,\"' and '\",pToDate,\"' \");  \n" +
                "		END IF;   \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS ObsoletePartsForCompany;            \n" +
                "		SET SQLStatement  = CONCAT(\"     \n" +
                "		Create temporary table if not exists ObsoletePartsForCompany as            \n" +
                "		SELECT * FROM      \n" +
                "		 (     \n" +
                "			 SELECT id, (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component     \n" +
                "			 WHERE category = 3 AND deletedAT IS NULL and     \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')     \n" +
                "		 ) a,     \n" +
                "		 (     \n" +
                "			 SELECT a.partid, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,    \n" +
                "			 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,     \n" +
                "			 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus ,     \n" +
                "			 c.price as TentativePrice, (select mfgName from mfgcodemst where id = (select mfgCodeID from component where id = ( SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc LIMIT 1))) alternatePartMFG,      \n" +
                "			 (select mfgPN from component where id = (SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc  LIMIT 1)) alternatePart,            \n" +
                "			 c.updatedAt as modifiedAt,    \n" +
                "             c.obsoleteDate    \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c      \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.deletedAt IS NULL AND b.deletedAT IS NULL    \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')        \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then  1=1 else ( exists (SELECT 1 FROM component_partstatusmst      \n" +
                "					WHERE `name`='Obsolete' and deletedAT IS NULL  and id = c.partStatus))    \n" +
                "					end)    \n" +
                "			 AND a.partid IN      \n" +
                "			 (     \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL    \n" +
                "				AND exists        \n" +
                "				(     \n" +
                "					SELECT 1 FROM component_partstatusmst      \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus    \n" +
                "				)     \n" +
                "			 )      \n" +
                "			 AND EXISTS      \n" +
                "			 (     \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp      \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL     \n" +
                "				AND EXISTS      \n" +
                "				(     \n" +
                "					SELECT 1 FROM component c WHERE c.id = dp.mfgPnID and c.deletedAT IS NULL AND exists       \n" +
                "					(    \n" +
                "						SELECT 1 FROM component_partstatusmst      \n" +
                "						WHERE `name` = 'Obsolete' and deletedAT IS NULL  and id = c.partStatus    \n" +
                "					)    \n" +
                "                    and \",@dateRangeStatement ,\"   \n" +
                "				)    \n" +
                "			  )    \n" +
                "		 ) b    \n" +
                "		 WHERE a.id =b.partid\");     \n" +
                "		IF pCustomerID != '' THEN      \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');    \n" +
                "		ELSE     \n" +
                "			SET @SQLStatement1 = SQLStatement;     \n" +
                "		END IF;    \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN    \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany  where ', pWhereClause);    \n" +
                "	else    \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany');    \n" +
                "	end if;    \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "		SELECT CONCAT(street1,', ',city,', ',state,' ',postcode)AS address,cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,    \n" +
                "		cu.email AS companyEmail,cu.primaryContactName AS companyContactName    \n" +
                "		FROM customer_addresses cua    \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId    \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5035,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5035:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @assemblyDataId FROM fixed_entity_dataelement WHERE displayEntityName = 'Assembly';  \n" +
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `isHiddenParameter`, `type`, `dataSourceId`, `isDeleted`, `createdBy`, `createByRoleId`, `createdAt`) VALUES ('Para_PartIDs', 'partIDsss', 'MPN', '0', 'AM', @assemblyDataId, '0', '1', '1', fun_DatetimetoUTCDateTime());  \n" +
                "select id INTO @mfgPNdataId FROM fixed_entity_dataelement WHERE displayEntityName = 'Mfg PN';  \n" +
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `isHiddenParameter`, `type`, `dataSourceId`, `isDeleted`, `createdBy`, `createByRoleId`, `createdAt`) VALUES ('Para_AssyIDs', 'assyIDsss', 'Assy IDs', '0', 'M', @mfgPNdataId, '0', '1', '1', fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5036,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5036:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "UPDATE `report_parameter_setting_mapping` SET `type` = 'A' WHERE (`reportParamName` = 'Para_CustomerID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `reportParamName` = 'Para_SupplierIDs', `dbColumnName` = 'supplierIDs', `displayName` = 'Suppliers' WHERE (`reportParamName` = 'Para_SupplierID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `reportParamName` = 'Para_MfgCodeIDs', `dbColumnName` = 'mfgCodeIDs' WHERE (`reportParamName` = 'Para_MfgCodeID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `reportParamName` = 'Para_MountingTypeIDs', `dbColumnName` = 'mountingTypeIDs', `displayName` = 'Mounting Types' WHERE (`reportParamName` = 'Para_MountingTypeID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `reportParamName` = 'Para_FunctionalTypeIDs', `dbColumnName` = 'functionalTypeIDs', `displayName` = 'Functional Types' WHERE (`reportParamName` = 'Para_FunctionalTypeID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `reportParamName` = 'Para_PartStatusIDs', `dbColumnName` = 'partStatusIDs' WHERE (`reportParamName` = 'Para_PartStatusID');  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5037,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5037:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `report_parameter_setting_mapping`   \n" +
                "ADD COLUMN `isDisplay` TINYINT(1) NULL DEFAULT '0' AFTER `options`;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "ALTER TABLE `report_parameter_setting_mapping`   \n" +
                "ADD COLUMN `pageRouteState` VARCHAR(255) NULL DEFAULT NULL AFTER `displayName`;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5038,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5038:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_AssyIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_PartIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_ToTime');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_FromTime');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_ToDate');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_FromDate');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_IncludePartTypes');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_WithAlternateParts');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_OperationID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_WorkorderID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_PartStatusIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_FunctionalTypeIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_MountingTypeIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_AssyID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_MfgCodeIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_SupplierIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_EmployeeID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_PartID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `isDisplay` = '1' WHERE (`reportParamName` = 'Para_CustomerID');  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.customer' WHERE (`reportParamName` = 'Para_CustomerID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.mountingtype' WHERE (`reportParamName` = 'Para_MountingTypeIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.rfqparttype' WHERE (`reportParamName` = 'Para_FunctionalTypeIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.component.manufacturer' WHERE (`reportParamName` = 'Para_PartID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.component.manufacturer' WHERE (`reportParamName` = 'Para_PartIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.partstatus' WHERE (`reportParamName` = 'Para_PartStatusIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.workorder' WHERE (`reportParamName` = 'Para_WorkorderID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.operation.list' WHERE (`reportParamName` = 'Para_OperationID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.manufacturer' WHERE (`reportParamName` = 'Para_MfgCodeIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.supplier' WHERE (`reportParamName` = 'Para_SupplierIDs');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.employee' WHERE (`reportParamName` = 'Para_EmployeeID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.component.manufacturer' WHERE (`reportParamName` = 'Para_AssyID');  \n" +
                "UPDATE `report_parameter_setting_mapping` SET `pageRouteState` = 'app.component.manufacturer' WHERE (`reportParamName` = 'Para_AssyIDs');  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE reportName = 'Default Header Footer Template';  \n" +
                "UPDATE `reportmaster` SET `fileName` = 'DefaultHeaderFooterTemplate' WHERE `id` = @reportId;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5039,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5039:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `isHiddenParameter`, `type`, `isDisplay`, `isDeleted`, `createdBy`, `createByRoleId`, `createdAt`) VALUES ('Para_ReportTitle', 'reportHeaderTitle', 'Report Title', '1', 'T', '0', '0', '1', '1', fun_DatetimetoUTCDateTime());  \n" +
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `isHiddenParameter`, `type`, `isDisplay`, `createdBy`, `createByRoleId`, `createdAt`) VALUES ('Para_CompanyLogo', 'companylogo', 'Company Logo', '1', 'T', '0', '1', '1', fun_DatetimetoUTCDateTime());  \n" +
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `isHiddenParameter`, `type`, `isDisplay`, `createdBy`, `createByRoleId`, `createdAt`) VALUES ('Para_CompanyLogoURL', 'companylogoURL', 'CompanyLogo URL', '1', 'T', '0', '1', '1', fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5040,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5040:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @dataSourceId FROM fixed_entity_dataelement WHERE displayEntityName = 'Packing Slip';  \n" +
                "INSERT INTO `report_parameter_setting_mapping`  \n" +
                "(`reportParamName`,`dbColumnName`,`displayName`,`pageRouteState`,`isHiddenParameter`,`type`,`dataSourceId`,`options`,`isDisplay`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "('Para_Packing_SlipId','packingSlipId','Packing Slip','app.transaction.customerpacking','1','A',@dataSourceId ,null,'1','1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select entityID INTO @entityId FROM entity WHERE entityName = 'Customer Packing Slip';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('Customer Packing Slip - Stimulsoft','Customer Packing Slip','Packing Slip',fun_DatetimetoUTCDateTime(),'1',1,'CustomerPackingSlip',1,@entityId,4,null,1);  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'CustomerPackingSlip';  \n" +
                "select id INTO @parameterId FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_Packing_SlipId';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId,1,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select gencCategoryID into @category from genericcategory where gencCategoryName = 'Part' and categoryType = 'Report Category';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`reportViewType`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('MFR Creation Report - Stimulsoft','MFRCreationReport','MFR Creation Report','1',fun_DatetimetoUTCDateTime(),'1',1,'MFRCreationReport',1,null,4,@category,'0');  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'MFRCreationReport';  \n" +
                "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_FromDate';  \n" +
                "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_ToDate';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId1,1,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId2,1,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select gencCategoryID into @category from genericcategory where gencCategoryName = 'Receiving' and categoryType = 'Report Category';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('Supplier Performance Report- Stimulsoft','Supplier Performance Report','Supplier Performance Report',fun_DatetimetoUTCDateTime(),'1',1,'SupplierPerformanceReport',1,null,4,@category,0);  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'SupplierPerformanceReport';  \n" +
                "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_SupplierIDs';  \n" +
                "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_FromDate';  \n" +
                "select id INTO @parameterId3 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_ToDate';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId1,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId2,1,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId3,1,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select entityID INTO @entityId FROM entity WHERE entityName = 'RFQ';  \n" +
                "select gencCategoryID into @category from genericcategory where gencCategoryName = 'RFQ' and categoryType = 'Report Category';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('Obsolete Part Details Per Assembly - Stimulsoft','Obsolete Part Details Per Assembly','Obsolete Part Detail',fun_DatetimetoUTCDateTime(),'1',1,'ObsoletePartDetailsPerAssembly',1,@entityId,4,@category,0);  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'ObsoletePartDetailsPerAssembly';  \n" +
                "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_CustomerID';  \n" +
                "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_AssyIDs';  \n" +
                "select id INTO @parameterId3 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_WithAlternateParts';  \n" +
                "select id INTO @parameterId4 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_IncludePartTypes';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId1,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId2,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId3,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId4,0,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select entityID INTO @entityId FROM entity WHERE entityName = 'RFQ';  \n" +
                "select gencCategoryID into @category from genericcategory where gencCategoryName = 'RFQ' and categoryType = 'Report Category';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`reportViewType`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('Obsolete Part Details for Company - Stimulsoft','Obsolete Part Details for Company','Obsolete Part Detail for Company','1',fun_DatetimetoUTCDateTime(),'1',1,'ObsoletePartDetailforCompany',1,@entityId,4,@category,0);  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'ObsoletePartDetailforCompany';  \n" +
                "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_CustomerID';  \n" +
                "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_FromDate';  \n" +
                "select id INTO @parameterId3 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_ToDate';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId1,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId2,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId3,0,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select entityID INTO @entityId FROM entity WHERE entityName = 'Part';  \n" +
                "select gencCategoryID into @category from genericcategory where gencCategoryName = 'Part' and categoryType = 'Report Category';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`reportViewType`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('Part Usage Details - Stimulsoft','Part Usage Details','Part Usage Report','1',fun_DatetimetoUTCDateTime(),'1',1,'PartUsageDetails',1,@entityId,4,@category,0);  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'PartUsageDetails';  \n" +
                "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_PartIDs';  \n" +
                "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_FromDate';  \n" +
                "select id INTO @parameterId3 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_ToDate';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId1,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId2,1,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId3,1,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select gencCategoryID into @category from genericcategory where gencCategoryName = 'Receiving' and categoryType = 'Report Category';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`reportViewType`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('Partner Performance Details - Stimulsoft','Partner Performance Details','Partner Performance Index Report','1',fun_DatetimetoUTCDateTime(),'1',1,'PartnerPerformanceDetails',1,null,4,@category,0);  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'PartnerPerformanceDetails';  \n" +
                "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_SupplierIDs';  \n" +
                "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_FromDate';  \n" +
                "select id INTO @parameterId3 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_ToDate';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId1,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId2,1,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId3,1,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select entityID INTO @entityId FROM entity WHERE entityName = 'RFQ';  \n" +
                "select gencCategoryID into @category from genericcategory where gencCategoryName = 'RFQ' and categoryType = 'Report Category';  \n" +
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`,`rdlcReportFileName`,`reportTitle`,`reportViewType`,`createdAt`,`createdBy`,`createByRoleId`,`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
                "VALUES  \n" +
                "('Reversal Part Details Per Assembly - Stimulsoft','Reversal Part Details Per Assembly','Reversal Part Detail','0',fun_DatetimetoUTCDateTime(),'1',1,'ReversalPartDetailsPerAssembly',1,@entityId,4,@category,0);  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "select id INTO @reportId FROM reportmaster WHERE fileName = 'ReversalPartDetailsPerAssembly';  \n" +
                "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_CustomerID';  \n" +
                "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_WithAlternateParts';  \n" +
                "INSERT INTO `reportmasterparameter`  \n" +
                "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
                "VALUES  \n" +
                "(@reportId,@parameterId1,0,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
                "(@reportId,@parameterId2,0,'1',1,fun_DatetimetoUTCDateTime());  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5041,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5041:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DROP PRocedure if exists `Sproc_RetrieveReportList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReportList`(                      \n" +
                "	IN ppageIndex INT,                      \n" +
                "	IN precordPerPage INT,                      \n" +
                "	IN pOrderBy VARCHAR(255),                      \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN pIsDynamicReport TINYINT,      \n" +
                "    IN pIsPublishReport TINYINT      \n" +
                "	)  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "		DECLARE pOffset INT;                      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;         \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);                       \n" +
                "		DECLARE vTimeZone VARCHAR(50);                       \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                 \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "  \n" +
                "	SET @SQLStatement1=\"  \";              \n" +
                "	IF pIsDynamicReport = TRUE THEN          \n" +
                "		SET @SQLStatement1= \" and reportGenerationType != 1 \";           \n" +
                "	END IF;         \n" +
                "  \n" +
                "    IF pIsPublishReport = TRUE THEN   \n" +
                "		SET @SQLStatement1= \" and status = 'P' \";           \n" +
                "	END IF;         \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT r.*,          \n" +
                "			fun_getUserNameByID(r.updatedBy) updatedbyvalue,          \n" +
                "			fun_getUserNameByID(r.createdBy) createdbyvalue,           \n" +
                "			fun_getRoleByID(r.createByRoleId) createdbyRolevalue,          \n" +
                "			fun_getRoleByID(r.updateByRoleId) updatedbyRolevalue,      \n" +
                "			fun_getReportCategoryNameByCategoryID(r.reportCategoryId) category,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtvalue,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtvalue,            \n" +
                "		(CASE WHEN reportViewType THEN 'Detail' ELSE 'Summary' END) reportTypeConvertedvalue,   -- changecolumnnamr   \n" +
                "        e.entityName,     \n" +
                "		(CASE WHEN (r.status = 'D') THEN 'Draft' WHEN (r.status = 'P') THEN 'Published' ELSE '' END) AS statusConvertedValue,  \n" +
                "        (CASE WHEN (r.reportGenerationType = '4') THEN 'Yes' ELSE 'No' END) AS systemGenerated,  \n" +
                "		(CASE WHEN (r.reportGenerationType = '4') THEN '1' ELSE '0' END) AS isSystemGenerated,  \n" +
                "        fun_getReportNameByReportID(r.refReportId) cloneFrom,   \n" +
                "        TIMESTAMPDIFF(SECOND, r.startDesigningDate,'\",@utcDatetime,\"') startActivityDate,       \n" +
                "        fun_getUserNameByID(r.editingBy) activityStartBy  \n" +
                "		FROM `reportmaster`  r       \n" +
                "        left join entity e on e.entityId = r.entityId      \n" +
                "        left join report_change_logs rc on r.id = rc.reportId and endActivityDate is null      \n" +
                "		WHERE r.deletedAt IS NULL and r.reportGenerationType != 3 and r.entityId is null \", @SQLStatement1);  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                      \n" +
                "			SET pOrderBy = \"ORDER BY reportName ASC\";                      \n" +
                "		ELSE                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "		END IF;	                      \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                      \n" +
                "			SET pWhereClause = '1=1' ;                      \n" +
                "		END IF;	                      \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
                "		ELSE	                      \n" +
                "			SET rowNumWhere = '';                      \n" +
                "		END IF;	                      \n" +
                "  \n" +
                "		/* to get total count of rows */                 \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                \n" +
                "			EXECUTE query2;                \n" +
                "			DEALLOCATE PREPARE query2;              \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;                \n" +
                "			EXECUTE query1;                \n" +
                "			DEALLOCATE PREPARE query1;             \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCommonFormatDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCommonFormatDetail`()  \n" +
                "BEGIN    \n" +
                "Select JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.UnitPrice\"), \"$.Decimal\")) unitpriceDecimal    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.UnitPrice\"), \"$.Step\")) unitpriceStep    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.UnitPrice\"), \"$.Report\")) unitpriceReport    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.Unit\"), \"$.Decimal\")) unitDecimal    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.Unit\"), \"$.Step\")) unitStep    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.Unit\"), \"$.Report\")) unitReport    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.Amount\"), \"$.Decimal\")) amountDecimal    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.Amount\"), \"$.Step\")) amountStep    \n" +
                "		,JSON_UNQUOTE(json_extract(json_extract(s.values, \"$.Amount\"), \"$.Report\")) amountReport    \n" +
                "		,(Select     \n" +
                "			JSON_UNQUOTE(json_extract(s.values, \"$.ReportDateFormat\")) DateFormat    \n" +
                "		from systemconfigrations s where s.key = 'DatePickerDateFormat') DateFormat  \n" +
                "		,(Select     \n" +
                "			JSON_UNQUOTE(json_extract(s.values, \"$.ReportTimeFormat\")) TimeFormat    \n" +
                "		from systemconfigrations s where s.key = 'TimePickerTimeFormat') TimeFormat    \n" +
                "		,(Select     \n" +
                "			JSON_UNQUOTE(json_extract(s.values, \"$.ReportDateTimeFormat\")) DateTimeFormat    \n" +
                "		from systemconfigrations s where s.key = 'DateTimePickerDateTimeFormat') DateTimeFormat    \n" +
                "		,(Select     \n" +
                "			JSON_UNQUOTE(json_extract(s.values, \"$.HeaderTitleFontSize\")) HeaderTitleFontSize    \n" +
                "		from systemconfigrations s where s.key = 'ReportCommonData') HeaderTitleFontSize    \n" +
                "		,(Select     \n" +
                "			JSON_UNQUOTE(json_extract(s.values, \"$.HeaderTitleFontFamily\")) HeaderTitleFontFamily    \n" +
                "		from systemconfigrations s where s.key = 'ReportCommonData') HeaderTitleFontFamily    \n" +
                "		,(Select     \n" +
                "			JSON_UNQUOTE(json_extract(s.values, \"$.HeaderTitleFontColor\")) HeaderTitleFontColor    \n" +
                "		from systemconfigrations s where s.key = 'ReportCommonData') HeaderTitleFontColor    \n" +
                "		,(Select cd.values from systemconfigrations cd where cd.key = 'CompanyLogo') CompanyLogo    \n" +
                "		,(Select cd.values from systemconfigrations cd where cd.key = 'Report-Disclaimer') ReportDisclaimer    \n" +
                "		,(Select cd.values from systemconfigrations cd where cd.key = 'Terms & Condition') TermsAndCondition    \n" +
                "	from systemconfigrations s where s.key = 'CommonNumberFormat';     \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetManufacturerListPreparedByDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturerListPreparedByDetails`(               \n" +
                "	IN pEmployeeID INT(11)                                           \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	SELECT 	CONCAT(street1,', ',city,', ',state,' ',postcode) AS address,        \n" +
                "		cua.email,	        \n" +
                "		cua.faxNumber,        \n" +
                "		cu.contact,        \n" +
                "		cua.contact AS phoneNo,                      \n" +
                "		cu.email AS companyEmail,        \n" +
                "		cu.primaryContactName AS companyContactName,        \n" +
                "		fun_getUserNameByEmployeID(pEmployeeID) employeeName                        \n" +
                "	FROM 	customer_addresses cua                              \n" +
                "	JOIN 	mfgcodemst cu ON cu.id = cua.customerId                              \n" +
                "	WHERE 	cua.addressType = 'B'         \n" +
                "			AND cu.isCompany = 1         \n" +
                "			AND cua.isDefault = 1         \n" +
                "			AND cua.isDeleted = 0;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "Drop procedure if exists `Sproc_getAssyWisePartUsageDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getAssyWisePartUsageDetail`(            \n" +
                "	IN pPartIDs longtext,        \n" +
                "    IN pChildDetail tinyint,        \n" +
                "    IN pfromDate date,            \n" +
                "	IN ptoDate date         \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DECLARE PartUsageQuery TEXT;      \n" +
                "DECLARE AssyWisePartUsageQuery TEXT;      \n" +
                "DECLARE MonthWisePartUsageQuery TEXT;    \n" +
                "DECLARE PartDetailQuery text;    \n" +
                "	if(pPartIDs != '') then          \n" +
                "		set @partID = concat(\" partid in (\",pPartIDs,\") \");          \n" +
                "    else          \n" +
                "		set @partID = \" 1=1 \";       \n" +
                "	end if;   \n" +
                "        SET AssyWisePartUsageQuery  = CONCAT(\"      \n" +
                "		select partID,sum(ifnull(consumeQty,0)) as UsageQuantity,sum(ifnull(consumeUnit,0)) as UsageUnits, fun_getUnitNameByID(consumeUOM) as UOM,        \n" +
                "		(select sum(ifnull(consumeQty,0)) from kit_allocation where         \n" +
                "        DATE(a.returnDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.returnDate)) and          \n" +
                "        assyid = a.assyid and partid in         \n" +
                "		(	        \n" +
                "			SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "			(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "		) as WithPackagingUsageQty,        \n" +
                "		(select sum(ifnull(consumeUnit,0)) from kit_allocation where         \n" +
                "        DATE(a.returnDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.returnDate)) and          \n" +
                "        assyid = a.assyid and partid in         \n" +
                "		(	        \n" +
                "			SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "			(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "		) as WithPackagingUsageUnits,    \n" +
                "          a.scrapExpiredQty as ScrapedQty,a.scrapExpiredUnit as ScrapedUnit, a.scrapExpiredUOM as ScrapedUOM,    \n" +
                "			(select totalreceivedQty from (    \n" +
                "				select sum(psd.receivedQty) totalreceivedQty,DATE_FORMAT(ps.packingSlipDate,'%Y%m')usageMonth, psd.*     \n" +
                "				from packing_slip_material_receive_det psd    \n" +
                "				join packing_slip_material_receive ps on ps.id = psd.refPackingSlipMaterialRecID    \n" +
                "				where psd.refPackingSlipMaterialRecID in (select id from packing_slip_material_receive where receiptType = 'p')    \n" +
                "				and partid = a.partid and    \n" +
                "				DATE(ps.packingSlipDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(ps.packingSlipDate)) AND DATE(ps.packingSlipDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(ps.packingSlipDate))    \n" +
                "				group by partid    \n" +
                "			)a ) as BuyQty,    \n" +
                "		fun_getMFGPNByID(partid) as MFRPN,fun_getAssyPIDCodeByID(partid) as PIDCode, fun_getMfgCodeByPartID(partID) as MFR,     \n" +
                "        fun_getMFGPNByID(assyID) as assyPN, assyID as assypartID , fun_getAssyPIDCodeByID(assyID) as assyID,    \n" +
                "        fun_getRoHSIconByPartID(assyID) as assyRohsIcon, fun_getRoHSNameByPartID(assyID) as assyRohsName,    \n" +
                "        fun_getMfgCodeAndNameByPartID(assyID) as customer         \n" +
                "		from kit_allocation a        \n" +
                "		where consumeQty is not null       \n" +
                "        and \",@partID,\"        \n" +
                "        and DATE(a.returnDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.returnDate))           \n" +
                "		group by assyid,partid\");       \n" +
                "		SET @AssyWisePartUsageQuery = AssyWisePartUsageQuery;          \n" +
                "		PREPARE query2 FROM @AssyWisePartUsageQuery;                                      \n" +
                "		EXECUTE query2;                                      \n" +
                "		DEALLOCATE PREPARE query2;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "Drop procedure if exists `Sproc_getMonthWisePartUsageDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getMonthWisePartUsageDetail`(            \n" +
                "	IN pPartIDs longtext,        \n" +
                "    IN pChildDetail tinyint,        \n" +
                "    IN pfromDate date,            \n" +
                "	IN ptoDate date         \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DECLARE PartUsageQuery TEXT;      \n" +
                "DECLARE AssyWisePartUsageQuery TEXT;      \n" +
                "DECLARE MonthWisePartUsageQuery TEXT;    \n" +
                "DECLARE PartDetailQuery text;    \n" +
                "	if(pPartIDs != '') then          \n" +
                "		set @partID = concat(\" partid in (\",pPartIDs,\") \");          \n" +
                "    else          \n" +
                "		set @partID = \" 1=1 \";       \n" +
                "	end if;    \n" +
                "  \n" +
                "			SET MonthWisePartUsageQuery  = CONCAT(\"      \n" +
                "			select partID,DATE_FORMAT(returnDate,'%Y%m')usageMonth,         \n" +
                "            (case when DATEDIFF(DATE('\",ptoDate,\"'), DATE('\",pfromDate,\"'))>365 then DATE_FORMAT(returnDate,'%Y') else DATE_FORMAT(returnDate,'%b %Y') end) As usageMonthYear,        \n" +
                "            #Date_format(returnDate ,'%b %Y') As usageMonthYear,        \n" +
                "            partid,sum(ifnull(consumeQty,0)) as UsageQuantity,sum(ifnull(consumeUnit,0)) as UsageUnits, fun_getUnitNameByID(consumeUOM) as UOM,        \n" +
                "			(select sum(ifnull(consumeQty,0)) from kit_allocation where DATE_FORMAT(returnDate,'%Y%m') = DATE_FORMAT(a.returnDate,'%Y%m') and         \n" +
                "            partid in         \n" +
                "			(	        \n" +
                "				SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "				(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "			) as WithPackagingUsageQty,        \n" +
                "			(select sum(ifnull(consumeUnit,0)) from kit_allocation where DATE_FORMAT(returnDate,'%Y%m') = DATE_FORMAT(a.returnDate,'%Y%m') and         \n" +
                "            partid in         \n" +
                "			(	        \n" +
                "				SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "				(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "			) as WithPackagingUsageUnits,     \n" +
                "              a.scrapExpiredQty as ScrapedQty,a.scrapExpiredUnit as ScrapedUnit, a.scrapExpiredUOM as ScrapedUOM,    \n" +
                "			(select totalreceivedQty from (    \n" +
                "				select sum(psd.receivedQty) totalreceivedQty,DATE_FORMAT(ps.packingSlipDate,'%Y%m')usageMonth, psd.*     \n" +
                "				from packing_slip_material_receive_det psd    \n" +
                "				join packing_slip_material_receive ps on ps.id = psd.refPackingSlipMaterialRecID    \n" +
                "				where psd.refPackingSlipMaterialRecID in (select id from packing_slip_material_receive where receiptType = 'p')    \n" +
                "				and partid = a.partid and    \n" +
                "				DATE(ps.packingSlipDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(ps.packingSlipDate)) AND DATE(ps.packingSlipDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(ps.packingSlipDate))    \n" +
                "				group by partid    \n" +
                "			)a    \n" +
                "            where usageMonth = (case when DATEDIFF(DATE('\",ptoDate,\"'), DATE('\",pfromDate,\"'))>365 then DATE_FORMAT(returnDate,'%Y') else DATE_FORMAT(returnDate,'%Y%m') end)) as BuyQty,    \n" +
                "			fun_getMFGPNByID(partid) as MFRPN,fun_getAssyPIDCodeByID(partid) as PIDCode,        \n" +
                "			fun_getMfgCodeByPartID(partID) as MFR, assyID, fun_getAssyPIDCodeByID(assyID) as assyPID,fun_getMfgCodeAndNameByPartID(assyID) as customer         \n" +
                "			from kit_allocation a        \n" +
                "			where consumeQty is not null       \n" +
                "            and \",@partID,\"       \n" +
                "            and DATE(a.returnDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.returnDate))           \n" +
                "			group by (case when DATEDIFF(DATE('\",ptoDate,\"'), DATE('\",pfromDate,\"'))>365 then DATE_FORMAT(returnDate,'%Y') else DATE_FORMAT(returnDate,'%Y%m') end),        \n" +
                "            partid\");        \n" +
                "	SET @MonthWisePartUsageQuery = MonthWisePartUsageQuery;          \n" +
                "	PREPARE query3 FROM @MonthWisePartUsageQuery;                                      \n" +
                "	EXECUTE query3;                                      \n" +
                "	DEALLOCATE PREPARE query3;       \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "Drop procedure if exists `Sproc_getPartUsageReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getPartUsageReportDetail`(            \n" +
                "	IN pPartIDs longtext,        \n" +
                "    IN pChildDetail tinyint,        \n" +
                "    IN pfromDate date,            \n" +
                "	IN ptoDate date         \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DECLARE PartUsageQuery TEXT;      \n" +
                "DECLARE AssyWisePartUsageQuery TEXT;      \n" +
                "DECLARE MonthWisePartUsageQuery TEXT;    \n" +
                "DECLARE PartDetailQuery text;    \n" +
                "	if(pPartIDs != '') then          \n" +
                "		set @partID = concat(\" partid in (\",pPartIDs,\") \");          \n" +
                "    else          \n" +
                "		set @partID = \" 1=1 \";       \n" +
                "	end if;      \n" +
                "  \n" +
                "	    SET PartUsageQuery  = CONCAT(\"      \n" +
                "		select partID,DATE_FORMAT(returnDate,'%Y%m')usageMonth, sum(ifnull(consumeQty,0)) as UsageQuantity,sum(ifnull(consumeUnit,0)) as UsageUnits, fun_getUnitNameByID(consumeUOM) as UOM,        \n" +
                "		(select sum(ifnull(consumeQty,0)) from kit_allocation where         \n" +
                "        DATE(a.returnDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(a.returnDate)) and          \n" +
                "        partid in         \n" +
                "		(	        \n" +
                "			SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "			(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "		) as WithPackagingUsageQty,        \n" +
                "		(select sum(ifnull(consumeUnit,0)) from kit_allocation where         \n" +
                "        DATE(a.returnDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(a.returnDate)) and          \n" +
                "        partid in         \n" +
                "		(	        \n" +
                "			SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "			(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "		) as WithPackagingUsageUnits,     \n" +
                "          a.scrapExpiredQty as ScrapedQty,a.scrapExpiredUnit as ScrapedUnit, a.scrapExpiredUOM as ScrapedUOM,    \n" +
                "        (select totalreceivedQty from (    \n" +
                "			select sum(psd.receivedQty) totalreceivedQty,DATE_FORMAT(ps.packingSlipDate,'%Y%m')usageMonth, psd.*     \n" +
                "			from packing_slip_material_receive_det psd    \n" +
                "			join packing_slip_material_receive ps on ps.id = psd.refPackingSlipMaterialRecID    \n" +
                "			where psd.refPackingSlipMaterialRecID in (select id from packing_slip_material_receive where receiptType = 'p')    \n" +
                "			and partid = a.partid and    \n" +
                "			DATE(ps.packingSlipDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(ps.packingSlipDate)) AND DATE(ps.packingSlipDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(ps.packingSlipDate))    \n" +
                "			group by partid    \n" +
                "		)a ) as BuyQty,    \n" +
                "		fun_getMFGPNByID(partid) as MFRPN,fun_getAssyPIDCodeByID(partid) as PIDCode,        \n" +
                "		fun_getMfgCodeByPartID(partID) as MFR, assyID, fun_getAssyPIDCodeByID(assyID) as assyPID,fun_getMfgCodeAndNameByPartID(assyID) as customer         \n" +
                "		from kit_allocation a        \n" +
                "		where consumeQty is not null        \n" +
                "        and \",@partID,\"        \n" +
                "        and DATE(a.returnDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(a.returnDate))           \n" +
                "		group by partid\");	        \n" +
                "if pChildDetail = 1 then        \n" +
                "        SET AssyWisePartUsageQuery  = CONCAT(\"      \n" +
                "		select partID,sum(ifnull(consumeQty,0)) as UsageQuantity,sum(ifnull(consumeUnit,0)) as UsageUnits, fun_getUnitNameByID(consumeUOM) as UOM,        \n" +
                "		(select sum(ifnull(consumeQty,0)) from kit_allocation where         \n" +
                "        DATE(a.returnDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(a.returnDate)) and          \n" +
                "        assyid = a.assyid and partid in         \n" +
                "		(	        \n" +
                "			SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "			(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "		) as WithPackagingUsageQty,        \n" +
                "		(select sum(ifnull(consumeUnit,0)) from kit_allocation where         \n" +
                "        DATE(a.returnDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(a.returnDate)) and          \n" +
                "        assyid = a.assyid and partid in         \n" +
                "		(	        \n" +
                "			SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "			(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "		) as WithPackagingUsageUnits,    \n" +
                "          a.scrapExpiredQty as ScrapedQty,a.scrapExpiredUnit as ScrapedUnit, a.scrapExpiredUOM as ScrapedUOM,    \n" +
                "			(select totalreceivedQty from (    \n" +
                "				select sum(psd.receivedQty) totalreceivedQty,DATE_FORMAT(ps.packingSlipDate,'%Y%m')usageMonth, psd.*     \n" +
                "				from packing_slip_material_receive_det psd    \n" +
                "				join packing_slip_material_receive ps on ps.id = psd.refPackingSlipMaterialRecID    \n" +
                "				where psd.refPackingSlipMaterialRecID in (select id from packing_slip_material_receive where receiptType = 'p')    \n" +
                "				and partid = a.partid and    \n" +
                "				DATE(ps.packingSlipDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(ps.packingSlipDate)) AND DATE(ps.packingSlipDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(ps.packingSlipDate))    \n" +
                "				group by partid    \n" +
                "			)a ) as BuyQty,    \n" +
                "		fun_getMFGPNByID(partid) as MFRPN,fun_getAssyPIDCodeByID(partid) as PIDCode, fun_getMfgCodeByPartID(partID) as MFR,     \n" +
                "        fun_getMFGPNByID(assyID) as assyPN, assyID as assypartID , fun_getAssyPIDCodeByID(assyID) as assyID,    \n" +
                "        fun_getRoHSIconByPartID(assyID) as assyRohsIcon, fun_getRoHSNameByPartID(assyID) as assyRohsName,    \n" +
                "        fun_getMfgCodeAndNameByPartID(assyID) as customer         \n" +
                "		from kit_allocation a        \n" +
                "		where consumeQty is not null       \n" +
                "        and \",@partID,\"        \n" +
                "        and DATE(a.returnDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(a.returnDate))           \n" +
                "		group by assyid,partid\");       \n" +
                "  \n" +
                "  \n" +
                "			SET MonthWisePartUsageQuery  = CONCAT(\"      \n" +
                "			select partID,DATE_FORMAT(returnDate,'%Y%m')usageMonth,         \n" +
                "            (case when DATEDIFF(DATE(\",ptoDate,\"), DATE(\",pfromDate,\"))>365 then DATE_FORMAT(returnDate,'%Y') else DATE_FORMAT(returnDate,'%b %Y') end) As usageMonthYear,        \n" +
                "            #Date_format(returnDate ,'%b %Y') As usageMonthYear,        \n" +
                "            partid,sum(ifnull(consumeQty,0)) as UsageQuantity,sum(ifnull(consumeUnit,0)) as UsageUnits, fun_getUnitNameByID(consumeUOM) as UOM,        \n" +
                "			(select sum(ifnull(consumeQty,0)) from kit_allocation where DATE_FORMAT(returnDate,'%Y%m') = DATE_FORMAT(a.returnDate,'%Y%m') and         \n" +
                "            partid in         \n" +
                "			(	        \n" +
                "				SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "				(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "			) as WithPackagingUsageQty,        \n" +
                "			(select sum(ifnull(consumeUnit,0)) from kit_allocation where DATE_FORMAT(returnDate,'%Y%m') = DATE_FORMAT(a.returnDate,'%Y%m') and         \n" +
                "            partid in         \n" +
                "			(	        \n" +
                "				SELECT c.id FROM component c WHERE c.packaginggroupID IN         \n" +
                "				(SELECT packaginggroupID FROM component WHERE id = a.partid) AND c.isdeleted=0)        \n" +
                "			) as WithPackagingUsageUnits,     \n" +
                "              a.scrapExpiredQty as ScrapedQty,a.scrapExpiredUnit as ScrapedUnit, a.scrapExpiredUOM as ScrapedUOM,    \n" +
                "			(select totalreceivedQty from (    \n" +
                "				select sum(psd.receivedQty) totalreceivedQty,DATE_FORMAT(ps.packingSlipDate,'%Y%m')usageMonth, psd.*     \n" +
                "				from packing_slip_material_receive_det psd    \n" +
                "				join packing_slip_material_receive ps on ps.id = psd.refPackingSlipMaterialRecID    \n" +
                "				where psd.refPackingSlipMaterialRecID in (select id from packing_slip_material_receive where receiptType = 'p')    \n" +
                "				and partid = a.partid and    \n" +
                "				DATE(ps.packingSlipDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(ps.packingSlipDate)) AND DATE(ps.packingSlipDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(ps.packingSlipDate))    \n" +
                "				group by partid    \n" +
                "			)a    \n" +
                "            where usageMonth = (case when DATEDIFF(DATE(\",ptoDate,\"), DATE(\",pfromDate,\"))>365 then DATE_FORMAT(returnDate,'%Y') else DATE_FORMAT(returnDate,'%Y%m') end)) as BuyQty,    \n" +
                "			fun_getMFGPNByID(partid) as MFRPN,fun_getAssyPIDCodeByID(partid) as PIDCode,        \n" +
                "			fun_getMfgCodeByPartID(partID) as MFR, assyID, fun_getAssyPIDCodeByID(assyID) as assyPID,fun_getMfgCodeAndNameByPartID(assyID) as customer         \n" +
                "			from kit_allocation a        \n" +
                "			where consumeQty is not null       \n" +
                "            and \",@partID,\"       \n" +
                "            and DATE(a.returnDate)>=IFNULL(DATE(\",pfromDate,\"),DATE(a.returnDate)) AND DATE(a.returnDate)<=IFNULL(DATE(\",ptoDate,\"),DATE(a.returnDate))           \n" +
                "			group by (case when DATEDIFF(DATE(\",ptoDate,\"), DATE(\",pfromDate,\"))>365 then DATE_FORMAT(returnDate,'%Y') else DATE_FORMAT(returnDate,'%Y%m') end),        \n" +
                "            partid\");        \n" +
                "	end if;        \n" +
                "  \n" +
                "		SET @PartUsageQuery = PartUsageQuery;          \n" +
                "		PREPARE query1 FROM @PartUsageQuery;                                      \n" +
                "		EXECUTE query1;                                      \n" +
                "		DEALLOCATE PREPARE query1;        \n" +
                "	if pChildDetail = 1 then       \n" +
                "		SET @AssyWisePartUsageQuery = AssyWisePartUsageQuery;          \n" +
                "		PREPARE query2 FROM @AssyWisePartUsageQuery;                                      \n" +
                "		EXECUTE query2;                                      \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "		SET @MonthWisePartUsageQuery = MonthWisePartUsageQuery;          \n" +
                "		PREPARE query3 FROM @MonthWisePartUsageQuery;                                      \n" +
                "		EXECUTE query3;                                      \n" +
                "		DEALLOCATE PREPARE query3;        \n" +
                "	end if;      \n" +
                "    if (pPartIDs != '') then       \n" +
                "		set @IDs = concat(\" id in (\",pPartIDs,\") \");      \n" +
                "		set PartDetailQuery = concat(\"select id,mfgPN,PIDCode, mfgcodeID, fun_getMfgCodeAndNameByPartID(id) as MFR, fun_getRoHSIconByPartID(id) as RohsIcon, fun_getRoHSNameByPartID(id) as rohsName from component where \",@IDs);    \n" +
                "  \n" +
                "		SET @PartDetailQuery = PartDetailQuery;          \n" +
                "		PREPARE query4 FROM @PartDetailQuery;                                      \n" +
                "		EXECUTE query4;                                      \n" +
                "		DEALLOCATE PREPARE query4;        \n" +
                "	end if;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipHeaderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipHeaderDetails`(                                    \n" +
                "	IN cpid INT                                    \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	SELECT                                 \n" +
                "    cp.id,                            \n" +
                "    cp.status,                   \n" +
                "    cp.packingSlipType,                  \n" +
                "    cp.packingSlipNumber AS PackingSlip,                                \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                                \n" +
                "    cp.poDate AS PODate,                                \n" +
                "    cp.soNumber AS SalesOrderNumber,                                \n" +
                "    cp.poNumber AS PONumber,            \n" +
                "    cp.packingSlipComment,                                \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                                \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                                \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                            \n" +
                "    cp.soDate AS SODate,                                \n" +
                "    cp.sorevision AS SORevision,                                \n" +
                "	cp.billingAddress AS SoldToAddress,                          \n" +
                "	cp.shippingAddress AS ShippingAddress,                 \n" +
                "	cp.intermediateAddress AS IntermediateAddress,                   \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),                                \n" +
                "            '-') AS SalesOrderPersonName,                          \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension                            \n" +
                "FROM                                \n" +
                "    customer_packingslip cp                       \n" +
                "        LEFT JOIN                                \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                                \n" +
                "        AND sm.isDeleted = 0                                \n" +
                "        LEFT JOIN                                \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                                \n" +
                "        AND gc.isDeleted = 0                                \n" +
                "        AND gc.categoryType = 'Shipping Methods'                                \n" +
                "        LEFT JOIN                                \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                                \n" +
                "        AND gcc.isDeleted = 0                                \n" +
                "        AND gcc.categoryType = 'Payment Terms'                              \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                                    \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                             \n" +
                "WHERE                                \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                                \n" +
                "LIMIT 1;                                \n" +
                "  \n" +
                "END;  \n" +
                "/**/  \n" +
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipLineDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipLineDetails`(                                    \n" +
                "	IN cpid INT                                    \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "SELECT                                 \n" +
                "	cpd.lineID AS PSLine,                          \n" +
                "    cpd.id AS cpDetID,    \n" +
                "    ss.releaseNumber,                          \n" +
                "    cpd.refCustPackingSlipID AS cpID,                           \n" +
                "    cpd.partId,                          \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                            \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,                            \n" +
                "    cpd.custPOLineID AS POLine,                    \n" +
                "    cpd.shippingNotes AS ShippingComment,                    \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN                          \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                          \n" +
                "		WHEN (c.iscustom = 1) THEN                          \n" +
                "		c.custAssyPN                          \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN                          \n" +
                "		c.mfgPN                          \n" +
                "		ELSE                          \n" +
                "		''                          \n" +
                "	END) AS PartNumber,            \n" +
                "	CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,                             \n" +
                "    IFNULL(c.rev, '') AS Revision,                           \n" +
                "    c.partType,                          \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',                             \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                                \n" +
                "            IFNULL(CONCAT(', ',                                \n" +
                "                            cpd.standrads),                                \n" +
                "                    ''),                                \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                                \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                                \n" +
                "FROM                                \n" +
                "    customer_packingslip_det cpd                          \n" +
                "        LEFT JOIN                                \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                                \n" +
                "        AND cp.isDeleted = 0                                \n" +
                "        LEFT JOIN                                \n" +
                "    component c ON c.id = cpd.partid                                \n" +
                "        LEFT JOIN                                \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                                \n" +
                "        AND sd.isDeleted = 0                               \n" +
                "        LEFT JOIN                               \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                                \n" +
                "        LEFT JOIN                                \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID     \n" +
                "    LEFT JOIN    \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId     	                          \n" +
                "        LEFT JOIN                                \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                                \n" +
                "        AND ra.partID = cpd.partId                                \n" +
                "        LEFT JOIN                                \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                           \n" +
                "WHERE                        \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "Drop procedure if Exists `Sproc_GetCofCHeaderDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCofCHeaderDetails`(              \n" +
                "	IN partID INT ,                  \n" +
                "	IN cpID INT                   \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	# COFC Report Header details                    \n" +
                "	SELECT                                 \n" +
                "    cp.id,                    \n" +
                "    cp.packingSlipNumber AS PackingSlip,                              \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                              \n" +
                "    cp.soNumber AS SalesOrderNumber,                              \n" +
                "    cp.poNumber AS PONumber,                             \n" +
                "	 cp.soDate AS SODate,                                \n" +
                "    cp.sorevision AS SORevision,                            \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                              \n" +
                "    (select initialName from employees emp         \n" +
                "		join department dept on dept.deptMngrId = emp.id  and dept.isDeleted = 0 and dept.deptID = -1) AS DepartmentName,                              \n" +
                "    'Paul Khunt' AS ManagerName                              \n" +
                "FROM                              \n" +
                "    customer_packingslip cp                          \n" +
                "        LEFT JOIN                              \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                              \n" +
                "        AND mfg.isDeleted = 0                              \n" +
                "WHERE                              \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID                      \n" +
                "LIMIT 1;           \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-07-2021 *********************************** */
                "Drop procedure if Exists `Sproc_GetCofCLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCofCLineDetails`(              \n" +
                "	IN partID INT ,                  \n" +
                "	IN cpID INT                   \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                " # COFC Report Table details                            \n" +
                "	SELECT                           \n" +
                "    cpd.id AS cpDetID,                        \n" +
                "	cpd.custPOLineID AS POLine,              \n" +
                "	ss.releaseNumber,                                 \n" +
                "	cpd.lineID AS PSLine,                            \n" +
                "    sum(CASE WHEN (c.partType = 3 or  (c.partType = 2 and cpd.componentStockType = 1)) THEN sa.shippedqty     \n" +
                "					ELSE cpd.shipQty END) AS ShippedQty,                               \n" +
                "    cpd.poQty AS OrderQty,                              \n" +
                "     (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                              \n" +
                "	WHEN (c.iscustom = 1) THEN c.custAssyPN                              \n" +
                "	WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN c.mfgPN                              \n" +
                "	ELSE '' END) AS PartNumber,                            \n" +
                "    IFNULL(c.rev, '') AS Revision,                              \n" +
                "    ifnull(sa.woNumber,'N/A') AS WorkOrderNumber,                                   \n" +
                "      (CASE WHEN sa.woNumber IS NOT NULL THEN fun_getCertificationByWoNumber(sa.woNumber) 		        \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) AND cpd.standrads IS NULL THEN 'N/A'        \n" +
                "        ELSE cpd.standrads END) AS Standards,        \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,    	                \n" +
                "     CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',                                   \n" +
                "            IFNULL(CONCAT(' ', rr.name), '')) AS Descripton ,                  \n" +
                "     c.partType,                                   \n" +
                "   (case when sa.woNumber is not null then (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1)         \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN 'Per Part Label'        \n" +
                "        else 'N/A'end) AS DateCode,       \n" +
                "     (case when sa.workorderID is not null then wo.dateCodeFormat         \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN ''        \n" +
                "        when sa.stockType = 'OS' then 'WWYY'                 \n" +
                "        else '' end) AS DateCodeFormat  ,      \n" +
                "        c.RoHSStatusID      \n" +
                "FROM  	customer_packingslip_det cpd                              \n" +
                "		INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0                \n" +
                "		LEFT JOIN  salesshippingmst ss ON ss.shippingID=cpd.shippingId                       \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0                      \n" +
                "        LEFT JOIN workorder wo ON wo.woID = sa.workorderID and sa.isDeleted = 0         \n" +
                "		LEFT JOIN  rfq_rohsmst rr ON rr.id = c.rohsStatusID and rr.isDeleted = 0      \n" +
                "WHERE                              \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID                       \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber,cpd.poQty;                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5042,'2.00','V1',' Report Flow Changes - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5042:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-07-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName='Sales Order';  \n" +
                "  \n" +
                "INSERT INTO page_detail(pageName,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdBy,isDisplay,displayMenuName,isAllowAsHomePage) VALUES  \n" +
                "('Sales Order Part Detail','app.transaction.salesorder.partdetail','/partdetail','Sales Order Part Detail',@pageID,0,'icon icon-note-text',1,1,0,'Sales Order',0),  \n" +
                "('Sales Order Detail','app.transaction.salesorder.detail','/detail','Sales Order Detail',@pageID,0,'icon icon-note-text',1,1,0,'Sales Order',0);  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName='Pending Customer Packing Slip Creation List';  \n" +
                "INSERT INTO page_detail(pageName,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdBy,isDisplay,displayMenuName,isAllowAsHomePage) VALUES  \n" +
                "('Pending Customer Packing Slip Creation Part Detail List','app.transaction.pendingpolist.partdetail','/partdetail','Pending Customer Packing Slip Creation Part Detail List',@pageID,0,'icon icon-note-text',1,1,0,'Pending Customer Packing Slip Creation List',0),  \n" +
                "('Pending Customer Packing Slip Creation Detail List','app.transaction.pendingpolist.detail','/detail','Pending Customer Packing Slip Creation Detail List',@pageID,0,'icon icon-note-text',1,1,0,'Pending Customer Packing Slip Creation List',0);  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "						'No'  \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "						'Yes'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `isHotJobValue`,  \n" +
                "			`vuss`.`Sales Order ID` AS id,  \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "			`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "			`vuss`.frequency as frequencyName,  \n" +
                "			case when vuss.refSODetID is not null then concat(ifnull(`vuss`.`Assy ID`,''),(case when `vuss`.`Assy ID` is not null then ' | ' else '' end),ifnull(`vuss`.`custPOLineNumber`,'')) else '' end  salesAssy,  \n" +
                "			 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "			`vuss`.`Po Number` AS poNumber,  \n" +
                "			`vuss`.`Po Date` AS poDate,  \n" +
                "			`vuss`.`Customer ID` AS customerID,  \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "			`vuss`.`Sales Order Status` AS `status`,  \n" +
                "			`vuss`.`Revision` AS revision,  \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "			`vuss`.`Terms ID` AS termsID,  \n" +
                "			`vuss`.`So Date` AS soDate,  \n" +
                "			`vuss`.`Company Name` AS companyName,  \n" +
                "			`vuss`.`internalPO` AS internalPO,  \n" +
                "			`vuss`.`mfgCode` AS mfgCode,  \n" +
                "			`vuss`.`Full Name` AS fullName,  \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "			`vuss`.`PO Qty` AS qty,  \n" +
                "			ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "			ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "			`vuss`.`mrpQty` AS mrpQty,  \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "			`vuss`.`kitQty` AS kitQty, \",  \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "			`vuss`.`shippingQty` AS shippingQty,  \n" +
                "			`vuss`.`remark` AS remark,  \n" +
                "			`vuss`.`Assy ID` AS PIDCode,  \n" +
                "			`vuss`.`Assy Name` AS mfgPN,  \n" +
                "			`vuss`.`NickName` AS nickName,  \n" +
                "			`vuss`.`liveVersion` AS liveVersion,  \n" +
                "			`vuss`.`partDescription` AS partDescription,  \n" +
                "			`vuss`.`cancleReason` AS cancleReason,  \n" +
                "			`vuss`.`Status` AS completedStatus,  \n" +
                "			`vuss`.`modifyDate` AS modifyDate,  \n" +
                "			`vuss`.`createdDate` AS createdDate,  \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "			vuss.isBlanketPO,  \n" +
                "			vuss.blanketPOText,  \n" +
                "			vuss.poRevision,  \n" +
                "			vuss.partType,  \n" +
                "			vuss.isCancle,  \n" +
                "			vuss.mfgcodeID,  \n" +
                "			vuss.manufacturerName,  \n" +
                "			`vuss`.`PartID` AS partID,  \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "			`vuss`.`kitNumber` AS kitNumber,  \n" +
                "			`vuss`.`serialNumber` AS serialNumber,  \n" +
                "			`vuss`.partCategory,  \n" +
                "			vuss.lineID,  \n" +
                "			vuss.internalCommentSo,  \n" +
                "			vuss.internalComment,  \n" +
                "			ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "			vuss.Status as salesOrderDetStatusConvertedValues,  \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "			 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "						'Draft'  \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "						'Published'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `statusConvertedValue`,  \n" +
                "			hutkit.refType as refTypeKA,  \n" +
                "			hutkit.status as haltStatusKA,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	hutkit.status = 'H' THEN  \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "					ELSE 	''  \n" +
                "				END  \n" +
                "			) AS reasonKA,  \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "						'Unplanned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "						'Partially Planned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "						'Fully Planned'  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			) as kitPlanStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	ka.kitReturnStatus is null then  \n" +
                "						'N/A'  \n" +
                "					ELSE  \n" +
                "						ka.kitReturnStatus  \n" +
                "				END  \n" +
                "			) as kitReturnStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ka.kitReleaseStatus is null then  \n" +
                "						'Not Released'  \n" +
                "					else  \n" +
                "						ka.kitReleaseStatus  \n" +
                "				END  \n" +
                "			) as kitReleaseStatus,  \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "			p.nextReleaseDate,  \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,  \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "			p.releasedPlanCount totalkitRelease,  \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "            IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "            IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "			vuss.releasedWorkorder,  \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "	LEFT JOIN  	(  \n" +
                "				SELECT  salesOrderDetID,  \n" +
                "					refAssyId,  \n" +
                "					count(1) totalPlan,  \n" +
                "                    SUM(poQty) totalPOQty,  \n" +
                "                    SUM(kitReleaseQty) totalKitQty,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "				FROM 	salesorder_plan_detailsmst  \n" +
                "				WHERE 	isDeleted=0  \n" +
                "						AND subAssyID is null  \n" +
                "				GROUP BY salesOrderDetID, refAssyId  \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "	LEFT JOIN 	(  \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "					`k`.`assyID` AS `assyID`,  \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "					`k`.`shortageLine` AS `shortageLine`,  \n" +
                "					allocPermainAssy allocPerComponent,  \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "					FROM (  \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "							mainAssy AS `assyID`,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "							sum( k.shortageline) shortageline,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "					      FROM (  \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) `k`  \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "					) `k`  \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "	IF(pIsKitList=1)THEN  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	ELSE  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "  \n" +
                "        IF(prushJob =1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJobValue=\"Yes\"');  \n" +
                "	END IF;  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "	SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "	 SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "  SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "  END IF;  \n" +
                "  IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "  END IF;  \n" +
                "        -- from date to date filter  \n" +
                "	  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalSOLines` ;  \n" +
                "CREATE FUNCTION `fun_getTotalSOLines`(  \n" +
                "	pSalesOrderID INT  \n" +
                ") RETURNS INT  \n" +
                "BEGIN  \n" +
                "	DECLARE v_totalCount INT;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0;  \n" +
                "	RETURN  v_totalCount;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalCompletedSOLines` ;  \n" +
                "CREATE FUNCTION `fun_getTotalCompletedSOLines`(  \n" +
                "	pSalesOrderID INT  \n" +
                ") RETURNS INT  \n" +
                "BEGIN  \n" +
                "	DECLARE v_totalCount INT;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0 AND salesOrderDetStatus=2;  \n" +
                "	RETURN  v_totalCount;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSOCompletedPercentage` ;  \n" +
                "CREATE FUNCTION `fun_getSOCompletedPercentage`(  \n" +
                "	pSalesOrderID INT  \n" +
                ") RETURNS DECIMAL(5,2)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_totalCount INT;  \n" +
                "	DECLARE v_totalCompletedCount INT;  \n" +
                "	DECLARE v_percentage DECIMAL(5,2);  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCompletedCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0 AND salesOrderDetStatus<>1;  \n" +
                "  \n" +
                "	SET v_percentage=(v_totalCompletedCount * 100/v_totalCount);  \n" +
                "  \n" +
                "	RETURN IFNULL(v_percentage,0);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSOCompletedSummaryStatus` ;  \n" +
                "CREATE FUNCTION `fun_getSOCompletedSummaryStatus`(  \n" +
                "	pSalesOrderID INT  \n" +
                ") RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_totalCount INT;  \n" +
                "	DECLARE v_totalCompletedCount INT;  \n" +
                "	DECLARE v_totalCancelCount INT;  \n" +
                "	DECLARE v_status VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCompletedCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0 AND salesOrderDetStatus=2;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCancelCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0 AND isCancle=1;  \n" +
                "  \n" +
                "	IF(IFNULL(v_totalCancelCount,0)=(CASE WHEN IFNULL(v_totalCount,1)=0 THEN 1 ELSE  v_totalCount END)) THEN  \n" +
                "	  SET v_status='Canceled';  \n" +
                "	ELSEIF((IFNULL(v_totalCancelCount,0)+IFNULL(v_totalCompletedCount,0))=(CASE WHEN IFNULL(v_totalCount,1)=0 THEN 1 ELSE  v_totalCount END)) THEN  \n" +
                "	  SET v_status='Completed';  \n" +
                "	ELSE  \n" +
                "	  SET v_status='In Progress';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN v_status;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalSoPrice` ;  \n" +
                "CREATE FUNCTION `fun_getTotalSoPrice`(  \n" +
                "	pSalesOrderID INT  \n" +
                ") RETURNS DECIMAL(16,2)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_totalSOPrice DECIMAL(16,2);  \n" +
                "	DECLARE v_totalOtherPrice DECIMAL(16,2);  \n" +
                "	DECLARE v_TotalPrice DECIMAL(16,2);  \n" +
                "  \n" +
                "	SELECT SUM(IFNULL(qty,0)*IFNULL(price,0)) INTO  v_totalSOPrice FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0;  \n" +
                "  \n" +
                "	SELECT SUM(IFNULL(so.qty,0)*IFNULL(so.price,0)) INTO  v_totalOtherPrice FROM salesorder_otherexpense_details so  \n" +
                "	WHERE refSalesOrderDetID IN (SELECT sd.id FROM salesorderdet sd WHERE sd.refSalesOrderID=pSalesOrderID AND sd.isdeleted=0) AND so.isdeleted=0;  \n" +
                "  \n" +
                "	SET v_TotalPrice=IFNULL(v_totalSOPrice,0)+IFNULL(v_totalOtherPrice,0);  \n" +
                "  \n" +
                "	RETURN v_TotalPrice;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalInvoicePrice` ;  \n" +
                "CREATE FUNCTION `fun_getTotalInvoicePrice`(  \n" +
                "	pSalesOrderID INT  \n" +
                ") RETURNS DECIMAL(16,2)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_totalPOPrice DECIMAL(16,2);  \n" +
                "	DECLARE v_totalOtherPrice DECIMAL(16,2);  \n" +
                "	DECLARE v_TotalPrice DECIMAL(16,2);  \n" +
                "  \n" +
                "	SELECT SUM(IFNULL(cpd.shipQty,0)*IFNULL(cpd.unitPrice,0)) INTO  v_totalPOPrice FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cpd.refCustPackingSlipID=cp.id AND cpd.isdeleted=0  \n" +
                "	 WHERE cp.refSalesOrderID=pSalesOrderID AND cpd.isdeleted=0 AND cp.transtype='I';  \n" +
                "  \n" +
                "	SELECT SUM(IFNULL(cpo.qty,0)*IFNULL(cpo.price,0)) INTO  v_totalOtherPrice FROM customer_packingslip_otherexpense_details cpo  \n" +
                "	WHERE cpo.refCustomerPackingSlipDetID IN (SELECT cpd.id FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cpd.refCustPackingSlipID=cp.id AND cpd.isdeleted=0  \n" +
                "	 WHERE cp.refSalesOrderID=pSalesOrderID AND cpd.isdeleted=0 AND cp.transtype='I') AND cpo.isdeleted=0;  \n" +
                "  \n" +
                "	SET v_TotalPrice=IFNULL(v_totalPOPrice,0)+IFNULL(v_totalOtherPrice,0);  \n" +
                "  \n" +
                "	RETURN v_TotalPrice;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       fun_getTotalSOLines(s.id) AS totalSOLines,  \n" +
                "       fun_getTotalCompletedSOLines(s.id) AS totalCompletedSOLines,  \n" +
                "       fun_getSOCompletedPercentage(s.id) AS soCompletionPercentage,  \n" +
                "      fun_getSOCompletedSummaryStatus(s.id) AS salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5043,'2.00','V1',' Alter Procedure Sproc_GetSalesorderList - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5043:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "						'No'  \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "						'Yes'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `isHotJobValue`,  \n" +
                "			`vuss`.`Sales Order ID` AS id,  \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "			`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "			`vuss`.frequency as frequencyName,  \n" +
                "			case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "			 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "			`vuss`.`Po Number` AS poNumber,  \n" +
                "			`vuss`.`Po Date` AS poDate,  \n" +
                "			`vuss`.`Customer ID` AS customerID,  \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "			`vuss`.`Sales Order Status` AS `status`,  \n" +
                "			`vuss`.`Revision` AS revision,  \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "			`vuss`.`Terms ID` AS termsID,  \n" +
                "			`vuss`.`So Date` AS soDate,  \n" +
                "			`vuss`.`Company Name` AS companyName,  \n" +
                "			`vuss`.`internalPO` AS internalPO,  \n" +
                "			`vuss`.`mfgCode` AS mfgCode,  \n" +
                "			`vuss`.`Full Name` AS fullName,  \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "			`vuss`.`PO Qty` AS qty,  \n" +
                "			ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "			ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "			`vuss`.`mrpQty` AS mrpQty,  \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "			`vuss`.`kitQty` AS kitQty, \",  \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "			`vuss`.`shippingQty` AS shippingQty,  \n" +
                "			`vuss`.`remark` AS remark,  \n" +
                "			`vuss`.`Assy ID` AS PIDCode,  \n" +
                "			`vuss`.`Assy Name` AS mfgPN,  \n" +
                "			`vuss`.`NickName` AS nickName,  \n" +
                "			`vuss`.`liveVersion` AS liveVersion,  \n" +
                "			`vuss`.`partDescription` AS partDescription,  \n" +
                "			`vuss`.`cancleReason` AS cancleReason,  \n" +
                "			`vuss`.`Status` AS completedStatus,  \n" +
                "			`vuss`.`modifyDate` AS modifyDate,  \n" +
                "			`vuss`.`createdDate` AS createdDate,  \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "			vuss.isBlanketPO,  \n" +
                "			vuss.blanketPOText,  \n" +
                "			vuss.poRevision,  \n" +
                "			vuss.partType,  \n" +
                "			vuss.isCancle,  \n" +
                "			vuss.mfgcodeID,  \n" +
                "			vuss.manufacturerName,  \n" +
                "			`vuss`.`PartID` AS partID,  \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "			`vuss`.`kitNumber` AS kitNumber,  \n" +
                "			`vuss`.`serialNumber` AS serialNumber,  \n" +
                "			`vuss`.partCategory,  \n" +
                "			vuss.lineID,  \n" +
                "			vuss.internalCommentSo,  \n" +
                "			vuss.internalComment,  \n" +
                "			ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "			vuss.Status as salesOrderDetStatusConvertedValues,  \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "			 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "						'Draft'  \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "						'Published'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `statusConvertedValue`,  \n" +
                "			hutkit.refType as refTypeKA,  \n" +
                "			hutkit.status as haltStatusKA,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	hutkit.status = 'H' THEN  \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "					ELSE 	''  \n" +
                "				END  \n" +
                "			) AS reasonKA,  \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "						'Unplanned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "						'Partially Planned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "						'Fully Planned'  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			) as kitPlanStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	ka.kitReturnStatus is null then  \n" +
                "						'N/A'  \n" +
                "					ELSE  \n" +
                "						ka.kitReturnStatus  \n" +
                "				END  \n" +
                "			) as kitReturnStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ka.kitReleaseStatus is null then  \n" +
                "						'Not Released'  \n" +
                "					else  \n" +
                "						ka.kitReleaseStatus  \n" +
                "				END  \n" +
                "			) as kitReleaseStatus,  \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "			p.nextReleaseDate,  \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,  \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "			p.releasedPlanCount totalkitRelease,  \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "            IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "            IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "			vuss.releasedWorkorder,  \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "	LEFT JOIN  	(  \n" +
                "				SELECT  salesOrderDetID,  \n" +
                "					refAssyId,  \n" +
                "					count(1) totalPlan,  \n" +
                "                    SUM(poQty) totalPOQty,  \n" +
                "                    SUM(kitReleaseQty) totalKitQty,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "				FROM 	salesorder_plan_detailsmst  \n" +
                "				WHERE 	isDeleted=0  \n" +
                "						AND subAssyID is null  \n" +
                "				GROUP BY salesOrderDetID, refAssyId  \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "	LEFT JOIN 	(  \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "					`k`.`assyID` AS `assyID`,  \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "					`k`.`shortageLine` AS `shortageLine`,  \n" +
                "					allocPermainAssy allocPerComponent,  \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "					FROM (  \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "							mainAssy AS `assyID`,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "							sum( k.shortageline) shortageline,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "					      FROM (  \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) `k`  \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "					) `k`  \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "	IF(pIsKitList=1)THEN  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	ELSE  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "  \n" +
                "        IF(prushJob =1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJobValue=\"Yes\"');  \n" +
                "	END IF;  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "	SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "	 SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "  SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "  END IF;  \n" +
                "  IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "  END IF;  \n" +
                "        -- from date to date filter  \n" +
                "	  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "         PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "	 EXECUTE query2;  \n" +
                "	 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyIDBySODetailID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyIDBySODetailID`(  \n" +
                "	psoDetailID INT  \n" +
                ") RETURNS VARCHAR(150) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE assyIDwithCustPONumber VARCHAR(150);  \n" +
                "  \n" +
                "	SELECT CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) INTO assyIDwithCustPONumber FROM component c JOIN salesorderdet s ON s.partID=c.id  \n" +
                "	WHERE s.id= psoDetailID AND s.isdeleted=0;  \n" +
                "	RETURN assyIDwithCustPONumber;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5044,'2.00','V1',' Alter Procedure Sproc_GetSalesorderList - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5044:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "create table workorder_operation_refdesig  \n" +
                "(  \n" +
                "	id int auto_increment not null ,  \n" +
                "    woID int,  \n" +
                "    opID int ,  \n" +
                "	woOPID int,  \n" +
                "    refDesig varchar(3000) not null,  \n" +
                "	createdBy	varchar(255) not null,  \n" +
                "	createdAt	datetime not null,  \n" +
                "	updatedBy	varchar(255),  \n" +
                "	updatedAt	datetime,  \n" +
                "	deletedBy	varchar(255),  \n" +
                "	deletedAt	datetime,  \n" +
                "	isDeleted	tinyint default 0,  \n" +
                "	createByRoleId	int,  \n" +
                "	updateByRoleId	int,  \n" +
                "	deleteByRoleId	int,  \n" +
                "    unqDate  	datetime default '2001-01-01',  \n" +
                "    constraint `pk_workorder_operation_refdesig` primary key(id) ,  \n" +
                "    constraint fk_wokrorder_operation_refdesig_woID FOREIGN KEY (`woID`)  REFERENCES workorder (`woID`),  \n" +
                "	constraint fk_wokrorder_operation_refdesig_opID FOREIGN KEY (`opID`)  REFERENCES operations (`opID`),  \n" +
                "    constraint fk_wokrorder_operation_refdesig_woOPID FOREIGN KEY (`woOPID`)  REFERENCES workorder_operation (`woOPID`)  \n" +
                ");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "alter table workorder_operation add column addRefDesig tinyint default 0;  \n" +
                "  \n" +
                "alter table workorder_operation add column isRequireMachineVerification CHAR(5) not null default'NA';  \n" +
                "  \n" +
                "alter table workorder_operation add column doNotReqApprovalForScan CHAR(5) not null default'NA';  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5045,'2.00','V1','Create table-workorder_operation_refdesig, Alter table-workorder_operation   - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5045:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop function if exists fun_getRangeFromString;  \n" +
                "CREATE FUNCTION `fun_getRangeFromString`(  \n" +
                "	pString VARCHAR(500),  \n" +
                "    pDelim CHAR(1)  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "  DECLARE vRetString TEXT DEFAULT '';  \n" +
                "  DECLARE vFirstNumber, vLastNumber, vPrefix VARCHAR(100) DEFAULT null;  \n" +
                "  DECLARE vMin, vMax INT;  \n" +
                "  -- extract first and last from  string ex U1-U5 firstNumber is U1 and lastNumber U5  \n" +
                "  SET vFirstNumber = SUBSTR(pString,1,REGEXP_INSTR(pString,pDelim) - 1);  \n" +
                "  SET vLastNumber = SUBSTR(pString,REGEXP_INSTR(pString,pDelim) + 1);  \n" +
                "  SET vPrefix = SUBSTR(vFirstNumber,1,INSTR(vFirstNumber,regexp_substr(vFirstNumber,'[:digit:]+$'))-1);  \n" +
                "  IF vFirstNumber IS NOT NULL AND vLastNumber IS NOT NULL THEN  \n" +
                "		-- now last get digit  \n" +
                "		SET vFirstNumber = regexp_substr(vFirstNumber,'[:digit:]+$');  \n" +
                "        SET vLastNumber = regexp_substr(vLastNumber,'[:digit:]+$');  \n" +
                "        IF CAST(vFirstNumber AS UNSIGNED) > CAST(vLastNumber AS UNSIGNED)THEN  \n" +
                "			SET vMin = vLastNumber ;  \n" +
                "            SET vMax = vFirstNumber ;  \n" +
                "		ELSEIF CAST(vFirstNumber AS UNSIGNED) < CAST(vLastNumber AS UNSIGNED) THEN  \n" +
                "			SET vMax = vLastNumber ;  \n" +
                "            SET vMin = vFirstNumber ;  \n" +
                "        END IF;  \n" +
                "        WHILE vMin <= vMax DO  \n" +
                "			IF (vMax < vMin + 1 ) THEN  \n" +
                "				SET vRetString = concat(vRetString,vPrefix,vMin);  \n" +
                "            ELSE  \n" +
                "				SET vRetString = concat(vRetString,vPrefix,vMin,',');  \n" +
                "            END IF;  \n" +
                "            SET vMin = vMin + 1;  \n" +
                "        END WHILE;  \n" +
                "  END IF;  \n" +
                "  return vRetString;  \n" +
                "end;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5046,'2.00','V1','fun_getRangeFromString  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5046:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop function if exists fun_getDesignatorList;  \n" +
                "CREATE FUNCTION `fun_getDesignatorList`(  \n" +
                "	pRefDesig TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "  DECLARE vReturn,refDesigArr TEXT DEFAULT '';  \n" +
                "  DECLARE startPos,endPos,maxLength INT DEFAULT 1;  \n" +
                "  DECLARE item VARCHAR(200);  \n" +
                "  DECLARE delim CHAR(1) ;  \n" +
                "  DECLARE vGetRange VARCHAR(2000);  \n" +
                "  SET delim = ',';  \n" +
                "  If pRefDesig IS NOT NULL Then  \n" +
                "    -- Replace space with comma, as we consider space as a seperator too  \n" +
                "    SET refDesigArr = trim(pRefDesig);  \n" +
                "    SET refDesigArr = replace(refDesigArr,' ', '');  \n" +
                "   -- SET refDesigArr = refDesigArr.replace('/ /g', ',');  \n" +
                "    set maxLength = length(refDesigArr);  \n" +
                "	REPEAT  \n" +
                "		SET endPos = LOCATE(delim,refDesigArr,startPos);  \n" +
                "        IF endPos = 0 THEN  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos);  \n" +
                "        ELSE  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos,endPos-startPos);  \n" +
                "        END IF;  \n" +
                "		IF item <>'' OR item IS NOT NULL THEN  \n" +
                "			IF (instr(item,'-') > 0) THEN  \n" +
                "				SET vGetRange = fun_getRangeFromString(item,'-');  \n" +
                "			ELSE  \n" +
                "				SET vGetRange = item;  \n" +
                "			END IF;  \n" +
                "			IF startpos >  1 AND  endPos = 0 THEN  \n" +
                "				SET vReturn = concat(vReturn,vGetRange);  \n" +
                "				SET startPos = maxLength ;  \n" +
                "			ELSE  \n" +
                "				SET vReturn = concat(vReturn,vGetRange,',');  \n" +
                "				SET startPos = endPos + 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	UNTIL startPos>= maxLength END REPEAT;  \n" +
                "  END IF;  \n" +
                "  return vReturn;  \n" +
                "end;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5047,'2.00','V1','fun_getDesignatorList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5047:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop function if exists fun_getNameByID;  \n" +
                "CREATE FUNCTION `fun_getNameByID`(  \n" +
                "	pColName VARCHAR(255),  \n" +
                "    pId LONGTEXT   ,  \n" +
                "    pDataType VARCHAR(20)  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vName LONGTEXT;  \n" +
                "	SET vName = '';  \n" +
                "	IF pColName = 'WOSTATUS'  THEN  \n" +
                "		SET vName = fun_getStatusNameByColumnAndID (pColName, pId);  \n" +
                "    ELSEIF pColName = 'CUSTOMER' THEN  \n" +
                "		SET vName = fun_getMfgCodeAndNameByID(pId);  \n" +
                "    ELSEIF pColName = 'REFRENCEWOID' THEN  \n" +
                "		SET vName = fun_getWorkorderNumberByID(pId);  \n" +
                "    ELSEIF pColName = 'ROHSSTATUSID' THEN  \n" +
                "		SET vName = fun_getRoHSNameByID(pId);  \n" +
                "	ELSEIF pColName = 'PARTID' THEN  \n" +
                "		SET vName = fun_getComponentNameByID(pId);  \n" +
                "	ELSEIF pColName = 'CLASSIDS' OR pColName = 'ADDCLASSIDS' OR pColName = 'UPDATECLASSIDS' THEN  \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);  \n" +
                "	ELSEIF pColName = 'STANDARDIDS' THEN  \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);  \n" +
                "	ELSEIF pColName = 'WORKORDERDATAFIELD' THEN  \n" +
                "		SET vName = fun_getDataElementNameById(pId);  \n" +
                "	ELSEIF pColName = 'OPERATIONDATAFIELD' THEN  \n" +
                "		SET vName = fun_getDataElementNameById(pId);  \n" +
                "	ELSEIF pColName = 'ADDEDEMPLOYEE' OR pColName = 'ADDEDREVIEWEMPLOYEE' THEN  \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);  \n" +
                "	ELSEIF pColName = 'WORKORDERCOOWNER' THEN  \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);  \n" +
                "	ELSEIF pColName = 'OPSTATUS' THEN  \n" +
                "		SET vName = fun_getOpStatusNameByID(pId);  \n" +
                "	ELSEIF pColName = 'PARENTOPID' THEN  \n" +
                "		SET vName = fun_getOperationNameById(pId);  \n" +
                "	ELSEIF pColName = 'OPERATIONTYPEID' THEN  \n" +
                "		SET vName = fun_getGenericCategoryNameByID(pId);  \n" +
                "	ELSEIF pColName = 'OPERATIONCLUSTERID' THEN  \n" +
                "		SET vName = fun_getClusterNameById(pId);  \n" +
                "	ELSEIF pColName = 'ADDEDEQUIPMENT' OR pColName = 'SELECTEDSAMPLEID' THEN  \n" +
                "		SET vName = fun_getEqpWSNameByID(pId);  \n" +
                "	ELSEIF pColName = 'SMTUOM' THEN  \n" +
                "		SET vName = fun_getUnitNameByID(pId);  \n" +
                "	ELSEIF pColName = 'ADDEDSMT' THEN  \n" +
                "		#SET vName = fun_getComponentPIDCodeByID(pId);  \n" +
                "        SET vName = fun_getAssyPIDCodeByID(pId);  \n" +
                "	ELSEIF pColName = 'MOUNTINGTYPE' THEN  \n" +
                "        SET vName = fun_getMountingTypeNameByID(pId);  \n" +
                "	ELSEIF pColName = 'FIRSTPCSSTATUS' THEN  \n" +
                "        SET vName = fun_getFirstPCSStatusNameByID(pId);  \n" +
                "	ELSEIF pColName = 'PARENTWO' THEN  \n" +
                "        SET vName = fun_getWorkorderNumberWithRevByID(pId);  \n" +
                "	ELSE  \n" +
                "		SET vName = pId;  \n" +
                " END IF;  \n" +
                "	IF pDataType = 'Boolean' THEN  \n" +
                "		IF pId = 1 THEN SET vName ='Yes' ;  \n" +
                "		ELSEIF pId = 0 THEN SET vName = 'No';  \n" +
                "		END IF ;  \n" +
                "	ELSEIF pDataType = 'Case' THEN  \n" +
                "		IF pId = 'NC' THEN SET vName= \"No-Clean\";  \n" +
                "		ELSEIF pId= 'NA' THEN SET vName= \"Not Applicable\";  \n" +
                "		ELSEIF pId= 'WS' THEN SET vName = \"Water-Soluble\";  \n" +
                "        END IF;  \n" +
                "        IF pColName = 'ISCOMPULSORY' THEN  \n" +
                "			IF pId= 1 THEN SET vName = 'Mandatory';  \n" +
                "            ELSEIF pId= 0 THEN SET vName = 'Optional';  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "        IF pColName = 'ISFEEDERACTIVE' THEN  \n" +
                "			IF pId= 1 THEN SET vName = 'Active';  \n" +
                "            ELSEIF pId= 0 THEN SET vName = 'Inactive';  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "        IF pColName = 'REQMACHINEVERIFICATION' THEN  \n" +
                "			IF pId= 'NA' THEN SET vName = 'Not Applicable';  \n" +
                "            ELSEIF pId= 'YES' THEN SET vName = 'Yes';  \n" +
                "            ELSEIF pId= 'NO' THEN SET vName = 'No';  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "        IF pColName = 'DONOTREQAPPROVALFORSCAN' THEN  \n" +
                "			IF pId= 'NA' THEN SET vName = 'Not Applicable';  \n" +
                "            ELSEIF pId= 'YES' THEN SET vName = 'Yes';  \n" +
                "            ELSEIF pId= 'NO' THEN SET vName = 'No';  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "	RETURN vName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5048,'2.00','V1','fun_getNameByID  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5048:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop function if exists fun_getRequireMachineVerificationLogicalValue;  \n" +
                "CREATE FUNCTION `fun_getRequireMachineVerificationLogicalValue`(  \n" +
                "    pWoOpId INT,  \n" +
                "    pPartId INT  \n" +
                ") RETURNS char(1) CHARSET utf8mb4  \n" +
                "Begin  \n" +
                "	DECLARE vComponentValue TINYINT DEFAULT 0;  \n" +
                "    DECLARE vWoOpValue CHAR(5) DEFAULT 'NA';  \n" +
                "    DECLARE vReturn TINYINT;  \n" +
                "    -- In part mast autoVerificationflag is mean \"ByPass Machine Verification\"  \n" +
                "    Select isAutoVerificationOfAllAssemblyParts into vComponentValue  \n" +
                "    From Component  \n" +
                "    Where id = pPartId  \n" +
                "    and isDeleted = 0;  \n" +
                "  \n" +
                "    Select isRequireMachineVerification into vWoOpValue  \n" +
                "    From workorder_operation  \n" +
                "    Where woOpID = pWoOpId  \n" +
                "    and isDeleted = 0;  \n" +
                "  \n" +
                "    IF vWoOpValue = 'NO' THEN  \n" +
                "		SET vReturn = 0;  \n" +
                "    ELSEIF  vComponentValue = 1 AND vWoOpValue ='NA' THEN  \n" +
                "		SET vReturn = 0;  \n" +
                "    ELSE  \n" +
                "		SET vReturn = 1;  \n" +
                "    END IF;  \n" +
                "    Return vReturn;  \n" +
                "End;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5049,'2.00','V1','fun_getRequireMachineVerificationLogicalValue  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5049:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop function if exists fun_setWOHistoryColDisplayName;  \n" +
                "CREATE FUNCTION `fun_setWOHistoryColDisplayName`(  \n" +
                " pColName VARCHAR(255)  \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vName VARCHAR(500);  \n" +
                "	SELECT  \n" +
                "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Validate Operations'  \n" +
                "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Build Sub Assembly Within Operations'  \n" +
                "			 WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Add Personnel'  \n" +
                "			 WHEN pColName = 'OPSTATUS' THEN 'Operation Status'  \n" +
                "             WHEN pColName = 'OPVERSION' THEN 'Operation Version'  \n" +
                "             WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access Tab Limit'  \n" +
                "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type'  \n" +
                "             WHEN pColName = 'OPNUMBER' THEN  'Operation#'  \n" +
                "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Add Equipment'  \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water Soluble'  \n" +
                "             WHEN pColName = 'WONUMBER' THEN 'WO#'  \n" +
                "			 WHEN pColName = 'PARTID' THEN 'Assy ID'  \n" +
                "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess Qty'  \n" +
                "             WHEN pColName = 'BUILDQTY' THEN 'Build Qty'  \n" +
                "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'  \n" +
                "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO#'  \n" +
                "             WHEN pColName = 'WOVERSION' THEN 'WO Version'  \n" +
                "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied'  \n" +
                "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status'  \n" +
                "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'  \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Track Serial Numbers'  \n" +
                "             WHEN pColName = 'WOSTATUS' THEN 'WO Status'  \n" +
                "             WHEN pColName = 'CUSTOMER' THEN 'MFR '  \n" +
                "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark '  \n" +
                "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark '  \n" +
                "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location'  \n" +
                "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Halt Workorder'  \n" +
                "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO'  \n" +
                "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'  \n" +
                "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking Required'  \n" +
                "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly Follow  Rack Validation'  \n" +
                "             WHEN pColName = 'ADDCLASSIDS' THEN 'Add Standard'  \n" +
                "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Update Standard'  \n" +
                "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard'  \n" +
                "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Remove Standard'  \n" +
                "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster Name'  \n" +
                "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster Display Order'  \n" +
                "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Delete Cluster'  \n" +
                "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'  \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'WO Data Field'  \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Remove Data Field'  \n" +
                "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Add Oepration To Cluster '  \n" +
                "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'  \n" +
                "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Remove Operation From Cluster'  \n" +
                "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Add Opeation Data Field'  \n" +
                "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation Data Field Disply Order'  \n" +
                "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Remove Operation Data Field'  \n" +
                "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Remove Personnel'  \n" +
                "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Remove Equipment'  \n" +
                "             WHEN pColName = 'QTY' THEN 'Equipment Qty'  \n" +
                "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online'  \n" +
                "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Remove Operation'  \n" +
                "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location'  \n" +
                "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty'  \n" +
                "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial No'  \n" +
                "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code'  \n" +
                "             WHEN pColName = 'ADDEDSMT' THEN 'Add Supplies Materials & Tools'  \n" +
                "             WHEN pColName = 'ISSMTDELETED' THEN 'Remove Supplies Materials & Tools'  \n" +
                "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA'  \n" +
                "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA'  \n" +
                "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM'  \n" +
                "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time) '  \n" +
                "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Review Co Owner'  \n" +
                "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response'  \n" +
                "             WHEN pColName = 'OPNAME' THEN 'Operation Name'  \n" +
                "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time'  \n" +
                "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time'  \n" +
                "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time'  \n" +
                "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required'  \n" +
                "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type'  \n" +
                "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description'  \n" +
                "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification'  \n" +
                "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication'  \n" +
                "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction'  \n" +
                "             WHEN pColName = 'OPDOES' THEN 'Do'  \n" +
                "             WHEN pColName = 'OPDONTS' THEN 'Do Not'  \n" +
                "             WHEN pColName = 'OPORDER' THEN 'Operation Order'  \n" +
                "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type'  \n" +
                "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion'  \n" +
                "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion'  \n" +
                "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model'  \n" +
                "             WHEN pColName = 'FIRSTPCSSTATUS' THEN '1st Article Status'  \n" +
                "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required'  \n" +
                "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required'  \n" +
                "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation'  \n" +
                "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Halt Operation'  \n" +
                "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation'  \n" +
                "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion'  \n" +
                "             WHEN pColName = 'COLORCODE' THEN 'Operation Color'  \n" +
                "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock'  \n" +
                "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID'  \n" +
                "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation'  \n" +
                "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation'  \n" +
                "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements'  \n" +
                "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty'  \n" +
                "             WHEN pColName = 'ISHOTJOB' THEN 'Rush Job'  \n" +
                "             WHEN pColName = 'SELECTEDSAMPLEID' THEN 'Selected Sample'  \n" +
                "             WHEN pColName = 'ISFEEDERACTIVE' THEN 'Feeder Status'  \n" +
                "             WHEN pColName = 'ISALLOWFINALSERAILMAPPING' THEN 'Serial# Mapping'  \n" +
                "             WHEN pColName = 'PARENTWO' THEN 'Parent WO#'  \n" +
                "             WHEN pColName = 'ADDEDREVIEWEMPLOYEE' THEN 'Invite User'  \n" +
                "             WHEN pColName = 'KITALLOCATIONREQUIRED' THEN 'Validate UMID with BOM without Kit Allocation'  \n" +
                "             WHEN pColName = 'FLUXNOTAPPLICABLE' THEN 'Flux type not applicable'  \n" +
                "             WHEN pColName = 'WATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                "             WHEN pColName = 'NOCLEAN' THEN 'No-Clean'  \n" +
                "			 WHEN pColName = 'REFDESIG' THEN 'REF DES'  \n" +
                "             WHEN pColName = 'ISOPERATIONREFDESIGDELETED' THEN 'Remove REF DES'  \n" +
                "             WHEN pColName = 'ADDREFDESIG' THEN 'Add Ref. Designator For This Operation'  \n" +
                "             WHEN pColName = 'REQMACHINEVERIFICATION' THEN 'Require Machine Setup Verification'  \n" +
                "             WHEN pColName = 'DONOTREQAPPROVALFORSCAN' THEN 'Does not Require Supervisor Approval (Before Use)'  \n" +
                "             ELSE pColName  \n" +
                "		END    INTO vName;  \n" +
                "	RETURN vName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5050,'2.00','V1','fun_setWOHistoryColDisplayName  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5050:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop function if exists fun_setWOHistoryDescription;  \n" +
                "CREATE FUNCTION `fun_setWOHistoryDescription`(  \n" +
                " pColName VARCHAR(255)  \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vName VARCHAR(500);  \n" +
                "	SELECT  \n" +
                "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Operation validated or not.'  \n" +
                "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Sub Assembly Within Operations included or not.'  \n" +
                "			 WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access tab limit changed.'  \n" +
                "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type Changed.'  \n" +
                "             WHEN pColName = 'OPNUMBER' THEN  'Operation# changed.'  \n" +
                "             WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Personnel Added to work order.'  \n" +
                "			 WHEN pColName = 'OPSTATUS' THEN 'Status of Operation in work order changed.'  \n" +
                "             WHEN pColName = 'OPVERSION' THEN 'Operation Version changed.'  \n" +
                "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Equipment added Operation/Work order.'  \n" +
                "             WHEN pColName = 'WONUMBER' THEN 'WO# Changed.'  \n" +
                "			 WHEN pColName = 'PARTID' THEN 'Assy ID changed.'  \n" +
                "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess qty changed.'  \n" +
                "             WHEN pColName = 'BUILDQTY' THEN 'Build qty changed.'  \n" +
                "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'  \n" +
                "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO# '  \n" +
                "             WHEN pColName = 'WOVERSION' THEN 'WO Version changed.'  \n" +
                "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied to work order.'  \n" +
                "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status changed.'  \n" +
                "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'  \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Tracking By serial numbers.'  \n" +
                "             WHEN pColName = 'WOSTATUS' THEN 'WO status changed.'  \n" +
                "             WHEN pColName = 'CUSTOMER' THEN 'MFR '  \n" +
                "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark changed.'  \n" +
                "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark changed.'  \n" +
                "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location changed.'  \n" +
                "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Hold the Workorder.'  \n" +
                "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO .'  \n" +
                "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'  \n" +
                "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking required.'  \n" +
                "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly follow rack validation.'  \n" +
                "             WHEN pColName = 'ADDCLASSIDS' THEN 'Added Standard to work order.'  \n" +
                "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Standard changed in work order.'  \n" +
                "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard to work order.'  \n" +
                "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Standard removed from work order.'  \n" +
                "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster name changed.'  \n" +
                "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster display order changed.'  \n" +
                "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Cluster deleted from work order.'  \n" +
                "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'  \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'Added Work order data field.'  \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Work order data field removed.'  \n" +
                "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Oepration added to cluster.'  \n" +
                "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'  \n" +
                "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Operation removed from cluster.'  \n" +
                "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Added opeation data field.'  \n" +
                "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation data field disply order.'  \n" +
                "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Removed Operation data field.'  \n" +
                "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Personnel removed from work order/operation.'  \n" +
                "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Equipment removed from  operation.'  \n" +
                "             WHEN pColName = 'QTY' THEN 'Equipment Qty changed.'  \n" +
                "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online/Offline.'  \n" +
                "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Removed Operation from work order'  \n" +
                "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location in equipment changed.'  \n" +
                "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty changed.'  \n" +
                "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial No genereated.'  \n" +
                "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code.'  \n" +
                "             WHEN pColName = 'ADDEDSMT' THEN 'Added Supplies Materials & Tools to  Operation.'  \n" +
                "             WHEN pColName = 'ISSMTDELETED' THEN 'Removed Supplies Materials & Tools from Operation.'  \n" +
                "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA changed.'  \n" +
                "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA changed.'  \n" +
                "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM changed.'  \n" +
                "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time).'  \n" +
                "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Added Co Owner for review. '  \n" +
                "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response (Mandatory / Optional)'  \n" +
                "             WHEN pColName = 'OPNAME' THEN 'Operation name changed.'  \n" +
                "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time changed.'  \n" +
                "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time changed.'  \n" +
                "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time changed.'  \n" +
                "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required changed.'  \n" +
                "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type changed.'  \n" +
                "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description changed.'  \n" +
                "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification changed.'  \n" +
                "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication changed.'  \n" +
                "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction changed.'  \n" +
                "             WHEN pColName = 'OPDOES' THEN 'Do changed.'  \n" +
                "             WHEN pColName = 'OPDONTS' THEN 'Do Not changed.'  \n" +
                "             WHEN pColName = 'OPORDER' THEN 'Operation Order changed.'  \n" +
                "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type changed.'  \n" +
                "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion changed.'  \n" +
                "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion changed.'  \n" +
                "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model changed.'  \n" +
                "             WHEN pColName = 'FIRSTPCSSTATUS' THEN '1st Article Status changed.'  \n" +
                "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required changed.'  \n" +
                "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required changed.'  \n" +
                "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation changed.'  \n" +
                "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Operation halt.'  \n" +
                "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation changed.'  \n" +
                "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion changed.'  \n" +
                "             WHEN pColName = 'COLORCODE' THEN 'Operation Color changed.'  \n" +
                "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock changed.'  \n" +
                "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID changed.'  \n" +
                "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation changed.'  \n" +
                "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation changed.'  \n" +
                "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements changed.'  \n" +
                "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty changed.'  \n" +
                "             WHEN pColName = 'ISHOTJOB' THEN 'Rush Job changed.'  \n" +
                "             WHEN pColName = 'SELECTEDSAMPLEID' THEN 'Selected Sample changed.'  \n" +
                "             WHEN pColName = 'ISFEEDERACTIVE' THEN 'Feeder status changed'  \n" +
                "             WHEN pColName = 'ISALLOWFINALSERAILMAPPING' THEN 'Serial# Mapping changed.'  \n" +
                "             WHEN pColName = 'PARENTWO' THEN 'Added Parent Work order.'  \n" +
                "             WHEN pColName = 'ADDEDREVIEWEMPLOYEE' THEN 'User invited for review.'  \n" +
                "             WHEN pColName = 'KITALLOCATIONREQUIRED' THEN 'Validate UMID with BOM without Kit Allocation changed.'  \n" +
                "             WHEN pColName = 'FLUXNOTAPPLICABLE' THEN 'Flux type not applicable'  \n" +
                "             WHEN pColName = 'WATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                "             WHEN pColName = 'NOCLEAN' THEN 'No-Clean'  \n" +
                "             WHEN pColName = 'REFDESIG' THEN 'REF DES'  \n" +
                "             WHEN pColName = 'ISOPERATIONREFDESIGDELETED' THEN 'Removed REF DES.'  \n" +
                "             WHEN pColName = 'ADDREFDESIG' THEN 'Added Ref. Designator in Operation.'  \n" +
                "             WHEN pColName = 'REQMACHINEVERIFICATION' THEN 'Require Machine Setup Verification changed.'  \n" +
                "             WHEN pColName = 'DONOTREQAPPROVALFORSCAN' THEN 'Does not Require Supervisor Approval (Before Use) changed.'  \n" +
                "             ELSE pColName  \n" +
                "		END    INTO vName;  \n" +
                "	RETURN vName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5051,'2.00','V1','fun_setWOHistoryDescription  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5051:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_CopyWorkorder;  \n" +
                "CREATE PROCEDURE `Sproc_CopyWorkorder`(  \n" +
                "	IN woID INT,  \n" +
                "	IN woNumber VARCHAR(11),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN excessQty INT,  \n" +
                "	IN buildQty INT,  \n" +
                "	IN userID INT,  \n" +
                "	IN ECORemark VARCHAR(100),  \n" +
                "	IN FCORemark VARCHAR(100),  \n" +
                "	IN isRevision INT,  \n" +
                "	IN woType INT,  \n" +
                "	IN ecoReqID INT,  \n" +
                "	IN pcustomerID INT,  \n" +
                "	IN pisRevisedWO INT,  \n" +
                "	IN pterminateWOID INT,  \n" +
                "	IN pterminateWOOPID INT,  \n" +
                "	IN pisHotJob INT,  \n" +
                "	IN pinitialInternalVersion VARCHAR (50),  \n" +
                "	IN pisCopyOPFrom VARCHAR(100),  \n" +
                "	IN pParentWOID VARCHAR(100)  ,  \n" +
                "	IN psystemID VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE insertedWOID INT;  \n" +
                "DECLARE refPartID INT;  \n" +
                "DECLARE insertedSubFormTransID INT;  \n" +
                "DECLARE lv_subFormTransID_from INT;  \n" +
                "DECLARE lv_parentDataElementID_from INT;  \n" +
                "DECLARE lv_rowNumber_from INT;  \n" +
                "DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;  \n" +
                "DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;  \n" +
                "DECLARE t_lv_woOPID INT;  \n" +
                "DECLARE i INT DEFAULT 0;  \n" +
                "DECLARE totWoOPIDs INT DEFAULT 0;  \n" +
                "  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))  \n" +
                "THEN SELECT 'woNumber' errorCode;  \n" +
                "ELSE  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "  \n" +
                "    # copy workorder  \n" +
                "  \n" +
                "	INSERT INTO workorder (`woNumber`,`partID`,`customerID`,`buildQty`,`startTime`,`endTime`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`  \n" +
                "	,`woStatus`,`woSubStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`  \n" +
                "	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`,`locationDetails`, `terminateWOID`  \n" +
                "	, `terminateWOOPID`, `isHotJob`, `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation,  \n" +
                "	`isKitAllocationNotRequired`, `woSeries` ,	`buildNumber` ,  \n" +
                "	`systemID`)  \n" +
                "	SELECT woNumber `woNumber`, ppartID `partID`,pcustomerID `customerID`, buildQty `buildQty`,`startTime`,`endTime`,`masterTemplateID`,woID,  \n" +
                "	fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,0 `woStatus`,0 `woSubStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,'A' `woVersion`,  \n" +
                "	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`isOperationTrackBySerialNo`,`isNoClean`,  \n" +
                "	`isWatersoluble`, IFNULL(pisRevisedWO,0) `isRevisedWO` , woType `woType` , ecoReqID `ecoReqID` , `locationDetails`, pterminateWOID `terminateWOID`  \n" +
                "	, pterminateWOOPID `terminateWOOPID`, pisHotJob `isHotJob`, pinitialInternalVersion `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation,  \n" +
                "	isKitAllocationNotRequired , SUBSTRING_INDEX(woNumber, '-', 1), SUBSTRING_INDEX(woNumber, '-', -1) ,  \n" +
                "	psystemID  \n" +
                "	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;  \n" +
                "	SET insertedWOID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "    # copy part_assembly_certification  \n" +
                "  \n" +
                "	INSERT INTO workorder_certification  \n" +
                "	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)  \n" +
                "	SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`ClassID` `classIDs`, `isDeleted`  \n" +
                "	FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pParentWOID IS NOT NULL) THEN  \n" +
                "		#Insert parent woID details  \n" +
                "		INSERT INTO workorder_main_assembly_mapping_details  \n" +
                "		(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)  \n" +
                "		SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET refPartID = 0;  \n" +
                "	SELECT a.partID INTO refPartID FROM workorder a WHERE a.woID = woID;  \n" +
                "  \n" +
                "	# copy workorder_operation  \n" +
                "	IF (refPartID = ppartID) THEN  \n" +
                "		INSERT INTO workorder_operation  \n" +
                "		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,  \n" +
                "		`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,  \n" +
                "		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,  \n" +
                "		    `colorcode`,`tabLimitAtTraveler`,`isMoveToStock`,`mountingTypeID`,  \n" +
                "		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,  \n" +
                "		     `isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,  \n" +
                "             `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`,`isRequireMachineVerification`,`doNotReqApprovalForScan`)  \n" +
                "		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,  \n" +
                "			`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,  \n" +
                "		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,  \n" +
                "		    'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock, wo.mountingTypeID,  \n" +
                "		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,  \n" +
                "		    `isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,  \n" +
                "            `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`, `isRequireMachineVerification`,`doNotReqApprovalForScan`  \n" +
                "		 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO workorder_operation  \n" +
                "		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,  \n" +
                "		`opDescription`,`opDoes`,`opDonts`,`opOrder`,  \n" +
                "		`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,  \n" +
                "		`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,  \n" +
                "		`colorcode`,`tabLimitAtTraveler`, `isMoveToStock`,`mountingTypeID`,  \n" +
                "		`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,  \n" +
                "		`isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,  \n" +
                "             `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`,`isRequireMachineVerification`,`doNotReqApprovalForScan`)  \n" +
                "		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,  \n" +
                "			`opDescription`,(SELECT mo.`opDoes` FROM operations mo WHERE mo.opID= wo.opID) AS `opDoes`,  \n" +
                "			(SELECT m_op.`opDonts` FROM operations m_op WHERE m_op.opID= wo.opID) AS `opDonts`,`opOrder`,  \n" +
                "			`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,  \n" +
                "			`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,  \n" +
                "			'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock,wo.mountingTypeID,  \n" +
                "			`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,  \n" +
                "			`isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart` ,  \n" +
                "             `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`,`isRequireMachineVerification`,`doNotReqApprovalForScan`  \n" +
                "		FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#update work order operation details for loop operation case  \n" +
                "	UPDATE workorder_operation AS newLoopOp, (SELECT loop_op.opID, (SELECT newwoop.woopid  \n" +
                "		FROM workorder_operation newwoop  \n" +
                "		WHERE newwoop.woID = insertedWOID  \n" +
                "			AND newwoop.opID=(SELECT opID FROM workorder_operation  \n" +
                "						WHERE woopID=loop_op.refLoopWOOPID)) newrefloopwoopid  \n" +
                "				FROM workorder_operation loop_op  \n" +
                "				WHERE loop_op.woID = woID AND isLoopOperation=1 AND deletedAt IS NULL) AS b  \n" +
                "	SET newLoopOp.refLoopWOOPID = b.newrefloopwoopid  \n" +
                "	WHERE newLoopOp.isLoopOperation=1  \n" +
                "	AND b.opID=newLoopOp.opID  \n" +
                "	AND newLoopOp.deletedAt IS NULL AND newLoopOp.woID=insertedWOID;  \n" +
                "	#update work order operation details for loop operation case  \n" +
                "	# copy workorder_cluster  \n" +
                "  \n" +
                "    INSERT INTO workorder_cluster  \n" +
                "	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)  \n" +
                "	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;  \n" +
                "  \n" +
                "    # copy workorder_operation_cluster  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)  \n" +
                "	SELECT  \n" +
                "	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID  \n" +
                "		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID  \n" +
                "		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,  \n" +
                "	woc.opID, woc.displayOrder, fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`  \n" +
                "	FROM workorder_operation_cluster woc  \n" +
                "	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)  \n" +
                "	AND woc.deletedAt IS NULL;  \n" +
                "  \n" +
                "    # copy workorder_operation_part  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part  \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`partID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID  \n" +
                "	, `isDeleted` FROM workorder_operation_part wop  \n" +
                "	WHERE wop.woID = woID AND wop.deletedAt IS NULL  \n" +
                "	AND partID NOT IN (  \n" +
                "				SELECT id FROM COMPONENT  \n" +
                "				WHERE (restrictUSEwithpermission = 1 OR restrictPackagingUseWithpermission = 1  \n" +
                "					OR restrictUsePermanently = 1 OR restrictPackagingUsePermanently = 1)  \n" +
                "				AND deletedAt IS NULL  \n" +
                "				AND id IN (SELECT partID FROM workorder_operation_part  \n" +
                "						WHERE woID = woID AND deletedAt IS NULL)  \n" +
                "			 )  \n" +
                "	AND partID NOT IN (  \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "				WHERE partID IN (SELECT partID FROM workorder WHERE woID = woID AND deletedAt IS NULL)  \n" +
                "				AND (restrictUseInBOMWithPermissionStep = 1 OR restrictUseInBOMStep = 1)  \n" +
                "				AND deletedAt IS NULL  \n" +
                "				)  \n" +
                "	;  \n" +
                "  \n" +
                "    # copy workorder_operation_equipment  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_equipment  \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`  \n" +
                "	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;  \n" +
                "  \n" +
                "    # copy workorder_operation_employee  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_employee  \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`employeeID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`  \n" +
                "	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order other fields  \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues  \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)  \n" +
                "	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "		userID `createdBy`,`refSubFormTransID`, `isDeleted`  \n" +
                "	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID  \n" +
                "	AND entityID = -7  \n" +
                "	AND dt.deletedAt IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order other fields multiple row sub-form  \n" +
                "  \n" +
                "	block1:BEGIN  \n" +
                "  \n" +
                "		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)  \n" +
                "		DECLARE subform_wo_from_data_cursor CURSOR FOR  \n" +
                "			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`  \n" +
                "			FROM subform_transaction WHERE deletedAt IS NULL  \n" +
                "			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL  \n" +
                "						AND entityID = -7  \n" +
                "						AND refTransID = woID  \n" +
                "						ORDER BY refSubFormTransID ASC  \n" +
                "					);  \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found  \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;  \n" +
                "  \n" +
                "	OPEN subform_wo_from_data_cursor;  \n" +
                "	-- loop item till all records found in string match of sub-form data element  \n" +
                "  \n" +
                "	wo_sub_Form_loop:LOOP  \n" +
                "  \n" +
                "		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;  \n" +
                "  \n" +
                "		 IF exit_loop_wo THEN  \n" +
                "			LEAVE wo_sub_Form_loop;  \n" +
                "		 END IF;  \n" +
                "  \n" +
                "		/* first insert work order sub-form entry to update row reference in dataelement */  \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)  \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);  \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/* update new copied work order sub-form reference */  \n" +
                "		UPDATE dataelement_transactionvalues  \n" +
                "		SET refSubFormTransID = insertedSubFormTransID  \n" +
                "		WHERE deletedAt IS NULL  \n" +
                "		AND refTransID = insertedWOID  \n" +
                "		AND refSubFormTransID  = lv_subFormTransID_from;  \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;  \n" +
                "		SET lv_parentDataElementID_from = NULL;  \n" +
                "		SET lv_rowNumber_from = NULL;  \n" +
                "		SET insertedSubFormTransID = NULL;  \n" +
                "  \n" +
                "	END LOOP wo_sub_Form_loop;  \n" +
                "	CLOSE subform_wo_from_data_cursor;  \n" +
                "  \n" +
                "	END  block1;  \n" +
                "  \n" +
                "  \n" +
                "	# copy workorder_operation_dataelement  \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_dataelement`  \n" +
                "    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)  \n" +
                "	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,  \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`  \n" +
                "	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;  \n" +
                "  \n" +
                "    # copy workorder_operation_equipment_dataelement  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_equipment_dataelement`  \n" +
                "    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,  \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`  \n" +
                "	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order Operation other fields  \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues  \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)  \n" +
                "	SELECT `dataElementID`,`value`,  \n" +
                "		 (SELECT woOPID FROM workorder_operation wopTo  \n" +
                "		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom  \n" +
                "		 			WHERE wopFrom.woOPID = dt.refTransID )  \n" +
                "		 AND wopTo.woID = insertedWOID) `refTransID`,  \n" +
                "	`entityID`,fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`  \n" +
                "	FROM dataelement_transactionvalues dt  \n" +
                "	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL  \n" +
                "					AND wop.woID = woID )  \n" +
                "	AND entityID = -1  \n" +
                "	AND dt.deletedAt IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order operation other fields multiple row sub-form  \n" +
                "  \n" +
                "	block2:BEGIN  \n" +
                "  \n" +
                "	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)  \n" +
                "	DECLARE subform_woop_from_data_cursor CURSOR FOR  \n" +
                "		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`  \n" +
                "		FROM subform_transaction WHERE deletedAt IS NULL  \n" +
                "		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL  \n" +
                "					AND entityID = -1  \n" +
                "					AND refTransID IN (SELECT woOPID FROM workorder_operation  \n" +
                "						WHERE deletedAt IS NULL AND woID = woID )  \n" +
                "					ORDER BY refSubFormTransID ASC  \n" +
                "			);  \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found  \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;  \n" +
                "  \n" +
                "	OPEN subform_woop_from_data_cursor;  \n" +
                "	-- loop item till all records found in string match of sub-form data element  \n" +
                "  \n" +
                "	woop_sub_Form_loop:LOOP  \n" +
                "  \n" +
                "		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;  \n" +
                "  \n" +
                "		 IF exit_loop_woop THEN  \n" +
                "			LEAVE woop_sub_Form_loop;  \n" +
                "		 END IF;  \n" +
                "		/* first insert work order operation sub-form entry to update row reference in dataelement */  \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)  \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);  \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/* update new copied work order operation sub-form reference  */  \n" +
                "		SET @SQl1 = CONCAT('  \n" +
                "				UPDATE dataelement_transactionvalues  \n" +
                "				SET refSubFormTransID = ',insertedSubFormTransID,  \n" +
                "				' WHERE deletedAt IS NULL  \n" +
                "				AND refTransID IN (SELECT woOPID FROM workorder_operation  \n" +
                "							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )  \n" +
                "				AND refSubFormTransID  = ',lv_subFormTransID_from,';  \n" +
                "			');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;  \n" +
                "		SET lv_parentDataElementID_from = NULL;  \n" +
                "		SET lv_rowNumber_from = NULL;  \n" +
                "		SET insertedSubFormTransID = NULL;  \n" +
                "  \n" +
                "	END LOOP woop_sub_Form_loop;  \n" +
                "	CLOSE subform_woop_from_data_cursor;  \n" +
                "  \n" +
                "	END  block2;  \n" +
                "  \n" +
                "  \n" +
                "  /*  \n" +
                "    # copy workorder_preprogcomp  \n" +
                "  \n" +
                "    -- add component selected operation too while copy component added subquery  \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp`  \n" +
                "    (`woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)  \n" +
                "	SELECT  \n" +
                "    insertedWOID `woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,`programName`,  \n" +
                "    (SELECT woOPID FROM  \n" +
                "    workorder_operation wop  \n" +
                "	WHERE wop.opID IN (  \n" +
                "		SELECT opID FROM workorder_operation wo  \n" +
                "			WHERE wo.woOPID = wp.refStkWOOPID  \n" +
                "		)  \n" +
                "	AND wop.woID = insertedWOID) refStkWOOPID  \n" +
                "	FROM workorder_preprogcomp wp  \n" +
                "    WHERE wp.woID = woID AND wp.deletedAt IS NULL;  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp_designator  \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp_designator`  \n" +
                "	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)  \n" +
                "    SELECT insertedWOID `woID`,`designatorName`,  \n" +
                "	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.mfgPNID =  \n" +
                "	(SELECT swp.mfgPNID FROM workorder_preprogcomp swp WHERE swp.woID = woID AND  \n" +
                "    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,  \n" +
                "	userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`  \n" +
                "	FROM workorder_preprogcomp_designator wpd  \n" +
                "    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;  \n" +
                "    */  \n" +
                "  \n" +
                "	/* IFNULL(isRevision,0) = 0 : isRevision means \"isNewRevision\"  */  \n" +
                "    IF (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\") THEN     /* W : work order , PW : previous work order */  \n" +
                "  \n" +
                "	 /* copy all op master folder to wo op level */  \n" +
                "	INSERT INTO generic_folder  \n" +
                "	(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "	`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)  \n" +
                "	SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID  \n" +
                "					AND woopt1.opID = gf.refTransID) refTransID ,  \n" +
                "	NULL, 'workorder_operation' gencFileOwnerType, gf.roleId, gf.refParentId,  \n" +
                "	0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,  \n" +
                "         gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType  \n" +
                "	FROM generic_folder gf  \n" +
                "	WHERE gf.refTransID IN (SELECT woopt7.opID FROM workorder_operation woopt7 WHERE woopt7.woID = woID)  \n" +
                "	AND gf.gencFileOwnerType = 'operations'  \n" +
                "	AND entityID = -1  \n" +
                "	AND gf.deletedAt IS NULL AND gf.isRecycle = 0;  \n" +
                "  \n" +
                "  \n" +
                "		# update refParentId - parent folder for work order each operation  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;  \n" +
                "  \n" +
                "		 CREATE TEMPORARY TABLE temp_woOPIDs AS  \n" +
                "		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL  \n" +
                "		 AND gencFileOwnerType = 'workorder_operation'  \n" +
                "		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3  \n" +
                "					WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;  \n" +
                "  \n" +
                "		SET totWoOPIDs = 0;  \n" +
                "		SET i = 0;  \n" +
                "		SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;  \n" +
                "  \n" +
                "		 WHILE i < totWoOPIDs DO  \n" +
                "		 	SET t_lv_woOPID = NULL;  \n" +
                "		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;  \n" +
                "  \n" +
                "			 UPDATE generic_folder gf1,  \n" +
                "			 	(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation'  \n" +
                "			 	) gf2  \n" +
                "			 	SET gf1.refParentId = gf2.gencFolderID  \n" +
                "			 WHERE gf1.refParentId = gf2.copyGencFolderID  AND gf1.isRecycle = 0  \n" +
                "			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';  \n" +
                "  \n" +
                "		 SET i = i + 1;  \n" +
                "		 END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "	    # copy generic_folder from selected part/assembly level to work order level  \n" +
                "		INSERT INTO generic_folder  \n" +
                "				(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "				`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)  \n" +
                "		SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "				0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "				a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType  \n" +
                "		FROM generic_folder a  \n" +
                "		WHERE a.refTransID = ppartID   AND a.isRecycle = 0  \n" +
                "		AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.deletedAt IS NULL;  \n" +
                "  \n" +
                "		UPDATE generic_folder gf1,  \n" +
                "			(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'  \n" +
                "			) gf2  \n" +
                "			SET gf1.refParentId = gf2.gencFolderID  \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "			AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';  \n" +
                "  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF (pisCopyOPFrom=\"PW\") THEN         /* PW : previous work order */  \n" +
                "  \n" +
                "	   # copy generic_folder from old work order to new work order  \n" +
                "	    INSERT INTO generic_folder  \n" +
                "			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)  \n" +
                "		SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "		a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType  \n" +
                "		FROM generic_folder a  \n" +
                "		WHERE a.refTransID = woID  \n" +
                "		AND a.gencFileOwnerType = 'workorder'  AND a.entityID = '-7' AND a.deletedAt IS NULL AND a.isRecycle = 0  \n" +
                "		AND ((a.refCopyTransID IS NULL AND a.refCopyGencFileOwnerType IS NULL)  \n" +
                "			OR (a.refCopyGencFileOwnerType = 'workorder' AND a.refCopyTransID IS NOT NULL)) ;  \n" +
                "  \n" +
                "	UPDATE generic_folder gf1,  \n" +
                "		(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "			FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder' AND a.isRecycle = 0  \n" +
                "		) gf2  \n" +
                "		SET gf1.refParentId = gf2.gencFolderID  \n" +
                "		WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';  \n" +
                "  \n" +
                "  \n" +
                "	# copy generic_folder from old wo op to new wo op  \n" +
                "  \n" +
                "	INSERT INTO generic_folder  \n" +
                "		(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "		`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)  \n" +
                "		SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID  \n" +
                "						AND woopt1.opID = (SELECT woopt2.opID FROM workorder_operation woopt2 WHERE woopt2.deletedAt IS NULL  \n" +
                "									AND woopt2.woOPID = gf.refTransID)) refTransID ,  \n" +
                "		gf.entityID, gf.gencFileOwnerType, gf.roleId, gf.refParentId,  \n" +
                "		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,  \n" +
                "		gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType  \n" +
                "		FROM generic_folder gf  \n" +
                "		WHERE gf.refTransID IN (SELECT woop.woOPID FROM workorder_operation woop WHERE woop.deletedAt IS NULL AND woop.woID = woID)  \n" +
                "		AND gf.gencFileOwnerType = 'workorder_operation'  \n" +
                "        AND gf.isRecycle = 0  \n" +
                "		AND gf.deletedAt IS NULL  \n" +
                "		AND ((gf.refCopyTransID IS NULL AND gf.refCopyGencFileOwnerType IS NULL)  \n" +
                "			OR (gf.refCopyGencFileOwnerType = 'workorder_operation' AND gf.refCopyTransID IS NOT NULL));  \n" +
                "  \n" +
                "		# update refParentId - parent folder for work order each operation  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;  \n" +
                "  \n" +
                "		 CREATE TEMPORARY TABLE temp_woOPIDs AS  \n" +
                "		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL  \n" +
                "		 AND gencFileOwnerType = 'workorder_operation'  \n" +
                "		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3 WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;  \n" +
                "  \n" +
                "		SET totWoOPIDs = 0;  \n" +
                "		SET i = 0;  \n" +
                "		 SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;  \n" +
                "  \n" +
                "		 WHILE i < totWoOPIDs DO  \n" +
                "		 	SET t_lv_woOPID = NULL;  \n" +
                "		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;  \n" +
                "  \n" +
                "			 UPDATE generic_folder gf1,  \n" +
                "			 	(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation' AND a.isRecycle = 0  \n" +
                "			 	) gf2  \n" +
                "			 	SET gf1.refParentId = gf2.gencFolderID  \n" +
                "			 WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.isRecycle = 0  \n" +
                "			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';  \n" +
                "  \n" +
                "		 SET i = i + 1;  \n" +
                "		 END WHILE;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;  \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;  \n" +
                "  \n" +
                "END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5052,'2.00','V1','Sproc_CopyWorkorder  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5052:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_GetRFQLineItemsByIDWithSubAssembly;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByIDWithSubAssembly`(  \n" +
                "IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                "	a.isObsoleteLine,  \n" +
                "	a.customerApprovalForQPAREFDESStep,  \n" +
                "	a.customerApprovalForBuyStep,  \n" +
                "	a.customerApprovalForPopulateStep,  \n" +
                "	a.dnpQPARefDesStep,  \n" +
                "	a.customerApprovalForDNPQPAREFDESStep,  \n" +
                "	a.customerApprovalForDNPBuyStep,  \n" +
                "	a.customerApprovalCPN,  \n" +
                "	a.refDesig  \n" +
                "	FROM rfq_lineitems a  \n" +
                "	LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                "	WHERE a.isDeleted = 0  \n" +
                "    AND a.partID in (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isDeleted = 0);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5053,'2.00','V1','Sproc_GetRFQLineItemsByIDWithSubAssembly  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5053:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_GetWOHeaderDisplayDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
                "	IN pwoID INT(11),  \n" +
                "	IN pwoOPID INT(11),  \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
                "	IN pNoCleanCleanType VARCHAR(5),  \n" +
                "	IN pwoAssyID INT(11) ,  \n" +
                "	IN pemployeeIDOfWOOP INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  \n" +
                "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,  \n" +
                "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
                "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
                "		SELECT  \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
                "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
                "			`woop`.isPlacementTracking,  \n" +
                "			`woop`.isLoopOperation,  \n" +
                "			`woop`.isAllowFinalSerialMapping,  \n" +
                "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
                "			`woop`.colorCode,  \n" +
                "            `woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
                "            `woop`.`isNoClean` AS `opNoClean`,  \n" +
                "            `woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
                "			`ca`.`PIDCode`, `vusalesorderdet`.`partDescription`,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,  \n" +
                "			`ca`.`RoHSStatusID`, `ca`.isCustom ,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
                "				WHERE wc.clusterID  \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "						WHERE woc.woopid=pwoOPID AND `woc`.`deletedAt` IS NULL)  \n" +
                "				 AND wc.deletedAt IS NULL AND wc.woID = pwoID  \n" +
                "			) isParellelOperation,  \n" +
                "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "            wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
                "            fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "        -- END IF;  \n" +
                "  \n" +
                "	# last ECO request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "        # last DFM request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "  \n" +
                "        # is export controlled assembly  \n" +
                "        SELECT (CASE WHEN  \n" +
                "	(SELECT COUNT(1) FROM certificate_standards  \n" +
                "	WHERE deletedAt IS NULL  \n" +
                "	AND isExportControlled = 1  \n" +
                "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
                "					WHERE deletedAt IS NULL  \n" +
                "					AND componentID IN (  \n" +
                "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE deletedAt IS NULL  \n" +
                "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "										WHERE deletedAt IS NULL AND partID = pwoAssyID)  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
                "								WHERE deletedAt IS NULL AND woID = pwoID  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
                "							   )  \n" +
                "					) > 0) THEN 1  \n" +
                "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
                "  \n" +
                "  \n" +
                "	#  7. get wo op empl wise total time consumption details  \n" +
                "	# include both setup and production activity  \n" +
                "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5054,'2.00','V1','Sproc_GetWOHeaderDisplayDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5054:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_GetWorkOrderOperationDetailForElastic;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderOperationDetailForElastic`(  \n" +
                "	IN pWOOPID INT(11),  \n" +
                "    IN pWOID INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from workorder_operation as wo  \n" +
                "/*		left join workorder w on wo.woID = w.woID and IFNULL(w.isDeleted,0) = 0  \n" +
                "		left join genericcategory gc on wo.operationTypeID = gc.gencCategoryId and IFNULL(gc.isDeleted,0) = 0      */  \n" +
                "	/*  left join operations o on o.opID = wo.opID and IFNULL(o.isDeleted,0) = 0  \n" +
                "		left join operations po on po.opID = wo.parentOPID and IFNULL(po.isDeleted,0) = 0          */  \n" +
                "		where IFNULL(wo.isDeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		select  \n" +
                "			wo.woOPID  \n" +
                "			, wo.woID  \n" +
                "			, w.woNumber  \n" +
                "			, wo.opNumber woOpNumber  \n" +
                "			, wo.opName woOpName  \n" +
                "			, wo.opID  \n" +
                "			, o.opNumber opNumber  \n" +
                "			, o.opName opName  \n" +
                "			, wo.opVersion  \n" +
                "			, gc.gencCategoryName as OperationType  \n" +
                "			, wo.operationTypeID  \n" +
                "			, po.opName as parentOperation  \n" +
                "			, wo.parentOPID  \n" +
                "			, wo.tabLimitAtTraveler  \n" +
                "			, wo.processTime  \n" +
                "			, wo.setupTime  \n" +
                "			, wo.perPieceTime  \n" +
                "			, wo.qtyControl  \n" +
                "			, wo.isPreProgrammingComponent  \n" +
                "			, wo.isRework  \n" +
                "			, wo.isTeamOperation  \n" +
                "			, wo.isIssueQty  \n" +
                "			, wo.cleaningType  \n" +
                "			, wo.opDescription  \n" +
                "			, wo.opWorkingCondition  \n" +
                "			, wo.opManagementInstruction  \n" +
                "			, wo.opDeferredInstruction  \n" +
                "			, wo.opDoes  \n" +
                "			, wo.opDonts  \n" +
                "            , wo.isDeleted  \n" +
                "            , (select group_concat(refDesig) from workorder_operation_refdesig wor where wor.woID = wo.woID and wor.woOpID = wo.woOPID and wor.isDeleted = 0) refDesigList  \n" +
                "		from workorder_operation as wo  \n" +
                "		left join workorder w on wo.woID = w.woID and IFNULL(w.isDeleted,0) = 0  \n" +
                "		left join genericcategory gc on wo.operationTypeID = gc.gencCategoryId and IFNULL(gc.isDeleted,0) = 0  \n" +
                "		left join operations o on o.opID = wo.opID and IFNULL(o.isDeleted,0) = 0  \n" +
                "		left join operations po on po.opID = wo.parentOPID and IFNULL(po.isDeleted,0) = 0  \n" +
                "		where  wo.woOPID  = IFNULL(pWOOPID,wo.woOPID) and wo.woID  = IFNULL(pWOID,wo.woID) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wo.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wo.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5055,'2.00','V1','Sproc_GetWorkOrderOperationDetailForElastic  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5055:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_RetrieveWorkorderOperation;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWorkorderOperation`(  \n" +
                "	IN pWOID INT(11),  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		SET @temp_Sproc_RetrieveWorkorderOperation = CONCAT(\"  \n" +
                "			SELECT woop.woOPID, woop.opID, woop.opName, woop.opNumber,  \n" +
                "            fun_getOperationNameByWOOPID(woop.woOPID) opFullName,  \n" +
                "			woop.opVersion,woop.isStopOperation,woop.isTerminated,  \n" +
                "			woop.opStatus, woop.colorCode, woop.tabLimitAtTraveler,  \n" +
                "			woop.qtyControl, woop.isTeamOperation, woop.isIssueQty,  \n" +
                "			woop.isRework, woop.isMoveToStock, woop.isTrackBySerialNo,  \n" +
                "			woop.isAllowFinalSerialMapping, woop.isLoopOperation,  \n" +
                "			woop.isPreProgrammingComponent,  \n" +
                "            (CASE WHEN woop.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "				  WHEN woop.isNoClean = 0 AND woop.isWaterSoluble = 1 THEN 'WS'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 0 THEN 'NC'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NA'  END) fluxType,  \n" +
                "            woop.isPlacementTracking,  \n" +
                "			woop.isAllowMissingPartQty  , woop.isAllowBypassQty ,  \n" +
                "			woop.isEnablePreProgrammingPart ,  \n" +
                "            woop.isRequireMachineVerification,  \n" +
                "            woop.doNotReqApprovalForScan,  \n" +
                "            woop.addRefDesig,  \n" +
                "			fun_getOperationNameByWOOPID(woop.refLoopWOOPID) loopToOperationName,  \n" +
                "			fun_getGenericCategoryNameByID(woop.operationTypeID) operationType,  \n" +
                "			fun_getMountingTypeNameByID(woop.mountingTypeId) mountingType,  \n" +
                "			(CASE WHEN (`woop`.`qtyControl` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`qtyControl` = 1) THEN 'Yes' ELSE '' END) AS `qtyControlConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isIssueQty` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isIssueQty` = 1) THEN 'Yes' ELSE '' END) AS `isIssueQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isTeamOperation` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isTeamOperation` = 1) THEN 'Yes' ELSE '' END) AS `isTeamOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isRework` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isRework` = 1) THEN 'Yes' ELSE '' END) AS `isReworkConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isMoveToStock` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isMoveToStock` = 1) THEN 'Yes' ELSE '' END) AS `isMoveToStockConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isTrackBySerialNo` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isTrackBySerialNoConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isAllowFinalSerialMapping` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isAllowFinalSerialMapping` = 1) THEN 'Yes' ELSE '' END) AS `isAllowFinalSerialMappingConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isLoopOperation` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isLoopOperation` = 1) THEN 'Yes' ELSE '' END) AS `isLoopOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isPlacementTracking` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isPlacementTracking` = 1) THEN 'Yes' ELSE '' END) AS `isPlacementTrackingConvertedValue`,  \n" +
                "			(CASE WHEN woop.isFluxNotApplicable = 1 THEN 'Not Applicable'  \n" +
                "				  WHEN woop.isNoClean = 0 AND woop.isWaterSoluble = 1 THEN 'Water-Soluble'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 0 THEN 'No-Clean'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'END ) fluxTypeConvertedValue,  \n" +
                "			(CASE WHEN (`woop`.`isPreProgrammingComponent` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isPreProgrammingComponent` = 1) THEN 'Yes' ELSE '' END) AS `isPreProgrammingComponentConvertedValue`,  \n" +
                "			fun_getOpStatusNameByID(woop.opStatus) AS `opStatusConvertedValue`  ,  \n" +
                "			(CASE WHEN (`woop`.`isAllowMissingPartQty` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isAllowMissingPartQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowMissingPartQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isAllowBypassQty` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isAllowBypassQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowBypassQtyConvertedValue` ,  \n" +
                "			(CASE WHEN (`woop`.`isEnablePreProgrammingPart` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isEnablePreProgrammingPart` = 1) THEN 'Yes' ELSE '' END) AS `isEnablePreProgrammingPartConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`addRefDesig` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`addRefDesig` = 1) THEN 'Yes' ELSE '' END) AS `addRefDesigConvertedValue`  ,  \n" +
                "			(CASE WHEN (`woop`.`isRequireMachineVerification` = 'NA') THEN 'N/A'  \n" +
                "				WHEN (`woop`.`isRequireMachineVerification` = 'NO') THEN 'No'  \n" +
                "                WHEN (`woop`.`isRequireMachineVerification` = 'YES') THEN 'Yes' ELSE '' END) AS `isRequireMachineVerificationConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`doNotReqApprovalForScan` = 'NA') THEN 'N/A'  \n" +
                "				WHEN (`woop`.`doNotReqApprovalForScan` = 'NO') THEN 'No'  \n" +
                "                WHEN (`woop`.`doNotReqApprovalForScan` = 'YES') THEN 'Yes' ELSE '' END) AS `doNotReqApprovalForScanConvertedValue`  \n" +
                "			FROM `workorder_operation` woop  \n" +
                "			WHERE woop.`deletedAt` IS NULL and woop.woID=\",pWOID);  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"opNumber ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWorkorderOperation,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWorkorderOperation,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "        set @SQLStatement2 = CONCAT(\"select woOPID,refDesig From workorder_operation_refdesig wor Where wor.woID = \",pWOID,\" and wor.isDeleted = 0\");  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "        EXECUTE query1;  \n" +
                "        DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5056,'2.00','V1','Sproc_RetrieveWorkorderOperation  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5056:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists sproc_saveWorkorderOperationRefDesignator;  \n" +
                "CREATE PROCEDURE `sproc_saveWorkorderOperationRefDesignator`(  \n" +
                "	IN pWoID INT,  \n" +
                "    IN pOpID INT,  \n" +
                "    IN pWoOpID INT,  \n" +
                "	IN pDesigList JSON,  \n" +
                "	-- IN pDeleteDesigList JSON,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	drop temporary table if exists temp_refdesig_list ;  \n" +
                "	create temporary table if not exists  temp_refdesig_list as  \n" +
                "    select *  \n" +
                "    from JSON_TABLE (  \n" +
                "		pDesigList,  \n" +
                "        \"$[*]\" COLUMNS (  \n" +
                "			id INT PATH \"$.id\",  \n" +
                "            refDesig VARCHAR(3000) PATH \"$.refDesig\",  \n" +
                "            isDeleted TINYINT PATH \"$.isDeleted\"  \n" +
                "			)  \n" +
                "	) AS temp_list   ;  \n" +
                "	-- insert new entry  \n" +
                "	insert into workorder_operation_refdesig (refDesig , woID,  opID , woOPID , createdBy, createByRoleId, createdAt, updatedBy,  updateByRoleId,updatedAt, isDeleted)  \n" +
                "    select refDesig, pWoID, pOpID, pWoOpID, pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), 0  \n" +
                "    from temp_refdesig_list  \n" +
                "    where isDeleted = 0  \n" +
                "    and (id is null or id = 0);  \n" +
                "  \n" +
                "    -- update existing entry  \n" +
                "    update workorder_operation_refdesig wor  \n" +
                "    join temp_refdesig_list t on t.id = wor.id  \n" +
                "    set wor.refDesig = t.refDesig ,  \n" +
                "    wor.updatedBy = pUserID,  \n" +
                "    wor.updateByRoleId = pUserRoleID,  \n" +
                "    wor.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "    where wor.isDeleted = 0  \n" +
                "    and wor.woOpID = pWoOpID  \n" +
                "    and (t.id is not null or t.id > 0)  \n" +
                "    and t.isDeleted = 0;  \n" +
                "  \n" +
                "    -- delete existing entry  \n" +
                "    update workorder_operation_refdesig wor  \n" +
                "    join temp_refdesig_list t on t.id = wor.id  \n" +
                "    set wor.isDeleted = t.isDeleted,  \n" +
                "    wor.deletedBy = pUserID,  \n" +
                "    wor.deleteByRoleId = pUserRoleID,  \n" +
                "    wor.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "    where wor.isDeleted = 0  \n" +
                "    and wor.woOpID = pWoOpID  \n" +
                "    and (t.id is not null or t.id > 0)  \n" +
                "    and t.isDeleted = 1;  \n" +
                "  \n" +
                "   drop temporary table temp_refdesig_list;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5057,'2.00','V1','sproc_saveWorkorderOperationRefDesignator  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5057:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_ValidateWorkorderAndPublish;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoStatus INT,  \n" +
                "	IN pupdatedBy INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(5000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/  \n" +
                "	block1: BEGIN  \n" +
                "		DECLARE current_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_previousopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;  \n" +
                "		DECLARE current_isTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE current_isLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPID INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE last_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE next_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE current_opname VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE current_woopid VARCHAR(500) DEFAULT '';  \n" +
                "  \n" +
                "		DECLARE opName_Max_ForMissingPartQtyOP VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE opNumber_Max_ForMissingPartQtyOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE opNumber_Max_ForReworkOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE anyPreProgPartInWOAssyBOM INT DEFAULT 0;  \n" +
                "		DECLARE anyPartPreProgRequireWOOP INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE assyCleanType VARCHAR(5) DEFAULT '';  \n" +
                "		DECLARE opCleanType VARCHAR(5)  DEFAULT 'NA';  \n" +
                "		DECLARE noCleanOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE waterSolubleOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE notApplicableOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE bothOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "  \n" +
                "		DECLARE err TINYINT  DEFAULT 0;  \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "		-- 2 declare the cursor operation  \n" +
                "		DECLARE operation_cursor CURSOR FOR  \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;  \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "  \n" +
                "		-- get first operation work order  \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get last operation work order  \n" +
                "		SELECT MAX(opnumber) INTO last_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get inspection process type id  \n" +
                "		SET InspectionOperationTypeID := 0;  \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory  \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
                "  \n" +
                "		-- get Assembly Clean Type  \n" +
                "		SELECT CASE WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'BOTH'  \n" +
                "					WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'  \n" +
                "					WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'  \n" +
                "					WHEN comst.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "                    ELSE ''  \n" +
                "               END INTO assyCleanType  \n" +
                "        FROM component comst  \n" +
                "        WHERE EXISTS (SELECT 1 FROM workorder wo WHERE wo.woID = pwoID AND isDeleted = 0 AND wo.partID = comst.id );  \n" +
                "		-- open the cursor  \n" +
                "		OPEN operation_cursor;  \n" +
                "  \n" +
                "		 -- start looping  \n" +
                "		operation_loop: LOOP  \n" +
                "  \n" +
                "			-- read the name from next row into the variables  \n" +
                "			FETCH operation_cursor INTO current_opnumber;  \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,  \n" +
                "			-- close the cursor and exit the loop if it has.  \n" +
                "			IF exit_loop THEN  \n" +
                "				 CLOSE operation_cursor;  \n" +
                "				 LEAVE operation_loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET current_opname:= '';  \n" +
                "			SET current_woopid:= 0;  \n" +
                "			SET current_operationTypeID:= 0;  \n" +
                "			SET current_qtyControl:= 0;  \n" +
                "			SET current_isTrackBySerialNo:= 0;  \n" +
                "			SET current_isLoopOperation:= 0;  \n" +
                "			SET current_refLoopWOOPNumber:= 0;  \n" +
                "			SET current_isIssueQty:= 0;  \n" +
                "			SET current_refLoopWOOPID:= 0;  \n" +
                "  \n" +
                "			-- get opname and woopid from operation number  \n" +
                "			SELECT curWOOP.opname, curWOOP.woopid, curWOOP.operationTypeID, curWOOP.qtyControl,  \n" +
                "			curWOOP.isIssueQty, curWOOP.isTrackBySerialNo, curWOOP.isLoopOperation,  \n" +
                "			(SELECT woop.opNumber FROM workorder_operation woop WHERE woop.woopid=curWOOP.refLoopWOOPID) AS refLoopWOOPNumber ,  \n" +
                "			  curWOOP.refLoopWOOPID  \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl,  \n" +
                "			current_isIssueQty, current_isTrackBySerialNo, current_isLoopOperation,  \n" +
                "			current_refLoopWOOPNumber ,  \n" +
                "			current_refLoopWOOPID  \n" +
                "			FROM workorder_operation curWOOP WHERE curWOOP.opnumber = current_opnumber  \n" +
                "			AND curWOOP.deletedat IS NULL AND curWOOP.woid=pwoid LIMIT 1;  \n" +
                "			-- get previous operation of rework operation  \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo  \n" +
                "				WHERE opnumber < current_opnumber  \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF first_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as first operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF last_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as last operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/  \n" +
                "			SET IsInspectionProcess:=0;  \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInspectionProcess := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is rework operation, it cannot be inspection process.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "			SET IsInValidReworkOperation:=0;  \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is rework operation, it must have manufacturer and issue qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "			SET IsInValidIsTrackBySerialNo:=0;  \n" +
                "  \n" +
                "			IF ((current_IsTrackBySerialNo = 1) AND (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidIsTrackBySerialNo := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidIsTrackBySerialNo  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is track by serial# operation, it must have manufacturer qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - loop operation validation for mfg qty, sequence operation ****************************************************/  \n" +
                "			SET IsInValidIsLoopOperation:=0;  \n" +
                "			IF (current_isLoopOperation = 1) THEN  \n" +
                "				SET next_opnumber:= 0;  \n" +
                "				-- get next operation of inspection operation  \n" +
                "				SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo  \n" +
                "					WHERE opnumber > current_opnumber  \n" +
                "					AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "				IF(current_qtyControl = 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if next operation is rework than not allow  \n" +
                "				ELSEIF(next_opnumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber = next_opnumber  \n" +
                "							AND isRework=1) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, next operation cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if found previous operation than check operation is inspection process or not  \n" +
                "				ELSEIF(current_refLoopWOOPNumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber <> current_refLoopWOOPNumber  \n" +
                "							AND opNumber <> current_opnumber  \n" +
                "							AND opNumber BETWEEN current_refLoopWOOPNumber AND current_opnumber) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, There should be no operation between loop operation', '(', FORMAT(current_opnumber,3), ') ',' and loop to operation', '(', FORMAT(current_refLoopWOOPNumber,3), ').');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- check refLoopWOOPID added or not  \n" +
                "				ELSEIF(current_refLoopWOOPID IS NULL OR current_refLoopWOOPID = 0  \n" +
                "					OR (SELECT COUNT(1) FROM  workorder_operation WHERE deletedat IS NULL  \n" +
                "						AND woOPID = current_refLoopWOOPID) = 0  \n" +
                "					) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, please add loop to operation for same.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - loop operation validation for mfg qty, sequence operation  ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "			SET found_in_paralleloperation:= 0;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO found_in_paralleloperation FROM workorder_operation_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (  \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1  \n" +
                "			) AND woopid=current_woopid;  \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not  \n" +
                "			IF current_previousopnumber > 0 THEN  \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;  \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process  \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)  \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;  \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process  \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN  \n" +
                "					IF(current_isLoopOperation = 1) THEN  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/  \n" +
                "		END LOOP operation_loop;  \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "		block2: BEGIN  \n" +
                "			-- 1 get list of inspection operation in workorder  \n" +
                "			DECLARE c_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_checkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_reworkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE temp_opname VARCHAR(500) DEFAULT 0;  \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;  \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;  \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation  \n" +
                "			DECLARE inspection_cursor CURSOR FOR  \n" +
                "			SELECT opnumber FROM workorder_operation  \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID  \n" +
                "			AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN inspection_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			inspection_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH inspection_cursor INTO c_opnumber;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_inspection_loop THEN  \n" +
                "					 CLOSE inspection_cursor;  \n" +
                "					 LEAVE inspection_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET temp_opname:= '';  \n" +
                "				SET temp_woopid:= 0;  \n" +
                "				SET temp_isRework:= 0;  \n" +
                "				SET temp_qtyControl:= 0;  \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl  \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl  \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber  \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                "				SET IsReworkInspectionOperation:= 0;  \n" +
                "				IF (temp_isRework = 1) THEN  \n" +
                "					SET IsReworkInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                "				SET IsInValidInspectionOperation:= 0;  \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN  \n" +
                "					SET IsInValidInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/  \n" +
                "				SET IsParallelClusterOperation:= 0;  \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation  \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (  \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL  \n" +
                "				 			AND clusterid IN (  \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL  \n" +
                "								AND woid=pwoid AND isparelleloperation=1  \n" +
                "				 	)  \n" +
                "				);  \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster  \n" +
                "				IF (IsParallelClusterOperation = 0) THEN  \n" +
                "					SET c_checkopnumber:= 0;  \n" +
                "					-- get next operation of inspection operation  \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo  \n" +
                "						WHERE opnumber > c_opnumber  \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not  \n" +
                "					IF c_checkopnumber > 0 THEN  \n" +
                "						SET c_reworkopnumber:= 0;  \n" +
                "						-- set checked operation number if found as rework process  \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation  \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1  \n" +
                "						AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process  \n" +
                "						IF c_reworkopnumber = 0 THEN  \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "			END LOOP inspection_loop;  \n" +
                "		END block2;  \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                "		block3: BEGIN  \n" +
                "			-- 1 get list of cluster in workorder  \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;  \n" +
                "			DECLARE current_minopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE current_maxopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE temp_clustername VARCHAR(100) DEFAULT '';  \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;  \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;  \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_loopoperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster  \n" +
                "			DECLARE cluster_cursor CURSOR FOR  \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;  \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN cluster_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			cluster_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH cluster_cursor INTO current_clusterid;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_cluster_loop THEN  \n" +
                "					 CLOSE cluster_cursor;  \n" +
                "					 LEAVE cluster_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN  \n" +
                "					SET temp_clustername:= '';  \n" +
                "					SET temp_isParellelOperation:= 0;  \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;  \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN  \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "						SET IsReworkParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "						SET IsPregrorammingParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                "						SET found_mismatchoperations:= 0;  \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (  \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						ELSE  \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "							IF (found_mismatchoperations = 1) THEN  \n" +
                "								SET found_operationTypeID:= 0;  \n" +
                "								SET cluster_maxOpNumber:= 0;  \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (  \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;  \n" +
                "									SET next_operation_to_cluster_is_loopoperation:= 0;  \n" +
                "  \n" +
                "									SELECT isRework,isLoopOperation INTO next_operation_to_cluster_is_rework,next_operation_to_cluster_is_loopoperation FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber > cluster_maxOpNumber);  \n" +
                "  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_loopoperation = 1) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> cannot be loop operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "						END IF;  \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/  \n" +
                "					END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/  \n" +
                "					SET current_minopnumber:= 0;  \n" +
                "					SET current_maxopnumber:= 0;  \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation  \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)  \n" +
                "					AND woid = pwoid AND deletedat IS NULL;  \n" +
                "					SET found_invalidsequenceoperation:= 0;  \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid  \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE  \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)  \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)  \n" +
                "					ORDER BY opnumber;  \n" +
                "					IF found_invalidsequenceoperation > 0 THEN  \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/  \n" +
                "				END IF;  \n" +
                "			END LOOP cluster_loop;  \n" +
                "		END block3;  \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "		block4: BEGIN  \n" +
                "  \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_move_to_stock_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_track_by_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_allow_final_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_loop_operation INT DEFAULT 0;  \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;  \n" +
                "			DECLARE invalid_wo_count INT DEFAULT 0;  \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_type_id INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_name VARCHAR(500);  \n" +
                "			DECLARE move_to_stock_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_assembly_part_not_added INT DEFAULT 0;  \n" +
                "			DECLARE found_assembly_equipment_not_added INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE allow_final_serialno_operation_op_name VARCHAR(500);  \n" +
                "			DECLARE allow_final_serialno_operation_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_rework_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_rework_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "			SET found_invalid_is_loop_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_loop_operation FROM workorder_operation WHERE isrework = 0 AND isLoopOperation=1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_loop_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Loop Operation must have rework operation set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_inspection_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_inspection_operation FROM workorder_operation WHERE  \n" +
                "			operationTypeID = InspectionOperationTypeID AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_inspection_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "			SET found_invalid_is_track_by_serialno_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_track_by_serialno_operation FROM workorder_operation WHERE  \n" +
                "			isTrackBySerialNo = 1 AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_track_by_serialno_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Track By Serial Operation must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "			SET check_workorder_isrevised:= 0;  \n" +
                "			SELECT COUNT(1) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;  \n" +
                "			IF check_workorder_isrevised > 0 THEN  \n" +
                "				SET first_OpTypeID:=0;  \n" +
                "  \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;  \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "			SET preprogramming_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;  \n" +
                "			IF preprogramming_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one pre-programming operation !!');  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			-- SET certificate_standard_count:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO certificate_standard_count FROM certificate_standards  \n" +
                "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND  \n" +
                "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);  \n" +
                "			-- IF certificate_standard_count > 0 THEN  \n" +
                "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');  \n" +
                "			-- END IF;  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			SET invalid_wo_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO invalid_wo_count FROM workorder_operation  \n" +
                "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;  \n" +
                "			IF invalid_wo_count > 0 THEN  \n" +
                "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published.');  \n" +
                "			END IF;  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "			SET move_to_stock_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO move_to_stock_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isMoveToStock=1;  \n" +
                "			IF move_to_stock_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one move to stock operation.');  \n" +
                "			ELSE  \n" +
                "				IF move_to_stock_operation_count = 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must have at least one <b>move to stock</b> operation, It should be last operation of work order.');  \n" +
                "				ELSE  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "					SELECT opNumber, opName, operationTypeID, isRework, isPreProgrammingComponent INTO move_to_stock_op_number, move_to_stock_op_name, move_to_stock_op_type_id, move_to_stock_is_rework, move_to_stock_is_preprogramming FROM workorder_operation WHERE isMoveToStock = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "					IF(last_opnumber <> move_to_stock_op_number) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It must be last operation of work order.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_op_type_id = InspectionOperationTypeID) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be inspection process.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					IF(move_to_stock_is_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "			SET allow_final_serialno_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO allow_final_serialno_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isAllowFinalSerialMapping=1;  \n" +
                "			IF allow_final_serialno_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one allow mapping serial# operation.');  \n" +
                "			ELSE  \n" +
                "				IF allow_final_serialno_operation_count <> 0 THEN  \n" +
                "					SELECT opNumber, opName, isRework, isPreProgrammingComponent, qtyControl  \n" +
                "					INTO allow_final_serialno_operation_op_number, allow_final_serialno_operation_op_name, allow_final_serialno_operation_is_rework, allow_final_serialno_operation_preprogramming,allow_final_serialno_operation_qtyControl FROM workorder_operation WHERE isAllowFinalSerialMapping = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_qtyControl = 0) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It must have manufacturer qty set as true.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_move_to_stock_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_move_to_stock_operation FROM workorder_operation WHERE isMoveToStock = 1 AND qtycontrol=0 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_move_to_stock_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Move To Stock Operation must have manufacturer qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "			-- SET found_assembly_part_not_added:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO found_assembly_part_not_added FROM rfq_lineitems_alternatepart  \n" +
                "			--   WHERE rfqLineItemsID  \n" +
                "			-- 	IN (SELECT id FROM rfq_lineitems  \n" +
                "			-- 		WHERE partID  \n" +
                "			-- 		IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "			-- 		AND deletedAt IS NULL)  \n" +
                "			-- 			AND mountingTypeID  \n" +
                "			-- 			IN (  \n" +
                "			-- 				SELECT rfqMountingTypeID  \n" +
                "			-- 				FROM component_logicalgroup_detail cld  \n" +
                "			-- 				WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "			-- 				IN (  \n" +
                "			-- 					SELECT id  \n" +
                "			-- 					FROM component_logicalgroup  \n" +
                "			-- 					WHERE `name`  \n" +
                "			-- 					IN ('Supplies','Materials','Tools')  \n" +
                "			-- 					AND deletedAt IS NULL  \n" +
                "			-- 				)  \n" +
                "			-- 			)  \n" +
                "			-- 			AND deletedAt IS NULL  \n" +
                "			-- 			AND mfgPNID  \n" +
                "			-- NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			SET found_assembly_part_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_part_not_added FROM component_drivetools  \n" +
                "			WHERE refComponentID IN (SELECT id FROM component WHERE id  \n" +
                "							IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE rfqLineItemsID IN (SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "												IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "												AND mountingTypeID  IN (SELECT rfqMountingTypeID  \n" +
                "														FROM component_logicalgroup_detail cld  \n" +
                "														WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "														IN (SELECT id  \n" +
                "														FROM component_logicalgroup  \n" +
                "														WHERE `name` IN ('Supplies','Materials','Tools')  \n" +
                "														AND deletedAt IS NULL)  \n" +
                "													)) AND deletedAt IS NULL  \n" +
                "							) AND deletedAt IS NULL AND driverToolRequired=1  \n" +
                "						) AND deletedAt IS NULL AND componentID  \n" +
                "			NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_part_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Parts</b> from assembly which belongs to <b>Supplies, Materials & Tools</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "			SET found_assembly_equipment_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_equipment_not_added  \n" +
                "			FROM component_functionaltestingequipment  \n" +
                "			WHERE refComponentID  \n" +
                "			IN (SELECT id FROM component WHERE id  \n" +
                "				IN (  \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "					WHERE rfqLineItemsID  \n" +
                "					IN (  \n" +
                "						SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "						IN(  \n" +
                "							SELECT partID FROM workorder WHERE woID=pwoID  \n" +
                "						)  \n" +
                "					) AND deletedAt IS NULL  \n" +
                "				) AND deletedAt IS NULL AND functionalTestingRequired=1  \n" +
                "			) AND deletedAt IS NULL  AND eqpID  \n" +
                "			NOT IN (SELECT eqpID FROM workorder_operation_equipment WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_equipment_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Equipments</b> from assembly which needs <b>Functional Testing Equipments</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "			SELECT opNumber, opName INTO opNumber_Max_ForMissingPartQtyOP , opName_Max_ForMissingPartQtyOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isAllowMissingPartQty` =  1  \n" +
                "			AND woop.deletedAt IS NULL  \n" +
                "			ORDER BY opNumber DESC LIMIT 1;  \n" +
                "  \n" +
                "			SELECT MAX(opNumber) INTO opNumber_Max_ForReworkOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isRework` =  1  \n" +
                "			AND woop.deletedAt IS NULL ;  \n" +
                "  \n" +
                "			IF(opNumber_Max_ForMissingPartQtyOP IS NOT NULL AND opNumber_Max_ForMissingPartQtyOP > 0 AND  \n" +
                "				(opNumber_Max_ForReworkOP IS NULL OR opNumber_Max_ForReworkOP = 0  \n" +
                "					OR (opNumber_Max_ForMissingPartQtyOP > opNumber_Max_ForReworkOP))) THEN  \n" +
                "  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(opNumber_Max_ForMissingPartQtyOP,3), ') ' ,opName_Max_ForMissingPartQtyOP, '</b> operation is \"Allow Operation To Continue With Possibility Of Missing Parts Placements\".  \n" +
                "							So after this operation, any one operation must be rework.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "			SELECT COUNT(1) INTO anyPreProgPartInWOAssyBOM FROM rfq_lineitems  \n" +
                "			WHERE partID = (SELECT partID FROM workorder WHERE woID= pwoID AND deletedAt IS NULL)  \n" +
                "			AND programingStatus = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO anyPartPreProgRequireWOOP FROM workorder_operation  \n" +
                "			WHERE woID = pwoID  \n" +
                "			AND isPreProgrammingComponent = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1;  \n" +
                "  \n" +
                "  \n" +
                "			IF(anyPreProgPartInWOAssyBOM > 0 AND anyPartPreProgRequireWOOP = 0) THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work order must have at least one part pre-programming operation.');  \n" +
                "			END IF;  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "  \n" +
                "  \n" +
                "		END block4;  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "		block5: BEGIN  \n" +
                "        	DECLARE v_IsAllowSerialMappingWOId INT;  \n" +
                "            DECLARE v_IsAllowSerialMappingOperationName VARCHAR(500);  \n" +
                "			DECLARE v_CountMFRSR INT;  \n" +
                "  \n" +
                "			SELECT woOPID, fun_getOperationNameByWOOPID(woOPID) INTO v_IsAllowSerialMappingWOId  \n" +
                "            ,v_IsAllowSerialMappingOperationName FROM  \n" +
                "            workorder_operation WHERE woID = pwoID AND isDeleted = 0 AND isAllowFinalSerialMapping = 1;  \n" +
                "			IF(v_IsAllowSerialMappingWOId IS NOT NULL)  \n" +
                "			THEN  \n" +
                "				SELECT COUNT(1) INTO v_CountMFRSR FROM workorder_serialmst WHERE woID = pwoID AND serialType = 1 AND isDeleted = 0;  \n" +
                "                IF v_CountMFRSR = 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ((CONCAT('Work Order must require MFR SR# because operation <b>',v_IsAllowSerialMappingOperationName,'</b> is configured as Serial# Mapping operation in work order.')));  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END block5;  \n" +
                "		/**************************************** end - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 6 - Check cleaning type of operation againse Assembly cleaning type ****************************************************/  \n" +
                "        block6: BEGIN  \n" +
                "			SELECT	GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean and Water-Soluble </li>') ELSE NULL END)  SEPARATOR '' )  bothCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean </li>') ELSE NULL END)  SEPARATOR '' )  cleanCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isWaterSoluble = 1 AND isNoClean =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Water-Soluble</li>' )ELSE NULL END) SEPARATOR '') waterCnt,  \n" +
                "                    GROUP_CONCAT((CASE WHEN isFluxNotApplicable = 1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Not Applicable</li>' )ELSE NULL END) SEPARATOR '') naCnt  \n" +
                "			INTO  bothOp, noCleanOp, waterSolubleOp  , notApplicableOp  \n" +
                "			FROM workorder_operation WHERE woID = pwoID AND isDeleted = 0;  \n" +
                "			IF assyCleanType = '' THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly flux type from part master.<br/>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF assyCleanType = 'NA' AND  ( noCleanOp IS NOT NULL OR waterSolubleOp IS NOT NULL) THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly as No-Clean or Water-Soluble or Remove following operation from work order to validate.<br/>','<ul>',IFNULL(noCleanOp,''),IFNULL(waterSolubleOp,''),'</ul>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF	assyCleanType = 'NC' THEN  \n" +
                "				SET err = 0;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-Clean.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NULL THEN -- OR opWaterSolubleCnt > 0 ) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one No-Clean operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',waterSolubleOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'WS' THEN  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as Water-Soluble.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',noCleanOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'BOTH' THEN  \n" +
                "				-- Check Both Operation Available Then allow  \n" +
                "				-- Check NoClean and WaterSolubale Both Operation Allow  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-clean and Water-soluble.<br/><ul>';  \n" +
                "				IF  ((bothOp IS NULL) AND (noCleanOp IS NULL OR waterSolubleOp IS NULL)) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble and No-clean operation or Both operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "        END block6;  \n" +
                "		/**************************************** end - case 6 - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "        block7: BEGIN  \n" +
                "			DECLARE vBOMRefDesigList,vWoOpRefDesigList TEXT;  \n" +
                "			DECLARE startPos, endPos, maxLength INT ;  \n" +
                "            DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                "            DECLARE itemRefDesg varchar(500);  \n" +
                "            DECLARE vInvalidList TEXT DEFAULT '';  \n" +
                "  \n" +
                "            SELECT  Group_Concat(rl.refDesig) INTO vBOMRefDesigList  \n" +
                "            From rfq_lineitems rl  \n" +
                "            LEFT JOIN part_sub_assy_relationship psub  ON rl.partID = psub.prPerPartID  and psub.isDeleted = 0  \n" +
                "            LEFT JOIN workorder wo  ON wo.partID = psub.partID and wo.isDeleted = 0  \n" +
                "            Where rl.isDeleted = 0  \n" +
                "            And wo.woID = pWoID;  \n" +
                "  \n" +
                "			IF vBOMRefDesigList IS NOT NULL OR  vBOMRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vBOMRefDesigList) into vBOMRefDesigList;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            SELECT  Group_Concat(wor.refDesig) INTO vWoOpRefDesigList  \n" +
                "            From workorder_operation_refDesig wor  \n" +
                "            Where wor.isDeleted = 0  \n" +
                "            AND wor.woID = pWoId;  \n" +
                "  \n" +
                "            IF vWoOpRefDesigList IS NOT NULL OR  vWoOpRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vWoOpRefDesigList) into vWoOpRefDesigList;  \n" +
                "            END IF;  \n" +
                "			SET startPos = 1;  \n" +
                "            SET maxLength = Length(vWoOpRefDesigList);  \n" +
                "            IF vWoOpRefDesigList IS NOT NULL THEN  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',vWoOpRefDesigList,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						IF(INSTR(vBOMRefDesigList,itemRefDesg) = 0) THEN  \n" +
                "							SET vInvalidCount = vInvalidCount +1 ;  \n" +
                "							IF vInvalidList = '' OR vInvalidList IS NULL THEN  \n" +
                "								SET vInvalidList = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vInvalidList = CONCAT_WS(',',vInvalidList,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "            IF vInvalidCount > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ( concat('Invalid REF DES found in one of Operation(s). <br/> <b>',vInvalidList,'</b>'));  \n" +
                "            END IF;  \n" +
                "        END block7;  \n" +
                "        /**************************************** end - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "		SELECT errorText FROM temp_operation_error;  \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/  \n" +
                "		IF (SELECT COUNT(1) FROM temp_operation_error) = 0 THEN  \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,  \n" +
                "			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoid;  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5058,'2.00','V1','Sproc_ValidateWorkorderAndPublish  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5058:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_WOChangeHistory;  \n" +
                "CREATE PROCEDURE `Sproc_WOChangeHistory`(  \n" +
                "	IN pWoID INT(11),  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pwoOPID INT,  \n" +
                "    -- If woOPID is passed then it is from operation version else from woVersion  \n" +
                "    IN fromVersion VARCHAR(255),  \n" +
                "    -- If woOPID is passed then it is to operation version else to woVersion  \n" +
                "    IN toVersion VARCHAR(255)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "    /* [S] Get ID for given WO or WOOP versiob */  \n" +
                "    DECLARE fromWOVersion VARCHAR(255);  \n" +
                "    DECLARE toWoVersion VARCHAR(255);  \n" +
                "    DECLARE fromOPVersion VARCHAR(255);  \n" +
                "    DECLARE toOPVersion VARCHAR(255);  \n" +
                "    DECLARE fromOPVersionID INT(11);  \n" +
                "    DECLARE toOPVersionID INT(11);  \n" +
                "  \n" +
                "    DECLARE woversioncheck VARCHAR(50);  \n" +
                "	IF (pwoOPID IS NULL) THEN  \n" +
                "		SET fromWOVersion = fromVersion ;  \n" +
                "        SET toWoVersion = toVersion ;  \n" +
                "     ELSEIF (pwoOPID IS NOT NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN  \n" +
                "		SET fromOPVersion = fromVersion ;  \n" +
                "        SET toOPVersion = toVersion ;  \n" +
                "        SELECT a.ID INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'   AND a.opVersion = fromVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                "		SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'   AND a.opVersion = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                "     END IF;  \n" +
                "	/* [E] Get ID for given WO or WOOP versiob */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "	   SELECT * FROM  \n" +
                "		   (  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "			#(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Oldval`)) Oldval,  \n" +
                "			#(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Newval`)) Newval,  \n" +
                "        updatedAt,Updatedby,  \n" +
                "        fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            NULL opName , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE Tablename = 'WORKORDER' AND RefTransID = pWoID  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "			(fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby ,  \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_employee woe WHERE woe.woOpEmployeeID = dca.RefTransID)  \n" +
                "            ) opName    , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EMPLOYEE'  \n" +
                "			AND RefTransID IN (SELECT woOpEmployeeID FROM workorder_operation_employee WHERE  woID =  pWoID )  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "			updatedAt,Updatedby   ,  \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_equipment woe WHERE woe.woOpEqpID = dca.RefTransID)  \n" +
                "            ) opName          , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EQUIPMENT'  \n" +
                "			AND RefTransID IN (SELECT woOpEqpID FROM workorder_operation_equipment WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "			updatedAt,Updatedby,  \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "		    (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = (SELECT wop.woOPID FROM workorder_operation_part wop WHERE wop.woOPPartID = dca.RefTransID)  \n" +
                "            ) opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca WHERE TableName = 'WORKORDER_OPERATION_PART'  \n" +
                "			AND RefTransID IN (SELECT woOPPartID FROM workorder_operation_part WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            Oldval,Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,   fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            NULL opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CLUSTER'  \n" +
                "			AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "			(fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,#(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                "             fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = (SELECT wopcl.woOPID FROM workorder_operation_cluster wopcl WHERE wopcl.woClusterID = dca.RefTransID)  \n" +
                "            ) opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_CLUSTER'  \n" +
                "			AND RefTransID IN (SELECT woClusterID FROM workorder_operation_cluster  \n" +
                "						WHERE  clusterID IN   (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )  \n" +
                "                        )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = (SELECT wopde.woOPID FROM workorder_operation_dataelement wopde WHERE wopde.woOPDataElementID = dca.RefTransID)  \n" +
                "            )  opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_DATAELEMENT'  \n" +
                "			AND RefTransID IN (SELECT woOpDataElementID FROM workorder_operation_dataelement WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ',wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = RefTransID  \n" +
                "            ) opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION'  \n" +
                "			AND RefTransID IN (SELECT woOPID FROM workorder_operation WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            NULL opName   , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CERTIFICATION'  \n" +
                "			AND RefTransID IN (SELECT woCertificationID FROM workorder_certification WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            NULL opName     , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'DATAELEMENT_TRANSACTIONVALUES'  \n" +
                "			AND RefTransID IN (SELECT dataElementTransID FROM dataelement_transactionvalues  \n" +
                "						WHERE  entityID = -7 AND RefTransID =  pWoID )  \n" +
                "  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "            SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "           (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            NULL opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_REQREVEMP'  \n" +
                "			AND RefTransID IN (SELECT woID FROM workorder_reqrevinvitedemp WHERE  woID =  pWoID )  \n" +
                "            UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            NULL opName   , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_DATAELEMENT'  \n" +
                "			AND RefTransID IN (SELECT woDataElementID FROM workorder_dataelement WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = (SELECT wopfp.woOPID FROM workorder_operation_firstpiece wopfp WHERE wopfp.wofirstpieceID = dca.RefTransID)  \n" +
                "            )  opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_FIRSTPIECE'  \n" +
                "			AND RefTransID IN (SELECT wofirstpieceID FROM workorder_operation_firstpiece WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = (SELECT wopfdr.woOPID FROM workorder_operation_equipment_feeder_details wopfdr WHERE wopfdr.id = dca.RefTransID)  \n" +
                "            )  opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_FEEDER'  \n" +
                "			AND RefTransID IN (SELECT id FROM workorder_operation_equipment_feeder_details WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "          	UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            null opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_COOWNER'  \n" +
                "			AND RefTransID IN (SELECT coOwnerID FROM workorder_coowner WHERE  woID =  pWoID )  \n" +
                "  \n" +
                "            UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            updatedAt,Updatedby  \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            null opName  , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_SUBASSEMBLY'  \n" +
                "			AND RefTransID IN (SELECT id FROM workorder_main_assembly_mapping_details WHERE  refWOID =  pWoID )  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT dca.ID,dca.Tablename,dca.RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,  \n" +
                "            dca.updatedAt,dca.Updatedby  \n" +
                "			,fun_getUserNameByID(dca.Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "            (  \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ',wo.opName) FROM workorder_operation wo  \n" +
                "                WHERE wo.woOPID = wor.woOPID  \n" +
                "            ) opName  , dca.woVersion, dca.opVersion , dca.valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  \n" +
                "            LEFT JOIN workorder_operation_refdesig wor on wor.id = dca.RefTransID and woID = pWoID  \n" +
                "			WHERE TableName = 'WORKORDER_OPERATION_REFDESIG'  \n" +
                "		) AS a  \n" +
                "		WHERE CASE WHEN fromWOVersion IS NOT NULL THEN a.woVersion BETWEEN fromWOVersion AND toWoVersion ELSE TRUE END  \n" +
                "		AND CASE WHEN fromOPVersion IS NOT NULL THEN a.opVersion BETWEEN fromOPVersion AND toOPVersion ELSE TRUE END  \n" +
                "        AND CASE WHEN pwoOPID IS NOT NULL THEN a.id BETWEEN ifnull(fromOPVersionID,0) AND  ifnull(toOPVersionID,0) ELSE TRUE END;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5059,'2.00','V1','Sproc_WOChangeHistory  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5059:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop trigger if exists Trg_AU_WorkOrder_Operation;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation` AFTER UPDATE ON `workorder_operation` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "    DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND IFNULL(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.opName, 0) != IFNULL(NEW.opName, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNAME',  \n" +
                "			CAST(OLD.opName AS CHAR),CAST(NEW.opName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion ,'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.processTime, 0) != IFNULL(NEW.processTime, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PROCESSTIME',  \n" +
                "			CAST(OLD.processTime AS CHAR),CAST(NEW.processTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Date');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.setupTime, 0) != IFNULL(NEW.setupTime, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'SETUPTIME',  \n" +
                "			CAST(OLD.setupTime AS CHAR),CAST(NEW.setupTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Date');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.perPieceTime , 0)!= IFNULL(NEW.perPieceTime, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PERPIECETIME',  \n" +
                "			CAST(OLD.perPieceTime AS CHAR),CAST(NEW.perPieceTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Date');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.qtyControl, 0) != IFNULL(NEW.qtyControl, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'QTYCONTROL',  \n" +
                "			CAST(OLD.qtyControl AS CHAR),CAST(NEW.qtyControl AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                "	END IF;  \n" +
                "	-- IF IFNULL(OLD.cleaningType, 0) != IFNULL(NEW.cleaningType, 0)  THEN  \n" +
                "	-- 	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )  \n" +
                "	-- 	VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'CLEANINGTYPE',  \n" +
                "	-- 		CAST(OLD.cleaningType AS CHAR),CAST(NEW.cleaningType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "    --         vWoVersion , NEW.opVersion,'Case');  \n" +
                "	-- END IF;  \n" +
                "	 IF IFNULL(OLD.isFluxNotApplicable, 0) != IFNULL(NEW.isFluxNotApplicable , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FLUXNOTAPPLICABLE',  \n" +
                "			CAST(OLD.isFluxNotApplicable AS CHAR),CAST(NEW.isFluxNotApplicable AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,  \n" +
                "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                "	 END IF;  \n" +
                "     IF IFNULL(OLD.isWaterSoluble, 0) != IFNULL(NEW.isWaterSoluble , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'WATERSOLUBLE',  \n" +
                "			CAST(OLD.isWaterSoluble AS CHAR),CAST(NEW.isWaterSoluble AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,  \n" +
                "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                "	 END IF;  \n" +
                "     IF IFNULL(OLD.isNoClean, 0) != IFNULL(NEW.isNoClean , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'NOCLEAN',  \n" +
                "			CAST(OLD.isNoClean AS CHAR),CAST(NEW.isNoClean AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,  \n" +
                "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                "	 END IF;  \n" +
                "	IF IFNULL(OLD.opDescription, 0) != IFNULL(NEW.opDescription , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDESCRIPTION',  \n" +
                "			CAST(OLD.opDescription AS CHAR),CAST(NEW.opDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opWorkingCondition, 0) != IFNULL(NEW.opWorkingCondition, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPWORKINGCONDITION',  \n" +
                "			CAST(OLD.opWorkingCondition AS CHAR),CAST(NEW.opWorkingCondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy ,NEW.updateByRoleId,  \n" +
                "            vWoVersion, NEW.opVersion ,'TextAngular');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opManagementInstruction, 0) != IFNULL(NEW.opManagementInstruction, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPMANAGEMENTINSTRUCTION',  \n" +
                "			CAST(OLD.opManagementInstruction AS CHAR),CAST(NEW.opManagementInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opDeferredInstruction, 0) != IFNULL(NEW.opDeferredInstruction, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDEFERREDINSTRUCTION',  \n" +
                "			CAST(OLD.opDeferredInstruction AS CHAR),CAST(NEW.opDeferredInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opDoes, 0) != IFNULL(NEW.opDoes, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDOES',  \n" +
                "			CAST(OLD.opDoes AS CHAR),CAST(NEW.opDoes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion, NEW.opVersion, 'TextAngular');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opDonts , 0)!= IFNULL(NEW.opDonts , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDONTS',  \n" +
                "			CAST(OLD.opDonts AS CHAR),CAST(NEW.opDonts AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion, NEW.opVersion,'TextAngular');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opStatus, 0) != IFNULL(NEW.opStatus , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPSTATUS',  \n" +
                "			CAST(OLD.opStatus AS CHAR),CAST(NEW.opStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opOrder , 0)!= IFNULL(NEW.opOrder , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPORDER',  \n" +
                "			CAST(OLD.opOrder AS CHAR),CAST(NEW.opOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVesion , NEW.opVersion , 'Number');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operationTypeID, 0) != IFNULL(NEW.operationTypeID, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPERATIONTYPEID',  \n" +
                "			CAST(OLD.operationTypeID AS CHAR),CAST(NEW.operationTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.parentOPID, 0) != IFNULL(NEW.parentOPID, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PARENTOPID',  \n" +
                "			CAST(OLD.parentOPID AS CHAR),CAST(NEW.parentOPID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted , 0)!= IFNULL(NEW.isDeleted , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISOPERATIONDELETED',  \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion,  NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.firstPcsConclusion, 0) != IFNULL(NEW.firstPcsConclusion , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSCONCLUSION',  \n" +
                "			CAST(OLD.firstPcsConclusion AS CHAR),CAST(NEW.firstPcsConclusion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.firstPcsModel, 0) != IFNULL(NEW.firstPcsModel , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSMODEL',  \n" +
                "			CAST(OLD.firstPcsModel AS CHAR),CAST(NEW.firstPcsModel AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion ,'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.firstPcsStatus, 0) != IFNULL(NEW.firstPcsStatus, 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSSTATUS',  \n" +
                "			CAST(OLD.firstPcsStatus AS CHAR),CAST(NEW.firstPcsStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isIssueQty, 0) != IFNULL(NEW.isIssueQty, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISISSUEQTY',  \n" +
                "			CAST(OLD.isIssueQty AS CHAR),CAST(NEW.isIssueQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPreProgrammingComponent, 0) != IFNULL(NEW.isPreProgrammingComponent, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPREPROGRAMMINGCOMPONENT',  \n" +
                "			CAST(OLD.isPreProgrammingComponent AS CHAR),CAST(NEW.isPreProgrammingComponent AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion, NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isRework, 0) != IFNULL(NEW.isRework, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISREWORK',  \n" +
                "			CAST(OLD.isRework AS CHAR),CAST(NEW.isRework AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isStopOperation, 0) != IFNULL(NEW.isStopOperation, 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISSTOPOPERATION',  \n" +
                "			CAST(OLD.isStopOperation AS CHAR),CAST(NEW.isStopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTeamOperation , 0) != IFNULL(NEW.isTeamOperation , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTEAMOPERATION',  \n" +
                "			CAST(OLD.isTeamOperation AS CHAR),CAST(NEW.isTeamOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTerminated, 0) != IFNULL(NEW.isTerminated, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTERMINATED',  \n" +
                "			CAST(OLD.isTerminated AS CHAR),CAST(NEW.isTerminated AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opVersion, 0) != IFNULL(NEW.opVersion , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPVERSION',  \n" +
                "			CAST(OLD.opVersion AS CHAR),CAST(NEW.opVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.colorCode, 0) != IFNULL(NEW.colorCode , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'COLORCODE',  \n" +
                "			CAST(OLD.colorCode AS CHAR),CAST(NEW.colorCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion ,'Color');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isMoveToStock , 0) != IFNULL(NEW.isMoveToStock , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISMOVETOSTOCK',  \n" +
                "			CAST(OLD.isMoveToStock AS CHAR),CAST(NEW.isMoveToStock AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.isPlacementTracking , 0) != IFNULL(NEW.isPlacementTracking , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPLACEMENTTRACKING',  \n" +
                "			CAST(OLD.isPlacementTracking AS CHAR),CAST(NEW.isPlacementTracking AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.isTrackBySerialNo , 0) != IFNULL(NEW.isTrackBySerialNo , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTRACKBYSERIALNO',  \n" +
                "			CAST(OLD.isTrackBySerialNo AS CHAR),CAST(NEW.isTrackBySerialNo AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isLoopOperation , 0) != IFNULL(NEW.isLoopOperation , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,  updateByRoleId,woVersion, opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISLOOPOPERATION',  \n" +
                "			CAST(OLD.isLoopOperation AS CHAR),CAST(NEW.isLoopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAllowMissingPartQty , 0) != IFNULL(NEW.isAllowMissingPartQty , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWMISSINGPARTQTY',  \n" +
                "			CAST(OLD.isAllowMissingPartQty AS CHAR),CAST(NEW.isAllowMissingPartQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAllowByPassQty , 0) != IFNULL(NEW.isAllowByPassQty , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWBYPASSQTY',  \n" +
                "			CAST(OLD.isAllowByPassQty AS CHAR),CAST(NEW.isAllowByPassQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.tabLimitAtTraveler , 0) != IFNULL(NEW.tabLimitAtTraveler , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'TABLIMITATTRAVELER',  \n" +
                "			CAST(OLD.tabLimitAtTraveler AS CHAR),CAST(NEW.tabLimitAtTraveler AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mountingTypeID , 0) != IFNULL(NEW.mountingTypeID , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'MOUNTINGTYPE',  \n" +
                "			CAST(OLD.mountingTypeID AS CHAR),CAST(NEW.mountingTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.opNumber , 0) != IFNULL(NEW.opNumber , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNUMBER',  \n" +
                "			CAST(OLD.opNumber AS CHAR),CAST(NEW.opNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isAllowFinalSerialMapping , 0) != IFNULL(NEW.isAllowFinalSerialMapping , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWFINALSERAILMAPPING',  \n" +
                "			CAST(OLD.isAllowFinalSerialMapping AS CHAR),CAST(NEW.isAllowFinalSerialMapping AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.addRefDesig , 0) != IFNULL(NEW.addRefDesig , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ADDREFDESIG',  \n" +
                "			CAST(OLD.addRefDesig AS CHAR),CAST(NEW.addRefDesig AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isRequireMachineVerification , 0) != IFNULL(NEW.isRequireMachineVerification , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'REQMACHINEVERIFICATION',  \n" +
                "			CAST(OLD.isRequireMachineVerification AS CHAR),CAST(NEW.isRequireMachineVerification AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.doNotReqApprovalForScan , 0) != IFNULL(NEW.doNotReqApprovalForScan , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'DONOTREQAPPROVALFORSCAN',  \n" +
                "			CAST(OLD.doNotReqApprovalForScan AS CHAR),CAST(NEW.doNotReqApprovalForScan AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , NEW.opVersion , 'String');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5060,'2.00','V1','Trg_AU_WorkOrder_Operation  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5060:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop trigger if exists TRG_UNQDATE_workorder_operation_refdesig;  \n" +
                "CREATE TRIGGER `TRG_UNQDATE_workorder_operation_refdesig` BEFORE UPDATE ON `workorder_operation_refdesig` FOR EACH ROW BEGIN  \n" +
                "        IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "                set NEW.unqDate = utc_timestamp();  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5061,'2.00','V1','TRG_UNQDATE_workorder_operation_refdesig  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5061:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop trigger if exists Trg_AU_WorkOrder_Operation_RefDesig;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation_RefDesig` AFTER UPDATE ON `workorder_operation_refdesig` FOR EACH ROW BEGIN  \n" +
                "    DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND IFNULL(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation wOp  \n" +
                "    WHERE wOp.woID = NEW.woID  \n" +
                "    AND wOp.opID = NEW.opID  \n" +
                "    AND IFNULL(wOp.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0)  THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                "		VALUES (\"WORKORDER_OPERATION_REFDESIG\", CAST(OLD.id AS CHAR), 'REFDESIG',  \n" +
                "			CAST(OLD.refDesig AS CHAR),CAST(NEW.refDesig AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion ,'String');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted , 0)!= IFNULL(NEW.isDeleted , 0) THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                "		VALUES (\"WORKORDER_OPERATION_REFDESIG\", CAST(OLD.id AS CHAR), 'ISOPERATIONREFDESIGDELETED',  \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion,  vOpVersion , 'Boolean');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5062,'2.00','V1','Trg_AU_WorkOrder_Operation_RefDesig  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5062:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop trigger if exists Trg_AU_Component_History;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Lead Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Safety Stock',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Special Note',  \n" +
                "			CAST(OLD.specialNote AS CHAR),	CAST(NEW.specialNote AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
                "			CAST(OLD.updatedAtApi AS CHAR),	CAST(NEW.updatedAtApi AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
                "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Lock',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Life Acceptance Threshold (%)',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Price',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchasing Comment',  \n" +
                "			CAST(OLD.purchasingComment AS CHAR),	CAST(NEW.purchasingComment AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Detailed Description',  \n" +
                "			CAST(OLD.detailDescription AS CHAR),	CAST(NEW.detailDescription AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		set pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			set pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        set pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			set pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5063,'2.00','V1','Trg_AU_Component_History  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5063:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pPackingslipWithRejectedLines tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
                "							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.totalDetailLine itemReceived,  \n" +
                "							psm.totalRejectLine totalRejectedLine,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine, SUM(IF(psm.receivedStatus = 'R', 1, 0)) AS totalRejectLine  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')  \",  \n" +
                "			case when pPackingslipWithRejectedLines = true then  \n" +
                "					\" and exists (select 1 from packing_slip_material_receive_det d where d.refPackingSlipMaterialRecID = p.id and d.receivedStatus = 'R') \"  \n" +
                "				else ' ' end,  \n" +
                "			\"	) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5064,'2.00','V1','Bug 35727: QA Testing Bugs for User Story 35334: Create RMA from UMID Pending Parts - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5064:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2021 *********************************** */
                "drop procedure if exists `Sproc_SaveInvoiceAndInvoiceLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(  \n" +
                "	IN pInvoiceDetail JSON,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;  \n" +
                "    DECLARE v_CountOfRMA INT;  \n" +
                "	DECLARE v_IdOfInvoice INT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pInvoiceDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				poDate DATE PATH \"$.poDate\",  \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",  \n" +
                "                soDate DATE PATH \"$.soDate\",  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",  \n" +
                "				applyDate DATE PATH \"$.applyDate\",  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",  \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",  \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",  \n" +
                "				termsDays INT PATH \"$.termsDays\",  \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",  \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",  \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\",  \n" +
                "                remark  VARCHAR(1000) PATH \"$.remark\",  \n" +
                "                refSupplierCreditMemoNumber  VARCHAR(50) PATH \"$.refSupplierCreditMemoNumber\",  \n" +
                "                refPurchaseOrderID INT PATH \"$.refPurchaseOrderID\"  \n" +
                "			)  \n" +
                "		) AS Invoice_Detail_JT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;  \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail  \n" +
                "		(  \n" +
                "			packingSlipSerialNumber VARCHAR(50),  \n" +
                "			nickname VARCHAR(50),  \n" +
                "			partID INT,  \n" +
                "			refSupplierPartId INT,  \n" +
                "			scanLabel VARCHAR(1000),  \n" +
                "			receivedQty DECIMAL(18,8),  \n" +
                "			packingSlipQty DECIMAL(18,8),  \n" +
                "			binID INT,  \n" +
                "			warehouseID INT,  \n" +
                "			parentWarehouseID INT,  \n" +
                "			invoicePrice DECIMAL(18,8),  \n" +
                "			purchasePrice DECIMAL(18,8),  \n" +
                "			disputedPrice DECIMAL(18,8),  \n" +
                "			approveNote VARCHAR(1000),  \n" +
                "			otherCharges INT,  \n" +
                "			`status` VARCHAR(1),  \n" +
                "			extendedPrice DECIMAL(18,8),  \n" +
                "			refCreditDebitInvoiceNo INT,  \n" +
                "			difference DECIMAL(18,8),  \n" +
                "			umidCreated TINYINT,  \n" +
                "			poReleaseNumber VARCHAR(1000),  \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark LONGTEXT  \n" +
                "		);  \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (  \n" +
                "			packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			extendedPrice,  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		)  \n" +
                "		SELECT  packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN  \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;  \n" +
                "  \n" +
                "			IF (v_CountOfInvoiceDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive (systemId, poNumber, poDate, mfgCodeID, supplierSONumber, soDate, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,  \n" +
                "							creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "							creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval,  \n" +
                "                            internalRemark, remark, invoiceApprovalStatus, refSupplierCreditMemoNumber, refPurchaseOrderID)  \n" +
                "				SELECT 	pSystemId,  \n" +
                "					(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),  \n" +
                "					(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),  \n" +
                "					mfgCodeID,  \n" +
                "					(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),  \n" +
                "                    (CASE WHEN (soDate IS NULL OR soDate = \"0000-00-00\") THEN NULL ELSE soDate END),  \n" +
                "					packingSlipNumber, packingSlipDate,  \n" +
                "					(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),  \n" +
                "					(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),  \n" +
                "					(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),  \n" +
                "					(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),  \n" +
                "					(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),  \n" +
                "					(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),  \n" +
                "					receiptDate, receiptType,  \n" +
                "					`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/  \n" +
                "					applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "					(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),  \n" +
                "					pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval,  \n" +
                "                    internalRemark,  \n" +
                "                    remark,  \n" +
                "					(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/,  \n" +
                "                    (CASE WHEN (refSupplierCreditMemoNumber IS NULL OR refSupplierCreditMemoNumber = \"\") THEN NULL ELSE refSupplierCreditMemoNumber END) /*refSupplierCreditMemoNumber*/,  \n" +
                "                    (CASE WHEN (refPurchaseOrderID IS NULL OR refPurchaseOrderID = 0) THEN NULL ELSE refPurchaseOrderID END)  \n" +
                "				FROM 	temp_Invoice_Detail;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,  \n" +
                "					`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)  \n" +
                "				WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)  \n" +
                "						AND isDeleted = 0;  \n" +
                "  \n" +
                "				select count(1) into v_CountOfRMA  \n" +
                "                  from packing_slip_material_receive_det d  \n" +
                "				 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "					and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "                    and d.isDeleted = 0  \n" +
                "					and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "					and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "                 IF v_CountOfRMA != 0 THEN  \n" +
                "					/*update invoice id in RMA packing slip which is created before creating invoice*/  \n" +
                "                    update packing_slip_material_receive_det d  \n" +
                "						set d.refInvoiceIdForRma = v_IdOfInvoice  \n" +
                "					 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "						and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "						and d.isDeleted = 0  \n" +
                "						and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "						and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "				 END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;  \n" +
                "			IF (v_CountOfInvoiceLineDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)  \n" +
                "				SELECT 	v_IdOfInvoice, packingSlipSerialNumber,  \n" +
                "					nickname,  \n" +
                "					(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),  \n" +
                "					(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),  \n" +
                "					scanLabel,  \n" +
                "					receivedQty,  \n" +
                "					packingSlipQty,  \n" +
                "					(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),  \n" +
                "					(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),  \n" +
                "					(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),  \n" +
                "					invoicePrice,  \n" +
                "					purchasePrice,  \n" +
                "					disputedPrice,  \n" +
                "					otherCharges,  \n" +
                "					`status`,  \n" +
                "					extendedPrice,  \n" +
                "					(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),  \n" +
                "					difference,  \n" +
                "					umidCreated,  \n" +
                "					poReleaseNumber,  \n" +
                "					(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),  \n" +
                "					receivedStatus,  \n" +
                "					remark,  \n" +
                "					pUserId,  \n" +
                "					pUserId,  \n" +
                "					pUserRoleId,  \n" +
                "					pUserRoleId  \n" +
                "				FROM 	temp_Invoice_Line_Detail;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5065,'2.00','V1','Bug 35636: QA Testing Bugs for User Story 35414: Make Invoice# optional for RMA - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5065:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "alter table workorder_trans_umid_details add approvedBy int(11);  \n" +
                "alter table workorder_trans_umid_details add approvedOn datetime;  \n" +
                "alter table workorder_trans_umid_details add approvedReason varchar(500);  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5066,'2.00','V1','Add approval column in workorder_trans_umid_details  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5066:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop function if exists fun_checkUMIDVerificationAndApprovalRequire;  \n" +
                "CREATE FUNCTION `fun_checkUMIDVerificationAndApprovalRequire`(  \n" +
                "	passyID INT,  \n" +
                "	pUMID VARCHAR(15),  \n" +
                "	pFromFeeder INT,  \n" +
                "    pwoOpID INT ) RETURNS varchar(5) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE temp_require_verify , temp_require_approval INT DEFAULT 0;  \n" +
                "	DECLARE temp_assy_bypassVerify  tinyint(1) DEFAULT 0;  \n" +
                "	DECLARE temp_op_requireVerify CHAR(5) DEFAULT 'NA';  \n" +
                "    DECLARE temp_umid_reqApproval  tinyint(1) DEFAULT 0;  \n" +
                "	DECLARE temp_op_donot_reqApproval CHAR(5) DEFAULT 'NA';  \n" +
                "    DECLARE vReturn VARCHAR(5) DEFAULT 'V';  \n" +
                "  \n" +
                "	# step 0 - get assembly part operation details  \n" +
                "	SELECT isAutoVerificationOfAllAssemblyParts  \n" +
                "	INTO temp_assy_bypassVerify  \n" +
                "	FROM COMPONENT  \n" +
                "    WHERE id=passyID  \n" +
                "    AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT umidVerificationRequire  \n" +
                "	INTO temp_umid_reqApproval  \n" +
                "	FROM COMPONENT  \n" +
                "    WHERE id IN (SELECT refcompid FROM component_sid_stock WHERE uid=pUMID AND isDeleted = 0)  \n" +
                "    AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT 	isRequireMachineVerification, doNotReqApprovalForScan  \n" +
                "    INTO temp_op_requireVerify, temp_op_donot_reqApproval  \n" +
                "    FROM Workorder_Operation WOP  \n" +
                "    WHERE WOP.woOpID = pwoOpID  \n" +
                "    AND WOP.isDeleted = 0;  \n" +
                "	IF(pFromFeeder = 1) THEN  \n" +
                "		-- Check  Feeder Verification Required Or Not  \n" +
                "        IF temp_op_requireVerify = 'YES' THEN  \n" +
                "			SET temp_require_verify = 1;  \n" +
                "        ELSEIF  temp_op_requireVerify = 'NO' THEN  \n" +
                "			SET temp_require_verify = 0;  \n" +
                "        ELSEIF  temp_op_requireVerify = 'NA' THEN  \n" +
                "			IF temp_assy_bypassVerify = 1 THEN  \n" +
                "				SET temp_require_verify = 0;  \n" +
                "            ELSEIF temp_assy_bypassVerify = 0 THEN  \n" +
                "				SET temp_require_verify = 1;  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		-- For Material/Missing Auto Verification  \n" +
                "		SET temp_require_verify = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    -- Approval Required or no  \n" +
                "    IF temp_op_donot_reqApproval = 'YES' THEN  \n" +
                "		SET temp_require_approval = 0;  \n" +
                "	ELSEIF  temp_op_donot_reqApproval = 'NO' THEN  \n" +
                "		SET temp_require_approval = 1;  \n" +
                "	ELSEIF  temp_op_donot_reqApproval = 'NA' THEN  \n" +
                "		IF temp_umid_reqApproval = 1 THEN  \n" +
                "			SET temp_require_approval = 1;  \n" +
                "		ELSEIF temp_umid_reqApproval = 0 THEN  \n" +
                "			SET temp_require_approval = 0;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF temp_require_approval = 0  AND temp_require_verify = 0 THEN  \n" +
                "		SET vRETURN  = 'V'; -- Direct Verify  \n" +
                "    ELSEIF temp_require_approval = 0  AND temp_require_verify = 1 THEN  \n" +
                "		SET vRETURN  = 'P'; -- Direct Pending  \n" +
                "    ELSEIF temp_require_approval = 1  AND temp_require_verify = 0 THEN  \n" +
                "		SET vRETURN  = 'CV'; -- Confirmation & Verify  \n" +
                "    ELSEIF temp_require_approval = 1  AND temp_require_verify = 1 THEN  \n" +
                "		SET vRETURN  = 'CP'; -- Confirmation & Pending  \n" +
                "    END IF;  \n" +
                "	RETURN  vRETURN;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5067,'2.00','V1','fun_checkUMIDVerificationAndApprovalRequire  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5067:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop function if exists fun_getMeasurementTypeForUOM;  \n" +
                "CREATE FUNCTION `fun_getMeasurementTypeForUOM`(  \n" +
                "pUOM INT  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	Declare vReturn INT;  \n" +
                "	Select measurementTypeID INTO  vReturn  \n" +
                "    From UOms  \n" +
                "    Where id = pUOM  \n" +
                "    and isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5068,'2.00','V1','fun_getMeasurementTypeForUOM  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5068:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop function if exists fun_checkUMIDScan;  \n" +
                "CREATE FUNCTION `fun_checkUMIDScan`(  \n" +
                "	pUMID VARCHAR(100),  \n" +
                "	ppartID INT,  \n" +
                "	pwoTransID INT,  \n" +
                "	pwoOPID INT,  \n" +
                "	pemployeeId INT,  \n" +
                "	pcheckKitAllocation VARCHAR(5000),  \n" +
                "	ptransactionType VARCHAR(1),  \n" +
                "	pFromFeeder INT,  \n" +
                "	pisVerify INT,  \n" +
                "	pwoOpEqpID INT,  \n" +
                "	pfeederLocation VARCHAR(1000),  \n" +
                "	pwoID INT,  \n" +
                "	pCreatedBy VARCHAR(500),  \n" +
                "	pisConfirmed INT) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_binID INT;  \n" +
                "    DECLARE temp_umid_sid INT;  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_comp_alertExpiryDays INT;  \n" +
                "	DECLARE flag_isKitValid INT;  \n" +
                "	DECLARE flag_isTeamOperation INT DEFAULT 0;  \n" +
                "	DECLARE temp_expiryDate DATETIME;  \n" +
                "	DECLARE temp_expiryDaysLeftValidation INT;  \n" +
                "	DECLARE temp_expiryDaysLeftCount INT;  \n" +
                "	DECLARE temp_config_dateFormat VARCHAR(1000);  \n" +
                "	DECLARE temp_umid_valid INT DEFAULT 1;  \n" +
                "	DECLARE temp_isIncludeSubassembly INT DEFAULT 0;  \n" +
                "	DECLARE temp_recordFoundInAssembly VARCHAR (500);  \n" +
                "  \n" +
                "	DECLARE temp_comp_isGoodPart INT DEFAULT 0;  \n" +
                "	DECLARE temp_comp_partLevelRestrictUsePermanently INT DEFAULT 0;  \n" +
                "	DECLARE temp_comp_partLevelRestrictPackagingUsePermanently INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_restrictFromUMID INT DEFAULT 0;  \n" +
                "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
                "	DECLARE temp_parent_wo INT DEFAULT 0;  \n" +
                "	DECLARE temp_part_cleantype VARCHAR(5) DEFAULT '';  \n" +
                "    DECLARE temp_assy_cleantype VARCHAR(5) DEFAULT '';  \n" +
                "    DECLARE temp_op_cleantype VARCHAR(5) DEFAULT 'NA';  \n" +
                "    DECLARE temp_err_text VARCHAR(2500) DEFAULT NULL;  \n" +
                "  \n" +
                "  \n" +
                "    SET temp_expiryDate = NULL;  \n" +
                "	SET temp_expiryDaysLeftValidation = NULL;  \n" +
                "	SET temp_expiryDaysLeftCount = NULL;  \n" +
                "  \n" +
                "  \n" +
                "    /********Get Parent WO of Revised WO***********/  \n" +
                "    WITH RECURSIVE RevWo AS  (  \n" +
                "			SELECT	woId,  \n" +
                "					1 lvl  ,  \n" +
                "					terminateWOID  \n" +
                "			FROM workorder  \n" +
                "			WHERE woId = pwoID  \n" +
                "			AND isDeleted = 0  \n" +
                "			UNION ALL  \n" +
                "			SELECT	wo.woID,  \n" +
                "					rw.lvl +1 lvl,  \n" +
                "					wo.terminateWOID  \n" +
                "			 FROM workorder wo  \n" +
                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
                "			 WHERE wo.isDeleted = 0  \n" +
                "			 )  \n" +
                "			SELECT rev.woID  INTO temp_parent_wo  \n" +
                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
                "  \n" +
                "    IF temp_parent_wo = 0 THEN SET temp_parent_wo = NULL; END IF;  \n" +
                "	#########################################################################################  \n" +
                "	################### NOTE: Temporaray table for error comes from sp ######################  \n" +
                "	#########################################################################################  \n" +
                "	IF(pUMID IS NOT NULL) THEN  \n" +
                "		# step 1 - get umid details from umid  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details AS  \n" +
                "		SELECT c.id, c.PIDCode, c.mfgPN,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode, c.mfgCodeID,  \n" +
                "			c.restrictUSEwithpermission AS partLevelRestrictUSEwithpermission,  \n" +
                "			c.restrictUsePermanently AS partLevelRestrictUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission AS partLevelRestrictPackagingUseWithpermission,  \n" +
                "			c.restrictPackagingUsePermanently AS partLevelRestrictPackagingUsePermanently,  \n" +
                "			c.packagingGroupId,  \n" +
                "			c.rev AS rev,  \n" +
                "			c.imageURL AS imageURL,  \n" +
                "			c.documentPath,  \n" +
                "			c.mfgPNDescription AS mfgPNDescription,  \n" +
                "			c.roHSStatusID,  \n" +
                "			c.alertExpiryDays,  \n" +
                "			c.umidVerificationRequire,  \n" +
                "			c.uom,  \n" +
                "			c.isGoodPart isGoodPart,  \n" +
                "			rr.name rohsStatus,  \n" +
                "			rr.rohsIcon rohsIcon,  \n" +
                "			css.id AS refsidid,  \n" +
                "			css.binID AS binID,  \n" +
                "			css.pkgQty AS pkgQty,  \n" +
                "			-- css.pkgCount AS pkgCount,  \n" +
                "			css.pkgUnit AS pkgUnit,  \n" +
                "			css.uom AS pkgUOM,  \n" +
                "			css.uid,  \n" +
                "			fun_getUnitNameByID(c.uom) unitName,  \n" +
                "			css.isUMIDRestrict AS RestrictFromUMID,  \n" +
                "			css.expiryDate,  \n" +
                "			1 isActualComponent,  \n" +
                "			0 isPackagingAlias,  \n" +
                "			c.isCPN AS isCPN,  \n" +
                "			c.isCustom AS isCustom ,  \n" +
                "			CAST(NULL AS CHAR(3000)) AS refDesig,  \n" +
                "			c.programingRequired,  \n" +
                "			(SELECT feederLocation FROM workorder_operation_equipment_feeder_details  \n" +
                "				WHERE id IN (SELECT eqpFeederID FROM workorder_trans_umid_details  \n" +
                "					WHERE refsidid IN (SELECT id FROM component_sid_stock  \n" +
                "					WHERE uid=pUMID AND isDeleted=0) AND isDeleted=0 AND reelStatus=\"P\")  \n" +
                "					AND woOPID=pwoOPID) feederLocation   ,  \n" +
                "             c.isWaterSoluble, c.isNoClean  , c.isFluxNotApplicable,  \n" +
                "             fun_getMeasurementTypeForUOM(css.uom) umidUOMClassID  \n" +
                "		FROM component c  \n" +
                "		LEFT JOIN component_sid_stock css  \n" +
                "		ON css.refcompid = c.id AND css.deletedAt IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)  \n" +
                "		WHERE css.uid = pUMID  \n" +
                "		AND c.deletedAt IS NULL;  \n" +
                "  \n" +
                "		SELECT wop.isTeamOperation, CASE	WHEN wop.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "											WHEN wop.isNoClean = 1 AND wop.isWaterSoluble = 1 THEN 'ALL'  \n" +
                "											WHEN wop.isNoClean = 1 AND wop.isWaterSoluble = 0 THEN 'NC'  \n" +
                "											WHEN wop.isNoClean = 0 AND wop.isWaterSoluble = 1 THEN 'WS'  \n" +
                "											ELSE 'NA'  END  \n" +
                "        INTO flag_isTeamOperation,temp_op_cleantype  \n" +
                "        FROM workorder_operation wop WHERE woopid = pwoOpID;  \n" +
                "  \n" +
                "		#check UMID already scanned in operation  \n" +
                "		IF ((pFromFeeder <> 1 AND pisVerify <> 1)) THEN  \n" +
                "			-- IF(IFNULL(flag_isTeamOperation,0) = 1) THEN  \n" +
                "			-- 	IF ((SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "			-- 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)  \n" +
                "			-- 		AND wtud.woOPID = pwoOPID AND wtud.woTransID = pwoTransID  \n" +
                "			-- 		AND IFNULL(transactionType,ptransactionType)=ptransactionType) > 0) THEN  \n" +
                "			-- 		-- ALREADY_IN_USE  \n" +
                "			-- 		SET temp_umid_valid = 0;  \n" +
                "			-- 		SET result = fun_checkAndInsertError('UMID003', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "			-- 	END IF;  \n" +
                "			-- ELSE  \n" +
                "				IF (pisConfirmed = 0 AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "			 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)  \n" +
                "			 		AND wtud.woOPID = pwoOPID  \n" +
                "			 		AND IFNULL(transactionType,ptransactionType)=ptransactionType  \n" +
                "			 		AND woTransID = pwoTransID) > 0) THEN  \n" +
                "			 		-- ALREADY_IN_USE  \n" +
                "			 		SET temp_umid_valid = 0;  \n" +
                "			 		SET result = fun_checkAndInsertError('UMID037', 0, 0, 1, 0, 0, \"DUP\", NULL, NULL);  \n" +
                "			 	END IF;  \n" +
                "			-- END IF;  \n" +
                "		END IF;  \n" +
                "		IF(temp_umid_valid = 1) THEN  \n" +
                "			# check umid available in list  \n" +
                "			# yes -  check for pid in bom  \n" +
                "			# no - invalid umid  \n" +
                "			## restrict to use forever - restrictUsePermanently  \n" +
                "			IF((SELECT COUNT(1) FROM temp_umid_details) > 0) THEN  \n" +
                "				SELECT id,packagingGroupId,  \n" +
                "					alertExpiryDays,expiryDate,  \n" +
                "					IFNULL(partLevelRestrictUsePermanently,0),IFNULL(partLevelRestrictPackagingUsePermanently,0),  \n" +
                "					IFNULL(RestrictFromUMID,0), isGoodPart, isCPN, binID , refsidid  \n" +
                "					-- , refSalesOrderDetID  \n" +
                "				INTO temp_umid_comp_id,temp_umid_package_id,  \n" +
                "					temp_comp_alertExpiryDays, temp_expiryDate,  \n" +
                "					temp_comp_partLevelRestrictUsePermanently,temp_comp_partLevelRestrictPackagingUsePermanently,  \n" +
                "					temp_umid_restrictFromUMID, temp_comp_isGoodPart, temp_comp_is_cpn, temp_umid_binID ,temp_umid_sid  \n" +
                "					-- , temp_umid_refSalesOrderDetID  \n" +
                "				FROM temp_umid_details WHERE uid=pUMID;  \n" +
                "  \n" +
                "				#check for part expired or not  \n" +
                "				#alertExpiryDays  \n" +
                "				#umidVerificationRequire  \n" +
                "				SELECT `values` INTO temp_config_dateFormat FROM systemconfigrations WHERE `key`=\"DatePickerDateFormat\";  \n" +
                "				IF((IFNULL(temp_expiryDate,0) > 0) AND (fun_DatetimetoUTCDateTime() > (temp_expiryDate))) THEN  \n" +
                "					-- EXPIRED_ON  \n" +
                "					SET result = fun_checkAndInsertError('UMID011', 0, 1, 0, 0, 0, temp_expiryDate, temp_config_dateFormat, NULL);  \n" +
                "				ELSEIF(temp_comp_partLevelRestrictUsePermanently = 1) THEN  \n" +
                "					-- RESTRICTED_FROM_PART  \n" +
                "					SET result = fun_checkAndInsertError('UMID013', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF(temp_comp_partLevelRestrictPackagingUsePermanently = 1) THEN  \n" +
                "					-- RESTRICTED_FROM_PART_PACKAGING  \n" +
                "					SET result = fun_checkAndInsertError('UMID022', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF(temp_umid_restrictFromUMID = 1) THEN  \n" +
                "					-- RESTRICTED_FROM_UMID  \n" +
                "					SET result = fun_checkAndInsertError('UMID012', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF(temp_comp_isGoodPart <> 1) THEN  \n" +
                "					-- RESTRICTED_INCORRECT_PART  \n" +
                "					SET result = fun_checkAndInsertError('UMID028', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF (( SELECT COUNT(1) FROM binmst b  \n" +
                "						where b.isDeleted = 0  \n" +
                "                        and b.id = -1 and b.WarehouseID = -3  \n" +
                "                        and b.id = temp_umid_binID ) > 0) THEN  \n" +
                "                        -- UMID FROM EMPTY BIN SHOW SEPARATE MESSAGE  \n" +
                "                        SET result = fun_checkAndInsertError('UMID048', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "                ELSEIF((SELECT COUNT(1) FROM binmst b  \n" +
                "						WHERE deletedAt IS NULL  \n" +
                "						AND warehouseID IN  \n" +
                "							(SELECT id FROM warehousemst WHERE deletedAt IS NULL AND parentWHID=-2)  \n" +
                "						AND id=temp_umid_binID) = 0)  THEN  \n" +
                "					-- UMID_MUST_BE_FROM_PRODUCTION_WAREHOUSE  \n" +
                "					SET result = fun_checkAndInsertError('UMID031', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF((SELECT COUNT(1) FROM workorder_trans_umid_details ud  \n" +
                "						WHERE deletedAt IS NULL  \n" +
                "						AND reelstatus = 'P'  \n" +
                "                        AND transactionType  = 'F'  \n" +
                "                        AND refsidid = temp_umid_sid) > 0 AND pisVerify=0)  THEN  \n" +
                "					-- UMID SHOULD NOT BE ALREADY  IN FEEDER  \n" +
                "					SET result = fun_checkAndInsertError('UMID041', 0, 1, 0, 0, 0, pUMID, NULL, NULL);  \n" +
                "                ELSEIF((SELECT COUNT(1) FROM component co  \n" +
                "						WHERE co.isDeleted = 0  \n" +
                "                        AND co.partStatus = -3  \n" +
                "                        AND  co.id = ppartID) > 0  AND pisConfirmed = 0)     THEN  \n" +
                "                        -- Take confirmation for inactive part  \n" +
                "                        SET result = fun_checkAndInsertError('UMID047', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "                        -- SET result = fun_checkAndInsertError('UMID039', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSE  \n" +
                "					#check current umid is assigned in bom or not  \n" +
                "					#check with part available in BOM or not  \n" +
                "					-- check for subassembly flag in work order and then check kit allocation case in subaasembly too.  \n" +
                "					SELECT IFNULL(isIncludeSubAssembly,0) INTO temp_isIncludeSubassembly FROM workorder WHERE woID=pwoID;  \n" +
                "                    #Feeder check  case removed as  per discussed with  Vaibhav bhai  \n" +
                "                    IF pcheckKitAllocation = 'MISSINGPART' THEN   -- ADDED FOR MISSING PART AS  NO NEED TO CHECK KIT ALLOCATION  \n" +
                "						#SELECT 'CREATE TEMP temp_assy_part_list TABLE ';  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation  \n" +
                "						FROM vu_bom_details_with_alias WHERE  \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)  \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation  \n" +
                "							WHERE refSalesOrderDetID  \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details  \n" +
                "							WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo ,pwoID)  ) AND `status` = \"A\" AND assyID=ppartID)));  \n" +
                "                    ELSEIF  temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1 AND  pcheckKitAllocation = 'KITALLOCATIONNOTREQUIRED' THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus  , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias  \n" +
                "                        WHERE AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)  \n" +
                "                           AND isDeleted = 0 ;  \n" +
                "					ELSEIF pcheckKitAllocation = 'KITALLOCATIONNOTREQUIRED' THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias  \n" +
                "							WHERE AssyID = ppartID  \n" +
                "							AND isDeleted = 0   ;  \n" +
                "					ELSEIF (temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1) THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus  , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias WHERE  \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)  \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation  \n" +
                "							WHERE refSalesOrderDetID  \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details  \n" +
                "							WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo,pwoID) ) AND `status` = \"A\" AND assyID=ppartID)));  \n" +
                "					ELSE  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias  \n" +
                "							WHERE ( AssyID  IN (SELECT assyID FROM kit_allocation  \n" +
                "												WHERE refSalesOrderDetID   IN (SELECT salesOrderDetailID FROM workorder_salesorder_details  \n" +
                "																	WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo,pwoID)  )  \n" +
                "												AND `status` = \"A\" AND assyID=ppartID)  \n" +
                "									OR AssyID IN (SELECT v1.AssyID FROM vu_bom_details_with_alias v1 WHERE v1.isDeleted = 0 AND v1.assyID = ppartID GROUP BY v1.AssyID HAVING COUNT(1) = SUM(CASE WHEN v1.isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END))  \n" +
                "									OR (mfgPnIDWithPackagingAliasID ,AssyID) IN (SELECT v2.mfgPnIDWithPackagingAliasID, v2.AssyID FROM vu_bom_details_with_alias v2 WHERE v2.assyID = ppartID AND v2.isNotRequiredKitAllocation = 1 )  \n" +
                "                                  ) AND isDeleted = 0    ;  \n" +
                "                             -- second \"OR\" condition added for case when all BOM line items set to skip kit allocation  \n" +
                "                             -- third \"OR\" condition added to  get Part detail for SO without kit allocation and having BOM part as Kit Not Required  \n" +
                "					END IF;  \n" +
                "					# if umid assigned in bom than check for feeder details available for pid  \n" +
                "					#yes - check with umid allocated in kit or not  \n" +
                "					#no - umid not assigned in bom  \n" +
                "  \n" +
                "					IF((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "						WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "						) = 0) THEN  \n" +
                "						IF (pFromFeeder = 1) THEN  \n" +
                "							-- UMID_NOT_ASSIGNED  \n" +
                "							SET result = fun_checkAndInsertError('UMID008', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "						ELSE  \n" +
                "							## Check for Supply materials and tools  \n" +
                "							IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "								wop.partID = temp_umid_comp_id AND  \n" +
                "								wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "									-- Check  UMID cleaning type with  Assembly cleaning type only for SMT parts  \n" +
                "									SELECT CASE WHEN tud.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "												WHEN tud.isNoClean = 1 AND tud.isWaterSoluble = 1 THEN 'ALL'  \n" +
                "												WHEN tud.isNoClean = 1 AND tud.isWaterSoluble = 0 THEN 'NC'  \n" +
                "												WHEN tud.isNoClean = 0 AND tud.isWaterSoluble = 1 THEN 'WS'  \n" +
                "												ELSE ''  \n" +
                "											END INTO temp_part_cleantype  \n" +
                "									 FROM temp_umid_details tud   ;  \n" +
                "									SELECT CASE WHEN comst.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "												 WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'ALL'  \n" +
                "												 WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'  \n" +
                "												 WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'  \n" +
                "												ELSE ''  \n" +
                "											END INTO temp_assy_cleantype  \n" +
                "                                      FROM component comst WHERE comst.id = ppartID;  \n" +
                "                                      # SET temp_err_text = 'UMID cleaning type mismatch with current operation activity or assembly cleaning type. <br/>';  \n" +
                "                                      SET temp_err_text = CONCAT(IFNULL(temp_err_text,'') ,'<label class=\"width-170\" style=\"color:black\">Assembly: </label>',  \n" +
                "											CASE WHEN temp_assy_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label> <label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "											     WHEN temp_assy_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "                                                                                             WHEN temp_assy_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "                                                                                             WHEN temp_assy_cleantype = 'NA' THEN 'Flux Type-Not Applicable.'  \n" +
                "                                                                                             WHEN temp_assy_cleantype = '' THEN 'Flux Type-Not Configured.' END,'<br/>');  \n" +
                "									   SET temp_err_text = CONCAT(temp_err_text ,'<label class=\"width-170\"  style=\"color:black\">Operation activity: </label>',  \n" +
                "											CASE WHEN temp_op_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label> <label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "												WHEN temp_op_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "                                                                                                  WHEN temp_op_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "                                                                                                  WHEN temp_op_cleantype = 'NA' THEN 'Flux Type-Not Applicable.' END,'<br/>');  \n" +
                "									  SET temp_err_text = CONCAT(temp_err_text ,'<label class=\"width-170\" style=\"color:black\">UMID part: </label>',  \n" +
                "												CASE WHEN temp_part_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label> <label class=\"margin-2 label-box label-primary\"> Water-Soluble</label>'  \n" +
                "												  WHEN temp_part_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "                                                                                                  WHEN temp_part_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "                                                                                                  WHEN temp_part_cleantype = 'NA' THEN 'Flux Type-Not Applicable.'  \n" +
                "                                                                                                  WHEN temp_part_cleantype = '' THEN 'Flux Type-Not Configured.' END,'<br/>');  \n" +
                "									IF temp_assy_cleantype = '' THEN  \n" +
                "										SET result = fun_checkAndInsertError('UMID045', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "									IF temp_part_cleantype = '' THEN  \n" +
                "										SET result = fun_checkAndInsertError('UMID046', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "									IF temp_assy_cleantype = 'NA'THEN  \n" +
                "										IF temp_op_cleantype IN ('WS','NC') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'ALL' AND  temp_part_cleantype = 'ALL' THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSEIF temp_assy_cleantype = 'NC' THEN  \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype IN ('WS','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'NC' AND temp_part_cleantype IN ('WS','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSEIF temp_assy_cleantype = 'WS'  THEN  \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype IN ('NC','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('MID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF  temp_op_cleantype = 'WS' AND temp_part_cleantype IN ('NC','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									  ELSEIF temp_assy_cleantype = 'ALL' THEN  \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'NC' AND  temp_part_cleantype IN ('WS','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'WS' AND  temp_part_cleantype IN ('NC','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'ALL' AND  temp_part_cleantype IN ('ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										SET result = 1;  \n" +
                "									END IF;  \n" +
                "								## Check for packaging part for umid.  \n" +
                "								ELSEIF((SELECT COUNT(1) FROM component_packagingalias cp WHERE cp.aliasgroupID = temp_umid_package_id  \n" +
                "									AND cp.componentID = temp_umid_comp_id AND cp.deletedAt IS NULL AND cp.aliasgroupID IN (SELECT c.packagingGroupId FROM component c  \n" +
                "												WHERE c.id IN (SELECT woop.partID FROM workorder_operation_part woop WHERE woop.woID=pwoID AND woop.woOPID=pwoOPID AND woop.deletedAt IS NULL)  \n" +
                "												AND c.deletedAt IS NULL))  > 0) THEN  \n" +
                "									SET result = 1;  \n" +
                "								ELSE  \n" +
                "									-- UMID_NOT_IN_WORKORDER_OR_KIT  \n" +
                "									SET result = fun_checkAndInsertError('UMID007', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "								END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						SET result = 1;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				-- INVALID  \n" +
                "				SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		-- REQUIRED  \n" +
                "		SET result = fun_checkAndInsertError('UMID005', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5069,'2.00','V1','fun_checkUMIDScan  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5069:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop procedure if exists Sproc_getPendingVerificationUMIDCount;  \n" +
                "CREATE PROCEDURE `Sproc_getPendingVerificationUMIDCount`(  \n" +
                "	pWoTransID INT,  \n" +
                "    pTransType VARCHAR(1),  \n" +
                "    pWoOpEquipID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	Select wtu.woOpEqpID, count(1) cnt  \n" +
                "    From workorder_trans_umid_details wtu  \n" +
                "    JOIN workorder_trans wot on wot.woTransID = wtu.woTransID and wot.isDeleted = 0  \n" +
                "    Where wtu.woTransID = pWoTransID  \n" +
                "    and wtu.transactionType = pTransType  \n" +
                "    and ifnull(wtu.woOpEqpID,0) = ifnull(pWoOpEquipID,ifnull(wtu.woOpEqpID,0))  \n" +
                "    and  wtu.isDeleted = 0  \n" +
                "    and wtu.isVerified = 0  \n" +
                "    and wtu.reelStatus = 'P'  \n" +
                "    group by wtu.woOpEqpID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5070,'2.00','V1','Sproc_getPendingVerificationUMIDCount  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5070:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop procedure if exists Sproc_RetrieveWorkorderTransEquipmentFeederDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWorkorderTransEquipmentFeederDetails`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWoOpEqpID INT(11),  \n" +
                "	IN pWoOPID INT(11),  \n" +
                "	IN pWoTransID INT(11),  \n" +
                "	IN pisVerify INT(11),  \n" +
                "	IN ptransactionType VARCHAR(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		IF (ptransactionType='F') THEN  \n" +
                "			 SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(\"  \n" +
                "			SELECT wotfd.id,  \n" +
                "				wotfd.woTransID,  \n" +
                "				woefd.id AS eqpFeederID,  \n" +
                "				woefd.feederLocation,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(wol.rfqLineItemID,'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS rfqLineItemsID,  \n" +
                "				(SELECT GROUP_CONCAT(DISTINCT IFNULL(CAST(wol.lineID AS UNSIGNED),'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS lineID,  \n" +
                "				fun_getAlternatePartListforFeeder(woefd.id) AS alternateParts,  \n" +
                "				fun_getAllocatedUMIDCountfromFeeder(woefd.feederLocation,woefd.woOpEqpID,woefd.woID) as totalallocatedUMID,  \n" +
                "				wotfd.refsidid,  \n" +
                "				csc.uid AS umid,  \n" +
                "				csc.refcompid AS refcompid,  \n" +
                "				csc.expiryDate AS expiryDate,  \n" +
                "				(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'  \n" +
                "						WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,  \n" +
                "				woefd.mfgPNID,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				co.isCustom AS isCustom,  \n" +
                "				co.mfgPNDescription AS mfgPNDescription,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName`,  \n" +
                "				woefd.isApprovelineItems,  \n" +
                "				woefd.recommendedLineItem,  \n" +
                "				woefd.woOpEqpID,  \n" +
                "				woefd.isActive,  \n" +
                "				CASE WHEN woefd.isActive=1 THEN 'Active' ELSE 'Inactive' END feederStatus,  \n" +
                "				wotfd.assyQty,  \n" +
                "				wotfd.UOM,  \n" +
                "				wotfd.isVerified,  \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(wotfd.verifiedOn) verifiedOn,  \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(wotfd.updatedAt) updatedAt,  \n" +
                "				woefd.woID,  \n" +
                "				woefd.partID,  \n" +
                "				woefd.eqpID,  \n" +
                "				woefd.woOPID,  \n" +
                "				woefd.qty,  \n" +
                "				fun_getBinNameByID(csc.binID) AS binName,  \n" +
                "				fun_getRestrictedFeederPart(woefd.id,woefd.mfgPNID) isRestricted,  \n" +
                "				fun_getbomRestrictedWithPermissionFeederPart(woefd.id,woefd.mfgPNID) restrictPermission,  \n" +
                "				(SELECT COUNT(1) FROM workorder_trans_umid_details wtud WHERE wtud.reelStatus='P' AND wtud.eqpFeederID=woefd.id) AS reelChangeCount,  \n" +
                "				(SELECT COUNT(1) FROM workorder_trans_umid_verification_history wtuvd WHERE wtuvd.woTransUMIDDetID=wotfd.id) AS reelVerificationCount,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.verifiedBy) AS verifiedBy,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,  \n" +
                "				CASE WHEN woefd.placementType=1 THEN 'By Machine' ELSE 'By Hand' END placementType,  \n" +
                "				wotfd.refDesig AS refDesig,  \n" +
                "				-- (SELECT refDesig FROM rfq_lineitems WHERE deletedAt IS NULL AND id = wotfd.rfqLineItemsID) AS refDesig,  \n" +
                "				 (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL AND id  \n" +
                "				 	IN (SELECT rfqLineItemID FROM workorder_operation_feeder_lineitem_details WHERE deletedAt IS NULL  \n" +
                "				 	and eqpFeederID IN (woefd.id))  \n" +
                "				) AS validRefDesig,  \n" +
                "				woefd.setupComment,  \n" +
                "				(case when (IFNULL(`wotfd`.`rfqLineItemsID`,0) = 0) then 'Supplies,Materials & Tools'  \n" +
                "					else 'BOM Part' END) AS partUsedFrom  ,  \n" +
                "                rli.custPN ,  \n" +
                "                rli.custPNID,  \n" +
                "                line_comp.PIDCode custPNPIDCode,  \n" +
                "                line_comp.RoHSStatusID custPNRoHSStatusID,  \n" +
                "                line_rohs.rohsIcon custPNrohsIcon,  \n" +
                "                line_rohs.name custPNrohsName,  \n" +
                "                IFNULL(wotfd.consumeQty,0) consumeQty,  \n" +
                "                fun_getUserNameByID(wotfd.approvedBy) approvedBy,  \n" +
                "                fun_ConvertUTCDatetimeToDataKeyTimeZone(wotfd.approvedOn) approvedOn,  \n" +
                "                wotfd.approvedReason  \n" +
                "			FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "			LEFT JOIN workorder_trans_umid_details wotfd ON (wotfd.eqpFeederID = woefd.id AND wotfd.deletedAt IS NULL AND wotfd.reelStatus='P' AND wotfd.transactionType='F')  \n" +
                "			LEFT JOIN component co ON (woefd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)  \n" +
                "			LEFT JOIN component_sid_stock csc ON (wotfd.refsidid = csc.id AND IFNULL(csc.isdeleted,0) = 0 AND csc.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)  \n" +
                "            LEFT JOIN rfq_lineitems rli ON rli.id = wotfd.rfqLineItemsID AND ifnull(rli.isDeleted,0) = 0  \n" +
                "				AND rli.id in (select rla.rfqLineItemsID from rfq_lineitems_alternatepart rla where  rla.mfgPNID =  woefd.mfgPNID   AND ifnull(rla.isDeleted,0) = 0  )  \n" +
                "            LEFT JOIN component line_comp ON line_comp.id =  rli.custPNID and ifnull(line_comp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN rfq_rohsmst line_rohs ON line_comp.RoHSStatusID = line_rohs.id AND IFNULL(line_rohs.isdeleted,0) = 0  \n" +
                "			WHERE woefd.`deletedAt` IS NULL  \n" +
                "			\");  \n" +
                "  \n" +
                "			IF(pWoOpEqpID IS NOT NULL AND pWoOpEqpID != '') THEN  \n" +
                "				SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(@temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" AND woefd.`woOpEqpID` = \",pWoOpEqpID);  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(\"  \n" +
                "			SELECT wotfd.id,  \n" +
                "				wotfd.woTransID,  \n" +
                "				wotfd.refsidid,  \n" +
                "				csc.uid AS umid,  \n" +
                "				csc.refcompid AS refcompid,  \n" +
                "				csc.expiryDate AS expiryDate,  \n" +
                "				csc.pkgQty AS pkgQty,  \n" +
                "				csc.pkgUnit AS pkgUnit,  \n" +
                "				fun_getUnitNameByID(csc.uom) partUOM,  \n" +
                "				(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'  \n" +
                "						WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				(SELECT mfgCode FROM mfgcodemst WHERE id = co.mfgCodeID) AS mfgCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				co.mfgPNDescription AS mfgPNDescription,  \n" +
                "				co.isCustom AS isCustom,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName`,  \n" +
                "				wotfd.assyQty,  \n" +
                "				wotfd.UOM,  \n" +
                "				wotfd.isVerified,  \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(wotfd.verifiedOn) verifiedOn,  \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(wotfd.updatedAt) updatedAt,  \n" +
                "				fun_getRestrictedFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) isRestricted,  \n" +
                "				fun_getbomRestrictedWithPermissionFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) restrictPermission,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.verifiedBy) AS verifiedBy,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,  \n" +
                "				(SELECT refDesig FROM rfq_lineitems WHERE deletedAt IS NULL AND id = wotfd.rfqLineItemsID) AS validRefDesig,  \n" +
                "				wotfd.refDesig AS refDesig,  \n" +
                "				wotfd.rfqLineItemsID,  \n" +
                "				(case when (IFNULL(`wotfd`.`rfqLineItemsID`,0) = 0) then 'Supplies,Materials & Tools'  \n" +
                "					else 'BOM Part' END) AS partUsedFrom  ,  \n" +
                "				rli.custPN ,  \n" +
                "                rli.custPNID,  \n" +
                "                line_comp.PIDCode custPNPIDCode,  \n" +
                "                line_comp.RoHSStatusID custPNRoHSStatusID,  \n" +
                "                line_rohs.rohsIcon custPNrohsIcon,  \n" +
                "                line_rohs.name custPNrohsName   ,  \n" +
                "                IFNULL(wotfd.consumeQty,0) consumeQty ,  \n" +
                "                 fun_getUserNameByID(wotfd.approvedBy) approvedBy,  \n" +
                "                fun_ConvertUTCDatetimeToDataKeyTimeZone(wotfd.approvedOn) approvedOn,  \n" +
                "                wotfd.approvedReason  \n" +
                "				FROM workorder_trans_umid_details wotfd  \n" +
                "            JOIN workorder_operation woOp ON wotfd.woOPID = woOp.woOPID AND ifnull(woOp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN workorder wo ON woOp.woID = wo.woID AND ifnull(wo.isDeleted,0) = 0  \n" +
                "			LEFT JOIN component co ON (wotfd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)  \n" +
                "			LEFT JOIN component_sid_stock csc ON (wotfd.refsidid = csc.id AND IFNULL(csc.isdeleted,0) = 0 AND csc.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_lineitems rli ON  rli.id = wotfd.rfqLineItemsID AND ifnull(rli.isDeleted,0) = 0  \n" +
                "									AND rli.id in (select rla.rfqLineItemsID from rfq_lineitems_alternatepart rla where  rla.mfgPNID =  wotfd.mfgPNID   AND ifnull(rla.isDeleted,0) = 0  )  \n" +
                "            LEFT JOIN component line_comp ON line_comp.id =  rli.custPNID and ifnull(line_comp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN rfq_rohsmst line_rohs ON line_comp.RoHSStatusID = line_rohs.id AND IFNULL(line_rohs.isdeleted,0) = 0  \n" +
                "			WHERE wotfd.`deletedAt` IS NULL AND wotfd.reelStatus='C'  \n" +
                "			AND wotfd.transactionType='U' AND wotfd.woOPID=\",pWoOPID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY fun_castStringDateTimeToDateTime(updatedAt) DESC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		IF (pisVerify = 1) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" and id > 0\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "		IF (ptransactionType='F') THEN  \n" +
                "			SELECT id,eqpFeederID,rfqLineItemID,CAST(lineID AS UNSIGNED) lineID  \n" +
                "				FROM workorder_operation_feeder_lineitem_details WHERE eqpFeederID IN  \n" +
                "			(SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "			WHERE woefd.`deletedAt` IS NULL  \n" +
                "			AND woefd.`woOpEqpID` = IFNULL(pWoOpEqpID,woefd.`woOpEqpID`)) AND deletedat IS NULL ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5071,'2.00','V1','Sproc_RetrieveWorkorderTransEquipmentFeederDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5071:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop procedure if exists Sproc_RetrieveWOTransEquipmentFeederVerificationDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWOTransEquipmentFeederVerificationDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWoTransUMIDDetID INT,  \n" +
                "	IN ptransactionType VARCHAR(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveWOTransEquipmentFeederVerificationDetails = CONCAT(\"  \n" +
                "  \n" +
                "		SELECT wotuvd.id,  \n" +
                "			wotfd.woTransID,  \n" +
                "			woefd.id AS eqpFeederID,  \n" +
                "			woefd.feederLocation,  \n" +
                "			(SELECT GROUP_CONCAT(IFNULL(CAST(wol.lineID AS UNSIGNED),'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS lineID,  \n" +
                "			wotfd.refsidid,  \n" +
                "			(SELECT uid FROM component_sid_stock WHERE id = wotfd.refsidid) AS umid,  \n" +
                "			(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'  \n" +
                "					WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,  \n" +
                "			wotfd.mfgPNID,  \n" +
                "			co.PIDCODE AS PIDCode,  \n" +
                "			co.mfgPN AS mfgPN,  \n" +
                "			co.isCustom ,  \n" +
                "			ro.rohsIcon,  \n" +
                "			`ro`.`name` AS `rohsName`,  \n" +
                "			wotfd.woOpEqpID,  \n" +
                "			wotfd.assyQty,  \n" +
                "			wotfd.UOM,  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wotuvd.verifiedOn) verifiedOn,  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wotuvd.updatedAt) updatedAt,  \n" +
                "			fun_getRestrictedFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) isRestricted,  \n" +
                "			fun_getbomRestrictedWithPermissionFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) restrictPermission,  \n" +
                "			(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotuvd.verifiedBy) AS verifiedBy,  \n" +
                "			(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,  \n" +
                "			wotfd.rfqLineItemsID ,  \n" +
                "            fun_getUserNameByID(wotfd.approvedBy) approvedBy,  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wotfd.approvedOn) approvedOn,  \n" +
                "            wotfd.approvedReason  \n" +
                "			FROM workorder_trans_umid_verification_history wotuvd  \n" +
                "		LEFT JOIN workorder_trans_umid_details wotfd ON (wotuvd.woTransUMIDDetID = wotfd.id AND wotfd.`deletedAt` IS NULL)  \n" +
                "		LEFT JOIN workorder_operation_equipment_feeder_details woefd ON (wotfd.eqpFeederID = woefd.id AND woefd.`deletedAt` IS NULL)  \n" +
                "		LEFT JOIN component co ON (wotfd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)  \n" +
                "		WHERE wotuvd.deletedAt IS NULL AND wotfd.transactionType='\",ptransactionType,\"' AND wotuvd.woTransUMIDDetID = \",pWoTransUMIDDetID,\"  \n" +
                "  \n" +
                "		\");  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY fun_castStringDateTimeToDateTime(updatedAt) DESC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWOTransEquipmentFeederVerificationDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWOTransEquipmentFeederVerificationDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5072,'2.00','V1','Sproc_RetrieveWOTransEquipmentFeederVerificationDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5072:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop procedure if exists Sproc_ValidateScanFeederFirst;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateScanFeederFirst`(  \n" +
                "	IN pfeederLocation VARCHAR(1000),  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpEqpID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN pisChangeReel INT,  \n" +
                "	IN preelChangeType VARCHAR(100),  \n" +
                "	IN ptoBinID INT,  \n" +
                "	IN pOldUMID VARCHAR(15),  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_comp_id INT;  \n" +
                "	DECLARE temp_comp_uom INT;  \n" +
                "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                "	DECLARE temp_lineID VARCHAR(100);  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE temp_eqpFeederID INT;  \n" +
                "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE feederVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_old_umid_comp_id INT;  \n" +
                "	DECLARE temp_old_umid_stock_id INT;  \n" +
                "	DECLARE temp_old_umid_pkgQty INT;  \n" +
                "	DECLARE temp_old_umid_pkgUnit INT;  \n" +
                "	DECLARE temp_old_umid_pkgUOM INT;  \n" +
                "	DECLARE temp_eqp_wh_id INT;  \n" +
                "	DECLARE temp_eqp_bin_id INT;  \n" +
                "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_salesOrderDetID VARCHAR(100);  \n" +
                "	DECLARE flag_isFeederTransExists INT  DEFAULT 0;  \n" +
                "	DECLARE valid_umid_transfer INT  DEFAULT 0;  \n" +
                "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5)  DEFAULT 'V';  \n" +
                "	DECLARE temp_json_object VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT ;  \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                "  \n" +
                "	SET temp_eqp_wh_id = NULL;  \n" +
                "	SET temp_eqp_bin_id = NULL;  \n" +
                "	SET temp_eqp_wh_name = NULL;  \n" +
                "	SET temp_all_mfg_id_lineID = NULL;  \n" +
                "  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "		CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "		(  \n" +
                "			 errorText VARCHAR(2000),  \n" +
                "			 isFeederError INT,  \n" +
                "			 isUMIDError INT,  \n" +
                "			 isConfirmation INT,  \n" +
                "			 isMessage INT,  \n" +
                "			 isInformation INT,  \n" +
                "			 stringText1 VARCHAR(1000),  \n" +
                "			 stringText2 VARCHAR(1000),  \n" +
                "			 stringText3 VARCHAR(1000)  \n" +
                "		);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "  \n" +
                "		select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                "        INTO flag_tempVerificationApproval;  \n" +
                "  \n" +
                "		SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                "		FROM workorder wo  \n" +
                "		WHERE wo.woID = pwoID  \n" +
                "		AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	IF ((fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, pisChangeReel) > 0)) THEN  \n" +
                "		SELECT id, rfqLineItemsID, partID, eqpFeederID, lineID, pidcode, uom, mfgPN, isCPN  \n" +
                "		INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_eqpFeederID, temp_lineID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn  \n" +
                "		FROM temp_feeder_details;  \n" +
                "		-- removed due to allow verification multiple times  \n" +
                "		-- IF(pisChangeReel <> 1 AND pisVerify = 1) THEN  \n" +
                "		-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                "		-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                "		-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                "		-- 			-- FAILED  \n" +
                "		-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "		-- 		END IF;  \n" +
                "		-- 	END IF;  \n" +
                "		-- ELSE  \n" +
                "			IF (pUMID IS NOT NULL) THEN  \n" +
                "				-- select concat('select fun_checkUMIDScan(',pUMID,',',ppartID,',',pwoTransID,',',pwoOpID,',',pemployeeId,',',pcheckKitAllocation,',','',',','',',',ptransactionType,',','1',',',pisVerify,',',pwoOpEqpID,',',pfeederLocation,',',pCreatedBy,')');  \n" +
                "				IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "					SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "				ELSE  \n" +
                "					SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "				END IF;  \n" +
                "				IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "					SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "					-- , refSalesOrderDetID  \n" +
                "					INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "					-- , temp_salesorderdetID  \n" +
                "					FROM temp_umid_details;  \n" +
                "					#check umid id pid is allocated to same line id in bill of material  \n" +
                "					#yes - check for kit allocation of UMID  \n" +
                "					#no - Suggest location for scan UMID  \n" +
                "					-- select concat('select fun_checkKitAllocation(',IFNULL(pUMID,0),',',IFNULL(pwoID,0),',',IFNULL(pwoOPID,0),',',IFNULL(pwoTransID,0),',',IFNULL(temp_eqpFeederID,0),',',IFNULL(temp_umid_comp_id,0),',',IFNULL(temp_umid_package_id,0),',',IFNULL(pcheckKitAllocation,0),',',IFNULL(pisConfirmed,0),'1',','')');  \n" +
                "  \n" +
                "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                "							-- ALLOCATED  \n" +
                "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSE  \n" +
                "						#in case validate UMID without Kit set true at WO  \n" +
                "                        #select 'Line 134',flag_kit_allocation_not_required_wo ;  \n" +
                "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                "									-- WRONG_LOCATION  \n" +
                "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "                               ELSE  \n" +
                "									SET temp_continue = 1;  \n" +
                "                               END IF;  \n" +
                "						ELSEIF (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                "							SET temp_continue = 1;  \n" +
                "                        ELSE  \n" +
                "							SET temp_continue = 0;  \n" +
                "                        END IF;  \n" +
                "                       # select 'Line 142',temp_continue, pisVerify , pfeederLocation,temp_eqp_wh_id ;  \n" +
                "                        IF temp_continue = 1 THEN  \n" +
                "							#check part belongs to multiple line  \n" +
                "							#yes - check for umid and feeder component must be same  \n" +
                "							#no - check for restrict part  \n" +
                "							#no - allow to scan details  \n" +
                "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                "								-- INVALID  \n" +
                "								SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							-- fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID)  \n" +
                "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                "								SET result = 0;  \n" +
                "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSE  \n" +
                "								# if feeder details and umid details are valid than give umid qty details on screen  \n" +
                "								# insert transaction details for fedder first and umid validate details in  workorder_trans_umid_details  \n" +
                "								-- verify flag  \n" +
                "								IF (pisVerify <> 1) THEN  \n" +
                "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                "									IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                "										SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "										WHERE refEqpID IN (  \n" +
                "											SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "											WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "										) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "										END IF;  \n" +
                "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                "  \n" +
                "                                   --     select flag_tempVerificationApproval , pisConfirmed ;  \n" +
                "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                "												-- Take confirmation  \n" +
                "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "													AND refsidid = temp_umid_stock_id  \n" +
                "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                "													AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "												IF(temp_feeder_transID > 0) THEN  \n" +
                "													-- FAILED  \n" +
                "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "													INSERT INTO workorder_trans_umid_details  \n" +
                "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                "                                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "													VALUES  \n" +
                "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "													-- VERIFIED  \n" +
                "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "													SET valid_umid_transfer = 1;  \n" +
                "												END IF;  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN   -- verification required  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- add umid transaction details  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											-- WRONG_LOCATION  \n" +
                "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									-- If change reel and old umid details  \n" +
                "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										-- get component details based on old umid  \n" +
                "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                "											FROM component_sid_stock css  \n" +
                "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                "  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "									-- If not change reel than check for reel transaction is done or not  \n" +
                "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "											AND wtud.refsidid = temp_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND wtud.woOPID = pwoOpID;  \n" +
                "											-- AND isVerified=0;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									-- if not change reel than update verify flag for verfiy true  \n" +
                "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										UPDATE workorder_trans_umid_details  \n" +
                "										SET isVerified=1,  \n" +
                "										verifiedBy=pemployeeId,  \n" +
                "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                "										WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "										-- VERIFIED  \n" +
                "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "  \n" +
                "									-- if change reel than update verify flag for verfiy true  \n" +
                "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "											( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "											WHERE whmst.refEqpID IN (  \n" +
                "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "											) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "											END IF;  \n" +
                "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                "														-- Added for multiple kit  \n" +
                "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                "														(SELECT id FROM kit_allocation ka  \n" +
                "															WHERE ka.refSalesOrderDetID IN  \n" +
                "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                "																FROM workorder_salesorder_details wsd  \n" +
                "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                "														',\\\"returnQty\\\":',0,  \n" +
                "														',\\\"returnUnit\\\":',0,  \n" +
                "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, 0,  \n" +
                "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType)  \n" +
                "														,pwoTransID,  \n" +
                "														1,NULL,NULL,NULL,NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "												END IF;  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "  \n" +
                "												-- update old record toumid  \n" +
                "												UPDATE workorder_trans_umid_details  \n" +
                "												SET toRefUIDId=temp_umid_stock_id  \n" +
                "												WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- SELECT pwoTransID;  \n" +
                "												-- insert new umid for workorder equipment feeder  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												-- UMID SCANNED  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "											ELSE  \n" +
                "												-- WRONG_LOCATION  \n" +
                "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										-- FAILED  \n" +
                "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "                    END IF;  \n" +
                "				END IF;  \n" +
                "				-- SELECT IFNULL(COUNT(1),0) FROM kit_allocation WHERE uid = pUMID AND assyID=ppartID AND refBOMLineID IN (SELECT rfqLineItemsID FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details WHERE uid=pUMID))) > 0  \n" +
                "			ELSE  \n" +
                "				# if feeder details are valid than give PID Details on screen  \n" +
                "				SET feederVerified = 1;  \n" +
                "				-- SELECT * FROM temp_feeder_details;  \n" +
                "			END IF;  \n" +
                "		-- END IF;     -- removed due to allow verification multiple times  \n" +
                "	END IF;  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pfeederLocation, 					CASE WHEN (pUMID IS NULL) THEN '' ELSE pUMID END, 	temp_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_comp_id),		temp_mfgpn, 						temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),	temp_umid_mfgPN,					CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),					fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						pwoOpEqpID,						pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#1. return history of umid transfer  \n" +
                "	IF(valid_umid_transfer = 0) THEN  \n" +
                "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#2. return history of verification  \n" +
                "        SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "        #3. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#4. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#5. return feeder details  \n" +
                "	-- IF (feederVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                "	SELECT * FROM temp_feeder_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#6. return allocated UMID details  \n" +
                "	IF (pOldUMID IS NULL AND feederVerified=1) THEN  \n" +
                "		-- select '1';  \n" +
                "		SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
                "		WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;  \n" +
                "  \n" +
                "		IF (temp_comp_is_cpn = 0) THEN  \n" +
                "			SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
                "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
                "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		-- select concat('CALL Sproc_GetStockAllocateList (',temp_salesOrderDetID,',',ppartID,',',temp_all_mfg_id_lineID,',',temp_comp_uom,',',CAST(temp_rfqLineItemsID AS CHAR(255)),',','AllocatedStock',');');  \n" +
                "		CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");  \n" +
                "	ELSE  \n" +
                "		SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                "		WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#7 return last inserted/updated records for umid transaction  \n" +
                "	SELECT temp_last_inserted_umid_id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5073,'2.00','V1','Sproc_ValidateScanFeederFirst  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5073:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop procedure if exists Sproc_ValidateScanUMIDFirst;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateScanUMIDFirst`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN pfeederLocation VARCHAR(1000),  \n" +
                "	IN ppartID INT(11),  \n" +
                "	IN pwoOpEqpID INT(11),  \n" +
                "	IN pwoOpID INT(11),  \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pemployeeId INT(11),  \n" +
                "	IN pcheckKitAllocation INT(11),  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT(11),  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN pisChangeReel INT(11),  \n" +
                "	IN preelChangeType VARCHAR(100),  \n" +
                "	IN ptoBinID INT(11),  \n" +
                "	IN pOldUMID VARCHAR(15),  \n" +
                "	IN pisConfirmed INT(11),  \n" +
                "	IN pwoID INT(11),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_comp_id INT(11);  \n" +
                "	DECLARE temp_comp_uom INT(11);  \n" +
                "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                "	DECLARE temp_lineID VARCHAR(100);  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE temp_eqpFeederID INT(11);  \n" +
                "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;  \n" +
                "	DECLARE uidVerified INT(11) DEFAULT 0;  \n" +
                "	DECLARE feederVerified INT(11) DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT(11);  \n" +
                "	DECLARE temp_umid_pkgQty INT(11);  \n" +
                "	DECLARE temp_umid_stock_id INT(11);  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT(11);  \n" +
                "	DECLARE temp_umid_pkgUnit INT(11);  \n" +
                "	DECLARE temp_umid_pkgCount INT(11);  \n" +
                "	DECLARE temp_umid_pkgUOM INT(11);  \n" +
                "	DECLARE temp_old_umid_comp_id INT(11);  \n" +
                "	DECLARE temp_old_umid_stock_id INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgQty INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgUnit INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgUOM INT(11);  \n" +
                "	DECLARE temp_eqp_wh_id INT(11);  \n" +
                "	DECLARE temp_eqp_bin_id INT(11);  \n" +
                "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_salesorderdetID VARCHAR(100);  \n" +
                "	DECLARE flag_isFeederTransExists INT (11) DEFAULT 0;  \n" +
                "	DECLARE valid_umid_transfer INT (11) DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                "	DECLARE temp_json_object VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT (11);  \n" +
                "    DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                "  \n" +
                "	SET temp_eqp_wh_id = NULL;  \n" +
                "	SET temp_eqp_bin_id = NULL;  \n" +
                "	SET temp_eqp_wh_name = NULL;  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT(11),  \n" +
                "	     isUMIDError INT(11),  \n" +
                "	     isConfirmation INT(11),  \n" +
                "	     isMessage INT(11),  \n" +
                "	     isInformation INT(11),  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "  \n" +
                "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                "	INTO flag_tempVerificationApproval;  \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                "	FROM workorder wo  \n" +
                "	WHERE wo.woID = pwoID  \n" +
                "	AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "	ELSE  \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,')');  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, pkgUOM, pkgUnit, mfgPN, packagingGroupId  \n" +
                "		-- , refSalesOrderDetID  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_pkgUOM, temp_umid_pkgUnit, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		-- , temp_salesorderdetID  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "		IF(pfeederLocation IS NOT NULL) THEN  \n" +
                "			IF(fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, 0) > 0) THEN  \n" +
                "				SELECT id, rfqLineItemsID, partID, lineID, eqpFeederID, pidcode, uom, mfgPN, isCPN  \n" +
                "				INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_lineID, temp_eqpFeederID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn  \n" +
                "				FROM temp_feeder_details;  \n" +
                "				-- IF(pisVerify = 1) THEN  \n" +
                "				-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                "				-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                "				-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                "				-- 			-- FAILED  \n" +
                "				-- 			SET @stmt_str = 'FEED001';  \n" +
                "				-- 			INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                "				-- 			VALUES (@stmt_str, 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				-- 		END IF;  \n" +
                "				-- 	END IF;  \n" +
                "				-- ELSE  \n" +
                "					# check for valid lineid for feeder details and umid details  \n" +
                "					#yes - check for lineid and valid than save transaction  \n" +
                "					#no - suggest valid feeder location  \n" +
                "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                "							-- ALLOCATED  \n" +
                "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						#in case validate UMID without Kit set true at WO  \n" +
                "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                "									-- WRONG_LOCATION  \n" +
                "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							   ELSE  \n" +
                "									SET temp_continue = 1;  \n" +
                "							   END IF;  \n" +
                "						ELSEIF ( fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                "							SET temp_continue = 1 ;  \n" +
                "						END IF;  \n" +
                "                        IF temp_continue = 1 THEN  \n" +
                "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id,1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                "								SET result = 0;  \n" +
                "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSE  \n" +
                "								IF (pisVerify <> 1) THEN  \n" +
                "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                "									-- IF NOT ALLOCATED THAN NO NEED TO GIVE ELSE PART, IT IS ALREADY ADDED IN FUNCTION  \n" +
                "                                    -- UMID016 for regualer feeder scan  \n" +
                "                                    -- UMID042 for Part level Kit Allocation checking success  . Both from  fun_checkKitAllocation  \n" +
                "									IF ( pwoOpEqpID IS NOT NULL AND  \n" +
                "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0)  OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                "										SELECT id, `name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst  \n" +
                "										WHERE refEqpID IN (  \n" +
                "											SELECT eqpID FROM workorder_operation_equipment  \n" +
                "											WHERE woOpEqpID=pwoOpEqpID AND deletedAt IS NULL  \n" +
                "										) AND deletedAt IS NULL;  \n" +
                "  \n" +
                "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "										END IF;  \n" +
                "  \n" +
                "										-- CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL, (SELECT binID FROM temp_umid_details),temp_eqp_wh_id, NULL, pCreatedBy, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);  \n" +
                "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                "												-- Take confirmation  \n" +
                "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "													AND refsidid = temp_umid_stock_id  \n" +
                "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                "													AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "  \n" +
                "												IF(temp_feeder_transID > 0) THEN  \n" +
                "													-- FAILED  \n" +
                "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "												ELSE  \n" +
                "  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "													INSERT INTO workorder_trans_umid_details  \n" +
                "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                "														`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "													VALUES  \n" +
                "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "													-- VERIFIED  \n" +
                "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "													SET valid_umid_transfer = 1;  \n" +
                "												END IF;  \n" +
                "											ELSEIF (flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "												-- SCANNED  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											-- WRONG_LOCATION  \n" +
                "											-- SET @stmt_str = 'UMID018';  \n" +
                "											-- INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                "											-- VALUES (@stmt_str, 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									SET feederVerified = 1;  \n" +
                "								ELSE  \n" +
                "									-- If change reel and old umid details  \n" +
                "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										-- get component details based on old umid  \n" +
                "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                "											FROM component_sid_stock css  \n" +
                "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                "  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND woOPID = pwoOpID;  \n" +
                "									-- If not change reel than check for reel transaction is done or not  \n" +
                "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "										WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "										AND wtud.refsidid = temp_umid_stock_id  \n" +
                "										AND wtud.mfgPNID=temp_umid_comp_id AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "										AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "										FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "											WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "										AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "										AND wtud.woOPID = pwoOpID;  \n" +
                "										-- AND isVerified=0;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										UPDATE workorder_trans_umid_details  \n" +
                "										SET isVerified=1,  \n" +
                "										verifiedBy=pemployeeId,  \n" +
                "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                "										WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "										-- VERIFIED  \n" +
                "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET feederVerified = 1;  \n" +
                "									-- if change reel than update verify flag for verfiy true  \n" +
                "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										 -- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "                                        ( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "											WHERE whmst.refEqpID IN (  \n" +
                "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "											) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "											END IF;  \n" +
                "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                "														-- Added for multiple kit  \n" +
                "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                "														(SELECT id FROM kit_allocation ka  \n" +
                "															WHERE ka.refSalesOrderDetID IN  \n" +
                "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                "																FROM workorder_salesorder_details wsd  \n" +
                "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                "														',\\\"returnQty\\\":',0,  \n" +
                "														',\\\"returnUnit\\\":',0,  \n" +
                "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, 0,  \n" +
                "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														1,NULL,NULL,NULL,NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "												END IF;  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "  \n" +
                "												-- update old record toumid  \n" +
                "												UPDATE workorder_trans_umid_details  \n" +
                "												SET toRefUIDId=temp_umid_stock_id  \n" +
                "												WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- SELECT pwoTransID;  \n" +
                "												-- insert new umid for workorder equipment feeder  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												-- UMID SCANNED  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "											ELSE  \n" +
                "												-- WRONG_LOCATION  \n" +
                "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										-- FAILED  \n" +
                "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "                    END IF;  \n" +
                "				-- END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET uidVerified = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							CASE WHEN (pfeederLocation IS NULL) THEN '' ELSE pfeederLocation END,		temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 								temp_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_comp_id), 		temp_mfgpn,									CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),								fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						pwoOpEqpID,									pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#1. return history of umid transfer  \n" +
                "	IF(valid_umid_transfer = 0) THEN  \n" +
                "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#2. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#3. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#4. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#5. return feeder details  \n" +
                "	-- IF (feederVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                "	SELECT * FROM temp_feeder_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#6. return allocated UMID details  \n" +
                "	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                "	WHERE 1=0;  \n" +
                "  \n" +
                "	#7 return last inserted/updated records for umid transacrion  \n" +
                "	SELECT temp_last_inserted_umid_id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5074,'2.00','V1','Sproc_ValidateScanUMIDFirst  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5074:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop procedure if exists Sproc_validateScanMissingUMIDOnly;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN prfqLineItemsID INT,  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pisPlacementTracking INT,  \n" +
                "	IN psaveUMIDDetails INT,  \n" +
                "	IN prefDesig VARCHAR(3000),  \n" +
                "	IN passyQty INT  ,  \n" +
                "    IN pConsumeQty INT,  \n" +
                "    IN pUMIDAllocateStatus INT,  \n" +
                "    IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pCreateByRoleId INT ,  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                "	DECLARE tot_stock_umid INT DEFAULT 0;  \n" +
                "    DECLARE allocated_stock_umid INT DEFAULT 0 ;  \n" +
                "    DECLARE kit_qty INT DEFAULT 0 ;  \n" +
                "    DECLARE temp_salesorder_detID INT ;  \n" +
                "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;  \n" +
                "    DECLARE vParentWoId INT;  \n" +
                "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT,  \n" +
                "	     isUMIDError INT,  \n" +
                "	     isConfirmation INT,  \n" +
                "	     isMessage INT,  \n" +
                "	     isInformation INT,  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "		#Get parent WO ID in case of revise  work order.  \n" +
                "		WITH RECURSIVE RevWo AS  (  \n" +
                "			SELECT	woId,  \n" +
                "					1 lvl  ,  \n" +
                "					terminateWOID  \n" +
                "			FROM workorder  \n" +
                "			WHERE woId = pwoID  \n" +
                "			AND isDeleted = 0  \n" +
                "			UNION ALL  \n" +
                "			SELECT	wo.woID,  \n" +
                "					rw.lvl +1 lvl,  \n" +
                "					wo.terminateWOID  \n" +
                "			 FROM workorder wo  \n" +
                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
                "			 WHERE wo.isDeleted = 0  \n" +
                "			 )  \n" +
                "			SELECT rev.woID  INTO vParentWoId  \n" +
                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
                "  \n" +
                "		#Check for kit allocation flag from BOM Line  \n" +
                "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck  \n" +
                "		FROM rfq_lineitems rli  \n" +
                "		WHERE rli.id = prfqLineItemsID  \n" +
                "        AND rli.isDeleted = 0 ;  \n" +
                "  \n" +
                "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);  \n" +
                "  \n" +
                "		#CHeck Only BOM Part allowed  \n" +
                "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                "											WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                "				AND rla.isDeleted = 0) = 0 THEN  \n" +
                "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "        END IF;  \n" +
                "	# umid transaction details based on umid  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                "    INTO flag_tempVerificationApproval;  \n" +
                "  /*  \n" +
                "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                "		SET flag_tempVerificationRequire = 1;  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		IF(flag_tempLineCount = 1) THEN  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                "			UPDATE temp_umid_details tud  \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                "			AND id = prfqLineItemsID)  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "        #step -2 Already  Allocated in Given KIT of same WO  \n" +
                "        IF (pUMIDAllocateStatus = 0 ) THEN  \n" +
                "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))  \n" +
                "            INTO kit_qty  \n" +
                "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID  \n" +
                "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )  \n" +
                "			AND STATUS = 'A';  \n" +
                "  \n" +
                "            IF kit_qty > 0 THEN  \n" +
                "				IF  kit_qty >= pConsumeQty THEN  \n" +
                "					SET pUMIDAllocateStatus = 1 ;  \n" +
                "				ELSEIF kit_qty < pConsumeQty THEN  \n" +
                "					SET pUMIDAllocateStatus = 2 ;  \n" +
                "				END IF ;  \n" +
                "                #SELECT 'LINE 122' , pUMIDAllocateStatus;  \n" +
                "            ELSE  \n" +
                "				SELECT SUM(css.pkgQty) INTO tot_stock_umid  \n" +
                "				FROM component_sid_stock AS css  \n" +
                "				WHERE css.uid = pUMID  \n" +
                "				AND css.isDeleted = 0;  \n" +
                "  \n" +
                "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid  \n" +
                "				FROM kit_allocation AS ka_all  \n" +
                "				WHERE ka_all.uid = pUMID  \n" +
                "				AND  ka_all.status IN ('A','R')  \n" +
                "				GROUP BY ka_all.uid ;  \n" +
                "  \n" +
                "				#step - 3 Check Un-Allocated  stock available or not  \n" +
                "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN  \n" +
                "					SET pUMIDAllocateStatus = 3;  \n" +
                "					#allocate kit from un allocated stock  \n" +
                "				END IF;  \n" +
                "                #SELECT 'LINE 139' , pUMIDAllocateStatus;  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "        #SELECT 'LINE 142' , pUMIDAllocateStatus;  \n" +
                "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate  \n" +
                "  \n" +
                "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "					SET uidVerified = 1;  \n" +
                "				ELSE  \n" +
                "					SET uidVerified = 0;  \n" +
                "					SET result = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                "					SET result = 0;  \n" +
                "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSE  \n" +
                "						#take first sales order default in case of multiple sales order  \n" +
                "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs  \n" +
                "						INTO temp_salesorder_detID  \n" +
                "						FROM  workorder_salesorder_details  \n" +
                "						WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                "						AND isDeleted = 0  \n" +
                "						LIMIT 1;  \n" +
                "					-- check verification required  \n" +
                "					-- than verification require than check from which page scan/verify  \n" +
                "                     IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) THEN  \n" +
                "							-- Take confirmation  \n" +
                "						SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "						-- if scan option selected than check for already scanned in flow first  \n" +
                "						-- if not scanned than add as verified umid directly  \n" +
                "						IF(pisVerify <> 1) THEN  \n" +
                "							SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "							WHERE transactionType='U'  \n" +
                "							AND refsidid = temp_umid_stock_id  \n" +
                "							AND mfgPNID=temp_umid_comp_id  \n" +
                "							AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                "							AND woOPID = pwoOpID  \n" +
                "							AND employeeID=pemployeeId;  \n" +
                "							-- if already scanned than give message  \n" +
                "							-- else add as verified umid directly  \n" +
                "							IF(temp_feeder_transID > 0) THEN  \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "								INSERT INTO workorder_trans_umid_details  \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "									`verifiedOn`,`reelStatus`, refDesig,  \n" +
                "									`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "								VALUES  \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "									pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "	  							-- VERIFIED  \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "								SELECT LAST_INSERT_ID() AS id;  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								IF psaveUMIDDetails = 1 THEN  \n" +
                "									-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;  \n" +
                "										# Check wheather kit allocation required  or not  \n" +
                "  \n" +
                "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "												wop.partID = temp_umid_comp_id AND  \n" +
                "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF (result = 1 ) THEN  \n" +
                "										SET result = 1;  \n" +
                "										INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`, `reelStatus`, refDesig, consumeQty,  \n" +
                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "										VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "										-- VERIFIED  \n" +
                "										CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "										SELECT LAST_INSERT_ID() AS id;  \n" +
                "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                "										SET pUMIDAllocateStatus = 4;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							-- if already scanned than verify same umid for history  \n" +
                "							-- if not scanned yet than give message  \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								SET uidVerified = 0;  \n" +
                "								SET result = 0;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						-- verification require than check from which page/popup  \n" +
                "						-- if from scan popup than add umid as scanned new record  \n" +
                "						-- else check for verify flow  \n" +
                "                        #select  prfqLineItemsID;  \n" +
                "						IF (pisVerify <> 1) THEN  \n" +
                "							IF psaveUMIDDetails = 1 THEN  \n" +
                "								-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;  \n" +
                "                                # Check wheather kit allocation required  or not  \n" +
                "  \n" +
                "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                "                                    ELSE  \n" +
                "										SET result = 1;  \n" +
                "                                    END IF;  \n" +
                "                                ELSE  \n" +
                "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "											wop.partID = temp_umid_comp_id AND  \n" +
                "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "										SET result = 1;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "                                #select 'Line261' , result;  \n" +
                "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN  \n" +
                "                                IF result = 1 THEN  \n" +
                "									SET result = 1;  \n" +
                "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;  \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);  \n" +
                "									-- SCANNED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "                                    -- Condition for SMT material / For SMT UMID , only successful scan message  \n" +
                "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "                                    ELSE  \n" +
                "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "									END IF;  \n" +
                "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                "									SET pUMIDAllocateStatus = 4;  \n" +
                "                                END IF;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								SET uidVerified = 0;  \n" +
                "								SET result = 0;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		#END IF;  \n" +
                "	END IF;  \n" +
                "	#END IF;  \n" +
                "  \n" +
                "	#select '10' , 'AT END' ;  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							'',				temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						NULL,				pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#0. return assy part list  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "	ELSE  \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "			-- verified UMID  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#1. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#2. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';  \n" +
                "  \n" +
                "	#3. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                "	SELECT NULL AS id;  \n" +
                "	SELECT id FROM temp_umid_transIDs;  \n" +
                "  \n" +
                "    #5 return UMID allocation checking status  \n" +
                "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5075,'2.00','V1','Sproc_validateScanMissingUMIDOnly  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5075:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "drop procedure if exists Sproc_validateScanUMIDOnly;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN prfqLineItemsID INT,  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pisPlacementTracking INT,  \n" +
                "	IN psaveUMIDDetails INT,  \n" +
                "	IN prefDesig VARCHAR(3000),  \n" +
                "	IN passyQty INT,  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval  VARCHAR(5)  DEFAULT 'V';  \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT,  \n" +
                "	     isUMIDError INT,  \n" +
                "	     isConfirmation INT,  \n" +
                "	     isMessage INT,  \n" +
                "	     isInformation INT,  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                "    FROM workorder wo  \n" +
                "    WHERE wo.woID = pwoID  \n" +
                "    AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "	# umid transaction details based on umid  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                "  \n" +
                "	select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                "    INTO flag_tempVerificationApproval;  \n" +
                "	/*IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                "		SET flag_tempVerificationRequire = 1;  \n" +
                "	END IF;                */  \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "    ELSE  \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		IF(flag_tempLineCount = 1) THEN  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                "			UPDATE temp_umid_details tud  \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                "			AND id = prfqLineItemsID)  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "		END IF;  \n" +
                "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN  \n" +
                "			SET result = 0;  \n" +
                "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN  \n" +
                "			SET result = 0;  \n" +
                "		ELSE  \n" +
                "			-- need to check from here  \n" +
                "			-- If scan popup with manual placement and allocated in kit and not saved details          --  \n" +
                "			-- Check placement tracking with more than one BOM line item for same part  \n" +
                "			IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0)) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSE  \n" +
                "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "						SET uidVerified = 1;  \n" +
                "					ELSE  \n" +
                "						SET uidVerified = 0;  \n" +
                "						SET result = 0;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                "						SET result = 0;  \n" +
                "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSE  \n" +
                "						-- check verification required  \n" +
                "						-- than verification require than check from which page scan/verify  \n" +
                "                        IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) THEN  \n" +
                "							-- Take confirmation  \n" +
                "							SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "						ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "							-- if scan option selected than check for already scanned in flow first  \n" +
                "							-- if not scanned than add as verified umid directly  \n" +
                "							IF(pisVerify <> 1) THEN  \n" +
                "								SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "								WHERE transactionType='U'  \n" +
                "								AND refsidid = temp_umid_stock_id  \n" +
                "								AND mfgPNID=temp_umid_comp_id  \n" +
                "								AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                "								AND woOPID = pwoOpID  \n" +
                "								AND employeeID=pemployeeId;  \n" +
                "  \n" +
                "								-- if already scanned than give message  \n" +
                "								-- else add as verified umid directly  \n" +
                "								IF(temp_feeder_transID > 0) THEN  \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`,`reelStatus`, refDesig,  \n" +
                "                                         `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- SCANNED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`, `reelStatus`, refDesig,  \n" +
                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- VERIFIED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								-- if already scanned than verify same umid for history  \n" +
                "								-- if not scanned yet than give message  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						 -- this code is commented because as per new implementation there will  be no verification for scan material  \n" +
                "                         /*ELSE  \n" +
                "							-- verification require than check from which page/popup  \n" +
                "							-- if from scan popup than add umid as scanned new record  \n" +
                "							-- else check for verify flow  \n" +
                "							IF (pisVerify <> 1) THEN  \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "								INSERT INTO workorder_trans_umid_details  \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)  \n" +
                "								VALUES  \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "									pCreatedBy, pCreatedBy, \"C\", prefDesig);  \n" +
                "  \n" +
                "								-- SCANNED  \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "								SELECT LAST_INSERT_ID() AS id;  \n" +
                "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF; */  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							'',				temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						NULL,				pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#0. return assy part list  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "	ELSE  \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "			-- verified UMID  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#1. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#2. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#3. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                "	SELECT NULL AS id;  \n" +
                "	SELECT id FROM temp_umid_transIDs;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5076,'2.00','V1','Sproc_validateScanUMIDOnly  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5076:
                allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                //"ALTER TABLE `component`  \n" +
                //"ADD COLUMN `shelfLifeDateType` VARCHAR(1) NULL DEFAULT 'N';  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5077,'2.00','V1',' User Story 35562: Part Master: Changes for Shelf Life Days - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
            case 5077:
                allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW  \n" +
                "BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Lead Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Safety Stock',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Special Note',  \n" +
                "			CAST(OLD.specialNote AS CHAR),	CAST(NEW.specialNote AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
                "			CAST(OLD.updatedAtApi AS CHAR),	CAST(NEW.updatedAtApi AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
                "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Lock',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Price',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Auto Verification(Assembly Parts)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchasing Comment',  \n" +
                "			CAST(OLD.purchasingComment AS CHAR),	CAST(NEW.purchasingComment AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Detailed Description',  \n" +
                "			CAST(OLD.detailDescription AS CHAR),	CAST(NEW.detailDescription AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		set pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			set pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        set pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			set pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS Sproc_CopyPartDetail;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT(11),  \n" +
                "    IN pToPartID INT(11),  \n" +
                "    IN pUserID Int(11),  \n" +
                "    IN pIsAttribute tinyint(1),  \n" +
                "    IN pIsSettings tinyint(1),  \n" +
                "    IN pIsAdditionalAttibute tinyint(1),  \n" +
                "    IN pIsPackagingDetail tinyint(1),  \n" +
                "    IN pIsStandards tinyint(1),  \n" +
                "    IN pIsRequiredFunctionalType tinyint(1),  \n" +
                "    IN pIsRequiredMountingType tinyint(1),  \n" +
                "    IN pIsPackagingAliasPart tinyint(1),  \n" +
                "    IN pIsOtherPartName tinyint(1),  \n" +
                "    IN pIsAlternatePart tinyint(1),  \n" +
                "    IN pIsRoHSReplacementPart tinyint(1),  \n" +
                "    IN pIsDriveTool tinyint(1),  \n" +
                "    IN pIsProcessMaterial tinyint(1),  \n" +
                "    IN pIsRequiredMattingParts tinyint(1),  \n" +
                "    IN pIsPickupPad tinyint(1),  \n" +
                "    IN pIsProgram tinyint(1),  \n" +
                "    IN pIsFunctionalTesingTool tinyint(1),  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                "		toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                "		toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                "		toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                "		toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                "		toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                "		toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                "		toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                "		toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                "		toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                "		toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                "		toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                "		toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                "		toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                "		toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                "		toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                "		toPart.`pitch` = fromPart.pitch,  \n" +
                "		toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                "		toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                "		toPart.`length` = fromPart.length,  \n" +
                "		toPart.`width` = fromPart.width,  \n" +
                "		toPart.`heightText` = fromPart.heightText,  \n" +
                "		toPart.`height` = fromPart.height,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "	IF pIsSettings then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`  \n" +
                "        from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                "		toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                "		toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                "        toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                "		toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                "		toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                "		toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                "		toPart.`eau` = fromPart.eau,  \n" +
                "		toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                "		toPart.`driverToolRequired` = fromPart.driverToolRequired,  \n" +
                "		toPart.`matingPartRquired` = fromPart.matingPartRquired,  \n" +
                "		toPart.`pickupPadRequired` = fromPart.pickupPadRequired,  \n" +
                "		toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                "		toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,  \n" +
                "		toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,  \n" +
                "		toPart.`bomLock` = fromPart.bomLock,  \n" +
                "		toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "		INSERT INTO `component_temperature_sensitive_data`  \n" +
                "		(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "	end if;  \n" +
                "	IF pIsAdditionalAttibute then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                "		from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`tolerance` = fromPart.tolerance,  \n" +
                "		toPart.`voltage` = fromPart.voltage,  \n" +
                "		toPart.`value` = fromPart.value,  \n" +
                "		toPart.`partPackage` = fromPart.partPackage,  \n" +
                "		toPart.`powerRating` = fromPart.powerRating,  \n" +
                "		toPart.`weight` = fromPart.weight,  \n" +
                "		toPart.`feature` = fromPart.feature,  \n" +
                "		toPart.`color` = fromPart.color,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "	IF pIsPackagingDetail then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                "		toPart.`packagingID` = fromPart.packagingID,  \n" +
                "		toPart.`minimum` = fromPart.minimum,  \n" +
                "		toPart.`mult` = fromPart.mult,  \n" +
                "		toPart.`packageQty` = fromPart.packageQty,  \n" +
                "        toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                "		toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                "		toPart.`uom` = fromPart.uom,  \n" +
                "		toPart.`uomText` = fromPart.uomText,  \n" +
                "		toPart.`unit` = fromPart.unit,  \n" +
                "		toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                "		toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                "		toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                "		toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                "		toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "	if pIsStandards then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "		toPart.`htsCode` = fromPart.htsCode,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "		INSERT INTO `component_standard_details`  \n" +
                "		(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "		select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "		from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "		and not exists (select 1 from component_standard_details csd  \n" +
                "		where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "	end if;  \n" +
                "	if pIsRequiredMountingType then  \n" +
                "		INSERT INTO `component_requiremountingtype`  \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "		and not exists (select 1 from component_requiremountingtype  \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "		if @requiredMountingTypecount>0 then  \n" +
                "			UPDATE `component` toPart  \n" +
                "			SET  \n" +
                "			toPart.`mountingTypePartRequired` = true,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = pToPartID;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "	if pIsRequiredFunctionalType then  \n" +
                "		INSERT INTO `component_requirefunctionaltype`  \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "		and not exists (select 1 from component_requirefunctionaltype  \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "		if @requiredFunctionalTypecount>0 then  \n" +
                "			UPDATE `component` toPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalTypePartRequired` = true,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = pToPartID;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "	IF(pIsPackagingAliasPart)  \n" +
                "	THEN  \n" +
                "		set vMisMatchFields  = '';  \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID, pFromPartID, vMisMatchFields);  \n" +
                "		set vValidationPassed = (select CASE WHEN (vMisMatchFields != '') THEN 0 ELSE 1 END);  \n" +
                "	END IF;  \n" +
                "	IF(vValidationPassed = 0)  \n" +
                "	THEN  \n" +
                "		ROLLBACK;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "		select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "		set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "		set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);  \n" +
                "  \n" +
                "		if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "		THEN  \n" +
                "			call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "			select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "		end if;  \n" +
                "  \n" +
                "        IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			ROLLBACK;  \n" +
                "			select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "		ELSE  \n" +
                "			if pIsPackagingAliasPart then  \n" +
                "				if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "					# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "					update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table  \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);  \n" +
                "				elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "  \n" +
                "				# Insert data in packaging alias table for ToPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "				# Update data for packaging alias group id for  ToPartID  \n" +
                "					update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;  \n" +
                "  \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "  \n" +
                "				# Insert data in packaging alias table for ToPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "				# Update data for packaging alias group id for  FromPartID  \n" +
                "					update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsOtherPartName then  \n" +
                "				INSERT INTO `component_otherpn`  \n" +
                "				(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_otherpn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "			end if;  \n" +
                "			If pIsAlternatePart then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "			end if;  \n" +
                "			if pIsRoHSReplacementPart then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "			end if;  \n" +
                "			if pIsDriveTool then  \n" +
                "				INSERT INTO `component_drivetools`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_drivetools  \n" +
                "				where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "  \n" +
                "				set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @DriveToolcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`driverToolRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsProcessMaterial then  \n" +
                "				INSERT INTO `component_processmaterial`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_processmaterial  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "			end if;  \n" +
                "			if pIsRequiredMattingParts then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "  \n" +
                "				set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @mattingpartcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`matingPartRquired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "  \n" +
                "			end if;  \n" +
                "			if pIsPickupPad then  \n" +
                "			INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "  \n" +
                "				set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @PickupPadcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`pickupPadRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsProgram then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 3 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 3);  \n" +
                "  \n" +
                "				set @Programcount =  (select count(1) from component_alternatepn where type = '3' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @Programcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`programingRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsFunctionalTesingTool then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "  \n" +
                "				set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @FunctionalTesingToolcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`functionalTestingRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsFinctionalRestingEquipment then  \n" +
                "				INSERT INTO `component_functionaltestingequipment`  \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_functionaltestingequipment  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "			end if;  \n" +
                "			commit;  \n" +
                "			select * from component where id = pToPartID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS Sproc_CreateAssemblyRevision;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  */  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  \n" +
                "				  limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        custAssyPN  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  \n" +
                "				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsAttribute  then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                "			toPart.`pitch` = fromPart.pitch,  \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                "			toPart.`length` = fromPart.length,  \n" +
                "			toPart.`width` = fromPart.width,  \n" +
                "			toPart.`heightText` = fromPart.heightText,  \n" +
                "			toPart.`height` = fromPart.height,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsSettings then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
                "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                "			toPart.`eau` = fromPart.eau,  \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
                "			toPart.`bomLock` = fromPart.bomLock,  \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "		IF pIsAdditionalAttibute then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                "			from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`tolerance` = fromPart.tolerance,  \n" +
                "			toPart.`voltage` = fromPart.voltage,  \n" +
                "			toPart.`value` = fromPart.value,  \n" +
                "			toPart.`partPackage` = fromPart.partPackage,  \n" +
                "			toPart.`powerRating` = fromPart.powerRating,  \n" +
                "			toPart.`weight` = fromPart.weight,  \n" +
                "			toPart.`feature` = fromPart.feature,  \n" +
                "			toPart.`color` = fromPart.color,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsPackagingDetail then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                "			toPart.`packagingID` = fromPart.packagingID,  \n" +
                "			toPart.`minimum` = fromPart.minimum,  \n" +
                "			toPart.`mult` = fromPart.mult,  \n" +
                "			toPart.`packageQty` = fromPart.packageQty,  \n" +
                "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                "			toPart.`uom` = fromPart.uom,  \n" +
                "			toPart.`uomText` = fromPart.uomText,  \n" +
                "			toPart.`unit` = fromPart.unit,  \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		if pIsStandards then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "			toPart.`htsCode` = fromPart.htsCode,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if pIsPackagingAliasPart then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If pIsAlternatePart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if pIsRoHSReplacementPart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if pIsDriveTool then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsProcessMaterial then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsRequiredMattingParts then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if pIsPickupPad then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if pIsFunctionalTesingTool then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if pIsFinctionalRestingEquipment then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				-- commit;  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5078,'2.00','V1',' User Story 35562: Part Master: Changes for Shelf Life Days - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5078:
                allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "alter table packing_slip_material_receive_det ADD column disputeQty decimal(18,8);  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5079,'2.00','V1',' User Story 33693: Generate Pseudo Line# for External PO Material Receipt and Calculate Backorder and Dispute Qty based on that. - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
  
        case 5079:
                allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipPartQtyByPO`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipPartQtyByPO`(  \n" +
                "	IN pPONumber VARCHAR(50),  \n" +
                "	IN pRefPOLineID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	ps.poNumber, SUM(psm.receivedQty) totalReceived, MAX(psm.orderedQty) orderedQty, SUM(psm.packingSlipQty) totalPackingSlipQty  \n" +
                "	FROM 	packing_slip_material_receive ps  \n" +
                "    JOIN 	packing_slip_material_receive_det psm  ON  ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "				AND 	ps.poNumber = pPONumber  \n" +
                "				AND 	psm.refPOLineID = pRefPOLineID  \n" +
                "				AND 	ps.receiptType = 'P'  \n" +
                "                AND 	ps.isdeleted = 0  \n" +
                "                AND 	psm.isdeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.refPOLineID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        left join packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckLineExistsForExternalPO`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckLineExistsForExternalPO`(  \n" +
                "	IN pPoNumber VARCHAR(100),  \n" +
                "    IN pOrderedQty DECIMAL(18,8),  \n" +
                "    IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQLStatement1 = concat(\"SELECT psmrd.id,  \n" +
                "										psmrd.packingSlipSerialNumber,  \n" +
                "										psmrd.partID,  \n" +
                "										psmrd.packagingID,  \n" +
                "										cpm.name,  \n" +
                "										psmrd.refPOLineID,  \n" +
                "										psmrd.orderedQty,  \n" +
                "                                        psmrd.receivedQty,  \n" +
                "                                        psmrd.packingSlipQty,  \n" +
                "                                        GROUP_CONCAT(DISTINCT cpm.name) AS Packaging  \n" +
                "									FROM  \n" +
                "										packing_slip_material_receive_det psmrd  \n" +
                "											JOIN  \n" +
                "										packing_slip_material_receive psmr ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "											AND psmr.isDeleted = 0  \n" +
                "											AND psmr.poNumber = '\",pPoNumber,\"'  \n" +
                "											JOIN  \n" +
                "										component_packagingmst cpm ON cpm.id = psmrd.packagingID  \n" +
                "											AND cpm.isdeleted = 0  \n" +
                "									WHERE  \n" +
                "										psmrd.isDeleted = 0  \n" +
                "											AND psmrd.orderedQty = '\",pOrderedQty,\"'  \n" +
                "											AND psmrd.partID = '\",pPartId,\"'  \n" +
                "									Group by refPOLineID;\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllPOLineIdForExternalPO`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllPOLineIdForExternalPO`(  \n" +
                "	IN pPoNumber VARCHAR(100),  \n" +
                "    IN pPartId INT,  \n" +
                "    IN pRefPOLineID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT psmrd.id,  \n" +
                "			psmrd.refPackingSlipMaterialRecID,  \n" +
                "			psmrd.packingSlipSerialNumber,  \n" +
                "			psmrd.partID,  \n" +
                "			psmrd.packagingID,  \n" +
                "			cpm.name,  \n" +
                "			psmrd.refPOLineID,  \n" +
                "			psmrd.orderedQty,  \n" +
                "			CONCAT('',psmrd.refPOLineID,' (',GROUP_CONCAT(distinct cpm.name),' | ',FLOOR(psmrd.orderedQty),')') AS POLine,  \n" +
                "			COUNT(psmrd.id) AS TotalReleaseLine  \n" +
                "		FROM packing_slip_material_receive_det psmrd  \n" +
                "		JOIN packing_slip_material_receive psmr  \n" +
                "			ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "				AND psmr.isDeleted = 0  \n" +
                "				AND psmr.refPurchaseOrderID IS NULL  \n" +
                "				AND psmr.poNumber = pPoNumber  \n" +
                "		JOIN component_packagingmst cpm  \n" +
                "			ON cpm.id = psmrd.packagingID AND cpm.isdeleted = 0  \n" +
                "		WHERE psmrd.isDeleted = 0 AND psmrd.partID=pPartId  \n" +
                "			AND psmrd.refPOLineID = IFNULL(pRefPOLineID, psmrd.refPOLineID)  \n" +
                "		GROUP BY psmrd.refPOLineID  \n" +
                "		ORDER BY psmrd.refPOLineID ASC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5080,'2.00','V1',' User Story 33693: Generate Pseudo Line# for External PO Material Receipt and Calculate Backorder and Dispute Qty based on that. - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
             case 5080:
                  allDbChangesArray.push(
                  /* **************************** New Script -> 28-07-2021 *********************************** */
	                "DROP procedure IF EXISTS Sproc_validateScanMissingUMIDOnly;  \n" +
	                "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(  \n" +
	                "	IN pUMID VARCHAR(15),  \n" +
	                "	IN ppartID INT,  \n" +
	                "	IN pwoOpID INT,  \n" +
	                "	IN pwoTransID INT,  \n" +
	                "	IN pemployeeId INT,  \n" +
	                "	IN pcheckKitAllocation INT,  \n" +
	                "	IN pverificationType VARCHAR(255),  \n" +
	                "	IN pisVerify INT,  \n" +
	                "	IN ptransactionType VARCHAR(1),  \n" +
	                "	IN prfqLineItemsID INT,  \n" +
	                "	IN pisConfirmed INT,  \n" +
	                "	IN pwoID INT,  \n" +
	                "	IN pisPlacementTracking INT,  \n" +
	                "	IN psaveUMIDDetails INT,  \n" +
	                "	IN prefDesig VARCHAR(3000),  \n" +
	                "	IN passyQty INT  ,  \n" +
	                "    IN pConsumeQty INT,  \n" +
	                "    IN pUMIDAllocateStatus INT,  \n" +
	                "    IN pCreatedBy VARCHAR(255),  \n" +
	                "    IN pCreateByRoleId INT ,  \n" +
	                "    IN pApprovedBy INT,  \n" +
	                "    IN pApprovedReason VARCHAR(500)  \n" +
	                ")  \n" +
	                "BEGIN  \n" +
	                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
	                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
	                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
	                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
	                "	DECLARE temp_umid_comp_id INT;  \n" +
	                "	DECLARE temp_umid_stock_id INT;  \n" +
	                "	DECLARE temp_umid_pkgQty INT;  \n" +
	                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
	                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
	                "	DECLARE temp_umid_package_id INT;  \n" +
	                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
	                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
	                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
	                "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
	                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
	                "	DECLARE tot_stock_umid INT DEFAULT 0;  \n" +
	                "    DECLARE allocated_stock_umid INT DEFAULT 0 ;  \n" +
	                "    DECLARE kit_qty INT DEFAULT 0 ;  \n" +
	                "    DECLARE temp_salesorder_detID INT ;  \n" +
	                "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;  \n" +
	                "    DECLARE vParentWoId INT;  \n" +
	                "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit  \n" +
	                "	-- create temporary table for error  \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
	                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
	                "	(  \n" +
	                "	     errorText VARCHAR(2000),  \n" +
	                "	     isFeederError INT,  \n" +
	                "	     isUMIDError INT,  \n" +
	                "	     isConfirmation INT,  \n" +
	                "	     isMessage INT,  \n" +
	                "	     isInformation INT,  \n" +
	                "	     stringText1 VARCHAR(1000),  \n" +
	                "	     stringText2 VARCHAR(1000),  \n" +
	                "	     stringText3 VARCHAR(1000)  \n" +
	                "	);  \n" +
	                "		#Get parent WO ID in case of revise  work order.  \n" +
	                "		WITH RECURSIVE RevWo AS  (  \n" +
	                "			SELECT	woId,  \n" +
	                "					1 lvl  ,  \n" +
	                "					terminateWOID  \n" +
	                "			FROM workorder  \n" +
	                "			WHERE woId = pwoID  \n" +
	                "			AND isDeleted = 0  \n" +
	                "			UNION ALL  \n" +
	                "			SELECT	wo.woID,  \n" +
	                "					rw.lvl +1 lvl,  \n" +
	                "					wo.terminateWOID  \n" +
	                "			 FROM workorder wo  \n" +
	                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
	                "			 WHERE wo.isDeleted = 0  \n" +
	                "			 )  \n" +
	                "			SELECT rev.woID  INTO vParentWoId  \n" +
	                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
	                "  \n" +
	                "		#Check for kit allocation flag from BOM Line  \n" +
	                "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck  \n" +
	                "		FROM rfq_lineitems rli  \n" +
	                "		WHERE rli.id = prfqLineItemsID  \n" +
	                "        AND rli.isDeleted = 0 ;  \n" +
	                "  \n" +
	                "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);  \n" +
	                "  \n" +
	                "		#CHeck Only BOM Part allowed  \n" +
	                "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
	                "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
	                "											WHERE uid = pUMID AND isDeleted = 0 )  \n" +
	                "				AND rla.isDeleted = 0) = 0 THEN  \n" +
	                "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
	                "        END IF;  \n" +
	                "	# umid transaction details based on umid  \n" +
	                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
	                "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
	                "    INTO flag_tempVerificationApproval;  \n" +
	                "  /*  \n" +
	                "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
	                "		SET flag_tempVerificationRequire = 1;  \n" +
	                "	END IF;  \n" +
	                "  */  \n" +
	                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
	                "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');  \n" +
	                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN  \n" +
	                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
	                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
	                "		FROM temp_umid_details;  \n" +
	                "  \n" +
	                "  \n" +
	                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
	                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
	                "		IF(flag_tempLineCount = 1) THEN  \n" +
	                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
	                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
	                "		END IF;  \n" +
	                "  \n" +
	                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
	                "			UPDATE temp_umid_details tud  \n" +
	                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
	                "			AND id = prfqLineItemsID)  \n" +
	                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
	                "  \n" +
	                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
	                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
	                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
	                "		END IF;  \n" +
	                "  \n" +
	                "  \n" +
	                "        #step -2 Already  Allocated in Given KIT of same WO  \n" +
	                "        IF (pUMIDAllocateStatus = 0 ) THEN  \n" +
	                "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))  \n" +
	                "            INTO kit_qty  \n" +
	                "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID  \n" +
	                "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )  \n" +
	                "			AND STATUS = 'A';  \n" +
	                "  \n" +
	                "            IF kit_qty > 0 THEN  \n" +
	                "				IF  kit_qty >= pConsumeQty THEN  \n" +
	                "					SET pUMIDAllocateStatus = 1 ;  \n" +
	                "				ELSEIF kit_qty < pConsumeQty THEN  \n" +
	                "					SET pUMIDAllocateStatus = 2 ;  \n" +
	                "				END IF ;  \n" +
	                "                #SELECT 'LINE 122' , pUMIDAllocateStatus;  \n" +
	                "            ELSE  \n" +
	                "				SELECT SUM(css.pkgQty) INTO tot_stock_umid  \n" +
	                "				FROM component_sid_stock AS css  \n" +
	                "				WHERE css.uid = pUMID  \n" +
	                "				AND css.isDeleted = 0;  \n" +
	                "  \n" +
	                "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid  \n" +
	                "				FROM kit_allocation AS ka_all  \n" +
	                "				WHERE ka_all.uid = pUMID  \n" +
	                "				AND  ka_all.status IN ('A','R')  \n" +
	                "				GROUP BY ka_all.uid ;  \n" +
	                "  \n" +
	                "				#step - 3 Check Un-Allocated  stock available or not  \n" +
	                "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN  \n" +
	                "					SET pUMIDAllocateStatus = 3;  \n" +
	                "					#allocate kit from un allocated stock  \n" +
	                "				END IF;  \n" +
	                "                #SELECT 'LINE 139' , pUMIDAllocateStatus;  \n" +
	                "            END IF;  \n" +
	                "        END IF;  \n" +
	                "        #SELECT 'LINE 142' , pUMIDAllocateStatus;  \n" +
	                "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate  \n" +
	                "  \n" +
	                "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
	                "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
	                "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
	                "					SET uidVerified = 1;  \n" +
	                "				ELSE  \n" +
	                "					SET uidVerified = 0;  \n" +
	                "					SET result = 0;  \n" +
	                "				END IF;  \n" +
	                "			ELSE  \n" +
	                "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
	                "					SET result = 0;  \n" +
	                "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
	                "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
	                "				ELSE  \n" +
	                "						#take first sales order default in case of multiple sales order  \n" +
	                "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs  \n" +
	                "						INTO temp_salesorder_detID  \n" +
	                "						FROM  workorder_salesorder_details  \n" +
	                "						WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
	                "						AND isDeleted = 0  \n" +
	                "						LIMIT 1;  \n" +
	                "					-- check verification required  \n" +
	                "					-- than verification require than check from which page scan/verify  \n" +
	                "                     IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) and psaveUMIDDetails = 1 THEN  \n" +
	                "							-- Take confirmation  \n" +
	                "						SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
	                "					ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) and psaveUMIDDetails = 1 THEN -- verification not require  \n" +
	                "						-- if scan option selected than check for already scanned in flow first  \n" +
	                "						-- if not scanned than add as verified umid directly  \n" +
	                "						IF(pisVerify <> 1) THEN  \n" +
	                "							SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
	                "							WHERE transactionType='U'  \n" +
	                "							AND refsidid = temp_umid_stock_id  \n" +
	                "							AND mfgPNID=temp_umid_comp_id  \n" +
	                "							AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
	                "							AND woOPID = pwoOpID  \n" +
	                "							AND employeeID=pemployeeId;  \n" +
	                "							-- if already scanned than give message  \n" +
	                "							-- else add as verified umid directly  \n" +
	                "							IF(temp_feeder_transID > 0) THEN  \n" +
	                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
	                "								INSERT INTO workorder_trans_umid_details  \n" +
	                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
	                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
	                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
	                "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
	                "									`verifiedOn`,`reelStatus`, refDesig,  \n" +
	                "									`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
	                "								VALUES  \n" +
	                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
	                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
	                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
	                "									pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
	                "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
	                "                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
	                "  \n" +
	                "	  							-- VERIFIED  \n" +
	                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
	                "								SELECT LAST_INSERT_ID() AS id;  \n" +
	                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
	                "								SET uidVerified = 1;  \n" +
	                "							ELSE  \n" +
	                "								IF psaveUMIDDetails = 1 THEN  \n" +
	                "									-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
	                "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
	                "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;  \n" +
	                "										# Check wheather kit allocation required  or not  \n" +
	                "  \n" +
	                "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
	                "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
	                "										ELSE  \n" +
	                "											SET result = 1;  \n" +
	                "										END IF;  \n" +
	                "									ELSE  \n" +
	                "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
	                "												wop.partID = temp_umid_comp_id AND  \n" +
	                "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
	                "											SET result = 1;  \n" +
	                "										END IF;  \n" +
	                "									END IF;  \n" +
	                "  \n" +
	                "									IF (result = 1 ) THEN  \n" +
	                "										SET result = 1;  \n" +
	                "										INSERT INTO workorder_trans_umid_details  \n" +
	                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
	                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
	                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
	                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
	                "										`verifiedOn`, `reelStatus`, refDesig, consumeQty,  \n" +
	                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
	                "										VALUES  \n" +
	                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
	                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
	                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
	                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
	                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty,  \n" +
	                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
	                "										-- VERIFIED  \n" +
	                "										CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
	                "										SELECT LAST_INSERT_ID() AS id;  \n" +
	                "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
	                "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
	                "										SET uidVerified = 1;  \n" +
	                "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
	                "										SET pUMIDAllocateStatus = 4;  \n" +
	                "									END IF;  \n" +
	                "								END IF;  \n" +
	                "							END IF;  \n" +
	                "						ELSE  \n" +
	                "							-- if already scanned than verify same umid for history  \n" +
	                "							-- if not scanned yet than give message  \n" +
	                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
	                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
	                "								SET uidVerified = 1;  \n" +
	                "							ELSE  \n" +
	                "								SET uidVerified = 0;  \n" +
	                "								SET result = 0;  \n" +
	                "							END IF;  \n" +
	                "						END IF;  \n" +
	                "					ELSE  \n" +
	                "						-- verification require than check from which page/popup  \n" +
	                "						-- if from scan popup than add umid as scanned new record  \n" +
	                "						-- else check for verify flow  \n" +
	                "                        #select  prfqLineItemsID;  \n" +
	                "						IF (pisVerify <> 1) THEN  \n" +
	                "							IF psaveUMIDDetails = 1 THEN  \n" +
	                "								-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
	                "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
	                "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;  \n" +
	                "                                # Check wheather kit allocation required  or not  \n" +
	                "  \n" +
	                "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
	                "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
	                "                                    ELSE  \n" +
	                "										SET result = 1;  \n" +
	                "                                    END IF;  \n" +
	                "                                ELSE  \n" +
	                "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
	                "											wop.partID = temp_umid_comp_id AND  \n" +
	                "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
	                "										SET result = 1;  \n" +
	                "									END IF;  \n" +
	                "								END IF;  \n" +
	                "                                #select 'Line261' , result;  \n" +
	                "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN  \n" +
	                "                                IF result = 1 THEN  \n" +
	                "									SET result = 1;  \n" +
	                "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;  \n" +
	                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
	                "									INSERT INTO workorder_trans_umid_details  \n" +
	                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
	                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
	                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
	                "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)  \n" +
	                "									VALUES  \n" +
	                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
	                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
	                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
	                "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);  \n" +
	                "									-- SCANNED  \n" +
	                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
	                "									SELECT LAST_INSERT_ID() AS id;  \n" +
	                "                                    -- Condition for SMT material / For SMT UMID , only successful scan message  \n" +
	                "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
	                "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
	                "										SET uidVerified = 1;  \n" +
	                "                                    ELSE  \n" +
	                "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
	                "										SET uidVerified = 1;  \n" +
	                "									END IF;  \n" +
	                "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
	                "									SET pUMIDAllocateStatus = 4;  \n" +
	                "                                END IF;  \n" +
	                "							END IF;  \n" +
	                "						ELSE  \n" +
	                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
	                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
	                "								SET uidVerified = 1;  \n" +
	                "							ELSE  \n" +
	                "								SET uidVerified = 0;  \n" +
	                "								SET result = 0;  \n" +
	                "							END IF;  \n" +
	                "						END IF;  \n" +
	                "					END IF;  \n" +
	                "				END IF;  \n" +
	                "			END IF;  \n" +
	                "		#END IF;  \n" +
	                "	END IF;  \n" +
	                "	#END IF;  \n" +
	                "  \n" +
	                "	#select '10' , 'AT END' ;  \n" +
	                "	INSERT INTO `uid_verification_history`(  \n" +
	                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
	                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
	                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
	                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
	                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
	                "	VALUES (  \n" +
	                "		pUMID,							'',				temp_umid_comp_id,  \n" +
	                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
	                "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
	                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
	                "		pwoTransID, 						NULL,				pverificationType  \n" +
	                "	);  \n" +
	                "  \n" +
	                "	#0. return assy part list  \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
	                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
	                "  \n" +
	                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
	                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
	                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
	                "	ELSE  \n" +
	                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
	                "			-- verified UMID  \n" +
	                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
	                "		ELSE  \n" +
	                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
	                "		END IF;  \n" +
	                "	END IF;  \n" +
	                "  \n" +
	                "	#1. return history of verification  \n" +
	                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
	                "  \n" +
	                "	#2. return error  \n" +
	                "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';  \n" +
	                "  \n" +
	                "	#3. return umid details  \n" +
	                "	-- IF (uidVerified=1) THEN  \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
	                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
	                "	SELECT * FROM temp_umid_details;  \n" +
	                "	-- SELECT * FROM temp_umid_details;  \n" +
	                "	-- END IF;  \n" +
	                "  \n" +
	                "	#4 return last inserted/updated records for umid transacrion  \n" +
	                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
	                "	SELECT NULL AS id;  \n" +
	                "	SELECT id FROM temp_umid_transIDs;  \n" +
	                "  \n" +
	                "    #5 return UMID allocation checking status  \n" +
	                "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';  \n" +
	                "  \n" +
	                "END;  \n" +
                  /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                  "VALUES (5081,'2.00','V1','  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                  );
                break;
                case 5081:
                    allDbChangesArray.push(
                    /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_MountingType_FunctionalType_new` ;  \n" +
                    "CREATE PROCEDURE `Sproc_Update_BOM_MountingType_FunctionalType_new`(  \n" +
                    "	IN pPartID INT,  \n" +
                    "	IN puserID INT,  \n" +
                    "    IN pRoleID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE subAssyType INT;  \n" +
                    " 	SET  subAssyType = 3;  \n" +
                    "  	DROP TEMPORARY TABLE IF EXISTS  componentResult;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS componentResult AS  \n" +
                    "	SELECT  rla.partID  \n" +
                    "	FROM rfq_lineitems_alternatepart AS rla  \n" +
                    "	WHERE rla.mfgPNID = pPartID AND rla.isDeleted = FALSE  \n" +
                    "	GROUP BY  partID;  \n" +
                    "  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                    "	SELECT  rla.partID  \n" +
                    "	FROM rfq_lineitems_alternatepart AS rla  \n" +
                    "	WHERE rla.mfgPNID = pPartID AND rla.isDeleted = 0  \n" +
                    "	GROUP BY rla.partID;  \n" +
                    "	/* Update Assembly Internal version with parent assembly where part is added */  \n" +
                    "		UPDATE component  \n" +
                    "		SET  \n" +
                    "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                    "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
                    "		WHERE id IN(  \n" +
                    "		WITH RECURSIVE cte AS  \n" +
                    "		(  \n" +
                    "		  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM component c  \n" +
                    "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                    "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                    "  \n" +
                    "		  UNION ALL  \n" +
                    "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM rfq_lineitems rlp  \n" +
                    "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
                    "          INNER JOIN component cp ON cp.id = rlap.mfgPNID  \n" +
                    "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                    "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                    "		)  \n" +
                    "		SELECT DISTINCT partId FROM cte);  \n" +
                    "  \n" +
                    "	/* Update BOM Detail where part is used where part is added */  \n" +
                    "		UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "		JOIN (  \n" +
                    "				SELECT (MIN(c.mountingTypeID) != MAX(c.mountingTypeID)) AS mismatchMount,  \n" +
                    "						(MIN(c.functionalCategoryID)!=MAX(c.functionalCategoryID))AS mismatchFunctional, rla.rfqLineItemsID  \n" +
                    "				FROM rfq_lineitems_alternatepart rla  \n" +
                    "				JOIN component c ON c.id = rla.mfgPNID  \n" +
                    "				WHERE rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0  \n" +
                    "					AND rla.rfqLineItemsID IN(SELECT rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE mfgPNID IN (pPartID))  \n" +
                    "				GROUP BY rla.rfqLineItemsID  \n" +
                    "				HAVING COUNT(1) >1  \n" +
                    "			) mmla ON rla.rfqLineItemsID = mmla.rfqLineItemsID AND rla.isDeleted = 0  \n" +
                    "        SET  \n" +
                    "		rla.mismatchMountingTypeStep = (CASE WHEN mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 1 THEN 0  \n" +
                    "					WHEN mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 0 THEN 0 ELSE 1 END),  \n" +
                    "		rla.approvedMountingType = (CASE WHEN (((mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 1)  \n" +
                    "					OR mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 1) AND rla.approvedMountingType = 1) THEN 0  \n" +
                    "					WHEN mmla.mismatchMount = 0 AND mmla.mismatchFunctional = 0 THEN 0 ELSE 0 END),  \n" +
                    "		rla.mismatchFunctionalCategoryStep = (CASE WHEN mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 1 THEN 0  \n" +
                    "					WHEN mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 0 THEN 0 ELSE 1 END),  \n" +
                    "		rla.description  = (CASE WHEN mmla.mismatchMount = 1 AND mmla.mismatchFunctional = 1 THEN  \n" +
                    "						CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),'\n',  \n" +
                    "							fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id), '\n', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id))  \n" +
                    "					WHEN mmla.mismatchMount = 0 AND mmla.mismatchFunctional = 0 THEN  \n" +
                    "						REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),'')  \n" +
                    "					ELSE  \n" +
                    "						(CASE WHEN mmla.mismatchMount = 1 AND mmla.mismatchFunctional = 0 THEN  \n" +
                    "								CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),'\n', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id))  \n" +
                    "							WHEN mmla.mismatchFunctional = 1 AND mmla.mismatchMount = 0 THEN  \n" +
                    "								CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),'\n', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id))  \n" +
                    "						 END)  \n" +
                    "					END),  \n" +
                    "		rla.customerApproval = 'P',  \n" +
                    "		rla.isUnlockApprovedPart = 1,  \n" +
                    "		rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                    "		rla.updatedBy = puserID,  \n" +
                    "		rla.updateByRoleId = pRoleID  \n" +
                    "        WHERE rla.isdeleted = 0;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                        "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_RequireFlagFromPartMaster` ;  \n" +
                        "                    CREATE PROCEDURE `Sproc_Update_BOM_RequireFlagFromPartMaster`(  \n" +
                        "                    	IN pAliasGroupID INT,  \n" +
                        "                    	IN pPartID INT,  \n" +
                        "                    	IN pNewProgramingRequired TINYINT,  \n" +
                        "                    	IN pNewMatingPartRquired TINYINT,  \n" +
                        "                    	IN pNewDriverToolRequired TINYINT,  \n" +
                        "                    	IN pNewFunctionalTestingRequired TINYINT,  \n" +
                        "                    	IN pNewPickupPadRequired TINYINT,  \n" +
                        "                    	IN pOldPartStatus INT,  \n" +
                        "                    	IN pNewPartStatus INT,  \n" +
                        "                    	IN pOldUOM INT,  \n" +
                        "                    	IN pNewUOM INT,  \n" +
                        "                    	IN pOldFeature VARCHAR(255),  \n" +
                        "                    	IN pNewFeature VARCHAR(255),  \n" +
                        "                    	IN pOldConnecterTypeID INT,  \n" +
                        "                    	IN pNewConnecterTypeID INT,  \n" +
                        "                    	IN pOldNoOfRows INT,  \n" +
                        "                    	IN pNewNoOfRows INT,  \n" +
                        "                    	IN pUserId INT,  \n" +
                        "                    	IN pUserRoleId INT  \n" +
                        "                    )  \n" +
                        "                    BEGIN  \n" +
                        "                        DECLARE totalCount INT DEFAULT 0;  \n" +
                        "                        DECLARE currIndex INT DEFAULT 0;  \n" +
                        "                       DECLARE currMfgPnID INT;  \n" +
                        "                       DECLARE currAssyID INT;  \n" +
                        "                       DECLARE lastAssyID INT;  \n" +
                        "                       DECLARE subAssyType INT;  \n" +
                        "                       DECLARE vActivePartStatusID INT;  \n" +
                        "                       SET lastAssyID = 0;  \n" +
                        "  \n" +
                        "                   	SET  subAssyType = 3;  \n" +
                        "                   	SELECT id INTO vActivePartStatusID FROM component_partstatusmst cps WHERE cps.name = 'Active';  \n" +
                        "  \n" +
                        "                   	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                        "                   	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                        "                   	SELECT  rla.partID, rla.mfgPNID  \n" +
                        "                   	FROM rfq_lineitems_alternatepart AS rla  \n" +
                        "                   	WHERE rla.deletedAt IS NULL  \n" +
                        "                       AND rla.isDeleted = 0  \n" +
                        "                   	AND (EXISTS (SELECT 1 FROM component_packagingalias cp  \n" +
                        "                   				WHERE cp.componentID = rla.mfgPNID  \n" +
                        "                                     AND cp.isDeleted = 0  \n" +
                        "                                     AND cp.aliasgroupID = pAliasGroupID)  \n" +
                        "                   		OR rla.mfgPNID = pPartID)  \n" +
                        "                   	GROUP BY rla.partID, rla.mfgPNID  \n" +
                        "                       ORDER BY rla.partID, rla.mfgPNID;  \n" +
                        "  \n" +
                        "  \n" +
                        "                       /* Update Assembly Internal version with parent assembly where part is added */  \n" +
                        "                       UPDATE component  \n" +
                        "                   	SET  \n" +
                        "                   		liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                        "                   		liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) AS CHAR))  \n" +
                        "                   	WHERE id IN(  \n" +
                        "                   	WITH RECURSIVE cte AS  \n" +
                        "                   	(  \n" +
                        "                   	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                        "                   	  FROM component c  \n" +
                        "                         JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                        "                   	  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                        "  \n" +
                        "                   	  UNION ALL  \n" +
                        "                   	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                        "                   	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child  \n" +
                        "                   	  WHERE rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                        "                   	  AND cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                        "                   	)  \n" +
                        "                   	SELECT DISTINCT partId FROM cte);  \n" +
                        "  \n" +
                        "                       /* Update BOM flag Detail where part is used where part is added */  \n" +
                        "                   	UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                        "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                        "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	SET  \n" +
                        "                   		rla.programingRequiredStep = (CASE WHEN pNewProgramingRequired = 1 THEN (CASE WHEN rl.programingStatus = 0 THEN 0 ELSE 1 END) ELSE 1 END),  \n" +
                        "                   		rla.matingPartRquiredStep = (CASE WHEN pNewMatingPartRquired = 1 THEN 0 ELSE 1 END),  \n" +
                        "                   		rla.driverToolsRequiredStep = (CASE WHEN pNewDriverToolRequired = 1 THEN 0 ELSE 1 END),  \n" +
                        "                   		rla.functionalTestingRequiredStep = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN 0 ELSE 1 END),  \n" +
                        "                   		rla.pickupPadRequiredStep = (CASE WHEN pNewPickupPadRequired = 1 THEN 0 ELSE 1 END),  \n" +
                        "                   		rla.invalidConnectorTypeStep = (CASE WHEN pOldConnecterTypeID != pNewConnecterTypeID THEN  \n" +
                        "                   							(CASE WHEN pNewConnecterTypeID = -1  AND !rl.numOfPosition THEN 0  \n" +
                        "                   								WHEN pNewConnecterTypeID != -1 AND (!c.noOfPosition OR (c.noOfPosition != rl.numOfPosition)) THEN 0  \n" +
                        "                   								ELSE 1  \n" +
                        "                   							END)  \n" +
                        "                   						ELSE rla.invalidConnectorTypeStep END),  \n" +
                        "                   		rla.partPinIsLessthenBOMPinStep = (CASE WHEN pOldConnecterTypeID != pNewConnecterTypeID THEN  \n" +
                        "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN 0 ELSE 1 END)  \n" +
                        "                   						     ELSE rla.partPinIsLessthenBOMPinStep END),  \n" +
                        "  \n" +
                        "                   		rla.obsoletePartStep = (CASE WHEN pOldPartStatus != pNewPartStatus THEN  \n" +
                        "                   						(CASE WHEN pNewPartStatus != vActivePartStatusID THEN 0  \n" +
                        "                   							WHEN pNewPartStatus = vActivePartStatusID THEN 1 END)  \n" +
                        "                   					ELSE rla.obsoletePartStep END),  \n" +
                        "                   		rla.mismatchNumberOfRowsStep = (CASE WHEN pOldNoOfRows != pNewNoOfRows  THEN  \n" +
                        "                   							(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                        "                   								((c.mountingTypeID = 3 AND (!rl.numOfRows OR rl.numOfRows != pNewNoOfRows))  \n" +
                        "                   									OR (c.mountingTypeID = 2 AND !rl.numOfRows AND rl.numOfRows != pNewNoOfRows)  \n" +
                        "                   								 ) THEN  \n" +
                        "                   							 0 ELSE 1 END)  \n" +
                        "                   						ELSE rla.mismatchNumberOfRowsStep END),  \n" +
                        "                   		rla.uomMismatchedStep = (CASE WHEN pOldUOM != pNewUOM  THEN  \n" +
                        "                   						(CASE WHEN c.uomClassID != ul.measurementTypeID THEN 0 ELSE 1 END)  \n" +
                        "                   					ELSE rla.uomMismatchedStep END),  \n" +
                        "                   		rla.description = CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id)),''),  \n" +
                        "                   						 fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id)),  \n" +
                        "                   		rla.customerApproval = 'P',  \n" +
                        "                   		rla.customerApprovalBy = NULL,  \n" +
                        "                   		rla.customerApprovalDate = NULL,  \n" +
                        "                   		rla.updatedAt = UTC_TIMESTAMP(),  \n" +
                        "                   		rla.updatedBy = pUserId,  \n" +
                        "                   		rla.updateByRoleId = pUserRoleId  \n" +
                        "                   	WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	/* Update BOM set drive tool require error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pNewDriverToolRequired = 1 THEN  \n" +
                        "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),''),  \n" +
                        "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id))  \n" +
                        "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),'') END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	  /* Update BOM set matting part require error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pNewMatingPartRquired = 1 THEN  \n" +
                        "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),''),  \n" +
                        "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id))  \n" +
                        "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),'') END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	  /* Update BOM set pickup pad require error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pNewPickupPadRequired = 1 THEN  \n" +
                        "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),''),  \n" +
                        "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id))  \n" +
                        "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),'') END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "                   	/* Update BOM set functional testing required error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN  \n" +
                        "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),''),  \n" +
                        "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id))  \n" +
                        "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),'') END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	  /* Update BOM set Programming error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pNewProgramingRequired = 1 THEN  \n" +
                        "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),''),  \n" +
                        "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id))  \n" +
                        "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),'') END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	  /* Update BOM set Pin Mismatch error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pOldConnecterTypeID != pNewConnecterTypeID THEN  \n" +
                        "                   					(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN  \n" +
                        "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),''),  \n" +
                        "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id))  \n" +
                        "                   					ELSE  \n" +
                        "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),'')  \n" +
                        "                   					END)  \n" +
                        "                   				     ELSE rla.description END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	  /* Update BOM set Obsolate error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pOldPartStatus != pNewPartStatus THEN  \n" +
                        "                   					(CASE WHEN pNewPartStatus != vActivePartStatusID THEN  \n" +
                        "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id)),''),  \n" +
                        "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id))  \n" +
                        "                   					WHEN pNewPartStatus = vActivePartStatusID THEN  \n" +
                        "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id)),'')  \n" +
                        "                   					END)  \n" +
                        "                   				ELSE rla.description END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = (CASE WHEN pOldNoOfRows != pNewNoOfRows  THEN  \n" +
                        "                   					(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                        "                   						((c.mountingTypeID = 3 AND (!rl.numOfRows OR rl.numOfRows != pNewNoOfRows))  \n" +
                        "                   							OR (c.mountingTypeID = 2 AND !rl.numOfRows AND rl.numOfRows != pNewNoOfRows)  \n" +
                        "                   						 ) THEN  \n" +
                        "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),''),  \n" +
                        "                   							'\n', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id))  \n" +
                        "                   					 ELSE  \n" +
                        "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),'')  \n" +
                        "                   					  END)  \n" +
                        "                   				ELSE rla.description END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "                   	  /* Update BOM set UOM Mismatch error description Detail where part is used where part is added */  \n" +
                        "                   	SELECT unitName INTO @oldUOMName FROM uoms WHERE id = pOldUOM;  \n" +
                        "                   	SELECT unitName INTO @newUOMName FROM uoms WHERE id = pNewUOM;  \n" +
                        "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                        "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                        "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                        "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                        "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                        "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                        "                   	   SET  \n" +
                        "                   		rla.description = ( CASE WHEN pOldUOM != pNewUOM  THEN  \n" +
                        "                   					(CASE WHEN c.uomClassID != ul.measurementTypeID THEN  \n" +
                        "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName)),''),  \n" +
                        "                   							'\n', REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@newUOMName))  \n" +
                        "                   					ELSE  \n" +
                        "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName)),'')  \n" +
                        "                   					END)  \n" +
                        "                   				ELSE rla.description END)  \n" +
                        "                   	  WHERE rla.isDeleted = 0;  \n" +
                        "  \n" +
                        "  \n" +
                        "END;  \n" +
                    /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                    "DROP FUNCTION IF EXISTS `fun_createBOMErrorMsgByErrorCodeandLineID` ;  \n" +
                    "CREATE FUNCTION `fun_createBOMErrorMsgByErrorCodeandLineID`(  \n" +
                    "	pErrorCode VARCHAR(100),  \n" +
                    "	pRFQLineItemAlternatePartID INT  \n" +
                    ") RETURNS VARCHAR(2000)  \n" +
                    "BEGIN  \n" +
                    "DECLARE vErrorMsg VARCHAR(2000);  \n" +
                    "DECLARE vErrorCode VARCHAR(2000);  \n" +
                    "DECLARE vMPN VARCHAR(200);  \n" +
                    "DECLARE vMFR VARCHAR(200);  \n" +
                    "DECLARE vSPN VARCHAR(200);  \n" +
                    "DECLARE vSupplierPN VARCHAR(200);  \n" +
                    "DECLARE vCPN VARCHAR(200);  \n" +
                    "DECLARE vCPNRev VARCHAR(200);  \n" +
                    "DECLARE vPartPIN VARCHAR(200);  \n" +
                    "DECLARE vPartRow VARCHAR(200);  \n" +
                    "DECLARE vLinePin VARCHAR(200);  \n" +
                    "DECLARE vLineRow VARCHAR(200);  \n" +
                    "DECLARE vPartUOM VARCHAR(200);  \n" +
                    "DECLARE vLineUOM VARCHAR(200);  \n" +
                    "DECLARE vPartStatus VARCHAR(200);  \n" +
                    "  \n" +
                    "	SELECT description,errorcode INTO vErrorMsg,vErrorCode FROM rfq_lineitems_errorcode  \n" +
                    "	WHERE errorcode = pErrorCode;  \n" +
                    "	SELECT rla.mfgPN, rla.mfgCode, rla.distPN, rla.distributor, rl.custPN, rl.customerRev,c.noOfPosition, rl.numOfPosition,  \n" +
                    "		c.noOfRows, rl.numOfRows, uc.unitName, ul.unitName, cps.name  \n" +
                    "		INTO  \n" +
                    "		vMPN, vMFR, vSPN, vSupplierPN, vCPN, vCPNRev, vPartPIN, vLinePin, vPartRow,  vLineRow, vPartUOM, vLineUOM, vPartStatus  \n" +
                    "	FROM rfq_lineitems_alternatepart rla  \n" +
                    "	INNER JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "	INNER JOIN component c ON c.id = rla.mfgPNID  \n" +
                    "	INNER JOIN uoms uc ON uc.id = c.uom  \n" +
                    "	INNER JOIN uoms ul ON ul.id = rl.uomID  \n" +
                    "	INNER JOIN component_partstatusmst cps ON cps.id = c.partStatus  \n" +
                    "	WHERE rla.id = pRFQLineItemAlternatePartID;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% MFR %>\", IFNULL(vMFR,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% MPN %>\", IFNULL(vMPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% CPN %>\", IFNULL(vCPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% CPN Rev %>\", IFNULL(vCPNRev,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% Supplier %>\", IFNULL(vSupplierPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% SPN %>\", IFNULL(vSPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% Part No. of Rows %>\", IFNULL(vPartRow,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% No. of Rows %>\", IFNULL(vLineRow,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% UOM %>\", IFNULL(vLineUOM,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% Part UOM %>\", IFNULL(vPartUOM,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% Part Status %>\", IFNULL(vPartStatus,'')) INTO vErrorMsg;  \n" +
                    "	#SELECT REPLACE(vErrorMsg, \"<% Mounting Types %>\", IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
                    "	#SELECT REPLACE(vErrorMsg, \"<% Functional Types %>\", IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% Pin Per REF DES ON PCB %>\", IFNULL(vLinePin,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, \"<% Part Pin COUNT %>\", IFNULL(vPartPIN,'')) INTO vErrorMsg;  \n" +
                    "  \n" +
                    "	RETURN CONCAT(vErrorCode,':',vErrorMsg);  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                    
                    /* **************************** Add Script Version -> 28-07-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5082,'2.00','V1','User Story 22675: In Part master if we have any property which we will used in BOM validation. but on change of that attribute/Field we not give auto effect in BOM. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                    break; 
                    case 5082:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 29-07-2021 *********************************** */
                    "ALTER TABLE salesshippingmst ADD COLUMN revisedRequestedDockDate DATE,ADD COLUMN revisedRequestedShipDate DATE,ADD COLUMN revisedRequestedPromisedDate DATE;  \n" +
                    "ALTER TABLE salesshippingmst ADD COLUMN isAgreeToShip TINYINT DEFAULT 0;  \n" +
                     "ALTER TABLE employees ADD COLUMN defaultSalesOrderListTabID INT;  \n" +
                    /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5083,'2.00','V1',' salesshippingmst and employee table alter - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                    break;
        case 5083:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesOrderReleaseLineDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderReleaseLineDetails`(  \n" +
                "IN pSalesOrderDetID  INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "          SELECT ss.shippingID,  \n" +
                "                 ss.qty,  \n" +
                "                 IFNULL(ss.unitMeaser,'EA') unitMeaser,  \n" +
                "                 ss.shippingDate,  \n" +
                "                 ss.shippingAddressID,  \n" +
                "                 ss.description,  \n" +
                "                 ss.priority,  \n" +
                "                 ss.packingSlipNo,  \n" +
                "                 ss.invoiceNo,  \n" +
                "                 ss.releaseNotes,  \n" +
                "                 ss.releaseNumber,  \n" +
                "                 ss.requestedDockDate,  \n" +
                "                 ss.carrierID,  \n" +
                "                 ss.carrierAccountNumber,  \n" +
                "                 ss.promisedShipDate,  \n" +
                "                 ss.shippingMethodID,  \n" +
                "                 ss.revisedRequestedDockDate,  \n" +
                "                 ss.revisedRequestedShipDate,  \n" +
                "                 ss.revisedRequestedPromisedDate,  \n" +
                "                 ss.isAgreeToShip,  \n" +
                "                 1 AS isShippingDateConfirm,  \n" +
                "                 1 AS isrequestedDockDateConfirm,  \n" +
                "                 1 AS promisedShipDateConfirm,  \n" +
                "                 1 AS isRevisedShippingDateConfirm,  \n" +
                "                 1 AS isrevisedRequestedDockDateConfirm,  \n" +
                "                 1 AS revisedPromisedShipDateConfirm,  \n" +
                "                 ss.customerReleaseLine,  \n" +
                "                 (SELECT SUM(cpd.shipQty) FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID WHERE cpd.shippingId=ss.shippingID AND cpd.isdeleted=0 AND cp.transType='P') AS shippedQty  \n" +
                "                 FROM salesshippingmst ss  \n" +
                "                 WHERE ss.sDetID= pSalesOrderDetID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesshippingmst` AFTER UPDATE ON `salesshippingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.sDetID AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty) INTO @qty FROM salesshippingmst ss WHERE ss.sDetID=new.sDetID AND ss.isdeleted=0;  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,1)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.sDetID;  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.sDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=new.sDetID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=new.sDetID;  \n" +
                "  \n" +
                "          IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'RELEASEQTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDSHIPDATE',CAST(DATE_FORMAT(OLD.shippingDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.shippingDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'PROMISEDSHIPDATE',CAST(DATE_FORMAT(OLD.promisedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.promisedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.requestedDockDate,0) != IFNULL(NEW.requestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDDOCKDATE',CAST(DATE_FORMAT(OLD.requestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.requestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedDockDate,0) != IFNULL(NEW.revisedRequestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDDOCKDATE',CAST(DATE_FORMAT(OLD.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedShipDate,0) != IFNULL(NEW.revisedRequestedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDSHIPDATE',CAST(DATE_FORMAT(OLD.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedPromisedDate,0) != IFNULL(NEW.revisedRequestedPromisedDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REVISEDPROMISEDDATE',CAST(DATE_FORMAT(OLD.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.isAgreeToShip,0) != IFNULL(NEW.isAgreeToShip,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'AGREETOSHIP',CAST(CASE WHEN OLD.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'SHIPPINGMETHODID',CAST( fun_getGenericCategoryNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERID',CAST( fun_getGenericCategoryNameByID(OLD.carrierID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERACCOUNTNUMBER',CAST( OLD.carrierAccountNumber AS CHAR),  \n" +
                "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "	IFNULL(sd.custPOLineNumber ,1)   custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        ss.releaseNotes,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "         c.mfgpn,  \n" +
                "         c.mfgpndescription,  \n" +
                "         c.pidcode,  \n" +
                "         fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "         c.nickName,  \n" +
                "         c.mfgcodeID,  \n" +
                "         fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "	(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "	fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "	fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "	fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "	CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "	(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
                "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
                "		AND cpd.isdeleted=0) shippedQty ,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "		ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "        (SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "        sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID, sd.refRFQGroupID, sd.refRFQQtyTurnTimeID  ,  \n" +
                "        IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "						c.category partCategory  \n" +
                "        FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "  \n" +
                "WHERE sd.id=psalesorderDetID  \n" +
                "AND  sd.isDeleted = 0 AND  \n" +
                "(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
                "	ss.qty > (SELECT  \n" +
                "	IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
                "		AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  \n" +
                "		SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
                "ELSE  \n" +
                "	ss.qty=ss.qty  \n" +
                "END)  \n" +
                "AND ss.isdeleted=0  \n" +
                "ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "-- all list of shipping line with other charges  \n" +
                "SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		NULL releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "                  pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        refSODetID,  \n" +
                "        refSOReleaseLineID,  \n" +
                "        frequency  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			NULL releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 sd.refSODetID,  \n" +
                "			 sd.refSOReleaseLineID,  \n" +
                "			 sd.frequency,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "			LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderShippingReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderShippingReportDetails`(  \n" +
                "	IN pSDetID INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	-- Get shiiping details  \n" +
                "	SELECT sh.sDetID AS sDetID,sh.shippingAddressID,  \n" +
                "	sh.qty,  \n" +
                "	CASE WHEN sh.isAgreeToShip=1 THEN sh.revisedRequestedShipDate ELSE sh.shippingDate END shippingDate,  \n" +
                "	gctsm.gencCategoryName AS shippingMethod,  \n" +
                "	CASE WHEN sh.isAgreeToShip=1 THEN sh.revisedRequestedPromisedDate ELSE sh.promisedShipDate END promisedShipDate,  \n" +
                "	sh.description,  \n" +
                "	sh.releaseNotes,  \n" +
                "	CASE WHEN sh.isAgreeToShip=1 THEN sh.revisedRequestedDockDate ELSE  sh.requestedDockDate END requestedDockDate,  \n" +
                "	IFNULL(fun_getUOMAbbreviationByID(sd.uom),'EA') uom,  \n" +
                "	sh.customerReleaseLine,  \n" +
                "	 CASE  \n" +
                "        WHEN sh.shippingAddressID IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT(  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sh.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "	) END AS shippingAddress  \n" +
                "        FROM salesshippingmst sh  \n" +
                "        LEFT JOIN salesorderdet sd ON sd.id=sh.sDetID AND sd.isDeleted=0 AND sd.partCategory=3  \n" +
                "        LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sh.shippingMethodID AND gctsm.deletedAt IS NULL)  \n" +
                "        WHERE sh.deletedAt IS NULL AND sh.sDetID = pSDetID ;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSOCompletedPercentage` ;  \n" +
                "CREATE FUNCTION `fun_getSOCompletedPercentage`(  \n" +
                "	pSalesOrderID INT  \n" +
                ") RETURNS DECIMAL(5,2)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_totalCount INT;  \n" +
                "	DECLARE v_totalCompletedCount INT;  \n" +
                "	DECLARE v_percentage DECIMAL(5,2);  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO  v_totalCompletedCount FROM salesorderdet WHERE refSalesOrderID=pSalesOrderID AND isdeleted=0 AND salesOrderDetStatus<>1;  \n" +
                "  \n" +
                "	SET v_percentage=(v_totalCompletedCount * 100/v_totalCount);  \n" +
                "  \n" +
                "	SET v_percentage=CASE WHEN IFNULL(v_percentage,0)>100 THEN 100 ELSE IFNULL(v_percentage,0) END;  \n" +
                "  \n" +
                "	RETURN v_percentage;  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5084,'2.00','V1',' Alter procedure Sproc_getSalesOrderReleaseLineDetails - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5084:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "	/*===>this logic is added to compare invert rohs category*/  \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "		IF pRohsMainCategoryID = -1 THEN  \n" +
                "			SET vRohsMainCategoryID = -2;  \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "			SET vRohsMainCategoryID = -1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	/*<===this logic is added to compare invert rohs category*/  \n" +
                "	/* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "	IF(pstrictCustomPart = 1)THEN  \n" +
                "		SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "			AND c.category != 3  \n" +
                "			AND c.iscustom = 1  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
                "		SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,					    c.rev,  \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
                "					c.category,							c.imageURL,								c.documentPath,  \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                "					c.value,							c.partPackage,							c.powerRating,  \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                "					c.pitchMating,        				c.length,								c.width,  \n" +
                "					c.height,        					c.voltage,								c.weight,  \n" +
                "					c.feature,        					c.color,								c.partStatus,  \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,							r.name AS rohsName,  \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                "  \n" +
                "		select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          		c.rev,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                "					c.tolerance,				c.category,							c.imageURL,  \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                "					c.width,            		c.height,							c.voltage,  \n" +
                "					c.weight,            		c.feature,            				c.color,  \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                "					c.packagingID,				c.packaging,  \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                "					r.rohsIcon,					r.name AS rohsName,  \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,  \n" +
                "					vu.mfgPN supplierPartMfgPn,  \n" +
                "					vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5085,'2.00','V1','User Story 35563: UMID Management: Modification in Shelf Life Days Validation - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;            
            case 5085:
                allDbChangesArray.push(
                /* **************************** New Script -> 29-07-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_SyncComponentDatasheet`;  \n" +
                "CREATE PROCEDURE `Sproc_SyncComponentDatasheet`()  \n" +
                "BEGIN  \n" +
                "	select b.id,b.datasheetName  \n" +
                "			,a.datasheetURL  \n" +
                "            ,c.documentPath  \n" +
                "	from component_datasheets as b  \n" +
                "		left join (select c.id, refComponentID, datasheetURL from  \n" +
                "						component_datasheets c  \n" +
                "					where c.isDeleted = 0 and c.datasheetURL like '%http%'  \n" +
                "                    ) as a  \n" +
                "			on a.refComponentID = b.refComponentID and a.datasheetURL like CONCAT('%', b.datasheetName,'%')  \n" +
                "		left join component c on c.id = a.refComponentID  \n" +
                "	where b.isDeleted = 0 and a.datasheetURL is not null and b.datasheetURL is not null  \n" +
                "    and b.datasheetURL not like '%http%'  -- and b.refComponentID = 214125  \n" +
                "	group by b.id,b.datasheetName,a.datasheetURL,c.documentPath;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5086,'2.00','V1',' Bug 35001: Data Sheet is not getting saved on Server when user do ADD PART using Cloud API. - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
           case 5086:
              allDbChangesArray.push(
              /* **************************** New Script -> 0-06-2021 *********************************** */
	            "DROP PROCEDURE IF EXISTS Sproc_ValidateScanChangeReel;  \n" +
	            "CREATE PROCEDURE `Sproc_ValidateScanChangeReel`(  \n" +
	            "	IN pOldUMID VARCHAR(15),  \n" +
	            "	IN pfeederLocation VARCHAR(1000),  \n" +
	            "	IN pNewUMID VARCHAR(15),  \n" +
	            "	IN ppartID INT,  \n" +
	            "	IN pwoOpEqpID INT,  \n" +
	            "	IN pwoOpID INT,  \n" +
	            "	IN pwoTransID INT,  \n" +
	            "	IN pemployeeId INT,  \n" +
	            "	IN pcheckKitAllocation INT,  \n" +
	            "	IN pverificationType VARCHAR(255),  \n" +
	            "	IN pisVerify INT,  \n" +
	            "	IN ptransactionType VARCHAR(1),  \n" +
	            "	IN preelChangeType VARCHAR(100),  \n" +
	            "	IN ptoBinID INT,  \n" +
	            "	IN pisConfirmed INT,  \n" +
	            "	IN pwoID INT,  \n" +
	            "	IN pCreatedBy VARCHAR(255),  \n" +
	            "    IN pApprovedBy INT,  \n" +
	            "    IN pApprovedReason VARCHAR(500)  \n" +
	            ")  \n" +
	            "BEGIN  \n" +
	            "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
	            "	DECLARE temp_umid_comp_id INT;  \n" +
	            "	DECLARE temp_comp_uom INT;  \n" +
	            "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
	            "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
	            "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
	            "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
	            "	DECLARE temp_eqpFeederID INT;  \n" +
	            "	DECLARE oldUMIDVerified INT DEFAULT 0;  \n" +
	            "	DECLARE newUMIDVerified INT DEFAULT 0;  \n" +
	            "	DECLARE valid_umid_transfer INT  DEFAULT 0;  \n" +
	            "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);  \n" +
	            "	DECLARE temp_last_inserted_umid_id INT ;  \n" +
	            "	DECLARE temp_salesOrderDetID VARCHAR(100);  \n" +
	            "	SET temp_umid_comp_id  = NULL;  \n" +
	            "	SET temp_umid_pidcode  = NULL;  \n" +
	            "	SET temp_umid_mfgPN  = NULL;  \n" +
	            "	SET temp_all_mfg_id_lineID = NULL;  \n" +
	            "	-- Step 1 - Validate Old UMID  \n" +
	            "		-- Step 1.1 - check with zero out  \n" +
	            "			-- empty bin and empty wh  \n" +
	            "			-- update table with reelStatus \"R\"  \n" +
	            "			-- add new umid with same feeder with reelStatus \"P\"  \n" +
	            "			-- Step 2 - check with umid & Feeder validate  \n" +
	            "		-- step 1.2 - finish job case  \n" +
	            "			-- no new umid in this case.  \n" +
	            "			-- update umid status \"In Transist\"  \n" +
	            "			-- update table with reelStatus \"R\"  \n" +
	            "		-- step 1.3 - transfer material case  \n" +
	            "			-- get new bin and wh details based on new ui.  \n" +
	            "			-- update umid status \"In Transist\"  \n" +
	            "			-- update table with reelStatus \"R\"  \n" +
	            "			-- add new umid with same feeder with reelStatus \"P\"  \n" +
	            "			-- Step 2 - check with umid & feeder validate  \n" +
	            "	-- Step 2 - check with umid validate  \n" +
	            "	-- Stpe 3 -- check for feeder validation  \n" +
	            "  \n" +
	            "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
	            "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
	            "	-- create temporary table for error  \n" +
	            "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
	            "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
	            "	(  \n" +
	            "	     errorText VARCHAR(2000),  \n" +
	            "	     isFeederError INT,  \n" +
	            "	     isUMIDError INT,  \n" +
	            "	     isConfirmation INT,  \n" +
	            "	     isMessage INT,  \n" +
	            "	     isInformation INT,  \n" +
	            "	     stringText1 VARCHAR(1000),  \n" +
	            "	     stringText2 VARCHAR(1000),  \n" +
	            "	     stringText3 VARCHAR(1000)  \n" +
	            "	);  \n" +
	            "  \n" +
	            "  \n" +
	            "	-- IF(pOldUMID IS NOT NULL AND pfeederLocation IS NOT NULL AND pNewUMID IS NOT NULL) THEN  \n" +
	            "	-- 		CALL Sproc_ValidateScanFeederFirst (pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID,pwoOpID,pwoTransID,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pCreatedBy);  \n" +
	            "	-- ELSE  \n" +
	            "			DROP TEMPORARY TABLE IF EXISTS temp_old_umid_details;  \n" +
	            "			CREATE TEMPORARY TABLE temp_old_umid_details AS  \n" +
	            "			SELECT c.id, c.PIDCode, c.mfgPN,  \n" +
	            "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode,  \n" +
	            "			c.restrictUsePermanently AS RestrictFromPart,  \n" +
	            "			c.packagingGroupId,  \n" +
	            "			c.rev AS rev,  \n" +
	            "			c.imageURL AS imageURL,  \n" +
	            "			c.mfgPNDescription AS mfgPNDescription,  \n" +
	            "			c.roHSStatusID,  \n" +
	            "			c.alertExpiryDays,  \n" +
	            "			c.umidVerificationRequire,  \n" +
	            "			c.uom,  \n" +
	            "			c.isCPN,  \n" +
	            "			c.isCustom,  \n" +
	            "			rr.name rohsStatus,  \n" +
	            "			rr.rohsIcon rohsIcon,  \n" +
	            "			css.id AS refsidid,  \n" +
	            "			css.binID AS binID,  \n" +
	            "			css.pkgQty AS pkgQty,  \n" +
	            "			css.uid,  \n" +
	            "			fun_getUnitNameByID(c.uom) unitName,  \n" +
	            "			css.isUMIDRestrict AS RestrictFromUMID,  \n" +
	            "			css.expiryDate,  \n" +
	            "			1 isActualComponent,  \n" +
	            "			0 isPackagingAlias,  \n" +
	            "			wtud.eqpFeederID,  \n" +
	            "			(SELECT woefd.feederLocation FROM workorder_operation_equipment_feeder_details woefd WHERE wtud.eqpFeederID=woefd.id AND deletedAt IS NULL) feederLocation,  \n" +
	            "			(SELECT woefd.isActive FROM workorder_operation_equipment_feeder_details woefd WHERE wtud.eqpFeederID=woefd.id AND deletedAt IS NULL) feederActiveStatus,  \n" +
	            "			wtud.reelStatus,  \n" +
	            "			(SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL AND id  \n" +
	            "					IN (SELECT rfqLineItemID FROM workorder_operation_feeder_lineitem_details WHERE deletedAt IS NULL  \n" +
	            "					AND eqpFeederID IN (wtud.eqpFeederID))  \n" +
	            "				) AS refDesig,  \n" +
	            "			(SELECT GROUP_CONCAT(IFNULL(wol.rfqLineItemID,'')) FROM workorder_operation_feeder_lineitem_details wol  \n" +
	            "				WHERE eqpFeederID IN (wtud.eqpFeederID) AND wol.deletedAt IS NULL) AS rfqLineItemsID  \n" +
	            "		FROM component c  \n" +
	            "		LEFT JOIN workorder_trans_umid_details wtud  \n" +
	            "			ON (wtud.mfgPNID = c.id AND wtud.deletedAt IS NULL)  \n" +
	            "		-- AND wtud.isVerified=1  \n" +
	            "		LEFT JOIN component_sid_stock css  \n" +
	            "			ON (css.id = wtud.refsidid AND css.id = wtud.refsidid AND css.deletedAt IS NULL  )  \n" +
	            "		LEFT JOIN rfq_rohsmst rr  \n" +
	            "			ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)  \n" +
	            "		WHERE css.uid = pOldUMID  \n" +
	            "		AND wtud.reelStatus=\"P\"  \n" +
	            "		AND wtud.transactionType=ptransactionType  \n" +
	            "		AND wtud.woOPID=pwoOpID  \n" +
	            "		AND c.deletedAt IS NULL;  \n" +
	            "  \n" +
	            "		IF((SELECT COUNT(1) FROM temp_old_umid_details) > 0) THEN  \n" +
	            "			SELECT id, pidcode, uom, mfgPN, isCPN, eqpFeederID, rfqLineItemsID  \n" +
	            "			INTO temp_umid_comp_id, temp_umid_pidcode, temp_comp_uom, temp_umid_mfgPN, temp_comp_is_cpn, temp_eqpFeederID, temp_rfqLineItemsID FROM temp_old_umid_details;  \n" +
	            "			SET oldUMIDVerified=1;  \n" +
	            "			IF(pOldUMID IS NOT NULL AND (pfeederLocation IS NOT NULL OR pNewUMID IS NOT NULL)) THEN  \n" +
	            "				-- select 'CALL Sproc_ValidateScanFeederFirst (',pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy,');';  \n" +
	            "				-- CALL Sproc_ValidateScanFeederFirst (pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy);  \n" +
	            "				CALL Sproc_ValidateScanUMIDFirst (pNewUMID, pfeederLocation,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy, pApprovedBy, pApprovedReason);  \n" +
	            "			END IF;  \n" +
	            "			-- SET valid_umid_transfer = 1;  \n" +
	            "		ELSE  \n" +
	            "			-- INVALID_OLD_UMID  \n" +
	            "			SET result = fun_checkAndInsertError('UMID017', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
	            "		END IF;  \n" +
	            "		IF(pOldUMID IS NOT NULL AND (pfeederLocation IS NULL AND pNewUMID IS NULL)) THEN  \n" +
	            "			INSERT INTO `uid_verification_history`(  \n" +
	            "				`scanString1`,		`scanString2`,  \n" +
	            "				`string1PartID`,	`scanString1MFG`,  \n" +
	            "				`scanString1MFGPNID`,	`string2PartID`,  \n" +
	            "				`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
	            "				`status`,  \n" +
	            "				`isDeleted`,		`createdBy`,  \n" +
	            "				`createdAt`,       	`woTransID`,  \n" +
	            "				`woOpEqpID`, 		`verificationType`)  \n" +
	            "			VALUES (  \n" +
	            "				pOldUMID,						CASE WHEN (pNewUMID IS NULL) THEN '' ELSE pNewUMID END,  \n" +
	            "				temp_umid_comp_id,  					fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),  \n" +
	            "				temp_umid_mfgPN,					NULL,  \n" +
	            "				NULL, 							NULL,  \n" +
	            "				CASE WHEN (oldUMIDVerified = 1 OR newUMIDVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
	            "				0,							IFNULL(pCreatedBy,''),  \n" +
	            "				fun_DatetimetoUTCDateTime(),        			pwoTransID,  \n" +
	            "				pwoOpEqpID,						pverificationType  \n" +
	            "			);  \n" +
	            "  \n" +
	            "  \n" +
	            "			#0. return history of umid transfer  \n" +
	            "			IF(valid_umid_transfer = 0) THEN  \n" +
	            "				SELECT id FROM kit_allocation WHERE 1=0;  \n" +
	            "			END IF;  \n" +
	            "			#1. return history of verification  \n" +
	            "			SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
	            "			#2. return error  \n" +
	            "			SELECT * FROM temp_scan_error;  \n" +
	            "			#3. return umid details  \n" +
	            "			-- IF (uidVerified=1) THEN  \n" +
	            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
	            "			SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
	            "			SELECT * FROM temp_umid_details;  \n" +
	            "			-- END IF;  \n" +
	            "  \n" +
	            "			#5. return feeder details  \n" +
	            "			-- IF (feederVerified=1) THEN  \n" +
	            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
	            "			SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
	            "			SELECT * FROM temp_feeder_details;  \n" +
	            "			-- END IF;  \n" +
	            "  \n" +
	            "			#6. return allocated UMID details  \n" +
	            "			-- IF (pfeederLocation IS NULL and pNewUMID IS not NULL) THEN  \n" +
	            "			-- 	SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
	            "			-- 	WHERE wsd.deletedAt IS NULL AND wsd.woID IN (SELECT woop.woID FROM workorder_operation woop  \n" +
	            "			-- 	WHERE woop.woOPID=pwoOpID AND woop.deletedAt IS NULL);  \n" +
	            "  \n" +
	            "			-- 	SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
	            "			-- 	AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
	            "			-- 	WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
	            "			-- 	CALL Sproc_GetStockAllocateList (temp_salesOrderDetID,ppartID,temp_all_mfg_id_lineID,temp_comp_uom,\"AllocatedStock\");  \n" +
	            "			-- ELSE  \n" +
	            "			-- 	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
	            "			-- 	WHERE 1=0;  \n" +
	            "			-- END IF;  \n" +
	            "			#6. return allocated UMID details  \n" +
	            "			IF (pOldUMID IS NOT NULL AND oldUMIDVerified=1) THEN  \n" +
	            "				-- select '1';  \n" +
	            "				SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
	            "				WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;  \n" +
	            "  \n" +
	            "				IF (temp_comp_is_cpn = 0) THEN  \n" +
	            "					SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
	            "					FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
	            "					AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
	            "					WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
	            "				ELSE  \n" +
	            "					SELECT GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
	            "					FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
	            "					AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
	            "					WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
	            "				END IF;  \n" +
	            "  \n" +
	            "				-- select concat('CALL Sproc_GetStockAllocateList (',temp_salesOrderDetID,',',ppartID,',',temp_all_mfg_id_lineID,',',temp_comp_uom,',',CAST(temp_rfqLineItemsID AS CHAR(255)),',','AllocatedStock',');');  \n" +
	            "				CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");  \n" +
	            "			ELSE  \n" +
	            "				SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
	            "				WHERE 1=0;  \n" +
	            "			END IF;  \n" +
	            "			#8. return last inserted/updated records for umid transaction  \n" +
	            "			SELECT NULL AS temp_last_inserted_umid_id;  \n" +
	            "			#7. old UMID Details with Feeder Location  \n" +
	            "			SELECT * FROM temp_old_umid_details;  \n" +
	            "		ELSE  \n" +
	            "			SELECT * FROM temp_old_umid_details;  \n" +
	            "		END IF;  \n" +
	            "	 -- END IF;  \n" +
	            "END;  \n" +
              /* **************************** Add Script Version -> 0-06-2021 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (5087,'2.00','V1','Sproc_ValidateScanChangeReel  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
              );
            break;
            case 5087:
  allDbChangesArray.push(
  /* **************************** New Script -> 29-07-2021 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_salesordermst` ;  \n" +
      "CREATE PROCEDURE `Sproc_checkDelete_salesordermst`(  \n" +
      "	IN tableName VARCHAR(255),  \n" +
      "	IN IDs LONGTEXT,  \n" +
      "	IN deletedBy INT,  \n" +
      "	IN entityID VARCHAR(255),  \n" +
      "	IN refrenceIDs LONGTEXT,  \n" +
      "	IN countList INT,  \n" +
      "    IN pRoleID INT  \n" +
      "    )  \n" +
      "BEGIN  \n" +
      "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
      "BEGIN  \n" +
      "	ROLLBACK;  \n" +
      "	RESIGNAL;  \n" +
      "END;  \n" +
      "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
      "BEGIN  \n" +
      "	ROLLBACK;  \n" +
      "	RESIGNAL;  \n" +
      "END;  \n" +
      "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
      "	-- delete sales order master if reference ID is not null  \n" +
      "	-- refernece ID is equal to salesOrderDetID  \n" +
      "	IF(IDs <> '') THEN  \n" +
      "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as  \n" +
      "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_salesorder_details\" else \"\" end as msg FROM workorder_salesorder_details WHERE deletedAt IS NULL AND salesOrderDetailID IN(',IDs,') LIMIT 1)  \n" +
      "			  UNION ALL  \n" +
      "			 (select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg FROM salesorderdet where deletedAt IS NULL AND refSODetID IN(',IDs,') LIMIT 1)  \n" +
      "		');  \n" +
      "		PREPARE stmt FROM @SQL;  \n" +
      "		EXECUTE stmt;  \n" +
      "		DEALLOCATE PREPARE stmt;  \n" +
      "  \n" +
      "		IF (countList=FALSE) THEN  \n" +
      "			IF (SELECT SUM(t.cnt) FROM tempSalesOrderMst t)=0 THEN  \n" +
      "			START TRANSACTION;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('  \n" +
      "					UPDATE 	kit_allocation ka  \n" +
      "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
      "						ka.returnUnit = ka.allocatedUnit,  \n" +
      "						ka.returnUOM = ka.allocatedUOM,  \n" +
      "						ka.returnDate = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
      "						ka.updatedBy = ', deletedBy ,',  \n" +
      "						ka.updateByRoleId = ', pRoleID ,',  \n" +
      "						ka.`status` = \"D\",  \n" +
      "						ka.remark = \"Auto Deallocated from ReCalculation\"  \n" +
      "					WHERE 	ka.refSalesOrderDetID IN (', IDs ,')  \n" +
      "							AND ka.`status` = \"A\"  \n" +
      "				');  \n" +
      "				PREPARE stmt1 FROM @SQL1;  \n" +
      "				EXECUTE stmt1;  \n" +
      "				DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl2 = CONCAT('  \n" +
      "					UPDATE 	salesorder_plan_detailsmst  \n" +
      "					SET 	isDeleted = ', 1 ,',  \n" +
      "						deletedAt = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
      "						deletedBy = ', deletedBy ,'  \n" +
      "					WHERE 	salesOrderDetID IN (', IDs ,')  \n" +
      "							AND isDeleted = 0  \n" +
      "				');  \n" +
      "				PREPARE stmt2 FROM @SQL2;  \n" +
      "				EXECUTE stmt2;  \n" +
      "				DEALLOCATE PREPARE stmt2;  \n" +
      "  \n" +
      "				SET @SQl3 = CONCAT('update salesshippingmst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where sDetID  IN(',IDs,') and deletedAt is NULL');  \n" +
      "				PREPARE stmt3 FROM @SQL3;  \n" +
      "				EXECUTE stmt3;  \n" +
      "				DEALLOCATE PREPARE stmt3;  \n" +
      "  \n" +
      "				SET @SQl4 = CONCAT('update salesorderdet set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (id IN(',IDs,')) and deletedAt is NULL');  \n" +
      "				PREPARE stmt4 FROM @SQL4;  \n" +
      "				EXECUTE stmt4;  \n" +
      "				DEALLOCATE PREPARE stmt4;  \n" +
      "  \n" +
      "  \n" +
      "  \n" +
      "  \n" +
      "  \n" +
      "				/* [S] - Add Time line log for delete sales order mst */  \n" +
      "				SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
      "					FROM salesordermst  \n" +
      "				WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
      "  \n" +
      "				SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
      "				SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
      "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
      "				/* [E] - Add Time line log for delete sales order mst */  \n" +
      "  \n" +
      "				SELECT * FROM tempSalesOrderMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
      "			COMMIT;  \n" +
      "			ELSE  \n" +
      "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSalesOrderMst t;  \n" +
      "			END IF;  \n" +
      "		ELSE  \n" +
      "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
      "				FROM tempSalesOrderMst t1  \n" +
      "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
      "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
      "				ORDER BY t2.display_page_name;  \n" +
      "		END IF;  \n" +
      "		DROP TEMPORARY TABLE tempSalesOrderMst;  \n" +
      "	ELSE  \n" +
      "		/* [S] - Add Time line log for delete sales order mst */  \n" +
      "		SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
      "			FROM salesordermst  \n" +
      "		WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
      "  \n" +
      "		SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
      "		SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
      "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
      "		/* [E] - Add Time line log for delete sales order mst */  \n" +
      "		-- Added for sales order master record delete  \n" +
      "		SET @SQl5 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
      "		PREPARE stmt5 FROM @SQl5;  \n" +
      "		EXECUTE stmt5;  \n" +
      "		SELECT \"\" TotalCount ,\"\" AS Message FROM salesordermst WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
      "	END IF;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 29-07-2021 *********************************** */
      "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesshippingmst` ;  \n" +
      "CREATE TRIGGER `Trg_AU_salesshippingmst` AFTER UPDATE ON `salesshippingmst`  \n" +
      "    FOR EACH ROW BEGIN  \n" +
      "  \n" +
      "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
      "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.sDetID AND cp.transType='P';  \n" +
      "  \n" +
      "	SELECT SUM(ss.qty) INTO @qty FROM salesshippingmst ss WHERE ss.sDetID=new.sDetID AND ss.isdeleted=0;  \n" +
      "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,1)) THEN  \n" +
      "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.sDetID;  \n" +
      "		ELSE  \n" +
      "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.sDetID;  \n" +
      "		END IF;  \n" +
      "  \n" +
      "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=new.sDetID AND isdeleted=0;  \n" +
      "  \n" +
      "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=new.sDetID;  \n" +
      "  \n" +
      "          IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'RELEASEQTY',CAST(OLD.qty AS CHAR),  \n" +
      "		CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDSHIPDATE',CAST(DATE_FORMAT(OLD.shippingDate, \"%m/%d/%y\") AS CHAR),  \n" +
      "		CAST(DATE_FORMAT(NEW.shippingDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'PROMISEDSHIPDATE',CAST(DATE_FORMAT(OLD.promisedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
      "		CAST(DATE_FORMAT(NEW.promisedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.requestedDockDate,0) != IFNULL(NEW.requestedDockDate,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDDOCKDATE',CAST(DATE_FORMAT(OLD.requestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
      "		CAST(DATE_FORMAT(NEW.requestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "  \n" +
      "	  IF IFNULL(OLD.isAgreeToShip,0) != IFNULL(NEW.isAgreeToShip,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'AGREETOSHIP',CAST(CASE WHEN OLD.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),  \n" +
      "		CAST(CASE WHEN NEW.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "  \n" +
      "	  IF IFNULL(OLD.revisedRequestedDockDate,0) != IFNULL(NEW.revisedRequestedDockDate,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDDOCKDATE',CAST(DATE_FORMAT(OLD.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
      "		CAST(DATE_FORMAT(NEW.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.revisedRequestedShipDate,0) != IFNULL(NEW.revisedRequestedShipDate,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDSHIPDATE',CAST(DATE_FORMAT(OLD.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
      "		CAST(DATE_FORMAT(NEW.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.revisedRequestedPromisedDate,0) != IFNULL(NEW.revisedRequestedPromisedDate,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REVISEDPROMISEDDATE',CAST(DATE_FORMAT(OLD.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),  \n" +
      "		CAST(DATE_FORMAT(NEW.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'SHIPPINGMETHODID',CAST( fun_getGenericCategoryNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
      "		CAST(fun_getGenericCategoryNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERID',CAST( fun_getGenericCategoryNameByID(OLD.carrierID) AS CHAR),  \n" +
      "		CAST(fun_getGenericCategoryNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "	  IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERACCOUNTNUMBER',CAST( OLD.carrierAccountNumber AS CHAR),  \n" +
      "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	  END IF;  \n" +
      "  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 29-07-2021 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5088,'2.00','V1',' Alter procedure Trg_AU_salesshippingmst - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5088:
    allDbChangesArray.push(
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP FUNCTION IF EXISTS `fun_getCustRefundPaymentStatusTextByValue` ;  \n" +
       "CREATE FUNCTION `fun_getCustRefundPaymentStatusTextByValue`(      \n" +
       "	pRefundStatus VARCHAR(5)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
       "BEGIN      \n" +
       "	DECLARE result VARCHAR(50);      \n" +
       "  \n" +
       "	SELECT (CASE WHEN (pRefundStatus = 'NA') THEN 'Not Applicable'    \n" +
       "		WHEN (pRefundStatus = 'PE') THEN 'Pending Refund'     \n" +
       "		WHEN (pRefundStatus = 'PR') THEN 'Partial Payment Refunded'   \n" +
       "		WHEN (pRefundStatus = 'FR') THEN 'Full Payment Refunded'  \n" +
       "		ELSE '' END) INTO @result;      \n" +
       "  \n" +
       "      	SET result = @result;      \n" +
       "	RETURN result;      \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP FUNCTION IF EXISTS `fun_getCustCreditMemoRefundStatusTextByValue` ;  \n" +
       "CREATE FUNCTION `fun_getCustCreditMemoRefundStatusTextByValue`(      \n" +
       "	pRefundStatus VARCHAR(5)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
       "BEGIN      \n" +
       "	DECLARE result VARCHAR(50);      \n" +
       "  \n" +
       "	SELECT (CASE WHEN (pRefundStatus = 'NA') THEN 'Not Applicable'    \n" +
       "		WHEN (pRefundStatus = 'PE') THEN 'Pending Refund'     \n" +
       "		WHEN (pRefundStatus = 'PR') THEN 'Partial CM Refunded'   \n" +
       "		WHEN (pRefundStatus = 'FR') THEN 'Full CM Refunded'  \n" +
       "		ELSE '' END) INTO @result;      \n" +
       "  \n" +
       "      	SET result = @result;      \n" +
       "	RETURN result;      \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP FUNCTION IF EXISTS `fun_getCustCreditAppliedStatusTextByValue` ;  \n" +
       "CREATE FUNCTION `fun_getCustCreditAppliedStatusTextByValue`(      \n" +
       "	pCMPaymentStatus VARCHAR(5)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
       "BEGIN      \n" +
       "	DECLARE result VARCHAR(50);      \n" +
       "  \n" +
       "	SELECT (CASE WHEN (pCMPaymentStatus = 'PE') THEN 'Unapplied Credit'    \n" +
       "		WHEN (pCMPaymentStatus = 'PR') THEN 'Partial Credit Applied'     \n" +
       "		WHEN (pCMPaymentStatus = 'RE') THEN 'Full Credit Applied'   \n" +
       "		WHEN (pCMPaymentStatus = 'NP') THEN 'No Pending Credit'  \n" +
       "		ELSE '' END) INTO @result;      \n" +
       "  \n" +
       "      	SET result = @result;      \n" +
       "	RETURN result;      \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP FUNCTION IF EXISTS `fun_getPaymentStatusByCustPackingSlipSubStatus` ;  \n" +
       "CREATE FUNCTION `fun_getPaymentStatusByCustPackingSlipSubStatus`(    \n" +
       "	pSubStatus INT,    \n" +
       "    pTransType VARCHAR(2),    \n" +
       "    pPaymentStatus VARCHAR(2),    \n" +
       "    pReturnType VARCHAR(5)    \n" +
       ") RETURNS VARCHAR(100) CHARSET utf8mb4  \n" +
       "BEGIN    \n" +
       "	DECLARE vReturn VARCHAR(100);    \n" +
       "    IF  pReturnType = 'CODE' THEN    \n" +
       "		IF pTransType IN ( 'I' ,'P') THEN    \n" +
       "			SELECT CASE	WHEN (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) AND pPaymentStatus='PE' THEN 'NI'      \n" +
       "					WHEN pSubStatus IN (2,3) AND pPaymentStatus='PE' THEN 'WP'      \n" +
       "					WHEN pPaymentStatus='PR' THEN 'PR'      \n" +
       "					WHEN pPaymentStatus='RE'THEN 'RE'      \n" +
       "                    WHEN (pSubStatus IS NULL OR pSubStatus = '') AND pTransType = 'P'  THEN 'PEN'    \n" +
       "				   ELSE '' END AS paymentStatusCode INTO vReturn;    \n" +
       "		ELSEIF pTransType = 'C' THEN    \n" +
       "			SELECT (CASE WHEN	pPaymentStatus='PE' THEN 'UC'      \n" +
       "						WHEN	pPaymentStatus='PR' THEN 'PCA'      \n" +
       "						WHEN	pPaymentStatus='RE' THEN 'FCA'     \n" +
       "						ELSE '' END)   AS creditAppliedStatus INTO vReturn;    \n" +
       "		END IF;    \n" +
       "    ELSE     \n" +
       "		IF pTransType IN ( 'I' ,'P') THEN    \n" +
       "			SELECT CASE	WHEN (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) AND pPaymentStatus='PE' THEN 'Not Invoiced'      \n" +
       "					WHEN pSubStatus IN (2,3) AND pPaymentStatus='PE' THEN 'Waiting For Payment'      \n" +
       "					WHEN pPaymentStatus='PR' THEN 'Partial Payment Received'      \n" +
       "					WHEN pPaymentStatus='RE'THEN 'Payment Received'      \n" +
       "                    WHEN (pSubStatus IS NULL OR pSubStatus = '') AND pTransType = 'P'  THEN 'Pending'    \n" +
       "				   ELSE '' END AS paymentStatusCode INTO vReturn;    \n" +
       "		ELSEIF pTransType = 'C' THEN    \n" +
       "			SELECT (CASE WHEN	pPaymentStatus='PE' THEN 'Unapplied Credit'      \n" +
       "						WHEN	pPaymentStatus='PR' THEN 'Partial Credit Applied'      \n" +
       "						WHEN	pPaymentStatus='RE' THEN 'Full Credit Applied'  \n" +
       "						WHEN	pPaymentStatus='NP' THEN 'No Pending Credit'     \n" +
       "						ELSE '' END)   AS creditAppliedStatus INTO vReturn;    \n" +
       "		END IF;    \n" +
       "    END IF;    \n" +
       "    RETURN vReturn;    \n" +
       "END;  \n" +
    /* **************************** Add Script Version -> 29-07-2021 *********************************** */
    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
    "VALUES (5089,'2.00','V1',' payment invoice functions  - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
    );
   break;
   case 5089:
    allDbChangesArray.push(
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
   "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`   \n" +
   "    FOR EACH ROW BEGIN      \n" +
   "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";      \n" +
   "	DECLARE vOldval LONGTEXT DEFAULT '';      \n" +
   "	DECLARE vNewval LONGTEXT DEFAULT '';      \n" +
   "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
   "	DECLARE v_TimeZone VARCHAR(50);      \n" +
   "  \n" +
   "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
   "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
   "  \n" +
   "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN      \n" +
   "        INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"      \n" +
   "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"      \n" +
   "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,      \n" +
   "					NEW.paymentNumber,								OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"      \n" +
   "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"      \n" +
   "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"      \n" +
   "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),      \n" +
   "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	END IF;      \n" +
   "  \n" +
   "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"    \n" +
   "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"    \n" +
   "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"    \n" +
   "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),    \n" +
   "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	END IF;    \n" +
   "  \n" +
   "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN      \n" +
   "		SELECT IFNULL(gencCategoryName, '') INTO vOldval      \n" +
   "		  FROM genericcategory      \n" +
   "		 WHERE gencCategoryID = OLD.paymentType      \n" +
   "		 LIMIT 1;      \n" +
   "  \n" +
   "		SELECT IFNULL(gencCategoryName, '') INTO vNewval      \n" +
   "		  FROM genericcategory      \n" +
   "		 WHERE gencCategoryID = NEW.paymentType      \n" +
   "		 LIMIT 1;      \n" +
   "  \n" +
   "         INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					\"Payment Method\",								vOldval,      \n" +
   "					vNewval,									OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 		(vTableName,									NEW.id,      \n" +
   "					\"Account Reference\",								OLD.accountReference,      \n" +
   "					NEW.accountReference,								OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,   \n" +
   "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
   "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,      \n" +
   "					NEW.bankAccountNo,								OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,									NEW.id,      \n" +
   "					\"Bank Name\",								OLD.bankName,      \n" +
   "					NEW.bankName,								OLD.updatedAt,      \n" +
   "					OLD.updatedBy,								OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;    \n" +
   "  \n" +
   "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					\"Comments\",									OLD.remark,      \n" +
   "					NEW.remark,									OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),      \n" +
   "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	END IF;    \n" +
   "  \n" +
   "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "			 VALUES 	(vTableName,									NEW.id,      \n" +
   "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),      \n" +
   "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	END IF;    \n" +
   "  \n" +
   "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN      \n" +
   "		IF NEW.isDeleted = TRUE THEN      \n" +
   "			SET vNewval = 'Deleted';      \n" +
   "		ELSEIF NEW.isDeleted = FALSE THEN      \n" +
   "			SET vNewval = 'Restored';      \n" +
   "		ELSE      \n" +
   "			SET vNewval = 'Unknown action on delete';      \n" +
   "        END IF;      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "                    Colname,									Oldval,      \n" +
   "                    Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,								NEW.id,      \n" +
   "                    vNewval,									NULL,      \n" +
   "                    OLD.paymentNumber,							OLD.updatedAt,      \n" +
   "					OLD.updatedBy,								OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;    \n" +
   "  \n" +
   "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN      \n" +
   "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE      \n" +
   "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)      \n" +
   "				END;      \n" +
   "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE      \n" +
   "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)      \n" +
   "				END;      \n" +
   "        INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
   "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"      \n" +
   "						ELSE \"Payment Status\" END), 						vOldval,      \n" +
   "					vNewval,									OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "  \n" +
   "  \n" +
   "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN      \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "							(tableName,									refPaymentID,      \n" +
   "							Colname,									Oldval,      \n" +
   "							Newval,										createdAt,      \n" +
   "							createdBy,									createByRoleId,      \n" +
   "							updatedAt,									updatedBy,      \n" +
   "							updateByRoleId)      \n" +
   "				  VALUES 	(vTableName,										NEW.id,      \n" +
   "							\"Voided Date\",							'',      \n" +
   "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,      \n" +
   "							OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "							NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "  \n" +
   "  \n" +
   "			  INSERT INTO supplier_invoice_payment_history      \n" +
   "							(tableName,									refPaymentID,      \n" +
   "							Colname,									Oldval,      \n" +
   "							Newval,										createdAt,      \n" +
   "							createdBy,									createByRoleId,      \n" +
   "							updatedAt,									updatedBy,      \n" +
   "							updateByRoleId)      \n" +
   "				  VALUES 	(vTableName,										NEW.id,      \n" +
   "							\"Voided By\",									'',      \n" +
   "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,      \n" +
   "							OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "							NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "		  END IF;      \n" +
   "    END IF;    \n" +
   "  \n" +
   "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"      \n" +
   "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"      \n" +
   "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"      \n" +
   "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,      \n" +
   "					NEW.voidPaymentReason,								OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,      \n" +
   "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN      \n" +
   "        INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'      \n" +
   "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),      \n" +
   "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'      \n" +
   "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'      \n" +
   "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN      \n" +
   "        INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					\"Locked Date\",									'',      \n" +
   "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN      \n" +
   "        INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					\"Locked By\",									'',      \n" +
   "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "    END IF;      \n" +
   "  \n" +
   "  \n" +
   "    IF NEW.refPaymentMode = 'P' THEN      \n" +
   "  \n" +
   "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN      \n" +
   "			IF OLD.mfgcodeID IS NOT NULL THEN      \n" +
   "				SELECT IFNULL(`mfgCode`, '') INTO vOldval      \n" +
   "				FROM mfgcodemst      \n" +
   "				WHERE id =OLD.mfgcodeID      \n" +
   "				ORDER BY id DESC LIMIT 1;      \n" +
   "			END IF;      \n" +
   "			IF NEW.mfgcodeID IS NOT NULL THEN      \n" +
   "				SELECT IFNULL(`mfgCode`, '') INTO vNewval      \n" +
   "				FROM mfgcodemst      \n" +
   "				WHERE id =NEW.mfgcodeID      \n" +
   "				ORDER BY id DESC LIMIT 1;      \n" +
   "			END IF;      \n" +
   "			  INSERT INTO supplier_invoice_payment_history      \n" +
   "						(tableName,									refPaymentID,      \n" +
   "						Colname,									Oldval,      \n" +
   "						Newval,										createdAt,      \n" +
   "						createdBy,									createByRoleId,      \n" +
   "						updatedAt,									updatedBy,      \n" +
   "						updateByRoleId)      \n" +
   "			  VALUES 	(vTableName,										NEW.id,      \n" +
   "						\"Supplier\",									vOldval,      \n" +
   "						vNewval,												OLD.updatedAt,      \n" +
   "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "		END IF;      \n" +
   "  \n" +
   "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN      \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "						(tableName,									refPaymentID,      \n" +
   "						Colname,									Oldval,      \n" +
   "						Newval,										createdAt,      \n" +
   "						createdBy,									createByRoleId,      \n" +
   "						updatedAt,									updatedBy,      \n" +
   "						updateByRoleId)      \n" +
   "			  VALUES 	(vTableName,										NEW.id,      \n" +
   "						\"Pay To name\",									OLD.payToName,      \n" +
   "						NEW.payToName,									OLD.updatedAt,      \n" +
   "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	    END IF;      \n" +
   "  \n" +
   "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN      \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "						(tableName,									refPaymentID,      \n" +
   "						Colname,									Oldval,      \n" +
   "						Newval,										createdAt,      \n" +
   "						createdBy,									createByRoleId,      \n" +
   "						updatedAt,									updatedBy,      \n" +
   "						updateByRoleId)      \n" +
   "			  VALUES 	(vTableName,										NEW.id,      \n" +
   "						\"Pay To Address\",									OLD.payToAddress,      \n" +
   "						NEW.payToAddress,								OLD.updatedAt,      \n" +
   "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	    END IF;      \n" +
   "  \n" +
   "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN      \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "						(tableName,									refPaymentID,      \n" +
   "						Colname,									Oldval,      \n" +
   "						Newval,										createdAt,      \n" +
   "						createdBy,									createByRoleId,      \n" +
   "						updatedAt,									updatedBy,      \n" +
   "						updateByRoleId)      \n" +
   "			  VALUES 	(vTableName,										NEW.id,      \n" +
   "						\"Bill To Name\",									OLD.billToName,      \n" +
   "						NEW.billToName,									OLD.updatedAt,      \n" +
   "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	    END IF;      \n" +
   "  \n" +
   "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN      \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "						(tableName,									refPaymentID,      \n" +
   "						Colname,									Oldval,      \n" +
   "						Newval,										createdAt,      \n" +
   "						createdBy,									createByRoleId,      \n" +
   "						updatedAt,									updatedBy,      \n" +
   "						updateByRoleId)      \n" +
   "			  VALUES 	(vTableName,										NEW.id,      \n" +
   "						\"Bill To Address\",								OLD.billToAddress,      \n" +
   "						NEW.billToAddress,								OLD.updatedAt,      \n" +
   "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	    END IF;      \n" +
   "  \n" +
   "  \n" +
   "    ELSEIF NEW.refPaymentMode IN ('R','RR') THEN      \n" +
   "  \n" +
   "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN      \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "						(tableName,						refPaymentID,      \n" +
   "						Colname,						Oldval,      \n" +
   "						Newval,							createdAt,      \n" +
   "						createdBy,						createByRoleId,      \n" +
   "						updatedAt,						updatedBy,      \n" +
   "						updateByRoleId)      \n" +
   "			  VALUES 	(vTableName,							NEW.id,      \n" +
   "					\"Deposit Batch#\",						OLD.depositBatchNumber,      \n" +
   "					NEW.depositBatchNumber,						OLD.updatedAt,      \n" +
   "					OLD.updatedBy,							OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "	    END IF;      \n" +
   "  \n" +
   "    END IF;      \n" +
   "    IF NEW.refPaymentMode IN ('RR','CR') THEN    \n" +
   "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN    \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.id,      \n" +
   "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"   \n" +
   "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
   "						ELSE '' END),								OLD.offsetAmount,      \n" +
   "					NEW.offsetAmount,								OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "        END IF;    \n" +
   "  \n" +
   "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN    \n" +
   "			INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,								NEW.id,      \n" +
   "					\"COA\",											    \n" +
   "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),    \n" +
   "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),    \n" +
   "					OLD.updatedAt,   							OLD.updatedBy,    \n" +
   "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/    \n" +
   "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId); /*updateByRoleId*/    \n" +
   "        END IF;    \n" +
   "    END IF;    \n" +
   "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_Det_History` ;  \n" +
   "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_Det_History` AFTER UPDATE ON `packingslip_invoice_payment_det`   \n" +
   "    FOR EACH ROW BEGIN      \n" +
   "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment_det\";      \n" +
   "	DECLARE vOldval LONGTEXT DEFAULT '';      \n" +
   "	DECLARE vNewval LONGTEXT DEFAULT '';      \n" +
   "	DECLARE vRefPaymentMode VARCHAR(10);    \n" +
   "    DECLARE vReceiptType VARCHAR(10);    \n" +
   "  \n" +
   "	SELECT refPaymentMode INTO vRefPaymentMode      \n" +
   "	FROM packingslip_invoice_payment      \n" +
   "	WHERE id = NEW.refPayementid ;    \n" +
   "  \n" +
   "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN    \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId,								refPackingslipInvoiceID,  \n" +
   "					refRefundPaymentID,								refRefundCustCreditMemoID)      \n" +
   "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,    \n" +
   "					(CASE WHEN vRefPaymentMode = 'CA' THEN 'Credit Memo AMT. Applied in Detail'    \n" +
   "						WHEN vRefPaymentMode = 'WOFF' THEN 'Write Off Amount in Detail ($)'  \n" +
   "						WHEN vRefPaymentMode = 'CR' THEN 'Refund Amount in Detail ($)'  \n" +
   "						ELSE 'Payment ($) in line Detail' END),				FORMAT(OLD.paymentAmount,2),    \n" +
   "					FORMAT(NEW.paymentAmount,2),							OLD.updatedAt,    \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
   "					NEW.updateByRoleId /*updateByRoleId*/,						OLD.refPackingslipInvoiceID,  \n" +
   "					OLD.refRefundPaymentID,								OLD.refRefundCustCreditMemoID);    \n" +
   "	END IF;      \n" +
   "  \n" +
   "	IF (vRefPaymentMode = 'CA' AND (IFNULL(OLD.appliedDate, \"\") != IFNULL(NEW.appliedDate, \"\"))) THEN      \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,      \n" +
   "					'Applied Credit Memo Date in Detail',						CAST(DATE_FORMAT(OLD.appliedDate, '%m/%d/%y') AS CHAR),      \n" +
   "					CAST(DATE_FORMAT(NEW.appliedDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
   "  \n" +
   "	END IF;      \n" +
   "  \n" +
   "    IF vRefPaymentMode = 'RR' AND OLD.isDeleted = 0 AND NEW.isDeleted = 1 THEN    \n" +
   "		SELECT a.receiptType    \n" +
   "          INTO vReceiptType    \n" +
   "		  FROM packing_slip_material_receive a    \n" +
   "		 WHERE id = OLD.refPackingslipInvoiceID;    \n" +
   "  \n" +
   "         INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId,								refPackingslipInvoiceID)      \n" +
   "		    VALUES (vTableName,											NEW.refPayementid,		NEW.id,    \n" +
   "					(CASE WHEN vReceiptType = 'C' THEN 'Credit Memo'    \n" +
   "						WHEN vReceiptType = 'D' THEN 'Debit Memo'    \n" +
   "						ELSE '' END),							'',    \n" +
   "					'Deleted',									OLD.updatedAt,    \n" +
   "					OLD.updatedBy,								OLD.updateByRoleId,    \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/    \n" +
   "					NEW.updateByRoleId /*updateByRoleId*/,					OLD.refPackingslipInvoiceID);   \n" +
   "  \n" +
   "  \n" +
   "	IF vRefPaymentMode = 'CR' AND (IFNULL(OLD.comment, \"\") != IFNULL(NEW.comment, \"\")) THEN  \n" +
   "		INSERT INTO supplier_invoice_payment_history      \n" +
   "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
   "					Colname,									Oldval,      \n" +
   "					Newval,										createdAt,      \n" +
   "					createdBy,									createByRoleId,      \n" +
   "					updatedAt,									updatedBy,      \n" +
   "					updateByRoleId)      \n" +
   "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,      \n" +
   "					'Reason',									OLD.comment,      \n" +
   "					NEW.comment,									OLD.updatedAt,      \n" +
   "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
   "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
   "					NEW.updateByRoleId /*updateByRoleId*/);      \n" +
   "	END IF;  \n" +
   "  \n" +
   "  \n" +
   "  \n" +
   "    END IF;    \n" +
   "  \n" +
   "END;  \n" +
    /* **************************** Add Script Version -> 29-07-2021 *********************************** */
    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
    "VALUES (5090,'2.00','V1',' payment triggers  - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
    );
   break;
   case 5090:
    allDbChangesArray.push(
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierInvoicePaymentHistory` ;  \n" +
       "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentHistory`(    \n" +
       "	IN ppageIndex INT,      \n" +
       "	IN precordPerPage INT,      \n" +
       "	IN pOrderBy VARCHAR(255),      \n" +
       "	IN pWhereClause VARCHAR(16383),      \n" +
       "	IN pPaymentID INT,      \n" +
       "	IN pRefPaymentMode VARCHAR(5)      \n" +
       ")  \n" +
       "BEGIN      \n" +
       "  \n" +
       "	DECLARE pOffset INT;      \n" +
       "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
       "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
       "	DECLARE v_TimeZone VARCHAR(50);      \n" +
       "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
       "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;      \n" +
       "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN      \n" +
       "		CREATE TEMPORARY TABLE temp_custInvListOfPayment AS      \n" +
       "			SELECT id, invoiceNumber      \n" +
       "			FROM customer_packingslip      \n" +
       "			WHERE id IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE refPayementid = pPaymentID)      \n" +
       "			AND transType = 'I'      \n" +
       "			AND isDeleted = 0 ;      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_custInvListOfPayment AS      \n" +
       "		SELECT id, invoiceNumber FROM customer_packingslip WHERE 1=0;      \n" +
       "  \n" +
       "	SET @temp_Sproc_RetrieveSupplierInvoicePaymentHistory = CONCAT(\"      \n" +
       "			SELECT      \n" +
       "				id, tableName , refPaymentID ,      \n" +
       "				colName,      \n" +
       "				oldVal,      \n" +
       "				newVal,      \n" +
       "				(CASE WHEN ('\",pRefPaymentMode,\"' = 'R' OR '\",pRefPaymentMode,\"' = 'CA' OR '\",pRefPaymentMode,\"' = 'WOFF') AND siph.refPaymentDetID IS NOT NULL      \n" +
       "						THEN (SELECT invoiceNumber FROM temp_custInvListOfPayment      \n" +
       "							WHERE id = (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE id = siph.refPaymentDetID))  \n" +
       "					WHEN '\",pRefPaymentMode,\"' IN ('P','RR') THEN     \n" +
       "						  (select ifnull(a.creditMemoNumber, a.debitMemoNumber)    \n" +
       "						     from packing_slip_material_receive a    \n" +
       "						    where a.id = siph.refPackingslipInvoiceID)    \n" +
       "				    ELSE '' END) AS invoiceNumber ,   \n" +
       "				  (CASE WHEN '\",pRefPaymentMode,\"' = 'CR' AND siph.refRefundPaymentID IS NOT NULL THEN  \n" +
       "						(SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = siph.refRefundPaymentID)  \n" +
       "					ELSE '' END) AS custPaymentNumber ,  \n" +
       "				  (CASE WHEN '\",pRefPaymentMode,\"' = 'CR' AND siph.refRefundCustCreditMemoID IS NOT NULL THEN  \n" +
       "						(SELECT creditMemoNumber FROM customer_packingslip WHERE id = siph.refRefundCustCreditMemoID)   \n" +
       "					ELSE '' END) AS custCreditMemoNumber ,			  \n" +
       "				fun_getUserNameByID(updatedBy) updatedBy,      \n" +
       "				fun_ApplyCommonDateTimeFormatByParaValue(updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
       "				fun_getRoleByID(updateByRoleId) updatedbyRole      \n" +
       "			FROM    supplier_invoice_payment_history siph      \n" +
       "			WHERE   refPaymentID =\",pPaymentID,\"      \n" +
       "	\");      \n" +
       "  \n" +
       "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
       "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;      \n" +
       "	ELSE      \n" +
       "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
       "	END IF;      \n" +
       "  \n" +
       "  \n" +
       "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
       "		SET pWhereClause = '1=1' ;      \n" +
       "	END IF;      \n" +
       "  \n" +
       "  \n" +
       "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
       "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
       "	ELSE      \n" +
       "		SET rowNumWhere = '';      \n" +
       "	END IF;      \n" +
       "  \n" +
       "  \n" +
       "	/* to get total count of rows */      \n" +
       "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c where 1=1 and \", pWhereClause);      \n" +
       "	PREPARE query1 FROM @SQLStatement1;      \n" +
       "	EXECUTE query1;      \n" +
       "	DEALLOCATE PREPARE query1;      \n" +
       "  \n" +
       "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
       "	PREPARE query2 FROM @SQLStatement2;      \n" +
       "	EXECUTE query2;      \n" +
       "	DEALLOCATE PREPARE query2;      \n" +
       "  \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;      \n" +
       "  \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
       "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(                   \n" +
       "	IN pSystemId VARCHAR(20),                \n" +
       "	IN pRefVoidPaymentId INT,                          \n" +
       "	IN pAccountReference VARCHAR(50),                          \n" +
       "	IN pPaymentType INT,                          \n" +
       "	IN pPaymentNumber VARCHAR(50),                          \n" +
       "	IN pBankAccountMasID INT,                          \n" +
       "	IN pBankAccountNo VARCHAR(50),                          \n" +
       "	IN pBankName VARCHAR(255),                          \n" +
       "	IN pPaymentDate DATE,                          \n" +
       "	IN pRemark VARCHAR(255),                          \n" +
       "	IN pPayToName VARCHAR(255),                          \n" +
       "	IN pPayToAddress VARCHAR(255),                          \n" +
       "	IN pVoidPaymentReason VARCHAR(255),              \n" +
       "	IN pRefPaymentModeOfInvPayment VARCHAR(2),                       \n" +
       "	IN pMfgcodeID INT,              \n" +
       "	IN pisConfmTakenForDuplicateCheckNo TINYINT,             \n" +
       "	IN pDepositBatchNumber DECIMAL(6,2),                        \n" +
       "	IN pUserID INT,                          \n" +
       "	IN pRoleID INT                          \n" +
       ")  \n" +
       "BEGIN                            \n" +
       "	DECLARE vCount INT;                            \n" +
       "	DECLARE vCountExistsCheckNo INT;                            \n" +
       "	DECLARE vNewPaymentID INT;                            \n" +
       "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);                            \n" +
       "DECLARE EXIT HANDLER FOR SQLEXCEPTION                              \n" +
       "BEGIN                              \n" +
       "	ROLLBACK;                              \n" +
       "	RESIGNAL;                              \n" +
       "END;                              \n" +
       "DECLARE EXIT HANDLER FOR SQLWARNING                              \n" +
       "  BEGIN                              \n" +
       "	ROLLBACK;                              \n" +
       "	RESIGNAL;                              \n" +
       "END;                              \n" +
       "  \n" +
       "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */              \n" +
       "	SELECT 	COUNT(1)   INTO 	vCount                            \n" +
       "	FROM 	packingslip_invoice_payment                            \n" +
       "	WHERE 	id = pRefVoidPaymentId                            \n" +
       "	AND isPaymentVoided = 0                      \n" +
       "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;                            \n" +
       "  \n" +
       "  \n" +
       "	SET vCountExistsCheckNo = 0;	              \n" +
       "  \n" +
       "	IF (pRefPaymentModeOfInvPayment = 'P') THEN              \n" +
       "		/*check duplicate check number validation*/                  \n" +
       "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo                          \n" +
       "		FROM 	packingslip_invoice_payment                          \n" +
       "		WHERE 	isdeleted = 0                          \n" +
       "		AND paymentNumber = pPaymentNumber                          \n" +
       "		AND bankAccountMasID = pBankAccountMasID              \n" +
       "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                          \n" +
       "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN              \n" +
       "		/* check duplicate check number if confirmation not taken */                \n" +
       "		SELECT COUNT(1) INTO vCountExistsCheckNo                        \n" +
       "		FROM packingslip_invoice_payment                        \n" +
       "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment               \n" +
       "		AND paymentNumber = pPaymentNumber                        \n" +
       "		AND mfgcodeID = pMfgcodeID               \n" +
       "		AND isdeleted = 0    ;              \n" +
       "	 END IF;                 \n" +
       "  \n" +
       "  \n" +
       "	IF vCount = 1 AND vCountExistsCheckNo = 0 THEN                            \n" +
       "  \n" +
       "		UPDATE 	packingslip_invoice_payment                            \n" +
       "		SET 	voidPaymentReason = pVoidPaymentReason,                            \n" +
       "			isPaymentVoided = 1,                            \n" +
       "			updatedBy = pUserID,                            \n" +
       "			updateByRoleId = pRoleID,                          \n" +
       "			updatedAt = fun_DatetimetoUTCDateTime()                          \n" +
       "		WHERE 	id = pRefVoidPaymentId                            \n" +
       "		AND isDeleted = 0                      \n" +
       "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;             \n" +
       "  \n" +
       "  \n" +
       "		/*insert same records for new reissue payment transaction*/                  \n" +
       "		INSERT INTO packingslip_invoice_payment                            \n" +
       "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,                            \n" +
       "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,                            \n" +
       "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,                    \n" +
       "				billToName, billToAddress, isZeroPayment, depositBatchNumber,             \n" +
       "				lockStatus, refundStatus)                            \n" +
       "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,                            \n" +
       "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,                            \n" +
       "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,                    \n" +
       "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,            \n" +
       "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)     \n" +
       "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL' 		           \n" +
       "					ELSE NULL END),  \n" +
       "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END)	                   \n" +
       "		FROM 	packingslip_invoice_payment                            \n" +
       "		WHERE 	id = pRefVoidPaymentId                            \n" +
       "		AND isDeleted = 0                      \n" +
       "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                            \n" +
       "  \n" +
       "		SET vNewPaymentID = LAST_INSERT_ID();                            \n" +
       "  \n" +
       "		/*update payment void flag in detail table*/                  \n" +
       "		UPDATE 	packingslip_invoice_payment_det                  \n" +
       "		SET 	isPaymentVoided = 1,                  \n" +
       "			updatedBy = pUserID,                  \n" +
       "			updateByRoleId = pRoleID,                  \n" +
       "			updatedAt = fun_DatetimetoUTCDateTime()                  \n" +
       "		WHERE 	refPayementid = pRefVoidPaymentId                  \n" +
       "		AND isDeleted = 0;                  \n" +
       "  \n" +
       "		/*insert same records for new reissue payment detail transaction*/                  \n" +
       "		INSERT INTO packingslip_invoice_payment_det                            \n" +
       "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,               \n" +
       "				isPaymentVoided, refCustPackingslipInvoiceID)                            \n" +
       "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,                             \n" +
       "			pUserID, pRoleID, paymentAmount,               \n" +
       "			FALSE, refCustPackingslipInvoiceID	                \n" +
       "		FROM 	packingslip_invoice_payment_det                            \n" +
       "		WHERE 	refPayementid = pRefVoidPaymentId                            \n" +
       "		AND isDeleted = 0;                  \n" +
       "  \n" +
       "		SELECT vNewPaymentID refPayementid;                            \n" +
       "	ELSE                            \n" +
       "		IF vCountExistsCheckNo != 0 THEN                          \n" +
       "			SELECT 'DUPLICATE_CHECKNO' AS message;                          \n" +
       "		ELSEIF vCount = 0 THEN              \n" +
       "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId                \n" +
       "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN              \n" +
       "				SELECT 'ALREADY_VOIDED' AS message;              \n" +
       "			ELSE              \n" +
       "				SELECT 'NOT_FOUND' AS message;                \n" +
       "			END IF;	                 \n" +
       "		ELSE                          \n" +
       "			SELECT 'NOT_FOUND' AS message;                          \n" +
       "		END IF;                          \n" +
       "	END IF;                            \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentDetForElastic` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(                                                                                                      \n" +
       "	IN pPaymentMstID INT,    \n" +
       "	IN pRefPaymentMode VARCHAR(5),    \n" +
       "	IN pFromdate DATE,    \n" +
       "	IN pTodate DATE,    \n" +
       "	IN pRequiredCount TINYINT     \n" +
       ")  \n" +
       "BEGIN                                                                                                      \n" +
       "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                   \n" +
       "	DECLARE v_TimeZone VARCHAR(50);    \n" +
       "  \n" +
       "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                          \n" +
       "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
       "	IF (pRequiredCount) THEN    \n" +
       "		SELECT COUNT(1) totalCount    \n" +
       "		FROM packingslip_invoice_payment psip    \n" +
       "		WHERE psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)   \n" +
       "		AND psip.isDeleted = 0;    \n" +
       "  \n" +
       "	ELSE    \n" +
       "  \n" +
       "		SELECT 						                                                        \n" +
       "			psip.id,  \n" +
       "			psip.mfgcodeID, cps1.id AS custCreditMemoID , cps1.creditMemoNumber ,       \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(cps1.creditMemoDate, v_TimeZone, v_DateTimeDisplayFormat) AS creditMemoDate ,                                           \n" +
       "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                   \n" +
       "			psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
       "			fun_getIntToText(psip.isPaymentVoided) AS isPaymentVoidedConvertedValue,  \n" +
       "			psip.voidPaymentReason,                \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,                 \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,                                  \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)                \n" +
       "									ELSE NULL END) AS voidedAt,	                            \n" +
       "			psip.refVoidedPaymentNumber,                  \n" +
       "			psip.refVoidedPaymentId,                              \n" +
       "			psip.paymentNumber,       \n" +
       "			psip.bankName,                                                \n" +
       "			psip.bankAccountNo,                                                \n" +
       "			psip.paymentType,                                                \n" +
       "			psip.bankAccountMasID,               \n" +
       "			psip.systemId ,                                               \n" +
       "			gc.gencCategoryName paymentMethod,                                          \n" +
       "			gc.systemGenerated systemGeneratedPaymentMethod,                                          \n" +
       "			psip.paymentDate,                                          \n" +
       "			psip.accountReference,                                          \n" +
       "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'           \n" +
       "			WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,	          \n" +
       "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                                  \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,                                                                     \n" +
       "			invPayDetTemp.invoiceNumberList,            \n" +
       "			psip.remark  , psip.depositBatchNumber,    \n" +
       "			psip.isDeleted,  \n" +
       "			(CASE WHEN psip.refPaymentMode IN ('WOFF','CR') THEN (SELECT modeName FROM `generic_transmode_mst` WHERE id = psip.refGencTransModeID)  \n" +
       "				ELSE NULL END) transactionModeName,  \n" +
       "			payRefundDetTemp.paymentNumListAgainstRefund,  \n" +
       "			cmRefundDetTemp.CMNumListAgainstRefund		   \n" +
       "		FROM packingslip_invoice_payment psip         \n" +
       "			LEFT JOIN customer_packingslip cps1 ON cps1.id = refCustCreditMemoID AND cps1.transType = 'C' AND cps1.isDeleted = 0      \n" +
       "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0                        \n" +
       "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') AS invoiceNumberList                       \n" +
       "				    FROM packingslip_invoice_payment_det psipd                        \n" +
       "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND cps.isDeleted = 0                        \n" +
       "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                         \n" +
       "				     AND psipd.isDeleted = 0                        \n" +
       "				      GROUP BY psipd.refPayementid) invPayDetTemp                         \n" +
       "				ON psip.id = invPayDetTemp.refPayementid   \n" +
       "  \n" +
       "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber SEPARATOR ', ') AS paymentNumListAgainstRefund    \n" +
       "					FROM packingslip_invoice_payment_det psipd      \n" +
       "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0    \n" +
       "					WHERE psipd.refRefundPaymentID IS NOT NULL     \n" +
       "					AND psipd.isDeleted = 0      \n" +
       "					GROUP BY psipd.refPayementid ) payRefundDetTemp     \n" +
       "				ON psip.id = payRefundDetTemp.refPayementid     \n" +
       "  \n" +
       "			LEFT JOIN (SELECT psipd.refPayementid,  GROUP_CONCAT(cps.creditMemoNumber SEPARATOR ', ') AS CMNumListAgainstRefund    \n" +
       "					 FROM packingslip_invoice_payment_det psipd      \n" +
       "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
       "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL     \n" +
       "					AND psipd.isDeleted = 0      \n" +
       "					GROUP BY psipd.refPayementid) cmRefundDetTemp     \n" +
       "				ON psip.id = cmRefundDetTemp.refPayementid   \n" +
       "  \n" +
       "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)            \n" +
       "            AND psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)    \n" +
       "            AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN     \n" +
       "				((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)     \n" +
       "					OR (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))    \n" +
       "				ELSE 1 = 1 END);    \n" +
       "	END IF;    \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(    \n" +
       "	IN pPaymentMstID INT ,    \n" +
       "	IN pRefPaymentMode VARCHAR(10)    \n" +
       "    )  \n" +
       "BEGIN    \n" +
       "  \n" +
       "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
       "		DECLARE v_TimeZone VARCHAR(50);    \n" +
       "		DECLARE v_PayRefundTblJoin VARCHAR(1000);    \n" +
       "		DECLARE v_FieldsForPayStatus VARCHAR(1000);   \n" +
       "		DECLARE v_FieldsForCustPayment VARCHAR(1000);   \n" +
       "  \n" +
       "		SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
       "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;   \n" +
       "		SET v_PayRefundTblJoin = '';    \n" +
       "		SET v_FieldsForPayStatus = '\"\"';   \n" +
       "		SET v_FieldsForCustPayment = '';  \n" +
       "  \n" +
       "		IF (pRefPaymentMode = 'R') THEN  \n" +
       "			SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
       "									FROM packingslip_invoice_payment_det   \n" +
       "									WHERE refRefundPaymentID = ',pPaymentMstID,'   \n" +
       "									AND isDeleted = 0 AND isPaymentVoided = 0					  \n" +
       "									GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
       "								ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');   \n" +
       "  \n" +
       "			SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =   \n" +
       "											(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN   \n" +
       "										(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
       "											ELSE \"No Pending Amount\" END)  \n" +
       "								ELSE  \n" +
       "									(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
       "										THEN \"Not Applied\"   \n" +
       "										ELSE \"Partially Applied\" END)  \n" +
       "								END) ') ;  \n" +
       "  \n" +
       "			SET v_FieldsForCustPayment = CONCAT(' psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');					  \n" +
       "  \n" +
       "		END IF;					  \n" +
       "  \n" +
       "  \n" +
       "		SET @v_querySt = CONCAT(\"    \n" +
       "		SELECT 	psip.id,    \n" +
       "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,    \n" +
       "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,    \n" +
       "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,    \n" +
       "			psip.refGencTransModeID ,    \n" +
       "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  psip.isMarkForRefund , psip.agreedRefundAmt ,    \n" +
       "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,    \n" +
       "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,    \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') AS lockedAt,    \n" +
       "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,    \n" +
       "			\", v_FieldsForCustPayment,\"   \n" +
       "			(CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"   \n" +
       "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue ,    \n" +
       "			 (CASE WHEN psip.refPaymentID IS NULL THEN NULL    \n" +
       "				ELSE (SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = psip.refPaymentID AND isDeleted = 0)    \n" +
       "					END) AS refPaymentNumFromTransInitiate ,    \n" +
       "			psip.refPaymentID  ,    \n" +
       "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundPaymentID = psip.id  \n" +
       "				AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedOfPayment ,  \n" +
       "			fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
       "			fun_getUserNameByID(psip.createdBy) createdby    \n" +
       "		FROM packingslip_invoice_payment psip    \n" +
       "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,    \n" +
       "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount    \n" +
       "				    FROM packingslip_invoice_payment_det psipd    \n" +
       "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id    \n" +
       "											AND cps.isDeleted = 0    \n" +
       "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL    \n" +
       "				     AND psipd.isDeleted = 0    \n" +
       "				     GROUP BY psipd.refPayementid ) invPayDetTemp    \n" +
       "				ON psip.id = invPayDetTemp.refPayementid    \n" +
       "			\", v_PayRefundTblJoin ,\"  	  \n" +
       "		WHERE psip.id = \",pPaymentMstID,\"    \n" +
       "		AND psip.refPaymentMode = '\",pRefPaymentMode,\"'    \n" +
       "		AND psip.isDeleted = 0    \n" +
       "		\");    \n" +
       "  \n" +
       "  \n" +
       "		PREPARE query1 FROM @v_querySt;    \n" +
       "		EXECUTE query1;    \n" +
       "		DEALLOCATE PREPARE query1;    \n" +
       "  \n" +
       "  \n" +
       "	END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceDetail` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(              \n" +
       "	IN invoiceID INT      ,              \n" +
       "    IN pTransType VARCHAR(5)              \n" +
       ")  \n" +
       "BEGIN              \n" +
       "	DECLARE vDateTimeDisplayFormat VARCHAR(100);              \n" +
       "	DECLARE vTimeZone VARCHAR(50);              \n" +
       "  \n" +
       "		SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
       "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;              \n" +
       "	                 SELECT inv.id,   inv.transType,              \n" +
       "						inv.packingSlipNumber,inv.packingSlipDate,              \n" +
       "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,              \n" +
       "                        cps.id packingSlipID,              \n" +
       "						inv.refSalesOrderId  ,              \n" +
       "                        inv.systemID,              \n" +
       "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,              \n" +
       "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,              \n" +
       "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,              \n" +
       "						inv.soNumber,inv.soDate,              \n" +
       "                        inv.packingSlipType,inv.`status`,              \n" +
       "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,              \n" +
       "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,              \n" +
       "						inv.invoiceNumber,inv.invoiceDate,              \n" +
       "                        inv.headerComment  ,   inv.packingSlipComment,              \n" +
       "						inv.freeOnBoardId,inv.salesCommissionTo,              \n" +
       "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,              \n" +
       "						fun_getFOBById(inv.freeOnBoardId) FOBName,              \n" +
       "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,              \n" +
       "                        inv.intermediateShipmentId ,              \n" +
       "						inv.billingAddress,              \n" +
       "						inv.shippingAddress,              \n" +
       "						inv.intermediateAddress,              \n" +
       "                        inv.isLocked,              \n" +
       "                        inv.subStatus,              \n" +
       "                        inv.paymentStatus,              \n" +
       "                        inv.packingSlipType,              \n" +
       "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,              \n" +
       "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,              \n" +
       "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,           \n" +
       "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,              \n" +
       "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,              \n" +
       "                        inv.isZeroValue,              \n" +
       "                        inv.revision,              \n" +
       "                        cps.subStatus packingSlipSubStatus,              \n" +
       "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))              \n" +
       "						ELSE '' END) materialStatus ,              \n" +
       "                        inv.isAlreadyPublished ,              \n" +
       "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,              \n" +
       "			cps.revision packingSlipVersion,            \n" +
       "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)             \n" +
       "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)            \n" +
       "			ELSE NULL END) receivedAmount,        \n" +
       "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'          \n" +
       "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
       "			(CASE WHEN inv.transType = 'C' THEN					  \n" +
       "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
       "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
       "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,					    \n" +
       "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')   \n" +
       "				END) AS paymentStatusCode,  \n" +
       "			inv.refundStatus,	  \n" +
       "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
       "				ELSE NULL END) AS creditMemoRefundStatusText ,		  \n" +
       "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,    \n" +
       "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,    \n" +
       "			fun_getUserNameByID(inv.createdBy) createdByInitial,    \n" +
       "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,    \n" +
       "			inv.isAskForVersionConfirmation,    \n" +
       "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
       "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt             \n" +
       "		FROM customer_packingslip inv              \n" +
       "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'              \n" +
       "                 WHERE inv.id = invoiceID              \n" +
       "                 AND inv.transType = pTransType;              \n" +
       "  \n" +
       "  \n" +
       "				 SELECT cpd.refSalesorderDetid,              \n" +
       "					cpd.id,              \n" +
       "                    cpd.refCustPackingSlipID,              \n" +
       "					cpd.custPOLineID,              \n" +
       "					cpd.reflineID AS packingSlipSerialNumber,              \n" +
       "                    cpd.lineID,              \n" +
       "                    co.PIDCode,              \n" +
       "                    co.mfgcodeID,              \n" +
       "                    ss.releaseNumber,              \n" +
       "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,              \n" +
       "					co.mfgpn,              \n" +
       "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,              \n" +
       "					fun_getRoHSNameByPartID(cpd.partId) rohsName,              \n" +
       "                    cpd.partId,              \n" +
       "                    cpd.refChargesTypeID,              \n" +
       "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,              \n" +
       "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,              \n" +
       "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,              \n" +
       "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,              \n" +
       "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,              \n" +
       "                    othercharges AS lineOtherCharges,              \n" +
       "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,              \n" +
       "					cpd.shippingNotes,              \n" +
       "                    cpd.internalComment,              \n" +
       "                    cpd.assyDescription,              \n" +
       "					fun_getUserNameByID(cpd.updatedBy) updatedby,              \n" +
       "					fun_getUserNameByID(cpd.createdBy) createdby,              \n" +
       "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,              \n" +
       "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,              \n" +
       "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
       "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,              \n" +
       "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,              \n" +
       "                    co.partType,              \n" +
       "                    vu.packingLineID,              \n" +
       "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,              \n" +
       "                    co.isCustom, co.isCPN , co.nickName ,              \n" +
       "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert              \n" +
       "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID              \n" +
       "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,              \n" +
       "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,              \n" +
       "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,              \n" +
       "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'              \n" +
       "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'              \n" +
       "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )              \n" +
       "					FROM rfq_assy_quantity_turn_time rfqAssyTurn              \n" +
       "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0              \n" +
       "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,              \n" +
       "                    cpd.isZeroValue,              \n" +
       "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted              \n" +
       "				 FROM customer_packingslip_det cpd              \n" +
       "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0              \n" +
       "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0              \n" +
       "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId              \n" +
       "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0              \n" +
       "                 ORDER BY cpd.lineID ASC;              \n" +
       "  \n" +
       "                 SELECT cpOther.id,              \n" +
       "						cpOther.refCustomerPackingSlipDetID,              \n" +
       "						cpOther.partID,              \n" +
       "						fun_getMFGPNByID(cpOther.partID) mfgPN,              \n" +
       "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,              \n" +
       "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,              \n" +
       "                        cpOther.qty,              \n" +
       "                        cpOther.price,              \n" +
       "                        cpOther.lineComment,              \n" +
       "                         cpOther.lineInternalComment,              \n" +
       "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,              \n" +
       "                        cpOther.frequency ,              \n" +
       "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'              \n" +
       "								WHEN (cpOther.frequency = 2) THEN 'First'              \n" +
       "								WHEN (cpOther.frequency = 3) THEN  'Last'              \n" +
       "								ELSE ''              \n" +
       "						END) AS frequencyName              \n" +
       "                 FROM customer_packingslip_otherexpense_details cpOther              \n" +
       "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0              \n" +
       "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
       "                 AND cpOther.isdeleted=0;              \n" +
       "  \n" +
       "                  --  Tracking Number              \n" +
       "                SELECT id,trackNumber              \n" +
       "                FROM customer_packing_slip_track_number              \n" +
       "                WHERE refCustPackingSlipID = invoiceID              \n" +
       "                AND isDeleted = 0;              \n" +
       "  \n" +
       "                -- sales commission attribute        \n" +
       "                SELECT cca.id,              \n" +
       "		    cca.refCustPackingSlipDetID,              \n" +
       "                    cca.unitPrice,           \n" +
       "                    cca.commissionPercentage,              \n" +
       "                    cca.commissionValue,              \n" +
       "                    cca.quoted_commissionPercentage,              \n" +
       "                    cca.quoted_commissionValue,              \n" +
       "                    cca.poQty,              \n" +
       "                    cca.partId,      \n" +
       "                    cca.quotedQty,      \n" +
       "                    cca.type,      \n" +
       "                    cca.rfqAssyID,      \n" +
       "                    cca.commissionCalculateFrom,      \n" +
       "                    cca.salesCommissionNotes,              \n" +
       "                    cca.refComponentSalesPriceBreakID,              \n" +
       "                    cca.quoted_unitPrice          \n" +
       "				FROM customer_packingslip_commission_attribute_mstdet cca              \n" +
       "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0      \n" +
       "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
       "                 AND cca.isdeleted=0;      \n" +
       "                 -- sales commission child attribute            \n" +
       "                SELECT cca.id,              \n" +
       "		    cca.refCustPackingSlipDetID,      \n" +
       "		    cca.refcustInvoiceCommissionID,              \n" +
       "                    cca.unitPrice,              \n" +
       "                    cca.refQuoteAttributeId,              \n" +
       "                    cca.commissionPercentage,              \n" +
       "                    cca.commissionValue,              \n" +
       "                    cca.org_commissionPercentage,              \n" +
       "                    cca.org_commissionValue,              \n" +
       "                    cca.category,              \n" +
       "                    cca.partId,              \n" +
       "                    cca.refComponentSalesPriceBreakID,              \n" +
       "                    cca.org_unitPrice,              \n" +
       "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,              \n" +
       "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,              \n" +
       "                    IFNULL(qd.fieldName,'Sales Commission') fieldName              \n" +
       "				FROM customer_packingslip_commission_attribute cca              \n" +
       "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0              \n" +
       "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0              \n" +
       "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
       "                 AND cca.isdeleted=0;              \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerInvoiceDetail` ;  \n" +
       "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                                          \n" +
       "	IN pTransType VARCHAR(5),                                                  \n" +
       "	IN pInvoiceType VARCHAR(1),                                                      \n" +
       "	IN pInvoiceID INT,              	                                                      \n" +
       "	IN pInvData JSON,                                                      \n" +
       "	IN pPackingSlipID INT,                                                      \n" +
       "	IN puserID INT,                                                                \n" +
       "	IN puserRoleID INT ,                                                            \n" +
       "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),                          \n" +
       "	IN pSystemId VARCHAR(20)  ,                        \n" +
       "	IN pPackingSlipType INT                        \n" +
       ")  \n" +
       "BEGIN                                                                       \n" +
       "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                                    \n" +
       "	DECLARE v_prefix VARCHAR(20);                                                            \n" +
       "	DECLARE vTermsDays INT ;           \n" +
       "	DECLARE v_incrementI INT;            \n" +
       "	DECLARE v_commissionPercentage DECIMAL(10,2);      \n" +
       "	DECLARE vTotRefundIssuedOfCreditMemo DECIMAL(18,8);   \n" +
       "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;      \n" +
       "  \n" +
       "  \n" +
       "	SET vIsAgreedRefundLessThanTotIssued = 0;            \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                                        \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                                  \n" +
       "	SELECT 	*                                                                                                   \n" +
       "	FROM 	JSON_TABLE(                                                           \n" +
       "			pInvData,                                                                                                  \n" +
       "			\"$[*]\" COLUMNS(    			                                                     \n" +
       "				`transType` VARCHAR(5) PATH \"$.transType\",                                                      \n" +
       "				`invoiceID` INT PATH \"$.invoiceID\",                                                      \n" +
       "				`packingSlipID` INT PATH \"$.packingSlipID\",                                                       \n" +
       "				`packingSlipType` INT PATH \"$.packingSlipType\",                                                      \n" +
       "				`customerID` INT PATH \"$.customerID\" ,                                                                                                  \n" +
       "				`status` INT PATH \"$.status\",                                                      \n" +
       "				`subStatus` INT PATH \"$.subStatus\",                                                      \n" +
       "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                                  \n" +
       "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                                  \n" +
       "				`poDate` DATE PATH \"$.poDate\",                                                       \n" +
       "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                                  \n" +
       "				`soDate` DATE PATH \"$.soDate\",                                                          \n" +
       "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                                        \n" +
       "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                                        \n" +
       "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                                        \n" +
       "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                                        \n" +
       "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                                        \n" +
       "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                                      \n" +
       "				`headerComment` TEXT PATH \"$.headerComment\" ,                                                      \n" +
       "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                                      \n" +
       "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                                      \n" +
       "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                                      \n" +
       "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                                      \n" +
       "				`billToId` INT PATH \"$.billToId\" ,                                                      \n" +
       "				`shipToId` INT PATH \"$.shipToId\" ,                                                      \n" +
       "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                                      \n" +
       "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                                      \n" +
       "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                                      \n" +
       "				`termsId` INT PATH \"$.termsId\" ,                                                      \n" +
       "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                                  \n" +
       "				`creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                                        \n" +
       "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                                   \n" +
       "				`refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                                        \n" +
       "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                                   \n" +
       "				`rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                                  \n" +
       "				`contactPersonId` INT PATH \"$.contactPersonId\",                      \n" +
       "				`revision` VARCHAR(10) PATH \"$.revision\",                      \n" +
       "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",                    \n" +
       "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",                 \n" +
       "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,            \n" +
       "				`isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",            \n" +
       "				`agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",    \n" +
       "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\",  \n" +
       "				`refundStatus` VARCHAR(5) PATH \"$.refundStatus\"  \n" +
       "			)                                                        \n" +
       "		) AS CustInv_JT;                                \n" +
       "  \n" +
       "  \n" +
       "	SELECT  termsDays INTO 	vTermsDays                                                      \n" +
       "	FROM genericCategory gc                                                       \n" +
       "	WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                                      \n" +
       "	AND categoryType = 'Payment Terms';   \n" +
       "  \n" +
       "	IF (pInvoiceID IS NULL)THEN                        \n" +
       "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                                            \n" +
       "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                                            \n" +
       "			FROM `identity`                                                            \n" +
       "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                                           \n" +
       "  \n" +
       "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                            \n" +
       "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                            \n" +
       "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                            \n" +
       "				packingSlipComment,headerComment,sorevision,                                                            \n" +
       "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                                            \n" +
       "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                                          \n" +
       "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                                       \n" +
       "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                                          \n" +
       "				refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,                      \n" +
       "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation,  \n" +
       "				refundStatus)                                                                 \n" +
       "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                            \n" +
       "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                            \n" +
       "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                       \n" +
       "					packingSlipComment,headerComment,sorevision,                                                            \n" +
       "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                                           \n" +
       "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                                          \n" +
       "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                                      \n" +
       "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                                          \n" +
       "					refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,                      \n" +
       "					contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0,  \n" +
       "					refundStatus                                   \n" +
       "			FROM temp_customerInvoice ;			                                                      \n" +
       "  \n" +
       "		 SET pInvoiceID=LAST_INSERT_ID();                                                              \n" +
       "  \n" +
       "		 UPDATE customer_packingslip                                                             \n" +
       "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                                             \n" +
       "		 WHERE id= pPackingSlipID;                                                                \n" +
       "  \n" +
       "	 IF pPackingSlipID IS NOT NULL THEN                     \n" +
       "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order                    \n" +
       "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                                            \n" +
       "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                                          \n" +
       "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                                            \n" +
       "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                                            \n" +
       "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,                      \n" +
       "		    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                                \n" +
       "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                                            \n" +
       "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,                  \n" +
       "		    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),                    \n" +
       "		    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                                         \n" +
       "					cpd.shippingNotes,cpd.whID,cpd.binID,                  \n" +
       "		    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                                          \n" +
       "					puserRoleID,puserRoleID,                  \n" +
       "		    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                                            \n" +
       "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,                  \n" +
       "		    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),                  \n" +
       "		    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),                  \n" +
       "		    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),                  \n" +
       "		    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),                      \n" +
       "		    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),                  \n" +
       "		    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,                   \n" +
       "		    cpd.isZeroValue                                                          \n" +
       "			FROM customer_packingslip_det   cpd                          \n" +
       "	    LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0                  \n" +
       "	    LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0                  \n" +
       "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                                             \n" +
       "			AND cpd.isDeleted = 0;                              \n" +
       "  \n" +
       "	    IF pPackingSlipType = 2 THEN -- PO/SO INV            \n" +
       "	    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                            \n" +
       "							commissionPercentage, commissionValue, quoted_commissionPercentage,                            \n" +
       "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,                            \n" +
       "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)                            \n" +
       "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,                          \n" +
       "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,                            \n" +
       "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
       "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes                             \n" +
       "					FROM salesorderdet_commission_attribute_mstdet sca                            \n" +
       "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                              \n" +
       "					AND cpd.refCustPackingSlipID =  pInvoiceID;             \n" +
       "					-- child records                      \n" +
       "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                            \n" +
       "							commissionPercentage, commissionValue, org_commissionPercentage,                            \n" +
       "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                            \n" +
       "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                            \n" +
       "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,                            \n" +
       "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                            \n" +
       "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
       "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                             \n" +
       "					FROM salesorderdet_commission_attribute sca                            \n" +
       "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                              \n" +
       "					AND cpd.refCustPackingSlipID =  pInvoiceID;                              \n" +
       "  \n" +
       "	     ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV                   \n" +
       "					-- SP to generate line wise sales commission.                        \n" +
       "		    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);                        \n" +
       "		-- Sales Price details for Part master          \n" +
       "		    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                            \n" +
       "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                            \n" +
       "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                            \n" +
       "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                            \n" +
       "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,                            \n" +
       "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                            \n" +
       "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
       "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                             \n" +
       "					FROM temp_salesCommission sca                         \n" +
       "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                              \n" +
       "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;            \n" +
       "  \n" +
       "  \n" +
       "					-- save sales commission details for RFQ          \n" +
       "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;                                                                                        \n" +
       "			     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS            \n" +
       "			       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca           \n" +
       "			       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                              \n" +
       "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;          \n" +
       "  \n" +
       "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;          \n" +
       "			SET v_incrementI=0;          \n" +
       "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO          \n" +
       "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;          \n" +
       "  \n" +
       "				SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;       \n" +
       "  \n" +
       "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM           \n" +
       "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;          \n" +
       "  \n" +
       "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN      \n" +
       "					SET @totalCommissionValue=(@totalUnitPrice/2);      \n" +
       "				END IF;      \n" +
       "  \n" +
       "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));          \n" +
       "  \n" +
       "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                            \n" +
       "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                            \n" +
       "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                            \n" +
       "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)                            \n" +
       "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,                            \n" +
       "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                            \n" +
       "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
       "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID                             \n" +
       "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;          \n" +
       "					-- sales commission child details          \n" +
       "					SELECT LAST_INSERT_ID() INTO @lstID;          \n" +
       "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                            \n" +
       "							commissionPercentage, commissionValue, org_commissionPercentage,                            \n" +
       "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                            \n" +
       "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                            \n" +
       "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,                            \n" +
       "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                            \n" +
       "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
       "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                             \n" +
       "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;           \n" +
       "  \n" +
       "					SET v_incrementI=v_incrementI+1;          \n" +
       "  \n" +
       "			END WHILE temp_commission_Det;            \n" +
       "	     END IF;                               \n" +
       "	END IF;                                                      \n" +
       "  \n" +
       "	ELSE                         \n" +
       "  \n" +
       "  \n" +
       "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                                      \n" +
       "			UPDATE customer_packingslip cp                                                      \n" +
       "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                      \n" +
       "			SET cp.invoiceDate= tci.invoiceDate,                                                      \n" +
       "				cp.`status`= tci.status,  			                                                            \n" +
       "				cp.subStatus = tci.subStatus,                                                      \n" +
       "				cp.headerComment= tci.headerComment,                                                      \n" +
       "				cp.packingSlipComment= tci.packingSlipComment,                                                      \n" +
       "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,                                            \n" +
       "				cp.updatedAt = fun_DatetimetoUTCDateTime(),                                            \n" +
       "				cp.updatedBy = puserID,                                            \n" +
       "				cp.updateByRoleId = puserRoleID  ,                                  \n" +
       "				cp.billingAddress= tci.billingAddress,                                                      \n" +
       "				cp.shippingAddress= tci.shippingAddress,                                                      \n" +
       "				cp.intermediateAddress= tci.intermediateAddress,                                  \n" +
       "				cp.contactPersonId = tci.contactPersonId,                                  \n" +
       "				cp.billToId = tci.billToId,                                        \n" +
       "				cp.shipToId  = tci.shipToId,                                        \n" +
       "				cp.intermediateShipmentId = tci.intermediateShipmentId,                      \n" +
       "				cp.revision = LPAD(tci.revision,2,'0'),                      \n" +
       "				cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,                    \n" +
       "				cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),                \n" +
       "				cp.poRevision = tci.poRevision ,    \n" +
       "				cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation    \n" +
       "			WHERE cp.id=pInvoiceID                    \n" +
       "			AND cp.transType = pTransType;                                                         \n" +
       "  \n" +
       "		ELSE     \n" +
       "  \n" +
       "			IF (pTransType = 'C') THEN  \n" +
       "				/* get total refunded amount till now  */	  \n" +
       "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfCreditMemo  \n" +
       "				FROM packingslip_invoice_payment_det  \n" +
       "				WHERE refRefundCustCreditMemoID = pInvoiceID  \n" +
       "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "				;  \n" +
       "  \n" +
       "				/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
       "				IF (IFNULL((SELECT agreedRefundAmt FROM temp_customerInvoice),0) < vTotRefundIssuedOfCreditMemo) THEN  \n" +
       "					SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
       "				END IF;  \n" +
       "			END IF;	  \n" +
       "  \n" +
       "			IF (vIsAgreedRefundLessThanTotIssued = 0) THEN					  \n" +
       "				# in case of tariff invoice & credit memo update all other field                                                      \n" +
       "				UPDATE customer_packingslip  cp                                                        \n" +
       "					JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                      \n" +
       "				SET	cp.status= tci.status,                                                      \n" +
       "					cp.subStatus= tci.subStatus,                                                      \n" +
       "					cp.poNumber= tci.poNumber,                                                      \n" +
       "					cp.poDate= tci.poDate,                                                      \n" +
       "					cp.soNumber= tci.soNumber,                                                      \n" +
       "					cp.soDate= tci.soDate,                                                      \n" +
       "					cp.packingSlipNumber= tci.packingSlipNumber,                                                      \n" +
       "					cp.packingSlipDate= tci.packingSlipDate,                                                      \n" +
       "					cp.invoiceDate= tci.invoiceDate,                                                      \n" +
       "					cp.shippingMethodID= tci.shippingMethodID,                                                      \n" +
       "					cp.headerComment= tci.headerComment,                                                      \n" +
       "					cp.packingSlipComment= tci.packingSlipComment,                                                      \n" +
       "					cp.billingAddress= tci.billingAddress,                                                      \n" +
       "					cp.shippingAddress= tci.shippingAddress,                                                      \n" +
       "					cp.intermediateAddress= tci.intermediateAddress,                                                      \n" +
       "					cp.totalAmount= IFNULL(tci.totalAmount,0),                                                      \n" +
       "					cp.freeOnBoardId= tci.freeOnBoardId,                                                      \n" +
       "					cp.termsId= tci.termsId,                       \n" +
       "					cp.termsDays = vTermsDays,                      \n" +
       "					cp.salesCommissionTo= tci.salesCommissionTo ,                                                  \n" +
       "					cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                                  \n" +
       "					cp.refDebitMemoDate = tci.refDebitMemoDate,                                            \n" +
       "					cp.updatedAt = fun_DatetimetoUTCDateTime(),                                            \n" +
       "					cp.updatedBy = puserID,                                            \n" +
       "					cp.updateByRoleId = puserRoleID,                                          \n" +
       "					cp.rmaNumber= tci.rmaNumber,                                        \n" +
       "					cp.billToId = tci.billToId,                                        \n" +
       "					cp.shipToId  = tci.shipToId,                                        \n" +
       "					cp.intermediateShipmentId = tci.intermediateShipmentId ,                                      \n" +
       "					cp.invoiceNumber = tci.invoiceNumber ,                                  \n" +
       "					cp.contactPersonId = tci.contactPersonId,                      \n" +
       "					cp.revision =  LPAD(tci.revision,2,'0'),                      \n" +
       "					cp.isZeroValue = IFNULL(tci.isZeroValue,0),                    \n" +
       "					cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),                \n" +
       "					cp.poRevision = tci.poRevision ,            \n" +
       "					cp.isMarkForRefund = tci.isMarkForRefund,             \n" +
       "					cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),    \n" +
       "					cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
       "					cp.refundStatus = (CASE WHEN pTransType = 'C' THEN  \n" +
       "								(CASE WHEN tci.isMarkForRefund = 1 THEN  \n" +
       "									(CASE WHEN vTotRefundIssuedOfCreditMemo = 0 THEN 'PE'  \n" +
       "										WHEN vTotRefundIssuedOfCreditMemo < ABS(IFNULL(tci.totalAmount,0)) THEN 'PR'  \n" +
       "										WHEN vTotRefundIssuedOfCreditMemo = ABS(IFNULL(tci.totalAmount,0)) THEN 'FR'  \n" +
       "									   END)	  \n" +
       "								ELSE 'NA' END)  \n" +
       "							ELSE NULL END)    \n" +
       "				 WHERE cp.id = pInvoiceID                    \n" +
       "				 AND cp.transType = pTransType;     \n" +
       "  \n" +
       "			 END IF;                                                      \n" +
       "  \n" +
       "		END IF;                                                      \n" +
       "  \n" +
       "	  END IF;  \n" +
       "  \n" +
       "  \n" +
       "	  /* Resp[0] - created invoice/credit memo mst ID  */	  \n" +
       "	  SELECT pInvoiceID invoiceID;                                                                \n" +
       "	/* Resp[1] - detail Id  */   \n" +
       "	SELECT id  detId ,refSalesorderDetId , reflineID                                                        \n" +
       "	FROM customer_packingslip_det                                                         \n" +
       "	WHERE  refCustPackingSlipID = pInvoiceID                                                         \n" +
       "	AND isDeleted = 0;      \n" +
       "  \n" +
       "	/* Resp[2] - store procedure status  */  \n" +
       "	  IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
       "		SELECT 0 AS 'spStatus' ;    \n" +
       "	  ELSE    \n" +
       "		SELECT 1 AS 'spStatus' ;    \n" +
       "	  END IF;    \n" +
       "  \n" +
       "	  /* Resp[3] -  Agreed Refund Amount Less Than Total Issued Amout */   \n" +
       "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN    \n" +
       "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;    \n" +
       "	ELSE    \n" +
       "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;    \n" +
       "	END IF;   \n" +
       "  \n" +
       "  \n" +
       "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;                       \n" +
       "  \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
       "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(    \n" +
       "	IN ppageIndex INT,    \n" +
       "	IN precordPerPage INT,    \n" +
       "	IN pOrderBy VARCHAR(255),    \n" +
       "	IN pWhereClause VARCHAR(16383),    \n" +
       "	IN pCustomerIDs VARCHAR(16383),    \n" +
       "	IN pPaymentMethodIDs VARCHAR(16383),    \n" +
       "	IN pBankAccountCodeIDs VARCHAR(16383),    \n" +
       "	IN pExactPaymentNumberSearch TINYINT,    \n" +
       "	IN pPaymentNumber VARCHAR(1000),    \n" +
       "	IN pInvoiceNumber VARCHAR(1000),    \n" +
       "	IN pAmount VARCHAR(50),    \n" +
       "	IN pExactPaymentAmountSearch TINYINT,    \n" +
       "	IN pFromDate DATE,    \n" +
       "	IN pToDate DATE,    \n" +
       "	IN pFromAppliedDate DATE,    \n" +
       "	IN pToAppliedDate DATE,    \n" +
       "	IN pIsDisplayZeroPaymentDataOnly TINYINT,    \n" +
       "	IN pRefPaymentMode VARCHAR(10),    \n" +
       "	IN pIsIncludeVoidedTransaction TINYINT ,  \n" +
       "	IN pPaymentRefundStatusFilter VARCHAR(100)  \n" +
       ")  \n" +
       "BEGIN    \n" +
       "	DECLARE pOffset INT;    \n" +
       "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
       "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
       "	DECLARE v_TimeZone VARCHAR(50);    \n" +
       "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);    \n" +
       "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);    \n" +
       "	DECLARE v_JoinWithCPSForCM VARCHAR(500);    \n" +
       "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);    \n" +
       "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);    \n" +
       "	DECLARE v_AppliedDateCon VARCHAR(200);    \n" +
       "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);    \n" +
       "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);    \n" +
       "	DECLARE v_PayRefundTblJoin VARCHAR(1000);    \n" +
       "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);   \n" +
       "	DECLARE v_FieldsForPayStatus VARCHAR(1000);   \n" +
       "	DECLARE v_PaymentRefundStatusWhereClause VARCHAR(500);   \n" +
       "  \n" +
       "  \n" +
       "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
       "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
       "  \n" +
       "	SET v_InvoiceNumberWhereClause= '';    \n" +
       "	SET v_JoinWithCPSForCM = '';    \n" +
       "	SET v_FieldsForAppliedCM = '';    \n" +
       "	SET v_AppliedDateWhereClause = '';    \n" +
       "	SET v_AppliedDateCon = '';    \n" +
       "	SET v_FieldsForAppliedWOFF = '';    \n" +
       "	SET v_TypeOfPaymentWhereClause = '';    \n" +
       "	SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
       "	SET v_PayRefundTblJoin = '';    \n" +
       "	SET v_FieldsForPayRefundTbl = '';  \n" +
       "	SET v_FieldsForPayStatus = '\"\"';  \n" +
       "	SET v_PaymentRefundStatusWhereClause = '';  \n" +
       "  \n" +
       "  \n" +
       "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
       "  		SET pWhereClause = '1=1' ;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "        IF(pPaymentNumber IS NOT NULL) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');    \n" +
       "	END IF;   \n" +
       "  \n" +
       "	IF pPaymentRefundStatusFilter IS NOT NULL THEN    \n" +
       "		SET v_PaymentRefundStatusWhereClause = CONCAT(' AND FIND_IN_SET(psip.refundStatus,''', pPaymentRefundStatusFilter ,''')');    \n" +
       "	END IF;     \n" +
       "  \n" +
       "	/* show direct payment data or customer credit memo data */    \n" +
       "  \n" +
       "  \n" +
       "	IF (pRefPaymentMode = 'R') THEN  \n" +
       "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
       "								FROM packingslip_invoice_payment_det   \n" +
       "								WHERE refRefundPaymentID IS NOT NULL  \n" +
       "								AND isDeleted = 0 AND isPaymentVoided = 0					  \n" +
       "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
       "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');   \n" +
       "		SET v_FieldsForPayRefundTbl = CONCAT(' paymentTotRefundDetTemp.totRefundIssuedOfPayment ,   \n" +
       "						psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
       "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =   \n" +
       "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN   \n" +
       "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
       "										ELSE \"No Pending Amount\" END)  \n" +
       "							ELSE  \n" +
       "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
       "									THEN \"Not Applied\"   \n" +
       "									ELSE \"Partially Applied\" END)  \n" +
       "							END) ') ;  \n" +
       "  \n" +
       "  \n" +
       "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */    \n" +
       "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');    \n" +
       "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');    \n" +
       "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,    \n" +
       "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,    \n" +
       "			fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,    \n" +
       "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,   \n" +
       "			cps.paymentStatus AS CMPaymentStatus,   \n" +
       "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus, 	   \n" +
       "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
       "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,	  \n" +
       "			');    \n" +
       "  \n" +
       "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */    \n" +
       "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF (pInvoiceNumber IS NOT NULL) THEN    \n" +
       "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND    \n" +
       "             EXISTS(    \n" +
       "			SELECT  1    \n" +
       "			FROM packingslip_invoice_payment_det    \n" +
       "			WHERE refPayementid = psip.id    \n" +
       "			AND isDeleted=0    \n" +
       "			AND refCustPackingslipInvoiceID IN (SELECT id    \n" +
       "								FROM customer_packingslip    \n" +
       "								WHERE transType = \"I\"    \n" +
       "								AND invoiceNumber = \"',pInvoiceNumber,'\"    \n" +
       "								AND isDeleted=0)    \n" +
       "			 )');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF(pAmount IS NOT NULL) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');    \n" +
       "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');    \n" +
       "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN    \n" +
       "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN    \n" +
       "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');    \n" +
       "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN    \n" +
       "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');    \n" +
       "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN    \n" +
       "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');    \n" +
       "		END IF;    \n" +
       "  \n" +
       "		SET v_AppliedDateWhereClause = CONCAT(' AND    \n" +
       "			EXISTS(    \n" +
       "				SELECT  1    \n" +
       "				FROM packingslip_invoice_payment_det    \n" +
       "				WHERE refPayementid = psip.id    \n" +
       "				',v_AppliedDateCon,'    \n" +
       "				AND isDeleted=0    \n" +
       "			 )');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF (pIsIncludeVoidedTransaction = 0) THEN    \n" +
       "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"    \n" +
       "            SELECT    \n" +
       "		psip.id,    \n" +
       "                psip.mfgcodeID,    \n" +
       "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,    \n" +
       "                psip.isPaymentVoided,    \n" +
       "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
       "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,   \n" +
       "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,    \n" +
       "		psip.voidPaymentReason,    \n" +
       "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,    \n" +
       "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,    \n" +
       "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')    \n" +
       "										ELSE NULL END) AS voidedAt,    \n" +
       "                psip.refVoidedPaymentNumber,    \n" +
       "                psip.refVoidedPaymentId,    \n" +
       "                psip.paymentNumber,    \n" +
       "                psip.bankName,    \n" +
       "                psip.bankAccountNo,    \n" +
       "                psip.paymentType,    \n" +
       "                psip.bankAccountMasID,    \n" +
       "                psip.systemId ,    \n" +
       "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,    \n" +
       "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,    \n" +
       "                gc.gencCategoryName paymentMethod,    \n" +
       "                gc.systemGenerated systemGeneratedPaymentMethod,    \n" +
       "		psip.paymentDate,    \n" +
       "                psip.paymentAmount,    \n" +
       "		psip.payToAddress payToAddress,    \n" +
       "                psip.accountReference,    \n" +
       "                psip.remark,    \n" +
       "                psip.lockStatus,    \n" +
       "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'    \n" +
       "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,    \n" +
       "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,    \n" +
       "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,    \n" +
       "                invPayDetTemp.invoiceNumberList,    \n" +
       "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,    \n" +
       "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,    \n" +
       "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'    \n" +
       "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)    \n" +
       "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'    \n" +
       "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)    \n" +
       "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'    \n" +
       "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)    \n" +
       "			ELSE NULL END) AS totalDocuments ,    \n" +
       "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
       "		\" ,v_FieldsForPayRefundTbl ,\"  	  \n" +
       "		\" , v_FieldsForAppliedCM ,\"    \n" +
       "		\" , v_FieldsForAppliedWOFF ,\"    \n" +
       "		fun_getUserNameByID(psip.createdBy) createdby,    \n" +
       "		fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
       "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,    \n" +
       "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
       "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,    \n" +
       "		fun_getRoleByID(psip.createByRoleId) createdbyRole    \n" +
       "	   FROM packingslip_invoice_payment psip    \n" +
       "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0    \n" +
       "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,    \n" +
       "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount    \n" +
       "				    FROM packingslip_invoice_payment_det psipd    \n" +
       "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id    \n" +
       "											AND cps.isDeleted = 0    \n" +
       "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL    \n" +
       "				     AND psipd.isDeleted = 0    \n" +
       "				     GROUP BY psipd.refPayementid ) invPayDetTemp    \n" +
       "				ON psip.id = invPayDetTemp.refPayementid   \n" +
       "			\", v_PayRefundTblJoin ,\"    \n" +
       "			\", v_JoinWithCPSForCM ,\"    \n" +
       "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'    \n" +
       "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause ,   \n" +
       "		v_IsIncludeVoidedTransWhereClause ,v_PaymentRefundStatusWhereClause , \"    \n" +
       "             AND psip.isDeleted = 0 \"    \n" +
       "             );    \n" +
       "  \n" +
       "  \n" +
       "	-- select @Sproc_RetrieveCustomerInvoicePayment ;  \n" +
       "  \n" +
       "  \n" +
       "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
       "		SET pOrderBy = \" ORDER BY id DESC \";    \n" +
       "	ELSE    \n" +
       "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
       "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
       "	ELSE    \n" +
       "		SET rowNumWhere = '';    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* to get total count of rows */    \n" +
       "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);    \n" +
       "  \n" +
       "        PREPARE query1 FROM @SQLStatement1;    \n" +
       "	EXECUTE query1;    \n" +
       "	DEALLOCATE PREPARE query1;    \n" +
       "  \n" +
       "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
       "  \n" +
       "	PREPARE query2 FROM @SQLStatement2;    \n" +
       "	EXECUTE query2;    \n" +
       "	DEALLOCATE PREPARE query2;    \n" +
       "  \n" +
       "  \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
       "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(    \n" +
       "	IN ppageIndex INT,    \n" +
       "	IN precordPerPage INT,    \n" +
       "	IN pOrderBy VARCHAR(255),    \n" +
       "	IN pWhereClause VARCHAR(16383),    \n" +
       "	IN pFilterStatus LONGTEXT,    \n" +
       "	IN pDueDate DATE,    \n" +
       "	IN pAdditionalDays INT,    \n" +
       "	IN pTermsAndAboveDays INT,    \n" +
       "	IN pPoNumber VARCHAR(50),    \n" +
       "	IN pIsExactSearchPO TINYINT,    \n" +
       "	IN pMfgCodeIds LONGTEXT ,    \n" +
       "	IN pPaymentTermsIds LONGTEXT ,    \n" +
       "	IN pPartId INT,    \n" +
       "	IN pTransType VARCHAR(5) ,    \n" +
       "	IN pFromDate DATE,    \n" +
       "	IN pToDate DATE,    \n" +
       "	IN pPaymentStatusFilter VARCHAR(50) ,    \n" +
       "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,    \n" +
       "	IN pZeroAmountFilter TINYINT,  \n" +
       "	IN pCreditMemoRefundStatusFilter VARCHAR(100)  \n" +
       "    -- IN pChequeNumber  VARCHAR(50)    \n" +
       ")  \n" +
       "BEGIN    \n" +
       "  \n" +
       "	DECLARE pOffset INT;    \n" +
       "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
       "	DECLARE vDateTimeDisplayFormat VARCHAR(100);    \n" +
       "	DECLARE vTimeZone VARCHAR(50);    \n" +
       "	DECLARE v_receivedAmtSF VARCHAR(1000);    \n" +
       "	DECLARE v_appliedCMPDJoin VARCHAR(500);    \n" +
       "  \n" +
       "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
       "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
       "	SET v_appliedCMPDJoin = '';    \n" +
       "  \n" +
       "	IF pTransType = 'C' THEN    \n" +
       "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,			  \n" +
       "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
       "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
       "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");    \n" +
       "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'    \n" +
       "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");    \n" +
       "	ELSE    \n" +
       "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"    \n" +
       "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,    \n" +
       "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,    \n" +
       "        cp.packingSlipNumber,cp.packingslipDate,    \n" +
       "        cp.invoiceNumber,cp.invoiceDate,    \n" +
       "        cp.creditMemoNumber, cp.creditMemoDate,    \n" +
       "        cp.refDebitMemoNumber, cp.refDebitMemoDate,    \n" +
       "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'    \n" +
       "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,    \n" +
       "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1    \n" +
       "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,    \n" +
       "        cp.soNumber,cp.soDate,    \n" +
       "		cp.sorevision,    \n" +
       "        cp.refSalesOrderID,    \n" +
       "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,    \n" +
       "        cp.refCustInvoiceID,    \n" +
       "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,    \n" +
       "		 cp.status,    \n" +
       "         cp.subStatus,    \n" +
       "           /* case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'NI'    \n" +
       "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'WP'    \n" +
       "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'PTR'    \n" +
       "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'PR'    \n" +
       "                when cp.transType = 'C' then '' END as paymentStatusCode,    \n" +
       "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Not Invoiced'    \n" +
       "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'    \n" +
       "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'    \n" +
       "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'    \n" +
       "                when cp.transType = 'C' then '' END as paymentStatusValue,   \n" +
       "		 case when cp.transType = 'C' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL')   \n" +
       "			end creditAppliedStatus,                  \n" +
       "                */  \n" +
       "                case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE')   \n" +
       "			end paymentStatusCode,   \n" +
       "		case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL')   \n" +
       "			end paymentStatusValue,   \n" +
       "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
       "			ELSE '' END) AS creditAppliedStatus , 	   \n" +
       "		  cp.paymentStatus,    \n" +
       "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,    \n" +
       "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,    \n" +
       "		  ifnull(cp.totalAmount,0) totalAmount,    \n" +
       "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,    \n" +
       "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,    \n" +
       "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,    \n" +
       "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,    \n" +
       "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,    \n" +
       "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,    \n" +
       "		 m.mfgcode as customerCode,    \n" +
       "         cp.customerID,    \n" +
       "         cp.createdBy as createdById,    \n" +
       "		\",v_receivedAmtSF,\"    \n" +
       "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,    \n" +
       "		 fun_getUserNameByID(cp.updatedBy) updatedby,    \n" +
       "		 fun_getUserNameByID(cp.createdBy) createdby,    \n" +
       "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,    \n" +
       "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,    \n" +
       "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
       "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,    \n" +
       "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,    \n" +
       "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,    \n" +
       "         cp.termsDays termDays,    \n" +
       "         cp.freeOnBoardName,    \n" +
       "         cp.isLocked,    \n" +
       "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,    \n" +
       "         fun_getUserNameByID(cp.lockedBy) lockedBy,    \n" +
       "         fun_getRoleByID(cp.lockedByRole) lockedByRole,    \n" +
       "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,    \n" +
       "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,    \n" +
       "         packingSlip.id packingSlipId,    \n" +
       "         (select group_concat(paymentNumber)    \n" +
       "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd    \n" +
       "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0    \n" +
       "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,    \n" +
       "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,    \n" +
       "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,    \n" +
       "  \n" +
       "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,    \n" +
       "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,    \n" +
       "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,    \n" +
       "         m.paymentTermsID custPaymentTermsId,    \n" +
       "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,    \n" +
       "         gc.termsDays custTermsDays,    \n" +
       "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,    \n" +
       "         cp.revision    \n" +
       "	 FROM customer_packingslip cp    \n" +
       "		JOIN mfgcodemst m on m.id = cp.customerID    \n" +
       "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0    \n" +
       "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'    \n" +
       "		\" , v_appliedCMPDJoin ,\"    \n" +
       "	WHERE  cp.isDeleted=0    \n" +
       "        AND cp.transType = '\" , pTransType,\"'\");    \n" +
       "  \n" +
       "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
       "		IF pTransType = 'I' THEN    \n" +
       "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";    \n" +
       "        ELSE    \n" +
       "			SET pOrderBy = \"ORDER BY c.id DESC\";    \n" +
       "        END IF;    \n" +
       "	ELSE    \n" +
       "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
       "	END IF;    \n" +
       "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
       "		SET pWhereClause = '1=1' ;    \n" +
       "	END IF;    \n" +
       "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN    \n" +
       "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN    \n" +
       "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "    IF pPartId IS NOT NULL THEN    \n" +
       "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');    \n" +
       "    END IF;    \n" +
       "	# IF(pChequeNumber IS NOT NULL)THEN    \n" +
       "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');    \n" +
       "	# END IF;    \n" +
       "  \n" +
       "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN    \n" +
       "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "    IF pDueDate IS NOT NULL THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");    \n" +
       "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");    \n" +
       "	END IF;    \n" +
       "  \n" +
       "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN    \n" +
       "		IF pIsExactSearchPO = 1 THEN    \n" +
       "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'    \n" +
       "										OR 	c.poNumber = '\", pPoNumber, \"'    \n" +
       "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'    \n" +
       "										OR 	c.invoiceNumber = '\", pPoNumber, \"'    \n" +
       "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"    \n" +
       "						);    \n" +
       "		ELSE    \n" +
       "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'    \n" +
       "										OR 	c.poNumber like '%\", pPoNumber, \"%'    \n" +
       "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'    \n" +
       "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'    \n" +
       "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"    \n" +
       "						);    \n" +
       "		END IF;    \n" +
       "	END IF;    \n" +
       "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;    \n" +
       "  IF pFromDate IS NOT NULL THEN    \n" +
       "        IF pTransType = 'I' THEN    \n" +
       "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");    \n" +
       "        ELSE    \n" +
       "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");    \n" +
       "        END IF;    \n" +
       "    END IF;    \n" +
       "  \n" +
       "    IF pToDate IS NOT NULL THEN    \n" +
       "        IF pTransType = 'I' THEN    \n" +
       "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");    \n" +
       "        ELSE    \n" +
       "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");    \n" +
       "        END IF;    \n" +
       "    END IF;    \n" +
       "  \n" +
       "     IF pPaymentStatusFilter IS NOT NULL THEN    \n" +
       "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF pCreditAppliedStatusFilter IS NOT NULL THEN    \n" +
       "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');    \n" +
       "	END IF;   \n" +
       "  \n" +
       "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN    \n" +
       "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	    -- filter zero amount invoice    \n" +
       "	    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN    \n" +
       "			SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');    \n" +
       "	    END IF;    \n" +
       "  \n" +
       "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
       "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
       "	ELSE    \n" +
       "		SET rowNumWhere = '';    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	 /* to get total count of rows */    \n" +
       "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);    \n" +
       "	PREPARE query2 FROM @SQLStatement2;    \n" +
       "	EXECUTE query2;    \n" +
       "	DEALLOCATE PREPARE query2;    \n" +
       "  \n" +
       "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,    \n" +
       "		 round((c.totalAmount),2) totalAmount,    \n" +
       "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,    \n" +
       "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)    \n" +
       "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,    \n" +
       "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)    \n" +
       "						else '' end) materialStatus from ( \",    \n" +
       "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
       "  \n" +
       "	-- select @SQLStatement2	;    \n" +
       "  \n" +
       "	PREPARE query1 FROM @SQLStatement2;    \n" +
       "	EXECUTE query1;    \n" +
       "	DEALLOCATE PREPARE query1;    \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(      \n" +
       "	IN pCustCreditMemoMstID INT ,      \n" +
       "	IN pCustomerPaymentMstID INT      \n" +
       "    )  \n" +
       "BEGIN      \n" +
       "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
       "		DECLARE v_TimeZone VARCHAR(50);      \n" +
       "		SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
       "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
       "  \n" +
       "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate ,   \n" +
       "			cps.totalAmount ,  cps.agreedRefundAmt ,      \n" +
       "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,      \n" +
       "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,      \n" +
       "			psip.paymentNumber ,  \n" +
       "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
       "					AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
       "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,      \n" +
       "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN NULL ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
       "			cps.paymentStatus AS CMPaymentStatus,   \n" +
       "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
       "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,      \n" +
       "			fun_getUserNameByID(psip.createdBy) createdby      \n" +
       "	FROM customer_packingslip AS cps      \n" +
       "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID      \n" +
       "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'      \n" +
       "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)      \n" +
       "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)      \n" +
       "	WHERE cps.id = pCustCreditMemoMstID      \n" +
       "	AND cps.isDeleted = 0      \n" +
       "		;       \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetAllCreditMemoOfCustomerPayment` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetAllCreditMemoOfCustomerPayment`(        \n" +
       "	IN pCustomerID INT,        \n" +
       "	IN pCreditMemoTransType VARCHAR(5)        \n" +
       "    )  \n" +
       "BEGIN        \n" +
       "  \n" +
       "	SELECT tempcmdet.*    \n" +
       "	FROM (    \n" +
       "		SELECT cps.id AS creditMemoMstID,         \n" +
       "			cps.creditMemoNumber, cps.creditMemoDate,        \n" +
       "			cps.refDebitMemoNumber, cps.refDebitMemoDate,         \n" +
       "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,        \n" +
       "			(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment      \n" +
       "				WHERE refCustCreditMemoID = cps.id     \n" +
       "				AND refPaymentMode = 'CA'      \n" +
       "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
       "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
       "				AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo 	      \n" +
       "		FROM customer_packingslip cps        \n" +
       "		WHERE cps.transType = pCreditMemoTransType  -- 'C' - credit memo        \n" +
       "		AND cps.customerID = pCustomerID        \n" +
       "		AND cps.`status` = 2        \n" +
       "		AND cps.isDeleted = 0    \n" +
       "		) tempcmdet    \n" +
       "	WHERE (ABS(originalCreditMemoAmount) - IFNULL(pastPaidAmountFromCreditMemo,0) > 0)	         \n" +
       "	;        \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "    END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(      \n" +
       "	IN pPageIndex INT,      \n" +
       "	IN pRecordPerPage INT,      \n" +
       "	IN pOrderBy VARCHAR(255),      \n" +
       "	IN pWhereClause VARCHAR(16383),      \n" +
       "	IN pRequestType VARCHAR(5),      \n" +
       "	IN pAgedReceivablesDueAsOfDate DATE ,      \n" +
       "	IN pDueDate DATE ,      \n" +
       "	IN pAdditionalDays INT,      \n" +
       "	IN pTermsAndAboveDays INT  ,      \n" +
       "	IN pIsIncludeZeroValueInvoices TINYINT      \n" +
       "    )  \n" +
       "BEGIN      \n" +
       "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */      \n" +
       "	DECLARE vDueDate DATE;      \n" +
       "	DECLARE pOffset INT;      \n" +
       "	DECLARE rowNumWhere VARCHAR(255);      \n" +
       "	DECLARE vDateDisplayFormat VARCHAR(15);      \n" +
       "	DECLARE vTimeZone VARCHAR(50);      \n" +
       "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);      \n" +
       "  \n" +
       "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */      \n" +
       "  \n" +
       "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */      \n" +
       "		SET vDueDate = pAgedReceivablesDueAsOfDate;      \n" +
       "  \n" +
       "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */      \n" +
       "		IF (pTermsAndAboveDays IS NOT NULL) THEN      \n" +
       "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;      \n" +
       "			SELECT fun_getTimeZone() INTO vTimeZone;      \n" +
       "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;      \n" +
       "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);      \n" +
       "		ELSE      \n" +
       "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);      \n" +
       "		END IF;      \n" +
       "  \n" +
       "	END IF;      \n" +
       "  \n" +
       "	SET @temp_balanceDue = CONCAT(\"      \n" +
       "	SELECT      \n" +
       "		temp_aged_details.customerID,      \n" +
       "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName,      \n" +
       "		temp_aged_details.termsDays AS custCurrTermDays,      \n" +
       "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,      \n" +
       "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,      \n" +
       "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,      \n" +
       "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,      \n" +
       "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,      \n" +
       "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,      \n" +
       "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,      \n" +
       "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,      \n" +
       "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,      \n" +
       "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,      \n" +
       "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,      \n" +
       "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,      \n" +
       "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,      \n" +
       "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,      \n" +
       "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,      \n" +
       "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,      \n" +
       "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,      \n" +
       "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (      \n" +
       "		SELECT      \n" +
       "				  `cid`.`customerID`                  AS `customerID`,      \n" +
       "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,      \n" +
       "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,      \n" +
       "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,      \n" +
       "				  SUM(`cid`.`dratftCreditMemoCount`)      AS `dratftCreditMemoCount`,      \n" +
       "				  -- `cid`.`DocDate`                  AS `DocDate`,      \n" +
       "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,      \n" +
       "				  `cpt`.`termsDays`                   AS `termsDays`,      \n" +
       "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) AS `DueDaysDiff`,      \n" +
       "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,      \n" +
       "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,      \n" +
       "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,      \n" +
       "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,      \n" +
       "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,      \n" +
       "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,      \n" +
       "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,      \n" +
       "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),      \n" +
       "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,      \n" +
       "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,      \n" +
       "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,      \n" +
       "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,      \n" +
       "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,      \n" +
       "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,      \n" +
       "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,      \n" +
       "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,      \n" +
       "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount      \n" +
       "                  FROM      \n" +
       "(      \n" +
       "	SELECT      \n" +
       "					 `a`.`customerID`                     AS `customerID`,      \n" +
       "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,      \n" +
       "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,      \n" +
       "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,      \n" +
       "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,      \n" +
       "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,      \n" +
       "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,      \n" +
       "					0                                    AS `totalUnappliedAmount`,      \n" +
       "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,      \n" +
       "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,      \n" +
       "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,      \n" +
       "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`      \n" +
       "                       FROM `customer_packingslip` `a`      \n" +
       "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,      \n" +
       "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,      \n" +
       "										      0									  	AS `totalCreditMemoAppliedAmount`,      \n" +
       "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`      \n" +
       "										    FROM (`packingslip_invoice_payment` `a`      \n" +
       "										       LEFT JOIN `packingslip_invoice_payment_det` `b`      \n" +
       "											 ON ((`b`.`refPayementid` = `a`.`id`)))      \n" +
       "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)      \n" +
       "											   AND (`a`.`isPaymentVoided` = 0)      \n" +
       "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))      \n" +
       "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b      \n" +
       "										ON a.id = b.refCustPackingslipInvoiceID      \n" +
       "  \n" +
       "						LEFT JOIN 	(      \n" +
       "									SELECT      \n" +
       "											a.`refCustCreditMemoID` AS refCustCreditMemoID,      \n" +
       "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`      \n" +
       "									FROM `packingslip_invoice_payment` `a`      \n" +
       "										       LEFT JOIN `packingslip_invoice_payment_det` `b`      \n" +
       "											 ON (`b`.`refPayementid` = `a`.`id`)      \n" +
       "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)      \n" +
       "											   AND (`a`.`isPaymentVoided` = 0)      \n" +
       "											   AND (`a`.`refPaymentMode` IN ('R','CA'))      \n" +
       "										    GROUP BY `a`.`refCustCreditMemoID`      \n" +
       "										    ) c  ON a.id = c.refCustCreditMemoID    \n" +
       "						LEFT JOIN (  \n" +
       "									SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
       "										FROM packingslip_invoice_payment_det  \n" +
       "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "										GROUP BY refRefundCustCreditMemoID  \n" +
       "									) d  ON a.id = d.refRefundCustCreditMemoID				        \n" +
       "					WHERE ((`a`.`transType` IN('I','C'))      \n" +
       "                -- AND a.paymentStatus <> 'RE'      \n" +
       "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)      \n" +
       "					      AND (`a`.`isDeleted` = 0))      \n" +
       "	UNION      \n" +
       "      SELECT      \n" +
       "			`a`.`mfgcodeID`                       					AS `customerID`,      \n" +
       "			NULL									AS `refCustPackingslipInvoiceID`,      \n" +
       "			0                                     					AS `invoiceCount`,      \n" +
       "			0                                     					AS `unInvoiceCount`,      \n" +
       "			0                                     					AS `dratftCreditMemoCount`,      \n" +
       "			`a`.`paymentDate`                     					AS `DocDate`,      \n" +
       "			0  									AS `totalRecievedAmount`,   \n" +
       "			((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
       "			0                                     					AS `totalUnappliedCreditMemoAmount`,      \n" +
       "			0									AS `totalCreditMemoAppliedAmount`,      \n" +
       "			0                                     					AS `totalInvoicedAmount`,      \n" +
       "			0                                     					AS `totalDraftAmount`      \n" +
       "			FROM (`packingslip_invoice_payment` `a`      \n" +
       "				LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))      \n" +
       "				LEFT JOIN (  \n" +
       "						SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
       "						FROM packingslip_invoice_payment_det  \n" +
       "						WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "						GROUP BY refRefundPaymentID  \n" +
       "					     ) c  ON a.id = c.refRefundPaymentID  \n" +
       "			WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)      \n" +
       "			AND (`a`.`isPaymentVoided` = 0)      \n" +
       "			AND (`a`.`refPaymentMode` = 'R'))      \n" +
       "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount`      \n" +
       "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0      \n" +
       "                ) AS  cid      \n" +
       "                INNER JOIN `vu_customer_payment_terms` `cpt`      \n" +
       "			     ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)      \n" +
       "                     GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cpt`.`termsDays`, (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY)))      \n" +
       "                ) AS temp_aged_details      \n" +
       "		GROUP BY temp_aged_details.customerID, fun_getMfgCodeAndNameByID(temp_aged_details.customerID), temp_aged_details.termsDays      \n" +
       "		HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)     \n" +
       "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0      \n" +
       "	\");      \n" +
       "  \n" +
       "  \n" +
       "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
       "		SET pOffset = (pPageIndex -1) * pRecordPerPage;      \n" +
       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
       "	ELSE      \n" +
       "		SET rowNumWhere = '';      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
       "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;      \n" +
       "	ELSE      \n" +
       "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
       "		SET pWhereClause = '1=1' ;      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	/* to get total count of rows */      \n" +
       "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );      \n" +
       "	PREPARE query1 FROM @SQLStatement1;      \n" +
       "	EXECUTE query1;      \n" +
       "	DEALLOCATE PREPARE query1;      \n" +
       "  \n" +
       "	SET @SQLStatement2 = CONCAT(\"      \n" +
       "			SELECT 	c.*      \n" +
       "			FROM 	(\", @temp_balanceDue ,\" ) c      \n" +
       "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);      \n" +
       "	-- SELECT @SQLStatement2;      \n" +
       "	PREPARE query2 FROM @SQLStatement2;      \n" +
       "	EXECUTE query2;      \n" +
       "	DEALLOCATE PREPARE query2;      \n" +
       "  \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
       "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(                        \n" +
       "	IN pCustPaymentDetList JSON,     \n" +
       "	IN pCustCMDetList JSON,     \n" +
       "	IN pMfgcodeID INT,                        \n" +
       "	IN pPaymentNumber VARCHAR(50),                        \n" +
       "	IN pPaymentDate DATE,                        \n" +
       "	IN pPaymentAmount DECIMAL(18,8),                        \n" +
       "	IN pPaymentType INT,                        \n" +
       "	IN pAccountReference VARCHAR(50),                        \n" +
       "	IN pBankAccountMasID INT,                        \n" +
       "	IN pBankAccountNo VARCHAR(50),                        \n" +
       "	IN pBankName VARCHAR(255),                        \n" +
       "	IN pRemark VARCHAR(1000),                        \n" +
       "	IN pRefPaymentMode VARCHAR(10),                        \n" +
       "	IN pTotSelectedPayOfCust INT,       \n" +
       "	IN pTotSelectedCMOfCust INT,       \n" +
       "	IN pisConfmTakenForDuplicateCheckNo TINYINT,                     \n" +
       "	IN pSystemID VARCHAR(20),                    \n" +
       "	IN pDepositBatchNumber DECIMAL(6,2) ,     \n" +
       "	IN pUserID INT,                        \n" +
       "	IN pUserRoleID INT,    \n" +
       "	IN pRefGencTransModeID INT,    \n" +
       "	IN pOffsetAmount DECIMAL(18,8)    \n" +
       "    )  \n" +
       "BEGIN                        \n" +
       "	DECLARE insertedRefundMstID INT;                    \n" +
       "	DECLARE vCountExistsCheckNo INT;               \n" +
       "  \n" +
       "	SET vCountExistsCheckNo = 0;             \n" +
       "  \n" +
       "	IF (pRefPaymentMode = 'CR'  AND pisConfmTakenForDuplicateCheckNo = 0) THEN                    \n" +
       "		/* check duplicate check number if confirmation not taken >> CR - Customer Refund */                      \n" +
       "		SELECT COUNT(1) INTO vCountExistsCheckNo                              \n" +
       "		FROM packingslip_invoice_payment                              \n" +
       "		WHERE refPaymentMode = pRefPaymentMode             \n" +
       "		AND paymentNumber = pPaymentNumber                              \n" +
       "		AND mfgcodeID = pMfgcodeID                    \n" +
       "		AND isPaymentVoided = 0                    \n" +
       "		AND isdeleted = 0    ;     \n" +
       "	END IF;                 \n" +
       "  \n" +
       "  \n" +
       "	IF(vCountExistsCheckNo = 0 AND pTotSelectedPayOfCust > 0                     \n" +
       "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN                        \n" +
       "  \n" +
       "		/* get/map all Customer payment Detail List send from UI */                          \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS                                                                    \n" +
       "		SELECT 	*                                                                     \n" +
       "		FROM 	JSON_TABLE(                             \n" +
       "			pCustPaymentDetList,                                                                    \n" +
       "				\"$[*]\" COLUMNS(                            \n" +
       "					`paymentMstID` INT PATH \"$.paymentMstID\",                                                             \n" +
       "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
       "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
       "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,     \n" +
       "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
       "				)                          \n" +
       "			) AS CustPaymentDetList_JT ;                         \n" +
       "  \n" +
       "		/* get all customer payment > against total payment list > available in data base */	                       \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS     \n" +
       "			SELECT psip.id AS paymentMstID,   \n" +
       "				psip.paymentAmount,  \n" +
       "				psip.agreedRefundAmt AS agreedRefundAmount ,                        \n" +
       "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundPaymentID = psip.id                     \n" +
       "					AND isPaymentVoided = 0                        \n" +
       "					AND isDeleted = 0) AS totalRefundIssuedAmount                        \n" +
       "			FROM packingslip_invoice_payment psip                        \n" +
       "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)                         \n" +
       "			AND psip.isDeleted = 0 ;    \n" +
       "  \n" +
       "		/* get all mis match amount records (compare UI data and db available data)                         \n" +
       "			> if selected payment not found from db                        \n" +
       "			> original Agreed Refund Amount Of Payment  mismatch                        \n" +
       "			> Total Refund Issued Amount mismatch                        \n" +
       "			*/	                          \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                         \n" +
       "			SELECT tucipl.*                        \n" +
       "			FROM temp_UI_CustPaymentDetList tucipl                        \n" +
       "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID                        \n" +
       "			WHERE (                        \n" +
       "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))                          \n" +
       "				OR                        \n" +
       "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))	                        \n" +
       "				OR                        \n" +
       "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))                        \n" +
       "				)                        \n" +
       "			;        \n" +
       "  \n" +
       "	ELSEIF (vCountExistsCheckNo = 0 AND pTotSelectedCMOfCust > 0                     \n" +
       "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN     \n" +
       "             /* get/map all Customer CM Detail List send from UI */      \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS                                                                    \n" +
       "		SELECT 	*                                                                     \n" +
       "		FROM 	JSON_TABLE(                             \n" +
       "			pCustCMDetList,                                                                    \n" +
       "				\"$[*]\" COLUMNS(                            \n" +
       "					`paymentMstID` INT PATH \"$.paymentMstID\",       \n" +
       "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",       \n" +
       "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
       "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
       "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,     \n" +
       "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
       "				)                          \n" +
       "			) AS CustCMDetList_JT ;                         \n" +
       "	 -- select * from temp_UI_CustCMDetList;    \n" +
       "  \n" +
       "	/* get all customer Refund > against total CM list > available in data base */	                       \n" +
       "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS     \n" +
       "			SELECT cps.id AS custCreditMemoMstID,     \n" +
       "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,     \n" +
       "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
       "				WHERE refCustCreditMemoID = cps.id       \n" +
       "				AND refPaymentMode = 'CA'        \n" +
       "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,    \n" +
       "			 cps.agreedRefundAmt AS agreedRefundAmount ,      \n" +
       "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "					FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundCustCreditMemoID = cps.id                      \n" +
       "					AND isPaymentVoided = 0                        \n" +
       "					AND isDeleted = 0    \n" +
       "                    ) totalRefundIssuedAmount     \n" +
       "		FROM customer_packingslip AS cps      \n" +
       "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)    \n" +
       "		AND cps.isDeleted = 0 ;    \n" +
       "         -- select * from temp_DB_Available_CustCMDetList;   \n" +
       "  \n" +
       "		/* get all mis match amount records (compare UI data and db available data)                         \n" +
       "			> if selected CM not found from db                        \n" +
       "			> original Agreed Refund Amount Of Refund mismatch                        \n" +
       "			> Total Refund Issued Amount mismatch                        \n" +
       "			*/	                          \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                         \n" +
       "			SELECT tucml.*                        \n" +
       "			FROM temp_UI_CustCMDetList tucml                        \n" +
       "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID                        \n" +
       "			WHERE (                        \n" +
       "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))                          \n" +
       "				OR                        \n" +
       "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))	                        \n" +
       "				OR                        \n" +
       "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))                        \n" +
       "				)                        \n" +
       "			;       \n" +
       "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;    \n" +
       "	END IF;                        \n" +
       "  \n" +
       "	/* set up default temp table if not created */             \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                          \n" +
       "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;     \n" +
       "  \n" +
       "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                          \n" +
       "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;        \n" +
       "  \n" +
       "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))    \n" +
       "					AND (vCountExistsCheckNo = 0)) THEN     \n" +
       "  \n" +
       "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,                        \n" +
       "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,                        \n" +
       "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,                   \n" +
       "			`depositBatchNumber` ,      \n" +
       "			 `offsetAmount`,`refGencTransModeID`,           \n" +
       "			`createdAt`, `createdBy`, `createByRoleId`,              \n" +
       "			`updatedAt`,`updatedBy`,`updateByRoleId`)                        \n" +
       "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,                        \n" +
       "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,                        \n" +
       "			pBankName, pRemark, pRefPaymentMode, pSystemID,                        \n" +
       "			pDepositBatchNumber,       \n" +
       "			pOffsetAmount , pRefGencTransModeID ,    \n" +
       "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,               \n" +
       "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;          \n" +
       "  \n" +
       "		SET insertedRefundMstID = LAST_INSERT_ID();      \n" +
       "  \n" +
       "		IF(pTotSelectedPayOfCust > 0) THEN        \n" +
       "			/* add selected refund payment details data */  \n" +
       "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,             \n" +
       "					`comment` ,    \n" +
       "					`createdAt`, `createdBy`,`createByRoleId`,              \n" +
       "					`updatedAt`, `updatedBy`,`updateByRoleId`)                        \n" +
       "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,            \n" +
       "				COMMENT ,          \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,               \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
       "			FROM temp_UI_CustPaymentDetList ;  \n" +
       "  \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;                                                          \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS   \n" +
       "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
       "  \n" +
       "			/* update refund payment status details */    \n" +
       "			UPDATE packingslip_invoice_payment psip	  \n" +
       "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
       "					FROM packingslip_invoice_payment_det  \n" +
       "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
       "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
       "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
       "			SET psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
       "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
       "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
       "						END) ,  \n" +
       "				updatedBy = pUserID,    \n" +
       "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
       "			AND psip.isPaymentVoided = 0    \n" +
       "			AND psip.isDeleted = 0 ;  \n" +
       "  \n" +
       "  \n" +
       "		ELSEIF(pTotSelectedCMOfCust > 0) THEN        \n" +
       "			/* add selected refund credit memo details data */  \n" +
       "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,             \n" +
       "					`comment` ,    \n" +
       "					`createdAt`, `createdBy`,`createByRoleId`,              \n" +
       "					`updatedAt`, `updatedBy`,`updateByRoleId`)                        \n" +
       "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,            \n" +
       "				COMMENT ,          \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,               \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
       "			FROM temp_UI_CustCMDetList ;   \n" +
       "  \n" +
       "  \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;                                                          \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
       "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
       "  \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;                                                          \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
       "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;	  \n" +
       "  \n" +
       "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
       "			UPDATE customer_packingslip cps    \n" +
       "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
       "					FROM packingslip_invoice_payment_det    \n" +
       "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)   \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
       "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
       "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
       "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
       "					FROM packingslip_invoice_payment    \n" +
       "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)   \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
       "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
       "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
       "  \n" +
       "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
       "  \n" +
       "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN    \n" +
       "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
       "  \n" +
       "						   ELSE cps.paymentStatus END    \n" +
       "						) ,   \n" +
       "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
       "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
       "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
       "						END) ,		   \n" +
       "				cps.updatedBy = pUserID,    \n" +
       "				cps.updateByRoleId = pUserRoleID ,    \n" +
       "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
       "			AND cps.isDeleted = 0	;   \n" +
       "  \n" +
       "		END IF;                        \n" +
       "	END IF;     \n" +
       "  \n" +
       "	/* Resp[0] - store procedure status */                          \n" +
       "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR (vCountExistsCheckNo > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN                                \n" +
       "		SELECT 0 AS 'spStatus' ;                          \n" +
       "	ELSE                          \n" +
       "		SELECT 1 AS 'spStatus' ;                          \n" +
       "	END IF;         \n" +
       "  \n" +
       "	/* Resp[1] - get all mis match amount records or deleted payment/CM */                          \n" +
       "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;                         \n" +
       "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;    \n" +
       "  \n" +
       "	/* Resp[2] - newly inserted refund master id for Refund Transaction  */                         \n" +
       "	SELECT insertedRefundMstID AS insertedRefundMstID;                     \n" +
       "  \n" +
       "	/* Resp[3] - duplicate check or payment number then require confirmation  */                      \n" +
       "	IF (vCountExistsCheckNo > 0) THEN                    \n" +
       "		SELECT 1 AS isDuplicateChkPaymentNo;                          \n" +
       "	ELSE                          \n" +
       "		SELECT 0 AS isDuplicateChkPaymentNo;                          \n" +
       "	END IF;            \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                           \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                         \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                      \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                           \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                         \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                      \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;    \n" +
       "  \n" +
       "    END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
       "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(                        \n" +
       "	IN pCustPaymentDetList JSON,      \n" +
       "	IN pCustCMDetList JSON,      \n" +
       "	IN pCustRefundMstID INT,                        \n" +
       "	IN pMfgcodeID INT,                        \n" +
       "	IN pPaymentNumber VARCHAR(50),                         \n" +
       "	IN pPaymentDate DATE,                        \n" +
       "	IN pPaymentAmount DECIMAL(18,8),                        \n" +
       "	IN pPaymentType INT,                        \n" +
       "	IN pAccountReference VARCHAR(50),                        \n" +
       "	IN pBankAccountMasID INT,                        \n" +
       "	IN pBankAccountNo VARCHAR(50),                        \n" +
       "	IN pBankName VARCHAR(255),                        \n" +
       "	IN pRemark VARCHAR(1000),                        \n" +
       "	IN pRefPaymentMode VARCHAR(10),                        \n" +
       "	IN pTotSelectedPayOfCust INT,     \n" +
       "	IN pTotSelectedCMOfCust INT,     \n" +
       "	IN pDeleteCustPaymentDetList JSON,       \n" +
       "	IN pDeleteCustCMDetList JSON,    \n" +
       "	IN pisConfmTakenForDuplicateCheckNo TINYINT,                      \n" +
       "	IN pDepositBatchNumber DECIMAL(6,2) ,              \n" +
       "	IN pUserID INT,                        \n" +
       "	IN pUserRoleID INT,    \n" +
       "	IN pOffsetAmount DECIMAL(18,8)	    \n" +
       "    )  \n" +
       "BEGIN                        \n" +
       "	DECLARE vCountExistsCheckNo INT;              \n" +
       "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;                     \n" +
       "  \n" +
       "	SET vCountExistsCheckNo = 0;                      \n" +
       "  \n" +
       "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN                      \n" +
       "		/* check for duplicate check/payment number if confirmation not taken */                        \n" +
       "		SELECT COUNT(1) INTO vCountExistsCheckNo                                \n" +
       "		FROM packingslip_invoice_payment                                \n" +
       "		WHERE refPaymentMode = pRefPaymentMode                       \n" +
       "		AND paymentNumber = pPaymentNumber                                \n" +
       "		AND mfgcodeID = pMfgcodeID                       \n" +
       "		AND id != pCustRefundMstID                      \n" +
       "		AND isPaymentVoided = 0                      \n" +
       "		AND isdeleted = 0    ;       \n" +
       "		-- select vCountExistsCheckNo ;    \n" +
       "	END IF;	                      \n" +
       "  \n" +
       "  \n" +
       "	IF(vCountExistsCheckNo = 0 AND pTotSelectedPayOfCust > 0                       \n" +
       "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN                        \n" +
       "		/* get/map all Customer Payment Detail List send from UI */                          \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS                                                                    \n" +
       "		SELECT 	*                                                                     \n" +
       "		FROM 	JSON_TABLE(                             \n" +
       "			pCustPaymentDetList,                                                                    \n" +
       "				\"$[*]\" COLUMNS(    \n" +
       "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",    \n" +
       "					`paymentMstID` INT PATH \"$.paymentMstID\",                                                             \n" +
       "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
       "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
       "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,     \n" +
       "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
       "				)                          \n" +
       "			) AS CustPaymentDetList_JT ;       \n" +
       "		-- select * from temp_UI_CustPaymentDetList;    \n" +
       "  \n" +
       "		/* get all customer refund > against total payment list > available in data base */	                          \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS 	                        \n" +
       "			SELECT psip.id AS paymentMstID,     \n" +
       "				psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "				psipd.id AS paymentDetMstID,                     \n" +
       "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundPaymentID = psip.id   \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount     \n" +
       "			FROM packingslip_invoice_payment psip     \n" +
       "				LEFT JOIN packingslip_invoice_payment_det psipd     \n" +
       "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0        \n" +
       "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
       "			AND psip.isDeleted = 0   \n" +
       "			AND psip.isPaymentVoided = 0 ;  \n" +
       "  \n" +
       "            -- select * from temp_DB_Available_CustPaymentDetList;    \n" +
       "  \n" +
       "            /* get all mis match amount records (compare UI data and db available data)                         \n" +
       "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL                        \n" +
       "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL                        \n" +
       "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL                        \n" +
       "			*/	                          \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                         \n" +
       "			SELECT tucipl.*                        \n" +
       "			FROM temp_UI_CustPaymentDetList tucipl                        \n" +
       "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID                        \n" +
       "			WHERE (                        \n" +
       "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))                          \n" +
       "				OR                        \n" +
       "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))	                        \n" +
       "				OR                        \n" +
       "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))                        \n" +
       "				)                        \n" +
       "			;                          \n" +
       "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;    \n" +
       "  \n" +
       "  \n" +
       "				/* get/map all deleting customer Payment Detail List send from UI */                          \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;                                                          \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS                                                                    \n" +
       "				SELECT 	*                                                                     \n" +
       "				FROM 	JSON_TABLE(                             \n" +
       "					pDeleteCustPaymentDetList,                                                                    \n" +
       "						\"$[*]\" COLUMNS(                            \n" +
       "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",                        \n" +
       "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"                                                           \n" +
       "						)                          \n" +
       "				) AS DeleteCustPaymentDetList_JT ;       \n" +
       "  \n" +
       "				 /* get all deleted invoice payment det (passed from UI but not in db)                         \n" +
       "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */                        \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;                                                          \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS                         \n" +
       "					SELECT id FROM packingslip_invoice_payment_det     \n" +
       "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)    \n" +
       "					AND (isDeleted = 1 OR isPaymentVoided = 1);    \n" +
       "  \n" +
       "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;     \n" +
       "  \n" +
       "  \n" +
       "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)                        \n" +
       "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN                        \n" +
       "  \n" +
       "			/* start - create/update/delete payment refund process */    \n" +
       "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN              \n" +
       "				/* delete those which are unselected(from UI) payment det */                        \n" +
       "				UPDATE packingslip_invoice_payment_det                         \n" +
       "				SET isDeleted = 1, deletedBy = pUserID,                         \n" +
       "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()                         \n" +
       "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)                       \n" +
       "				AND isPaymentVoided = 0                        \n" +
       "				AND isDeleted = 0 ;   \n" +
       "  \n" +
       "  \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;                                                          \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS   \n" +
       "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
       "  \n" +
       "				/* update refund payment status details which are deleted (unselected from UI) */    \n" +
       "				UPDATE packingslip_invoice_payment psip	  \n" +
       "					JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
       "						FROM packingslip_invoice_payment_det  \n" +
       "						WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
       "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
       "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
       "				SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
       "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
       "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
       "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
       "								END)  \n" +
       "							ELSE 'NA' END),  \n" +
       "					updatedBy = pUserID,    \n" +
       "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
       "				AND psip.isPaymentVoided = 0    \n" +
       "				AND psip.isDeleted = 0 ;   \n" +
       "  			END IF;   \n" +
       "  \n" +
       "  \n" +
       "			/* update all payment det amount whose amount is changed from UI */                        \n" +
       "			UPDATE packingslip_invoice_payment_det pipd                        \n" +
       "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT                      \n" +
       "					FROM temp_UI_CustPaymentDetList                        \n" +
       "					WHERE paymentDetMstID IS NOT NULL) tucipdl                        \n" +
       "				ON pipd.id = tucipdl.paymentDetMstID             \n" +
       "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),               \n" +
       "				pipd.comment = tucipdl.comment ,              \n" +
       "				pipd.updatedBy = pUserID,                           \n" +
       "				pipd.updateByRoleId = pUserRoleID ,                          \n" +
       "				pipd.updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
       "			WHERE pipd.refPayementid = pCustRefundMstID        \n" +
       "			AND pipd.isPaymentVoided = 0                       \n" +
       "			AND pipd.isDeleted = 0                         \n" +
       "			;                       \n" +
       "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;    \n" +
       "  \n" +
       "			/* insert newly selected payment det */                        \n" +
       "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,              \n" +
       "				`comment` ,    \n" +
       "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)                        \n" +
       "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,               \n" +
       "				COMMENT ,       \n" +
       "				pUserID, pUserRoleID, pUserID, pUserRoleID                        \n" +
       "			FROM temp_UI_CustPaymentDetList                         \n" +
       "			WHERE paymentDetMstID IS NULL                        \n" +
       "			;   \n" +
       "  \n" +
       "  \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;                                                          \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS   \n" +
       "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;	  \n" +
       "  \n" +
       "			/* update refund payment status details which are newly created/updated */    \n" +
       "			UPDATE packingslip_invoice_payment psip	  \n" +
       "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
       "					FROM packingslip_invoice_payment_det  \n" +
       "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
       "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
       "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
       "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN	  \n" +
       "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
       "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
       "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
       "							END)   \n" +
       "						ELSE 'NA' END) ,  \n" +
       "				updatedBy = pUserID,    \n" +
       "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
       "			AND psip.isPaymentVoided = 0    \n" +
       "			AND psip.isDeleted = 0 ;   \n" +
       "  \n" +
       "  \n" +
       "		END IF;	    \n" +
       "  \n" +
       "	/* customer credit memo refund cases */        \n" +
       "	ELSEIF (vCountExistsCheckNo = 0 AND pTotSelectedCMOfCust > 0                     \n" +
       "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN     \n" +
       "  \n" +
       "	        /* get/map all Customer CM Detail List send from UI */      \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS                                                                    \n" +
       "		SELECT 	*                                                                     \n" +
       "		FROM 	JSON_TABLE(                             \n" +
       "			pCustCMDetList,                                                                    \n" +
       "				\"$[*]\" COLUMNS(              \n" +
       "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",    \n" +
       "					`paymentMstID` INT PATH \"$.paymentMstID\",       \n" +
       "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",       \n" +
       "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
       "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
       "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,     \n" +
       "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
       "				)                          \n" +
       "			) AS CustCMDetList_JT ;                         \n" +
       "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;    \n" +
       "  \n" +
       "		/* get all customer Refund > against total CM list > available in data base */	                       \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                                                          \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS     \n" +
       "				SELECT cps.id AS custCreditMemoMstID,    \n" +
       "				 cps.agreedRefundAmt AS agreedRefundAmount ,      \n" +
       "		    (SELECT IFNULL(SUM(paymentAmount),0)    \n" +
       "						FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundCustCreditMemoID = cps.id                      \n" +
       "						AND isPaymentVoided = 0                        \n" +
       "						AND isDeleted = 0    \n" +
       "			    ) totalRefundIssuedAmount     \n" +
       "			FROM customer_packingslip AS cps     \n" +
       "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)    \n" +
       "			AND cps.isDeleted = 0 ;    \n" +
       "  \n" +
       "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;    \n" +
       "  \n" +
       "		/* get all mis match amount records (compare UI data and db available data)                         \n" +
       "			> if selected CM not found from db                        \n" +
       "			> original Agreed Refund Amount Of Refund mismatch                        \n" +
       "			> Total Refund Issued Amount mismatch                        \n" +
       "			*/	                          \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                                                          \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                         \n" +
       "			SELECT tucml.*                        \n" +
       "			FROM temp_UI_CustCMDetList tucml                        \n" +
       "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID                        \n" +
       "			WHERE (                     \n" +
       "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))                          \n" +
       "				OR     \n" +
       "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))	                        \n" +
       "				OR                        \n" +
       "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))                        \n" +
       "				)                        \n" +
       "			;       \n" +
       "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;     \n" +
       "  \n" +
       "			/* get/map all deleting customer CM Detail List send from UI */                          \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;                                                          \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS                                                                    \n" +
       "				SELECT 	*                                                                     \n" +
       "				FROM 	JSON_TABLE(                             \n" +
       "					pDeleteCustCMDetList,                                                                    \n" +
       "						\"$[*]\" COLUMNS(                            \n" +
       "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",                        \n" +
       "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"                                                           \n" +
       "						)                          \n" +
       "				) AS DeleteCustCMtDetList_JT ;       \n" +
       "				-- select * from temp_UI_Delete_CustCMDetList;    \n" +
       "  \n" +
       "			/* get all deleted invoice payment det (passed from UI but not in db)                         \n" +
       "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */                        \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;                                                          \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS                         \n" +
       "					SELECT id FROM packingslip_invoice_payment_det     \n" +
       "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)    \n" +
       "					AND (isDeleted = 1 OR isPaymentVoided = 1);    \n" +
       "  \n" +
       "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;      \n" +
       "  \n" +
       "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)                        \n" +
       "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN                        \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN                         \n" +
       "				/* delete those which are unselected(from UI) CM det */                        \n" +
       "				UPDATE packingslip_invoice_payment_det                         \n" +
       "				SET isDeleted = 1, deletedBy = pUserID,                         \n" +
       "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()                         \n" +
       "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)                       \n" +
       "				AND isPaymentVoided = 0                        \n" +
       "				AND isDeleted = 0 ;                      \n" +
       "				-- select 'deleted refund for CM list' ;  \n" +
       "  \n" +
       "  \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;                                                          \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS                                                                    \n" +
       "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
       "				UPDATE customer_packingslip cps    \n" +
       "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
       "						FROM packingslip_invoice_payment_det    \n" +
       "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)   \n" +
       "						AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
       "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
       "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID	   \n" +
       "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
       "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
       "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
       "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
       "									END) 	  \n" +
       "							ELSE 'NA' END),			  \n" +
       "					cps.updatedBy = pUserID,    \n" +
       "					cps.updateByRoleId = pUserRoleID ,    \n" +
       "					cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
       "				AND cps.isDeleted = 0	;   \n" +
       "  \n" +
       "			END IF;                        \n" +
       "  \n" +
       "  \n" +
       "			/* update all CM det amount whose amount is changed from UI */                        \n" +
       "			UPDATE packingslip_invoice_payment_det pipd                        \n" +
       "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT                       \n" +
       "					FROM temp_UI_CustCMDetList                        \n" +
       "					WHERE paymentDetMstID IS NOT NULL) tucipdl                        \n" +
       "				ON pipd.id = tucipdl.paymentDetMstID                     \n" +
       "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),               \n" +
       "				pipd.comment = tucipdl.comment ,              \n" +
       "				pipd.updatedBy = pUserID,                           \n" +
       "				pipd.updateByRoleId = pUserRoleID ,                          \n" +
       "				pipd.updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
       "			WHERE pipd.refPayementid = pCustRefundMstID     \n" +
       "			AND pipd.isPaymentVoided = 0                       \n" +
       "			AND pipd.isDeleted = 0                         \n" +
       "			;                        \n" +
       "  \n" +
       "			/* insert newly selected CM det */                        \n" +
       "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,              \n" +
       "				`comment` ,    \n" +
       "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)                        \n" +
       "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,               \n" +
       "				COMMENT ,       \n" +
       "				pUserID, pUserRoleID, pUserID, pUserRoleID                        \n" +
       "			FROM temp_UI_CustCMDetList                         \n" +
       "			WHERE paymentDetMstID IS NULL                        \n" +
       "			;   \n" +
       "  \n" +
       "  \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;                                                          \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
       "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
       "  \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;                                                          \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
       "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;	  \n" +
       "  \n" +
       "			/* update customer credit memo - payment status and refund status   */  \n" +
       "			UPDATE customer_packingslip cps    \n" +
       "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
       "					FROM packingslip_invoice_payment_det    \n" +
       "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)   \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
       "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
       "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
       "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
       "					FROM packingslip_invoice_payment    \n" +
       "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)   \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
       "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
       "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
       "  \n" +
       "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
       "  \n" +
       "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN   \n" +
       "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
       "  \n" +
       "						   ELSE cps.paymentStatus END    \n" +
       "						) ,    \n" +
       "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
       "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
       "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
       "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
       "								END)  \n" +
       "						      ELSE 'NA' END),		  \n" +
       "				cps.updatedBy = pUserID,    \n" +
       "				cps.updateByRoleId = pUserRoleID ,    \n" +
       "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
       "			AND cps.isDeleted = 0	;   \n" +
       "  \n" +
       "  \n" +
       "		END IF;	                 \n" +
       "  \n" +
       "	END IF;                        \n" +
       "  \n" +
       "  \n" +
       "	IF (vCountExistsCheckNo = 0) THEN    \n" +
       "  \n" +
       "		/* update payment master details */        \n" +
       "		UPDATE packingslip_invoice_payment                        \n" +
       "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,                        \n" +
       "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,    \n" +
       "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,                        \n" +
       "			bankAccountNo = pBankAccountNo, bankName = pBankName,                        \n" +
       "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,       \n" +
       "			updatedBy = pUserID, offsetAmount = pOffsetAmount,                         \n" +
       "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()                         \n" +
       "		WHERE id = pCustRefundMstID                      \n" +
       "		AND isPaymentVoided = 0	                      \n" +
       "		AND isDeleted = 0 ;              \n" +
       "  \n" +
       "	END IF;	                      \n" +
       "  \n" +
       "  \n" +
       "	/* set up default temp table if not created */                          \n" +
       "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS                          \n" +
       "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;    \n" +
       "  \n" +
       "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS                          \n" +
       "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;      \n" +
       "  \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                          \n" +
       "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;        \n" +
       "  \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                          \n" +
       "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;        \n" +
       "  \n" +
       "  \n" +
       "	/* Resp[0] - store procedure status */                          \n" +
       "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)                         \n" +
       "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)      \n" +
       "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)                         \n" +
       "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)    \n" +
       "		OR (vCountExistsCheckNo > 0)) THEN                          \n" +
       "		SELECT 0 AS 'spStatus' ;                          \n" +
       "	ELSE                          \n" +
       "		SELECT 1 AS 'spStatus' ;                          \n" +
       "	END IF;                  \n" +
       "  \n" +
       "	/* Resp[1] - get all deleted payment/CM det (passed from UI but not in db) */                          \n" +
       "	 SELECT * FROM temp_Deleted_CustPayDetList ;    \n" +
       "	SELECT * FROM temp_Deleted_CustCMDetList ;    \n" +
       "  \n" +
       "	/* Resp[2] - get all mis match amount records or deleted  */                          \n" +
       "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;                       \n" +
       "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;                       \n" +
       "  \n" +
       "	/* Resp[3] - duplicate check or payment number then require confirmation  */                        \n" +
       "	IF (vCountExistsCheckNo > 0) THEN                      \n" +
       "		SELECT 1 AS isDuplicateChkPaymentNo;                            \n" +
       "	ELSE                            \n" +
       "		SELECT 0 AS isDuplicateChkPaymentNo;                            \n" +
       "	END IF;           \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                           \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                         \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;                        \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                        \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;                                          \n" +
       "  \n" +
       "    END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
       "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(    \n" +
       "	IN pCustInvoicePaymentDetList JSON,    \n" +
       "	IN pMfgcodeID INT,    \n" +
       "	IN pPaymentNumber VARCHAR(50),    \n" +
       "	IN pPaymentDate DATE,    \n" +
       "	IN pPaymentAmount DECIMAL(18,8),    \n" +
       "	IN pPaymentType INT,    \n" +
       "	IN pAccountReference VARCHAR(50),    \n" +
       "	IN pBankAccountMasID INT,    \n" +
       "	IN pBankAccountNo VARCHAR(50),    \n" +
       "	IN pBankName VARCHAR(255),    \n" +
       "	IN pRemark VARCHAR(1000),    \n" +
       "	IN pRefPaymentMode VARCHAR(10),    \n" +
       "	IN pTotSelectedInvOfCust INT,    \n" +
       "	IN pisConfmTakenForDuplicateCheckNo TINYINT,    \n" +
       "	IN pSystemID VARCHAR(20),    \n" +
       "	IN pisZeroPayment INT,    \n" +
       "	IN pDepositBatchNumber DECIMAL(6,2) ,    \n" +
       "	IN pRefCustCreditMemoID INT,    \n" +
       "	IN pisMarkForRefund TINYINT,    \n" +
       "	IN pAgreedRefundAmt DECIMAL(18,8),    \n" +
       "	IN pRefundStatus VARCHAR(5),  \n" +
       "	IN pIsWriteOffExtraAmount TINYINT,    \n" +
       "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),    \n" +
       "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),    \n" +
       "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),    \n" +
       "	IN pPaymentTypeForWriteOffCustPayment INT,    \n" +
       "	IN pWriteOffCustInvoicePaymentDetList JSON,    \n" +
       "	IN pRefGencTransModeID INT,    \n" +
       "	IN pWriteOffReason VARCHAR(1000),    \n" +
       "	IN pUserID INT,    \n" +
       "	IN pUserRoleID INT    \n" +
       "  \n" +
       "    )  \n" +
       "BEGIN    \n" +
       "  \n" +
       "	DECLARE insertedInvPaymentMstID INT;    \n" +
       "	DECLARE insertedWriteOffPaymentMstID INT;    \n" +
       "	DECLARE vCountExistsCheckNo INT;    \n" +
       "	DECLARE vCountSameCMApplied INT;    \n" +
       "	DECLARE vLockStatusToBe VARCHAR(5);    \n" +
       "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
       "  \n" +
       "  \n" +
       "	SET vCountExistsCheckNo = 0;    \n" +
       "	SET vCountSameCMApplied = 0;    \n" +
       "  \n" +
       "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN    \n" +
       "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */    \n" +
       "		SELECT COUNT(1) INTO vCountExistsCheckNo    \n" +
       "		FROM packingslip_invoice_payment    \n" +
       "		WHERE refPaymentMode = pRefPaymentMode    \n" +
       "		AND paymentNumber = pPaymentNumber    \n" +
       "		AND mfgcodeID = pMfgcodeID    \n" +
       "		AND isPaymentVoided = 0    \n" +
       "		AND isdeleted = 0    ;    \n" +
       "	ELSEIF (pRefPaymentMode = 'CA') THEN    \n" +
       "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */    \n" +
       "		SELECT COUNT(1) INTO vCountSameCMApplied    \n" +
       "		FROM packingslip_invoice_payment    \n" +
       "		WHERE refPaymentMode = pRefPaymentMode    \n" +
       "		AND refCustCreditMemoID = pRefCustCreditMemoID    \n" +
       "		AND isPaymentVoided = 0    \n" +
       "		AND isdeleted = 0    ;    \n" +
       "  \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0    \n" +
       "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN    \n" +
       "  \n" +
       "		/* get/map all Customer Invoice Payment Detail List send from UI */    \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS    \n" +
       "		SELECT 	*    \n" +
       "		FROM 	JSON_TABLE(    \n" +
       "			pCustInvoicePaymentDetList,    \n" +
       "				\"$[*]\" COLUMNS(    \n" +
       "					`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
       "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",    \n" +
       "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,    \n" +
       "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,    \n" +
       "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,    \n" +
       "					`appliedDate` DATE PATH \"$.appliedDate\"    \n" +
       "				)    \n" +
       "			) AS CustInvoicePaymentDetList_JT ;    \n" +
       "  \n" +
       "  \n" +
       "		/* get all customer invoice > against total payment list > available in data base */    \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS    \n" +
       "			SELECT cps.id AS invoiceMstID,    \n" +
       "				cps.totalAmount AS originalPayAmountOfInvoice,    \n" +
       "				cps.status,    \n" +
       "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det    \n" +
       "					WHERE refCustPackingslipInvoiceID = cps.id    \n" +
       "					AND isPaymentVoided = 0    \n" +
       "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet    \n" +
       "			FROM customer_packingslip cps    \n" +
       "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)    \n" +
       "			AND cps.isDeleted = 0    \n" +
       "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */    \n" +
       "		;    \n" +
       "  \n" +
       "		/* get all mis match amount records (compare UI data and db available data)    \n" +
       "			> if selected invoice not found from db    \n" +
       "			> original Payment Amount Of Invoice  mismatch    \n" +
       "			> invoice Total Paid Amount mismatch    \n" +
       "			*/    \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
       "			SELECT tucipl.*    \n" +
       "			FROM temp_UI_CustInvoicePaymentDetList tucipl    \n" +
       "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID    \n" +
       "			WHERE (    \n" +
       "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))    \n" +
       "				OR    \n" +
       "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))    \n" +
       "				OR    \n" +
       "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))    \n" +
       "				)    \n" +
       "			;    \n" +
       "  \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* set up default temp table if not created */    \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
       "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;    \n" +
       "  \n" +
       "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN    \n" +
       "		-- select 'create';    \n" +
       "  \n" +
       "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN    \n" +
       "  \n" +
       "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */    \n" +
       "			SET vLockStatusToBe = 'NA' ;    \n" +
       "			IF (pTotSelectedInvOfCust > 0) THEN    \n" +
       "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)    \n" +
       "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN    \n" +
       "					SET vLockStatusToBe = 'RL' ;    \n" +
       "				END IF;    \n" +
       "			END IF;    \n" +
       "  \n" +
       "  \n" +
       "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,    \n" +
       "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,    \n" +
       "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,    \n" +
       "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,    \n" +
       "				`isMarkForRefund`, `agreedRefundAmt` ,  `refundStatus` ,  \n" +
       "				`createdAt`, `createdBy`, `createByRoleId`,    \n" +
       "				`updatedAt`,`updatedBy`,`updateByRoleId`)    \n" +
       "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,    \n" +
       "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,    \n" +
       "				pBankName, pRemark, pRefPaymentMode, pSystemID,    \n" +
       "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,    \n" +
       "				pisMarkForRefund, pAgreedRefundAmt, pRefundStatus,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;    \n" +
       "  \n" +
       "			SET insertedInvPaymentMstID = LAST_INSERT_ID();    \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */    \n" +
       "		IF (pTotSelectedInvOfCust > 0) THEN    \n" +
       "  \n" +
       "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN    \n" +
       "  \n" +
       "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
       "						`appliedDate` ,    \n" +
       "						`createdAt`, `createdBy`,`createByRoleId`,    \n" +
       "						`updatedAt`, `updatedBy`,`updateByRoleId`)    \n" +
       "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,    \n" +
       "					appliedDate ,    \n" +
       "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
       "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
       "				FROM temp_UI_CustInvoicePaymentDetList ;    \n" +
       "  \n" +
       "			END IF;    \n" +
       "  \n" +
       "  \n" +
       "			/* update customer credit memo - payment status   */  		  \n" +
       "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */   \n" +
       "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
       "				FROM packingslip_invoice_payment_det   \n" +
       "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
       "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
       "  \n" +
       "				UPDATE customer_packingslip    \n" +
       "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN    \n" +
       "									(CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
       "							 WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'	  \n" +
       "							 ELSE 'PE' END    \n" +
       "							) ,    \n" +
       "					updatedBy = pUserID,    \n" +
       "					updateByRoleId = pUserRoleID ,    \n" +
       "					updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "				WHERE id = pRefCustCreditMemoID    \n" +
       "				AND isDeleted = 0    \n" +
       "				;    \n" +
       "			END IF;    \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "		/* write off payment transaction entry - only if outstanding amount > 0    \n" +
       "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */    \n" +
       "		IF (pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0    \n" +
       "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN    \n" +
       "  \n" +
       "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,    \n" +
       "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,    \n" +
       "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,    \n" +
       "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,    \n" +
       "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,    \n" +
       "				`createdAt`, `createdBy`, `createByRoleId`,    \n" +
       "				`updatedAt`,`updatedBy`,`updateByRoleId`)    \n" +
       "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,    \n" +
       "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,    \n" +
       "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,    \n" +
       "				'NA',0, NULL,  NULL,    \n" +
       "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;    \n" +
       "  \n" +
       "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();    \n" +
       "  \n" +
       "  \n" +
       "			/* get/map all write off Customer Invoice Payment Detail List send from UI */    \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;    \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS    \n" +
       "			SELECT 	*    \n" +
       "			FROM 	JSON_TABLE(    \n" +
       "				pWriteOffCustInvoicePaymentDetList,    \n" +
       "					\"$[*]\" COLUMNS(    \n" +
       "						`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
       "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"    \n" +
       "					)    \n" +
       "				) AS WriteOffCustInvPaymentDetList_JT ;    \n" +
       "  \n" +
       "  \n" +
       "			/* packingslip_invoice_payment_det entry for write off */    \n" +
       "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
       "				`createdAt`, `createdBy`,`createByRoleId`,    \n" +
       "				`updatedAt`, `updatedBy`,`updateByRoleId`)    \n" +
       "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
       "			FROM temp_UI_WriteOffCustInvPaymentDetList ;    \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "		IF (pTotSelectedInvOfCust > 0) THEN    \n" +
       "			/* update invoice payment status */    \n" +
       "			UPDATE customer_packingslip cps    \n" +
       "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID    \n" +
       "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,    \n" +
       "				cps.updatedBy = pUserID,    \n" +
       "				cps.updateByRoleId = pUserRoleID ,    \n" +
       "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE cps.id = tucipdl.invoiceMstID    \n" +
       "			-- and tucipdl.newApplyPaymentStatusOfInv is not null    \n" +
       "			-- and tucipdl.newApplyPaymentStatusOfInv != ''    \n" +
       "			AND cps.isDeleted = 0	;    \n" +
       "		END IF;    \n" +
       "  \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	/* Resp[0] - store procedure status */    \n" +
       "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)    \n" +
       "						OR (vCountSameCMApplied > 0) ) THEN    \n" +
       "		SELECT 0 AS 'spStatus' ;    \n" +
       "	ELSE    \n" +
       "		SELECT 1 AS 'spStatus' ;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* Resp[1] - get all mis match amount records or deleted invoices */    \n" +
       "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;    \n" +
       "  \n" +
       "	/* Resp[2] - newly inserted payment master id  */    \n" +
       "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN    \n" +
       "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;    \n" +
       "	ELSEIF (pRefPaymentMode = 'WOFF') THEN    \n" +
       "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* Resp[3] - duplicate check or payment number then require confirmation  */    \n" +
       "	IF (vCountExistsCheckNo > 0) THEN    \n" +
       "		SELECT 1 AS isDuplicateChkPaymentNo;    \n" +
       "	ELSE    \n" +
       "		SELECT 0 AS isDuplicateChkPaymentNo;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */    \n" +
       "	IF (vCountSameCMApplied > 0) THEN    \n" +
       "		SELECT 1 AS isDuplicateCreditMemoToApply;    \n" +
       "	ELSE    \n" +
       "		SELECT 0 AS isDuplicateCreditMemoToApply;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
       "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
       "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
       "	ELSE   \n" +
       "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
       "	END IF;  \n" +
       "  \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
       "  \n" +
       "  \n" +
       "    END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
       "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(    \n" +
       "	IN pCustInvoicePaymentDetList JSON,    \n" +
       "	IN pCustomerPaymentMstID INT,    \n" +
       "	IN pMfgcodeID INT,    \n" +
       "	IN pPaymentNumber VARCHAR(50),    \n" +
       "	IN pPaymentDate DATE,    \n" +
       "	IN pPaymentAmount DECIMAL(18,8),    \n" +
       "	IN pPaymentType INT,    \n" +
       "	IN pAccountReference VARCHAR(50),    \n" +
       "	IN pBankAccountMasID INT,    \n" +
       "	IN pBankAccountNo VARCHAR(50),    \n" +
       "	IN pBankName VARCHAR(255),    \n" +
       "	IN pRemark VARCHAR(1000),    \n" +
       "	IN pRefPaymentMode VARCHAR(10),    \n" +
       "	IN pTotSelectedInvOfCust INT,    \n" +
       "	IN pDeleteCustInvPaymentDetList JSON,    \n" +
       "	IN pisConfmTakenForDuplicateCheckNo TINYINT,    \n" +
       "	IN pDepositBatchNumber DECIMAL(6,2) ,    \n" +
       "	IN pRefCustCreditMemoID INT,    \n" +
       "	IN pisMarkForRefund TINYINT,    \n" +
       "	IN pAgreedRefundAmt DECIMAL(18,8),    \n" +
       "	IN pIsWriteOffExtraAmount TINYINT,    \n" +
       "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),    \n" +
       "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),    \n" +
       "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),    \n" +
       "	IN pPaymentTypeForWriteOffCustPayment INT,    \n" +
       "	IN pWriteOffCustInvoicePaymentDetList JSON,    \n" +
       "	IN pRefGencTransModeID INT,    \n" +
       "	IN pWriteOffReason VARCHAR(1000),    \n" +
       "	IN pUserID INT,    \n" +
       "	IN pUserRoleID INT    \n" +
       "    )  \n" +
       "BEGIN    \n" +
       "	DECLARE vCountExistsCheckNo INT;    \n" +
       "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;    \n" +
       "	DECLARE insertedWriteOffPaymentMstID INT;    \n" +
       "	DECLARE vTotRefundIssuedOfPayment DECIMAL(18,8);   \n" +
       "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
       "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
       "  \n" +
       "	SET vCountExistsCheckNo = 0;    \n" +
       "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
       "  \n" +
       "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN    \n" +
       "		/* check for duplicate check/payment number if confirmation not taken */    \n" +
       "		SELECT COUNT(1) INTO vCountExistsCheckNo    \n" +
       "		FROM packingslip_invoice_payment    \n" +
       "		WHERE refPaymentMode = pRefPaymentMode    \n" +
       "		AND paymentNumber = pPaymentNumber    \n" +
       "		AND mfgcodeID = pMfgcodeID    \n" +
       "		AND id != pCustomerPaymentMstID    \n" +
       "		AND isPaymentVoided = 0    \n" +
       "		AND isdeleted = 0    ;    \n" +
       "	END IF;   \n" +
       "  \n" +
       "  \n" +
       "	IF (pRefPaymentMode = 'R') THEN  \n" +
       "		/* get total refunded amount till now  */  \n" +
       "		SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfPayment  \n" +
       "		FROM packingslip_invoice_payment_det  \n" +
       "		WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
       "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "		;  \n" +
       "  \n" +
       "		/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
       "		IF (IFNULL(pAgreedRefundAmt,0) < vTotRefundIssuedOfPayment) THEN  \n" +
       "			SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
       "		END IF;  \n" +
       "	END IF;  \n" +
       "  \n" +
       "	IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0    \n" +
       "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN    \n" +
       "  \n" +
       "		/* get/map all Customer Invoice Payment Detail List send from UI */    \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS    \n" +
       "		SELECT 	*    \n" +
       "		FROM 	JSON_TABLE(    \n" +
       "			pCustInvoicePaymentDetList,    \n" +
       "				\"$[*]\" COLUMNS(    \n" +
       "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",    \n" +
       "					`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
       "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",    \n" +
       "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,    \n" +
       "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,    \n" +
       "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,    \n" +
       "					`appliedDate` DATE PATH \"$.appliedDate\"    \n" +
       "				)    \n" +
       "			) AS CustInvoicePaymentDetList_JT ;    \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "		/* get all customer invoice > against total payment list > available in data base */    \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS    \n" +
       "			SELECT cps.id AS invoiceMstID, cps.status,    \n" +
       "				cps.totalAmount AS originalPayAmountOfInvoice,    \n" +
       "				pipd.id invPaymentDetMstID,    \n" +
       "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det    \n" +
       "					WHERE refCustPackingslipInvoiceID = cps.id    \n" +
       "					AND isPaymentVoided = 0    \n" +
       "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet    \n" +
       "			FROM customer_packingslip cps    \n" +
       "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID    \n" +
       "					 AND pipd.refPayementid = pCustomerPaymentMstID    \n" +
       "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0    \n" +
       "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)    \n" +
       "			AND cps.isDeleted = 0    \n" +
       "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */    \n" +
       "		;    \n" +
       "  \n" +
       "		/* get all deleted invoice payment det (passed from UI but not in db)    \n" +
       "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */    \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS    \n" +
       "			SELECT tucipl.*    \n" +
       "			FROM temp_UI_CustInvoicePaymentDetList tucipl    \n" +
       "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID    \n" +
       "			WHERE tucipl.invPaymentDetMstID IS NOT NULL    \n" +
       "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)    \n" +
       "			;    \n" +
       "  \n" +
       "  \n" +
       "		/* get all mis match amount records (compare UI data and db available data)    \n" +
       "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL    \n" +
       "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL    \n" +
       "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL    \n" +
       "			*/    \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
       "			SELECT tucipl.* ,    \n" +
       "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,    \n" +
       "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable    \n" +
       "			FROM temp_UI_CustInvoicePaymentDetList tucipl    \n" +
       "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID    \n" +
       "			WHERE (    \n" +
       "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))    \n" +
       "				OR    \n" +
       "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))    \n" +
       "				OR    \n" +
       "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))    \n" +
       "				)    \n" +
       "			;    \n" +
       "  \n" +
       "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)    \n" +
       "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN    \n" +
       "			-- SELECT 'update';    \n" +
       "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN    \n" +
       "  \n" +
       "  \n" +
       "				/* get/map all deleting customer Invoice Payment Detail List send from UI */    \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;    \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS    \n" +
       "				SELECT 	*    \n" +
       "				FROM 	JSON_TABLE(    \n" +
       "					pDeleteCustInvPaymentDetList,    \n" +
       "						\"$[*]\" COLUMNS(    \n" +
       "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",    \n" +
       "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"    \n" +
       "						)    \n" +
       "				) AS DeleteCustInvoicePaymentDetList_JT ;    \n" +
       "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;    \n" +
       "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS    \n" +
       "					SELECT refCustPackingslipInvoiceID    \n" +
       "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;    \n" +
       "  \n" +
       "  \n" +
       "				/* delete those which are unselected(from UI) inv payment det */    \n" +
       "				UPDATE packingslip_invoice_payment_det    \n" +
       "				SET isDeleted = 1, deletedBy = pUserID,    \n" +
       "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()    \n" +
       "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
       "				AND isPaymentVoided = 0    \n" +
       "				AND isDeleted = 0 ;    \n" +
       "  \n" +
       "  \n" +
       "				/* update invoice payment status */    \n" +
       "				UPDATE customer_packingslip cps    \n" +
       "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet    \n" +
       "						 FROM packingslip_invoice_payment_det    \n" +
       "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
       "						AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
       "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet    \n" +
       "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID    \n" +
       "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'    \n" +
       "  \n" +
       "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
       "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'    \n" +
       "  \n" +
       "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
       "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'    \n" +
       "  \n" +
       "							   ELSE cps.paymentStatus END    \n" +
       "							) ,    \n" +
       "					cps.updatedBy = pUserID,    \n" +
       "					cps.updateByRoleId = pUserRoleID ,    \n" +
       "					cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)    \n" +
       "				AND cps.isDeleted = 0	;    \n" +
       "  \n" +
       "			END IF;    \n" +
       "  \n" +
       "  \n" +
       "			/* update all inv payment det amount whose amount is changed from UI */    \n" +
       "			UPDATE packingslip_invoice_payment_det pipd    \n" +
       "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate    \n" +
       "					FROM temp_UI_CustInvoicePaymentDetList    \n" +
       "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl    \n" +
       "				ON pipd.id = tucipdl.invPaymentDetMstID    \n" +
       "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),    \n" +
       "				pipd.appliedDate = tucipdl.appliedDate ,    \n" +
       "				pipd.updatedBy = pUserID,    \n" +
       "				pipd.updateByRoleId = pUserRoleID ,    \n" +
       "				pipd.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)    \n" +
       "				OR pipd.appliedDate != tucipdl.appliedDate)    \n" +
       "			AND pipd.refPayementid = pCustomerPaymentMstID    \n" +
       "			AND pipd.isPaymentVoided = 0    \n" +
       "			AND pipd.isDeleted = 0    \n" +
       "			;    \n" +
       "  \n" +
       "			/* insert newly selected inv payment det */    \n" +
       "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
       "				`appliedDate` ,    \n" +
       "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)    \n" +
       "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,    \n" +
       "				appliedDate ,    \n" +
       "				pUserID, pUserRoleID, pUserID, pUserRoleID    \n" +
       "			FROM temp_UI_CustInvoicePaymentDetList    \n" +
       "			WHERE invPaymentDetMstID IS NULL    \n" +
       "			;    \n" +
       "  \n" +
       "  \n" +
       "			/* update invoice payment status */    \n" +
       "			UPDATE customer_packingslip cps    \n" +
       "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID    \n" +
       "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,    \n" +
       "				cps.updatedBy = pUserID,    \n" +
       "				cps.updateByRoleId = pUserRoleID ,    \n" +
       "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE cps.id = tucipdl.invoiceMstID    \n" +
       "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL    \n" +
       "			AND tucipdl.newApplyPaymentStatusOfInv != ''    \n" +
       "			AND cps.isDeleted = 0	;    \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "  \n" +
       "	ELSE    \n" +
       "  \n" +
       "		IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN    \n" +
       "  \n" +
       "			/* get/map all deleting customer Invoice Payment Detail List send from UI */    \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;    \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS    \n" +
       "			SELECT 	*    \n" +
       "			FROM 	JSON_TABLE(    \n" +
       "				pDeleteCustInvPaymentDetList,    \n" +
       "					\"$[*]\" COLUMNS(    \n" +
       "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",    \n" +
       "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"    \n" +
       "					)    \n" +
       "			) AS DeleteCustInvoicePaymentDetList_JT ;    \n" +
       "  \n" +
       "  \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;    \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS    \n" +
       "				SELECT refCustPackingslipInvoiceID    \n" +
       "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;    \n" +
       "  \n" +
       "  \n" +
       "			/* delete those which are unselected(from UI) inv payment det */    \n" +
       "			UPDATE packingslip_invoice_payment_det    \n" +
       "			SET isDeleted = 1, deletedBy = pUserID,    \n" +
       "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
       "			AND isPaymentVoided = 0    \n" +
       "			AND isDeleted = 0 ;    \n" +
       "  \n" +
       "  \n" +
       "			/* update invoice payment status */    \n" +
       "			UPDATE customer_packingslip cps    \n" +
       "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet    \n" +
       "					 FROM packingslip_invoice_payment_det    \n" +
       "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
       "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet    \n" +
       "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID    \n" +
       "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'    \n" +
       "  \n" +
       "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
       "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'    \n" +
       "  \n" +
       "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
       "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'    \n" +
       "  \n" +
       "						   ELSE cps.paymentStatus END    \n" +
       "						) ,    \n" +
       "				cps.updatedBy = pUserID,    \n" +
       "				cps.updateByRoleId = pUserRoleID ,    \n" +
       "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)    \n" +
       "			AND cps.isDeleted = 0	;    \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	/* set up default temp table if not created temp table from above */    \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS    \n" +
       "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;    \n" +
       "  \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
       "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;    \n" +
       "  \n" +
       "  \n" +
       "	/* common update for all */    \n" +
       "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)    \n" +
       "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)    \n" +
       "		AND (vCountExistsCheckNo = 0) AND (vIsAgreedRefundLessThanTotIssued = 0)) THEN    \n" +
       "  \n" +
       "		/* update invoice payment master details */    \n" +
       "		UPDATE packingslip_invoice_payment    \n" +
       "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,    \n" +
       "			paymentType = pPaymentType,    \n" +
       "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,    \n" +
       "			bankAccountNo = pBankAccountNo, bankName = pBankName,    \n" +
       "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,    \n" +
       "			isMarkForRefund = pisMarkForRefund ,    \n" +
       "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
       "			refundStatus = (CASE WHEN pRefPaymentMode = 'R' THEN  \n" +
       "						(CASE WHEN pisMarkForRefund = 1 THEN  \n" +
       "							(CASE WHEN vTotRefundIssuedOfPayment = 0 THEN 'PE'  \n" +
       "								WHEN vTotRefundIssuedOfPayment < pPaymentAmount THEN 'PR'  \n" +
       "								WHEN vTotRefundIssuedOfPayment = pPaymentAmount THEN 'FR'  \n" +
       "							   END)	  \n" +
       "						ELSE 'NA' END)  \n" +
       "					ELSE NULL END) ,  \n" +
       "			updatedBy = pUserID,    \n" +
       "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "		WHERE id = pCustomerPaymentMstID    \n" +
       "		AND isPaymentVoided = 0    \n" +
       "		AND isDeleted = 0 ;    \n" +
       "  \n" +
       "  \n" +
       "		/* write off payment transaction entry - only if outstanding amount > 0 */    \n" +
       "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0    \n" +
       "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN    \n" +
       "  \n" +
       "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,    \n" +
       "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,    \n" +
       "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,    \n" +
       "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,    \n" +
       "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,    \n" +
       "				`createdAt`, `createdBy`, `createByRoleId`,    \n" +
       "				`updatedAt`,`updatedBy`,`updateByRoleId`)    \n" +
       "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,    \n" +
       "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,    \n" +
       "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,    \n" +
       "				'NA',0, NULL,  NULL,    \n" +
       "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;    \n" +
       "  \n" +
       "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();    \n" +
       "  \n" +
       "  \n" +
       "			/* get/map all write off Customer Invoice Payment Detail List send from UI */    \n" +
       "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;    \n" +
       "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS    \n" +
       "			SELECT 	*    \n" +
       "			FROM 	JSON_TABLE(    \n" +
       "				pWriteOffCustInvoicePaymentDetList,    \n" +
       "					\"$[*]\" COLUMNS(    \n" +
       "						`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
       "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"    \n" +
       "					)    \n" +
       "				) AS WriteOffCustInvPaymentDetList_JT ;    \n" +
       "  \n" +
       "  \n" +
       "			/* packingslip_invoice_payment_det entry for write off */    \n" +
       "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
       "				`createdAt`, `createdBy`,`createByRoleId`,    \n" +
       "				`updatedAt`, `updatedBy`,`updateByRoleId`)    \n" +
       "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
       "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
       "			FROM temp_UI_WriteOffCustInvPaymentDetList ;    \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "  \n" +
       "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */    \n" +
       "  \n" +
       "			/* update main payment amount in case of payment from credit memo  */    \n" +
       "			SELECT paymentAmount INTO v_db_mainPaymentAmount    \n" +
       "			FROM packingslip_invoice_payment    \n" +
       "			WHERE id = pCustomerPaymentMstID    \n" +
       "			AND isPaymentVoided = 0 AND isdeleted = 0    ;    \n" +
       "  \n" +
       "			/* check db main payment and new payment not match then only update */    \n" +
       "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN    \n" +
       "				UPDATE packingslip_invoice_payment    \n" +
       "				SET paymentAmount = pPaymentAmount,    \n" +
       "					updatedBy = pUserID,    \n" +
       "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "				WHERE id = pCustomerPaymentMstID    \n" +
       "				AND isPaymentVoided = 0    \n" +
       "				AND isDeleted = 0 ;    \n" +
       "			END IF;    \n" +
       "  \n" +
       "			/* update customer credit memo - payment status */  \n" +
       "			IF (pRefPaymentMode = 'CA') THEN    \n" +
       "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
       "				FROM packingslip_invoice_payment_det   \n" +
       "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
       "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
       "  \n" +
       "				UPDATE customer_packingslip    \n" +
       "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN   \n" +
       "								    (CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
       "							   WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'    \n" +
       "							   ELSE 'PE' END    \n" +
       "							) ,    \n" +
       "					updatedBy = pUserID,    \n" +
       "					updateByRoleId = pUserRoleID ,    \n" +
       "					updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "				WHERE id = pRefCustCreditMemoID    \n" +
       "				AND isDeleted = 0    \n" +
       "				;    \n" +
       "			END IF;    \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "  \n" +
       "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */    \n" +
       "			/* update lockStatus based on Payment Variance if record not locked */    \n" +
       "			UPDATE packingslip_invoice_payment psip    \n" +
       "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount    \n" +
       "						FROM packingslip_invoice_payment_det psipd    \n" +
       "						WHERE psipd.refPayementid = pCustomerPaymentMstID    \n" +
       "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL    \n" +
       "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0    \n" +
       "						GROUP BY psipd.refPayementid ) invPayDetTemp    \n" +
       "				ON psip.id = invPayDetTemp.refPayementid    \n" +
       "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'    \n" +
       "						WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'    \n" +
       "						ELSE psip.lockStatus END    \n" +
       "			WHERE psip.id = pCustomerPaymentMstID    \n" +
       "			AND psip.lockStatus != 'LC'    \n" +
       "			AND psip.isPaymentVoided = 0    \n" +
       "			AND psip.isDeleted = 0    \n" +
       "			;   \n" +
       "  \n" +
       "		END IF;    \n" +
       "  \n" +
       "  \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "  \n" +
       "	/* Resp[0] - store procedure status */    \n" +
       "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)    \n" +
       "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)    \n" +
       "		OR (vCountExistsCheckNo > 0) OR (vIsAgreedRefundLessThanTotIssued > 0)) THEN    \n" +
       "		SELECT 0 AS 'spStatus' ;    \n" +
       "	ELSE    \n" +
       "		SELECT 1 AS 'spStatus' ;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */    \n" +
       "	SELECT * FROM temp_Deleted_CustInvPayDetList ;    \n" +
       "  \n" +
       "	/* Resp[2] - get all mis match amount records or deleted invoices */    \n" +
       "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;    \n" +
       "  \n" +
       "  \n" +
       "	/* Resp[3] - duplicate check or payment number then require confirmation  */    \n" +
       "	IF (vCountExistsCheckNo > 0) THEN    \n" +
       "		SELECT 1 AS isDuplicateChkPaymentNo;    \n" +
       "	ELSE    \n" +
       "		SELECT 0 AS isDuplicateChkPaymentNo;    \n" +
       "	END IF;   \n" +
       "  \n" +
       "  \n" +
       "	/* Resp[4] -  Agreed Refund Amount Less Than Total Issued Amout */   \n" +
       "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN    \n" +
       "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;    \n" +
       "	ELSE    \n" +
       "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
       "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
       "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
       "	ELSE   \n" +
       "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
       "	END IF;  \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;    \n" +
       "  \n" +
       "  \n" +
       "    END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustInvoiceDetForVoidPayment` ;  \n" +
       "CREATE PROCEDURE `Sproc_UpdateCustInvoiceDetForVoidPayment`(    \n" +
       "	IN pVoidCustPaymentMstID INT,    \n" +
       "	IN pRefPaymentModeOfInvPayment VARCHAR(10),    \n" +
       "	IN pUserID VARCHAR(50),    \n" +
       "	IN pUserRoleID VARCHAR(50)    \n" +
       "    )  \n" +
       "BEGIN    \n" +
       "  \n" +
       "	DECLARE vRefCustCreditMemoMstID INT;  \n" +
       "	DECLARE vRefGencTransModeID INT;  \n" +
       "  \n" +
       "	IF (pRefPaymentModeOfInvPayment = 'R' OR pRefPaymentModeOfInvPayment = 'CA' OR pRefPaymentModeOfInvPayment = 'WOFF') THEN   \n" +
       "  \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs AS    \n" +
       "			SELECT refCustPackingslipInvoiceID    \n" +
       "			FROM packingslip_invoice_payment_det    \n" +
       "			WHERE refPayementid = pVoidCustPaymentMstID    \n" +
       "			AND isDeleted = 0 ;    \n" +
       "  \n" +
       "  \n" +
       "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;    \n" +
       "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy AS    \n" +
       "			SELECT refCustPackingslipInvoiceID    \n" +
       "			FROM temp_DB_ChangeStatus_CustInvoiceMstIDs ;    \n" +
       "  \n" +
       "  \n" +
       "		UPDATE customer_packingslip cps    \n" +
       "			LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet    \n" +
       "				 FROM packingslip_invoice_payment_det    \n" +
       "				WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs)    \n" +
       "				AND isPaymentVoided = 0    \n" +
       "				AND isDeleted = 0    \n" +
       "				GROUP BY refCustPackingslipInvoiceID ) invPaymentDet    \n" +
       "			 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID    \n" +
       "		SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'    \n" +
       "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
       "						cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'    \n" +
       "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
       "						cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'    \n" +
       "					   ELSE cps.paymentStatus END    \n" +
       "					) ,    \n" +
       "			cps.updatedBy = pUserID,    \n" +
       "			cps.updateByRoleId = pUserRoleID ,    \n" +
       "			cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "		WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy)    \n" +
       "		AND cps.isDeleted = 0	;    \n" +
       "  \n" +
       "	END IF;  \n" +
       "  \n" +
       "  \n" +
       "	/* if Applied Credit Memo void then change Credit Memo payment status */    \n" +
       "	IF (pRefPaymentModeOfInvPayment = 'CA') THEN    \n" +
       "  \n" +
       "		SELECT refCustCreditMemoID INTO vRefCustCreditMemoMstID  \n" +
       "		FROM packingslip_invoice_payment    \n" +
       "		WHERE id = pVoidCustPaymentMstID   \n" +
       "		AND isDeleted = 0 ;  \n" +
       "  \n" +
       "		UPDATE customer_packingslip cps    \n" +
       "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
       "					FROM packingslip_invoice_payment_det    \n" +
       "					WHERE refRefundCustCreditMemoID = vRefCustCreditMemoMstID   \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
       "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
       "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
       "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
       "					FROM packingslip_invoice_payment    \n" +
       "					WHERE refCustCreditMemoID = vRefCustCreditMemoMstID   \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
       "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
       "		SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
       "  \n" +
       "					   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
       "					   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN     \n" +
       "								(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
       "  \n" +
       "					   ELSE cps.paymentStatus END    \n" +
       "					) ,    \n" +
       "			cps.updatedBy = pUserID,    \n" +
       "			cps.updateByRoleId = pUserRoleID ,    \n" +
       "			cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "		WHERE cps.id = vRefCustCreditMemoMstID  \n" +
       "		AND cps.isDeleted = 0	;    \n" +
       "  \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	/* Update payment or credit memo payment status in case of customer refund voided */  \n" +
       "	IF (pRefPaymentModeOfInvPayment = 'CR') THEN  \n" +
       "  \n" +
       "		SELECT refGencTransModeID INTO vRefGencTransModeID  \n" +
       "		FROM packingslip_invoice_payment	  \n" +
       "		WHERE id = pVoidCustPaymentMstID ;  \n" +
       "  \n" +
       "		IF (vRefGencTransModeID = -9) THEN  /* Customer Payment Refund */  \n" +
       "			/* update refund payment status  */    \n" +
       "			UPDATE packingslip_invoice_payment psip	  \n" +
       "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
       "					FROM packingslip_invoice_payment_det  \n" +
       "					WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
       "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
       "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
       "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
       "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN	  \n" +
       "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
       "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
       "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
       "							END)   \n" +
       "						ELSE 'NA' END) ,  \n" +
       "				updatedBy = pUserID,    \n" +
       "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE psip.id IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
       "			AND psip.isPaymentVoided = 0    \n" +
       "			AND psip.isDeleted = 0 ;   \n" +
       "  \n" +
       "		ELSEIF (vRefGencTransModeID = -6) THEN  /* Credit Memo Refund */  \n" +
       "			/* update customer credit memo - payment status and refund status  */   \n" +
       "			UPDATE customer_packingslip cps    \n" +
       "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
       "						FROM packingslip_invoice_payment_det    \n" +
       "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
       "						AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
       "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
       "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
       "				LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
       "						FROM packingslip_invoice_payment    \n" +
       "						WHERE refCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
       "						AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
       "					 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
       "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
       "  \n" +
       "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
       "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'RE'    \n" +
       "  \n" +
       "						   ELSE cps.paymentStatus END    \n" +
       "						) ,  \n" +
       "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
       "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
       "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < totalAmount THEN 'PR'  \n" +
       "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = totalAmount THEN 'FR'  \n" +
       "								END)  \n" +
       "						     ELSE 'NA' END),		    \n" +
       "				cps.updatedBy = pUserID,    \n" +
       "				cps.updateByRoleId = pUserRoleID ,    \n" +
       "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
       "			WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
       "			AND cps.isDeleted = 0	;   \n" +
       "  \n" +
       "		END IF;  \n" +
       "  \n" +
       "	END IF;  \n" +
       "  \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;    \n" +
       "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;    \n" +
       "  \n" +
       "  \n" +
       "    END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerRefundByMstID` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(              \n" +
       "	IN pCustRefundMstID INT ,      \n" +
       "	IN pRefPaymentMode VARCHAR(5)      \n" +
       "    )  \n" +
       "BEGIN              \n" +
       "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                       \n" +
       "		DECLARE v_TimeZone VARCHAR(50);                                          	              \n" +
       "		SELECT fun_getTimeZone() INTO v_TimeZone;                                                              \n" +
       "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    	              \n" +
       "  \n" +
       "		SELECT 	psip.id,                                                                        \n" +
       "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,              \n" +
       "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,                \n" +
       "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,               \n" +
       "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,        \n" +
       "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,     \n" +
       "			(CASE WHEN psip.isPaymentVoided = 0 THEN  'Paid' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,   \n" +
       "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,               \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,                                                                         \n" +
       "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,      \n" +
       "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmp ,    \n" +
       "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmp ,    \n" +
       "			fun_getUserNameByID(psip.updatedBy) updatedbyInitial,        \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,        \n" +
       "			fun_getUserNameByID(psip.createdBy) createdbyInitial        \n" +
       "  \n" +
       "		FROM packingslip_invoice_payment psip                                               \n" +
       "		WHERE id = pCustRefundMstID              \n" +
       "		AND refPaymentMode = pRefPaymentMode       \n" +
       "		AND psip.isDeleted = 0                    \n" +
       "		;               \n" +
       "	END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
       "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(    \n" +
       "	IN pPageIndex INT,      \n" +
       "	IN pRecordPerPage INT,      \n" +
       "	IN pOrderBy VARCHAR(255),      \n" +
       "	IN pWhereClause VARCHAR(16383),       \n" +
       "	IN pCustomerIDs VARCHAR(16383),      \n" +
       "	IN pPaymentMethodIDs VARCHAR(16383),     \n" +
       "	IN pBankAccountCodeIDs VARCHAR(16383),    \n" +
       "	IN pTransactionModeIDs VARCHAR(16383),    \n" +
       "	IN pExactPaymentNumberSearch TINYINT,      \n" +
       "	IN pPaymentNumber VARCHAR(1000),     \n" +
       "	IN pPaymentCMNumber VARCHAR(1000),    \n" +
       "	IN pAmount VARCHAR(50),       \n" +
       "	IN pExactRefundAmountSearch TINYINT,      \n" +
       "	IN pFromDate DATE,      \n" +
       "	IN pToDate DATE,      \n" +
       "	IN pFromCMPaymentDate DATE,      \n" +
       "	IN pToCMPaymentDate DATE,    \n" +
       "	IN pRefPaymentMode VARCHAR(10),    \n" +
       "	IN pTransModeType INT,  \n" +
       "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
       ")  \n" +
       "BEGIN      \n" +
       "	DECLARE pOffset INT;      \n" +
       "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
       "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
       "	DECLARE v_TimeZone VARCHAR(50);      \n" +
       "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);      \n" +
       "	DECLARE v_PaymentDateCon VARCHAR(1000);      \n" +
       "	DECLARE v_CMDateCon VARCHAR(1000);      \n" +
       "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);    \n" +
       "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
       "  \n" +
       "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
       "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
       "  \n" +
       "        SET v_CMDateCon = '';      \n" +
       "        SET v_PaymentDateCon = '';      \n" +
       "        SET v_CMPaymentDateWhereClause = '';    \n" +
       "        SET v_IsIncludeVoidedTransWhereClause = '';   \n" +
       "  \n" +
       "  \n" +
       "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
       "  		SET pWhereClause = '1=1' ;      \n" +
       "		END IF;      \n" +
       "  \n" +
       "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');      \n" +
       "		END IF;     \n" +
       "  \n" +
       "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');      \n" +
       "		END IF;      \n" +
       "  \n" +
       "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');      \n" +
       "		END IF;      \n" +
       "  \n" +
       "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');      \n" +
       "		END IF;      \n" +
       "  \n" +
       "	IF (pPaymentNumber IS NOT NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');      \n" +
       "	END IF;      \n" +
       "  \n" +
       "  \n" +
       "	IF (pPaymentCMNumber IS NOT NULL) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF (pAmount IS NOT NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');      \n" +
       "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');      \n" +
       "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');      \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN      \n" +
       "  \n" +
       "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN      \n" +
       "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN      \n" +
       "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
       "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
       "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN      \n" +
       "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "		END IF;     \n" +
       "  \n" +
       "  \n" +
       "		SET v_CMPaymentDateWhereClause = CONCAT('		    \n" +
       "			AND      \n" +
       "			(		    \n" +
       "				EXISTS(      \n" +
       "					SELECT  1      \n" +
       "					FROM packingslip_invoice_payment_det pipddt     \n" +
       "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0    \n" +
       "					WHERE pipddt.refPayementid = psip.id      \n" +
       "					',v_PaymentDateCon,'      \n" +
       "					AND pipddt.isDeleted=0      \n" +
       "				 )    \n" +
       "				 OR    \n" +
       "				 EXISTS(      \n" +
       "					SELECT  1      \n" +
       "					FROM packingslip_invoice_payment_det pipddt     \n" +
       "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0    \n" +
       "					WHERE pipddt.refPayementid = psip.id      \n" +
       "					',v_CMDateCon,'      \n" +
       "					AND pipddt.isDeleted=0      \n" +
       "				 )    \n" +
       "			)    \n" +
       "  \n" +
       "		');    \n" +
       "  \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF (pIsIncludeVoidedTransaction = 0) THEN    \n" +
       "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"      \n" +
       "		SELECT  psip.id,      \n" +
       "			psip.mfgcodeID ,    \n" +
       "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,      \n" +
       "			psip.isPaymentVoided,  psip.voidPaymentReason,     \n" +
       "			psip.agreedRefundAmt AS agreedRefundAmount ,    \n" +
       "			(CASE WHEN psip.isPaymentVoided = 0 THEN  'Paid' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,      \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,      \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,      \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')      \n" +
       "									ELSE NULL END) AS voidedAt,     \n" +
       "			psip.bankName,      \n" +
       "			psip.bankAccountNo,      \n" +
       "			psip.paymentType,      \n" +
       "			psip.bankAccountMasID,      \n" +
       "			psip.systemId ,      \n" +
       "			psip.paymentDate AS refundDate,      \n" +
       "			psip.paymentAmount,      \n" +
       "			psip.accountReference,      \n" +
       "			psip.remark,     \n" +
       "			psip.paymentNumber,    \n" +
       "			gc.gencCategoryName paymentMethod,      \n" +
       "			gc.systemGenerated systemGeneratedPaymentMethod,     \n" +
       "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList     \n" +
       "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList    \n" +
       "				ELSE NULL END) AS paymentCMList ,     \n" +
       "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList     \n" +
       "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList    \n" +
       "				ELSE NULL END) AS paymentCMNumWithOutIDList ,     \n" +
       "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'      \n" +
       "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,     \n" +
       "			psip.offsetAmount ,     \n" +
       "			psip.refGencTransModeID , gtmm.modeName,    \n" +
       "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,    \n" +
       "			fun_getUserNameByID(psip.createdBy) createdby,      \n" +
       "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,      \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
       "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,      \n" +
       "			fun_getRoleByID(psip.createByRoleId) createdbyRole     \n" +
       "		FROM packingslip_invoice_payment psip      \n" +
       "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0      \n" +
       "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0      \n" +
       "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,    \n" +
       "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList    \n" +
       "					FROM packingslip_invoice_payment_det psipd      \n" +
       "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0    \n" +
       "					WHERE psipd.refRefundPaymentID IS NOT NULL     \n" +
       "					AND psipd.isDeleted = 0      \n" +
       "					GROUP BY psipd.refPayementid ) payRefundDetTemp     \n" +
       "				ON psip.id = payRefundDetTemp.refPayementid     \n" +
       "  \n" +
       "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,    \n" +
       "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList    \n" +
       "					 FROM packingslip_invoice_payment_det psipd      \n" +
       "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
       "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL     \n" +
       "					AND psipd.isDeleted = 0      \n" +
       "					GROUP BY psipd.refPayementid) cmRefundDetTemp     \n" +
       "				ON psip.id = cmRefundDetTemp.refPayementid 		    \n" +
       "  \n" +
       "		WHERE psip.refPaymentMode = 'CR'     \n" +
       "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)    \n" +
       "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"    \n" +
       "		AND psip.isDeleted = 0     \n" +
       "  \n" +
       "            \");    \n" +
       "  \n" +
       "      -- select @Sproc_RetrieveCustomerRefundDetails;    \n" +
       "  \n" +
       "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
       "		SET pOrderBy = \" ORDER BY id DESC \";      \n" +
       "	ELSE      \n" +
       "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
       "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
       "	ELSE      \n" +
       "		SET rowNumWhere = '';      \n" +
       "	END IF;               \n" +
       "  \n" +
       "			/* to get total count of rows */      \n" +
       "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
       "	 -- select @SQLStatement1;    \n" +
       "	PREPARE query1 FROM @SQLStatement1;      \n" +
       "	EXECUTE query1;      \n" +
       "	DEALLOCATE PREPARE query1;      \n" +
       "  \n" +
       "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
       "	-- select @SQLStatement2;    \n" +
       "	PREPARE query2 FROM @SQLStatement2;      \n" +
       "	EXECUTE query2;      \n" +
       "	DEALLOCATE PREPARE query2;      \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
       "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(    \n" +
       "	IN pPageIndex INT,      \n" +
       "	IN pRecordPerPage INT,      \n" +
       "	IN pOrderBy VARCHAR(255),      \n" +
       "	IN pWhereClause VARCHAR(16383),       \n" +
       "	IN pCustomerIDs VARCHAR(16383),      \n" +
       "	IN pPaymentMethodIDs VARCHAR(16383),     \n" +
       "	IN pBankAccountCodeIDs VARCHAR(16383),    \n" +
       "	IN pTransactionModeIDs VARCHAR(16383),    \n" +
       "	IN pExactPaymentNumberSearch TINYINT,      \n" +
       "	IN pPaymentNumber VARCHAR(1000),     \n" +
       "	IN pPaymentCMNumber VARCHAR(1000),    \n" +
       "	IN pAmount VARCHAR(50),       \n" +
       "	IN pExactRefundAmountSearch TINYINT,      \n" +
       "	IN pFromDate DATE,      \n" +
       "	IN pToDate DATE,      \n" +
       "	IN pFromCMPaymentDate DATE,      \n" +
       "	IN pToCMPaymentDate DATE,    \n" +
       "	IN pRefPaymentMode VARCHAR(10),    \n" +
       "	IN pTransModeType INT,  \n" +
       "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
       ")  \n" +
       "BEGIN      \n" +
       "	DECLARE pOffset INT;      \n" +
       "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
       "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
       "	DECLARE v_TimeZone VARCHAR(50);      \n" +
       "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);      \n" +
       "	DECLARE v_PaymentDateCon VARCHAR(1000);      \n" +
       "	DECLARE v_CMDateCon VARCHAR(1000);      \n" +
       "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);    \n" +
       "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
       "  \n" +
       "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
       "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
       "  \n" +
       "        SET v_CMDateCon = '';      \n" +
       "        SET v_PaymentDateCon = '';      \n" +
       "        SET v_CMPaymentDateWhereClause = '';    \n" +
       "        SET v_IsIncludeVoidedTransWhereClause = '';   \n" +
       "  \n" +
       "  \n" +
       "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
       "  		SET pWhereClause = '1=1' ;      \n" +
       "		END IF;      \n" +
       "  \n" +
       "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');      \n" +
       "		END IF;     \n" +
       "  \n" +
       "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');      \n" +
       "		END IF;      \n" +
       "  \n" +
       "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');      \n" +
       "		END IF;      \n" +
       "  \n" +
       "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN      \n" +
       "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');      \n" +
       "		END IF;      \n" +
       "  \n" +
       "	IF (pPaymentNumber IS NOT NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');      \n" +
       "	END IF;      \n" +
       "  \n" +
       "  \n" +
       "	IF (pPaymentCMNumber IS NOT NULL) THEN    \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "	IF (pAmount IS NOT NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');      \n" +
       "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');      \n" +
       "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN      \n" +
       "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');      \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN      \n" +
       "  \n" +
       "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN      \n" +
       "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN      \n" +
       "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
       "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
       "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN      \n" +
       "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
       "		END IF;     \n" +
       "  \n" +
       "  \n" +
       "		SET v_CMPaymentDateWhereClause = CONCAT('		    \n" +
       "			AND      \n" +
       "			(		    \n" +
       "				EXISTS(      \n" +
       "					SELECT  1      \n" +
       "					FROM packingslip_invoice_payment_det pipddt     \n" +
       "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0    \n" +
       "					WHERE pipddt.refPayementid = psip.id      \n" +
       "					',v_PaymentDateCon,'      \n" +
       "					AND pipddt.isDeleted=0      \n" +
       "				 )    \n" +
       "				 OR    \n" +
       "				 EXISTS(      \n" +
       "					SELECT  1      \n" +
       "					FROM packingslip_invoice_payment_det pipddt     \n" +
       "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0    \n" +
       "					WHERE pipddt.refPayementid = psip.id      \n" +
       "					',v_CMDateCon,'      \n" +
       "					AND pipddt.isDeleted=0      \n" +
       "				 )    \n" +
       "			)    \n" +
       "  \n" +
       "		');    \n" +
       "  \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF (pIsIncludeVoidedTransaction = 0) THEN    \n" +
       "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');    \n" +
       "	END IF;    \n" +
       "  \n" +
       "  \n" +
       "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"      \n" +
       "		SELECT  psip.id,      \n" +
       "			psip.mfgcodeID ,    \n" +
       "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,      \n" +
       "			psip.isPaymentVoided,  psip.voidPaymentReason,     \n" +
       "			psip.agreedRefundAmt AS agreedRefundAmount ,    \n" +
       "			(CASE WHEN psip.isPaymentVoided = 0 THEN  'Paid' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,      \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,      \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,      \n" +
       "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')      \n" +
       "									ELSE NULL END) AS voidedAt,     \n" +
       "			psip.bankName,      \n" +
       "			psip.bankAccountNo,      \n" +
       "			psip.paymentType,      \n" +
       "			psip.bankAccountMasID,      \n" +
       "			psip.systemId ,      \n" +
       "			psip.paymentDate AS refundDate,      \n" +
       "			psip.paymentAmount,      \n" +
       "			psip.accountReference,      \n" +
       "			psip.remark,     \n" +
       "			psip.paymentNumber,    \n" +
       "			gc.gencCategoryName paymentMethod,      \n" +
       "			gc.systemGenerated systemGeneratedPaymentMethod,     \n" +
       "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList     \n" +
       "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList    \n" +
       "				ELSE NULL END) AS paymentCMList ,     \n" +
       "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList     \n" +
       "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList    \n" +
       "				ELSE NULL END) AS paymentCMNumWithOutIDList ,     \n" +
       "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'      \n" +
       "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,     \n" +
       "			psip.offsetAmount ,     \n" +
       "			psip.refGencTransModeID , gtmm.modeName,    \n" +
       "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,    \n" +
       "			fun_getUserNameByID(psip.createdBy) createdby,      \n" +
       "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,      \n" +
       "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
       "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,      \n" +
       "			fun_getRoleByID(psip.createByRoleId) createdbyRole     \n" +
       "		FROM packingslip_invoice_payment psip      \n" +
       "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0      \n" +
       "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0      \n" +
       "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,    \n" +
       "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList    \n" +
       "					FROM packingslip_invoice_payment_det psipd      \n" +
       "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0    \n" +
       "					WHERE psipd.refRefundPaymentID IS NOT NULL     \n" +
       "					AND psipd.isDeleted = 0      \n" +
       "					GROUP BY psipd.refPayementid ) payRefundDetTemp     \n" +
       "				ON psip.id = payRefundDetTemp.refPayementid     \n" +
       "  \n" +
       "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,    \n" +
       "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList    \n" +
       "					 FROM packingslip_invoice_payment_det psipd      \n" +
       "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
       "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL     \n" +
       "					AND psipd.isDeleted = 0      \n" +
       "					GROUP BY psipd.refPayementid) cmRefundDetTemp     \n" +
       "				ON psip.id = cmRefundDetTemp.refPayementid 		    \n" +
       "  \n" +
       "		WHERE psip.refPaymentMode = 'CR'     \n" +
       "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)    \n" +
       "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"    \n" +
       "		AND psip.isDeleted = 0     \n" +
       "  \n" +
       "            \");    \n" +
       "  \n" +
       "      -- select @Sproc_RetrieveCustomerRefundDetails;    \n" +
       "  \n" +
       "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
       "		SET pOrderBy = \" ORDER BY id DESC \";      \n" +
       "	ELSE      \n" +
       "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;      \n" +
       "	END IF;      \n" +
       "  \n" +
       "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
       "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
       "	ELSE      \n" +
       "		SET rowNumWhere = '';      \n" +
       "	END IF;               \n" +
       "  \n" +
       "			/* to get total count of rows */      \n" +
       "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
       "	 -- select @SQLStatement1;    \n" +
       "	PREPARE query1 FROM @SQLStatement1;      \n" +
       "	EXECUTE query1;      \n" +
       "	DEALLOCATE PREPARE query1;      \n" +
       "  \n" +
       "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
       "	-- select @SQLStatement2;    \n" +
       "	PREPARE query2 FROM @SQLStatement2;      \n" +
       "	EXECUTE query2;      \n" +
       "	DEALLOCATE PREPARE query2;      \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetAllCreditMemoOfCustomerRefund` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetAllCreditMemoOfCustomerRefund`(      \n" +
       "	IN pCustomerID INT,    \n" +
       "	IN pCustRefundMstID INT,    \n" +
       "	IN pCreditMemoTransType VARCHAR(255),    \n" +
       "	IN pRefPaymentMode VARCHAR(255)    \n" +
       ")  \n" +
       "BEGIN    \n" +
       "	DECLARE v_isRefundPaymentVoided TINYINT ;   \n" +
       "	IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN  \n" +
       "  \n" +
       "		SELECT * FROM (     \n" +
       "			SELECT  NULL AS paymentDetMstID , cps.id  AS custCreditMemoMstID,     \n" +
       "				cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "				cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
       "				psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
       "				IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
       "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "						FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundCustCreditMemoID = cps.id                     \n" +
       "						AND isPaymentVoided = 0                        \n" +
       "						AND isDeleted = 0    \n" +
       "			    ) totalRefundIssuedAmount ,    \n" +
       "			     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
       "					WHERE refCustCreditMemoID = cps.id       \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
       "					FROM customer_packingslip cps    \n" +
       "			LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id AND psipd.isPaymentVoided = 0                        \n" +
       "						AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID    \n" +
       "			WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1    \n" +
       "			AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2   \n" +
       "			) tempCrditMemoList    \n" +
       "		WHERE (                \n" +
       "			( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0                  \n" +
       "					 /* get all peding for refund */	                \n" +
       "		    ) ;    \n" +
       "  \n" +
       "	ELSE    \n" +
       "  \n" +
       "		/* update customer payment case */    \n" +
       "		SELECT isPaymentVoided INTO v_isRefundPaymentVoided    \n" +
       "		FROM packingslip_invoice_payment    \n" +
       "		WHERE id = pCustRefundMstID    \n" +
       "		AND isDeleted = 0 ;   \n" +
       "  \n" +
       "		IF (v_isRefundPaymentVoided = 0) THEN  \n" +
       "				SELECT * FROM (    \n" +
       "					SELECT  psipd.id AS paymentDetMstID , cps.id  AS custCreditMemoMstID,      \n" +
       "						cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "						cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
       "						psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
       "						IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
       "						 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "								FROM packingslip_invoice_payment_det                        \n" +
       "								WHERE refRefundCustCreditMemoID = cps.id                    \n" +
       "								AND isPaymentVoided = 0                        \n" +
       "								AND isDeleted = 0    \n" +
       "						) totalRefundIssuedAmount ,    \n" +
       "						(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
       "							WHERE refCustCreditMemoID = cps.id       \n" +
       "							AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
       "							FROM customer_packingslip cps    \n" +
       "					LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0                        \n" +
       "								AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID    \n" +
       "					WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1    \n" +
       "					AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2   \n" +
       "					) tempCrditMemoList    \n" +
       "				WHERE                 \n" +
       "					(                \n" +
       "						(IFNULL(tempCrditMemoList.paymentAmountForSelectedCM,0) > 0)     \n" +
       "										 /* get  paid CM*/	                \n" +
       "					)  \n" +
       "  \n" +
       "				UNION    \n" +
       "  \n" +
       "  \n" +
       "				SELECT * FROM (    \n" +
       "						SELECT  NULL AS paymentDetMstID , cps.id  AS custCreditMemoMstID,   							  \n" +
       "							cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "							cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
       "							psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
       "							IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
       "							 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "									FROM packingslip_invoice_payment_det                        \n" +
       "									WHERE refRefundCustCreditMemoID = cps.id                     \n" +
       "									AND isPaymentVoided = 0                        \n" +
       "									AND isDeleted = 0    \n" +
       "						    ) totalRefundIssuedAmount ,    \n" +
       "						     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
       "								WHERE refCustCreditMemoID = cps.id       \n" +
       "								AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
       "								FROM customer_packingslip cps    \n" +
       "						LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0                        \n" +
       "									AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID    \n" +
       "								WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1    \n" +
       "								AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2 AND cps.id NOT IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det                \n" +
       "												WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0              \n" +
       "												AND isDeleted = 0 GROUP BY refPayementid)  \n" +
       "					) tempCrditMemoList     \n" +
       "				WHERE (                \n" +
       "						( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0                  \n" +
       "								 /* get all peding for refund */	                \n" +
       "					)      \n" +
       "			    ;  \n" +
       "  \n" +
       "		ELSEIF(v_isRefundPaymentVoided = 1) THEN   \n" +
       "  \n" +
       "			SELECT  psipd.id AS paymentDetMstID , cps.id  AS custCreditMemoMstID,   				  \n" +
       "				cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "				cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
       "				psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
       "				IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
       "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "						FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundCustCreditMemoID = cps.id                    \n" +
       "						AND isPaymentVoided = 0                        \n" +
       "						AND isDeleted = 0    \n" +
       "				) totalRefundIssuedAmount ,    \n" +
       "				(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
       "					WHERE refCustCreditMemoID = cps.id       \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
       "			FROM customer_packingslip cps    \n" +
       "				JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id   \n" +
       "						AND psipd.isDeleted = 0 AND psipd.refPayementid = pCustRefundMstID    \n" +
       "			WHERE cps.customerID = pCustomerID   \n" +
       "			AND cps.`status` = 2   \n" +
       "			AND cps.transType = pCreditMemoTransType   \n" +
       "			AND cps.isDeleted = 0   \n" +
       "			 ;  \n" +
       "  \n" +
       "		END IF;	  \n" +
       "	END IF;   \n" +
       "  \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetAllPaymentOfCustomerRefund` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetAllPaymentOfCustomerRefund`(    \n" +
       "IN pCustomerID INT,    \n" +
       "IN pCustRefundMstID INT,    \n" +
       "IN pRefPaymentMode VARCHAR(10)    \n" +
       ")  \n" +
       "BEGIN    \n" +
       "	DECLARE v_isRefundPaymentVoided TINYINT ;  \n" +
       "IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN                \n" +
       "	SELECT *       \n" +
       "	FROM (  \n" +
       "		SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,               \n" +
       "                psip.paymentNumber,                                                                       \n" +
       "                psip.systemId ,       \n" +
       "		psip.paymentDate,                                                \n" +
       "                psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "					FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundPaymentID = psip.id                     \n" +
       "					AND isPaymentVoided = 0                        \n" +
       "					AND isDeleted = 0    \n" +
       "                    )  AS totalRefundIssuedAmount ,    \n" +
       "				psip.paymentAmount AS totalPaymentAmount,     \n" +
       "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
       "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,               \n" +
       "                    (SELECT COMMENT    \n" +
       "					FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
       "					AND isPaymentVoided = 0                        \n" +
       "					AND isDeleted = 0    \n" +
       "                    ) COMMENT,    \n" +
       "                     (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "					FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
       "					AND isPaymentVoided = 0                        \n" +
       "					AND isDeleted = 0    \n" +
       "                    ) paymentAmountForSelectedPayment    \n" +
       "		FROM packingslip_invoice_payment psip     \n" +
       "		LEFT JOIN (SELECT psipd.refPayementid,     \n" +
       "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
       "				    FROM packingslip_invoice_payment_det psipd     \n" +
       "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
       "											AND cps.isDeleted = 0      \n" +
       "				     WHERE psipd.isDeleted = 0          \n" +
       "					 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
       "                     ON psip.id = payDetTemp.refPayementid      \n" +
       "             WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0     \n" +
       "             AND psip.refPaymentMode = pRefPaymentMode  \n" +
       "             )  tempPay                \n" +
       "		WHERE                 \n" +
       "			(                \n" +
       "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0                  \n" +
       "						 /* get all peding to refund */	                \n" +
       "			)                \n" +
       "		;      \n" +
       "ELSE    \n" +
       "  \n" +
       "	/* update customer payment case */    \n" +
       "  \n" +
       "	SELECT isPaymentVoided INTO v_isRefundPaymentVoided    \n" +
       "	FROM packingslip_invoice_payment    \n" +
       "	WHERE id = pCustRefundMstID    \n" +
       "	AND isDeleted = 0 ;    \n" +
       "  \n" +
       "  \n" +
       "	IF(v_isRefundPaymentVoided = 0) THEN  \n" +
       "  \n" +
       "		SELECT *       \n" +
       "		FROM (  \n" +
       "			SELECT psip.id AS paymentMstID,     \n" +
       "						(SELECT id     \n" +
       "						FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
       "						AND isPaymentVoided = 0                        \n" +
       "						AND isDeleted = 0    \n" +
       "			    ) AS paymentDetMstID ,                                                                                      \n" +
       "			psip.paymentNumber,                                                                   \n" +
       "			psip.systemId ,       \n" +
       "			psip.paymentDate,                                                \n" +
       "		       psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "						FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundPaymentID = psip.id                     \n" +
       "						AND isPaymentVoided = 0                        \n" +
       "						AND isDeleted = 0    \n" +
       "			    ) AS totalRefundIssuedAmount ,    \n" +
       "					psip.paymentAmount AS totalPaymentAmount,     \n" +
       "					IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
       "					IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,                \n" +
       "			(SELECT COMMENT    \n" +
       "						FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
       "						AND isPaymentVoided = 0                        \n" +
       "						AND isDeleted = 0    \n" +
       "			    ) COMMENT,    \n" +
       "			    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "						FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
       "						AND isPaymentVoided = 0                        \n" +
       "						AND isDeleted = 0    \n" +
       "			    ) paymentAmountForSelectedPayment    \n" +
       "			FROM packingslip_invoice_payment psip     \n" +
       "			LEFT JOIN (SELECT psipd.refPayementid,     \n" +
       "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
       "					    FROM packingslip_invoice_payment_det psipd     \n" +
       "						JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
       "												AND cps.isDeleted = 0      \n" +
       "					     WHERE psipd.isDeleted = 0          \n" +
       "						 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
       "						ON psip.id = payDetTemp.refPayementid      \n" +
       "			WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0     \n" +
       "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
       "			)  tempPay                \n" +
       "			WHERE                 \n" +
       "				(                \n" +
       "					(tempPay.paymentAmountForSelectedPayment > 0)     \n" +
       "									 /* get all paid */	                \n" +
       "				)   \n" +
       "  \n" +
       "			UNION   \n" +
       "  \n" +
       "			SELECT *       \n" +
       "			FROM (  \n" +
       "				SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,                                                              \n" +
       "				psip.paymentNumber,                                                                    \n" +
       "				psip.systemId ,       \n" +
       "				psip.paymentDate,                                                \n" +
       "				psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "						(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "							FROM packingslip_invoice_payment_det                        \n" +
       "							WHERE refRefundPaymentID = psip.id                     \n" +
       "							AND isPaymentVoided = 0                        \n" +
       "							AND isDeleted = 0    \n" +
       "				    )  AS totalRefundIssuedAmount ,    \n" +
       "						psip.paymentAmount AS totalPaymentAmount,     \n" +
       "						IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
       "						IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,                  \n" +
       "				(SELECT COMMENT    \n" +
       "							FROM packingslip_invoice_payment_det                        \n" +
       "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
       "							AND isPaymentVoided = 0                        \n" +
       "							AND isDeleted = 0    \n" +
       "				    ) COMMENT,    \n" +
       "				    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "							FROM packingslip_invoice_payment_det                        \n" +
       "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
       "							AND isPaymentVoided = 0                        \n" +
       "							AND isDeleted = 0    \n" +
       "				    ) paymentAmountForSelectedPayment    \n" +
       "				FROM packingslip_invoice_payment psip     \n" +
       "				LEFT JOIN (SELECT psipd.refPayementid, psipd.id AS paymentDetMstID ,     \n" +
       "							IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
       "						    FROM packingslip_invoice_payment_det psipd     \n" +
       "							JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
       "													AND cps.isDeleted = 0      \n" +
       "						     WHERE psipd.isDeleted = 0          \n" +
       "							 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
       "				     ON psip.id = payDetTemp.refPayementid      \n" +
       "			     WHERE psip.isMarkForRefund = 1   \n" +
       "			     AND psip.mfgcodeID = pCustomerID   \n" +
       "			     AND psip.isDeleted = 0   \n" +
       "			     AND psip.isPaymentVoided = 0     \n" +
       "			     AND psip.refPaymentMode = pRefPaymentMode   \n" +
       "			     AND psip.id NOT IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det                \n" +
       "										WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0              \n" +
       "										AND isDeleted = 0 GROUP BY refPayementid)  \n" +
       "			) tempPay     \n" +
       "  \n" +
       "			WHERE                 \n" +
       "			(                \n" +
       "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0                  \n" +
       "						 /* get all peding to refund  */	                \n" +
       "			)                \n" +
       "			;  \n" +
       "  \n" +
       "	ELSEIF(v_isRefundPaymentVoided = 1) THEN   \n" +
       "  \n" +
       "			SELECT psip.id AS paymentMstID,     \n" +
       "				(SELECT id  FROM packingslip_invoice_payment_det                        \n" +
       "						WHERE refRefundPaymentID = psip.id   \n" +
       "						AND refPayementid = pCustRefundMstID AND isDeleted = 0) AS paymentDetMstID ,                   \n" +
       "				psip.paymentNumber,                                                                       \n" +
       "				psip.systemId ,       \n" +
       "				psip.paymentDate,                                                \n" +
       "				psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
       "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
       "					FROM packingslip_invoice_payment_det WHERE refRefundPaymentID = psip.id                     \n" +
       "					AND isPaymentVoided = 0 AND isDeleted = 0) AS totalRefundIssuedAmount ,    \n" +
       "				psip.paymentAmount AS totalPaymentAmount,     \n" +
       "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
       "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,               \n" +
       "				(SELECT COMMENT FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundPaymentID = psip.id   \n" +
       "					AND refPayementid = pCustRefundMstID AND isDeleted = 0) COMMENT,    \n" +
       "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                        \n" +
       "					WHERE refRefundPaymentID = psip.id   \n" +
       "					AND refPayementid = pCustRefundMstID AND isDeleted = 0) paymentAmountForSelectedPayment    \n" +
       "			FROM packingslip_invoice_payment psip     \n" +
       "				JOIN (SELECT psipd.refPayementid,     \n" +
       "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
       "					    FROM packingslip_invoice_payment_det psipd     \n" +
       "						JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
       "												AND cps.isDeleted = 0      \n" +
       "					     WHERE psipd.isDeleted = 0          \n" +
       "						 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
       "						ON psip.id = payDetTemp.refPayementid      \n" +
       "			WHERE psip.mfgcodeID = pCustomerID   \n" +
       "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
       "			AND psip.isDeleted = 0    \n" +
       "			 ;  \n" +
       "  \n" +
       "	END IF;	   \n" +
       "  \n" +
       "   END IF;    \n" +
       "END;  \n" +
    /* **************************** New Script -> 29-07-2021  *********************************** */
    "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoReportDetails` ;  \n" +
       "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                              \n" +
       "	IN cpID INT                              \n" +
       ")  \n" +
       "BEGIN	                    \n" +
       "	DECLARE vReceivedAmt  DECIMAL(18,6);    \n" +
       "	DECLARE vTotRefundIssuedAgainstCreditMemo  DECIMAL(18,6); 	  \n" +
       "  \n" +
       "	# Customer Invoice Master table details                               \n" +
       "		SELECT  cp.id,                               \n" +
       "			cp.invoiceNumber,                              \n" +
       "			cp.invoiceDate,                  \n" +
       "			cp.creditMemoNumber,                  \n" +
       "			cp.creditMemoDate,                  \n" +
       "			cp.refDebitMemoNumber,                  \n" +
       "			refDebitMemoDate,                                  \n" +
       "			cp.poNumber,                                     \n" +
       "			cp.poDate,                    \n" +
       "			mg.customerSystemID,                    \n" +
       "			mg.accountRef,                  \n" +
       "			cp.status,                           \n" +
       "			cp.billingAddress,                   \n" +
       "			cp.shippingAddress,                    \n" +
       "			cp.packingSlipComment,                    \n" +
       "			cp.rmaNumber,                  \n" +
       "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                \n" +
       "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                      \n" +
       "			cp.systemID AS legalnumber,                      \n" +
       "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                        \n" +
       "			us.emailAddress,                    \n" +
       "			emp.phExtension,        \n" +
       "			'1.00' docNumber ,      \n" +
       "			cp.revision creditMemoVersion      \n" +
       "		FROM customer_packingslip cp                     \n" +
       "			JOIN mfgcodemst mg ON mg.id=cp.customerID                              \n" +
       "			LEFT JOIN genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  AND gcs.isDeleted = 0                                   \n" +
       "			LEFT JOIN genericcategory gcp ON gcp.gencCategoryID = cp.termsID AND gcp.isDeleted = 0                                 \n" +
       "			LEFT JOIN users us ON us.id = cp.updatedBy                                      \n" +
       "			LEFT JOIN employees emp ON emp.id = us.employeeID                               \n" +
       "		WHERE cp.id=cpID AND cp.isDeleted = 0         \n" +
       "		AND transType='C'        \n" +
       "		LIMIT 1;                               \n" +
       "  \n" +
       "	# Customer Invoice line level details                               \n" +
       "		SELECT                                \n" +
       "			cpd.id,                                    \n" +
       "			cpd.partId,                          \n" +
       "			cpd.id AS refCustomerPackingSlipDetID,                           \n" +
       "			cpd.lineID,                   \n" +
       "			cpd.reflineID,                \n" +
       "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                              \n" +
       "				WHEN (c.iscustom=1) THEN  c.custAssyPN                              \n" +
       "				WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN                               \n" +
       "				ELSE  ''  END) AS mfgPN ,                              \n" +
       "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN 'Other Charges'                                    \n" +
       "				ELSE  fun_getMfgNameByPartID(cpd.partId)                                                      \n" +
       "				END) AS  mfgName,                              \n" +
       "			IFNULL(c.rev, '') AS revision,                              \n" +
       "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  'EA'                              \n" +
       "				ELSE  fun_getUOMAbbreviationByID(c.uom)              \n" +
       "				END) AS uom,                              \n" +
       "			cpd.shipQty AS qty,                               \n" +
       "			IFNULL(cpd.unitPrice,0) AS price,                              \n" +
       "			IFNULL(cpd.extendedPrice,0) AS extPrice,                    \n" +
       "			CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
       "					','<br/>'), ''),'<br/>',                                   \n" +
       "			IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                     \n" +
       "			IFNULL(CONCAT(', ',                                      \n" +
       "					fun_getCertificationByPartID(cpd.partid)),                                      \n" +
       "				''),                      \n" +
       "			IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                      \n" +
       "			IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',            \n" +
       "			IFNULL(REPLACE(cpd.shippingNotes,'  \n" +
       "			','<br/>'),'')) AS DESCRIPTION                     \n" +
       "  \n" +
       "		FROM  customer_packingslip_det cpd                                   \n" +
       "			LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                    \n" +
       "		WHERE                                    \n" +
       "		cpd.isDeleted = 0   \n" +
       "		AND cpd.refCustPackingSlipID = cpID   \n" +
       "		ORDER BY reflineID ASC;                               \n" +
       "  \n" +
       "	# Customer Invoice Total charges details which we will at the end of report                              \n" +
       "	SELECT  fun_getTotalCustomerCreditMemoAppliedAmountById(cpID) INTO vReceivedAmt;   \n" +
       "  \n" +
       "	SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
       "	FROM packingslip_invoice_payment_det   \n" +
       "	WHERE refRefundCustCreditMemoID = cpID  \n" +
       "	AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
       "  \n" +
       "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                               \n" +
       "		SELECT                                            \n" +
       "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                               \n" +
       "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                           \n" +
       "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 ) totalLinePrice                  \n" +
       "			/*(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                               \n" +
       "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice*/                              \n" +
       "		FROM customer_packingslip_det cpd                                   \n" +
       "		WHERE cpd.refCustPackingSlipID = cpID                                \n" +
       "		AND cpd.isdeleted=0;                 \n" +
       "  \n" +
       "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                    \n" +
       "				vReceivedAmt totalRecvAmt,      \n" +
       "			-- IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,            \n" +
       "			IFNULL(totalLinePrice,0) totalCMAmount,      \n" +
       "			(IFNULL((IFNULL(totalLinePrice,0) + (IFNULL(vReceivedAmt,0) + vTotRefundIssuedAgainstCreditMemo)) ,0)) totalBalAmt ,  \n" +
       "			vTotRefundIssuedAgainstCreditMemo AS totalCMRefundedAmt      \n" +
       "                FROM tempTotalPrice LIMIT 1;                 \n" +
       "  \n" +
       "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                      \n" +
       "END;  \n" +
    /* **************************** Add Script Version -> 29-07-2021 *********************************** */
    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
    "VALUES (5091,'2.00','V1',' customer payment refund sps  - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
    );
   break;
        case 5091:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL)THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL )THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY BinID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL)THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL)THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN LIKE \"%', pScanMPNPID ,'%\" OR pidCode LIKE \"%', pScanMPNPID ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN = \"', pScanMPNPID ,'\" OR pidCode = \"', pScanMPNPID ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                supplierCodeName,					packagingType,  		packingSlipDate,   		packingSlipNumber,  supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						fun_getPackagingNameByID(vucp.packagingID) packagingType,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "   # select @temp_Sproc_RetrieveNonUMIDStockList;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-07-2021  ********************************** */
                "DROP VIEW IF EXISTS  `vu_umid_creation_pending`;  \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`packingSlipID` AS `packingSlipID`,  \n" +
                "        `a`.`packagingID` AS `packagingID`,  \n" +
                "        `a`.`BinID` AS `BinID`,  \n" +
                "        `a`.`warehouseID` AS `warehouseID`,  \n" +
                "        `a`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "        `a`.`partId` AS `PartId`,  \n" +
                "        `a`.`nickname` AS `nickname`,  \n" +
                "        SUM(`a`.`InQty`) AS `InQty`,  \n" +
                "        SUM(`a`.`OutQty`) AS `UMIDCreatedQty`,  \n" +
                "        SUM(`a`.`returnQty`) AS `returnQty`,  \n" +
                "        ((SUM(IFNULL(`a`.`InQty`, 0)) - SUM(IFNULL(`a`.`OutQty`, 0))) - SUM(IFNULL(`a`.`returnQty`, 0))) AS `BalanceQty`,  \n" +
                "        `a`.`receivedStatus` AS `receivedStatus`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `psd`.`refPackingSlipMaterialRecID` AS `packingSlipID`,  \n" +
                "                `psd`.`packagingID` AS `packagingID`,  \n" +
                "                `psd`.`binID` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psd`.`partID` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                `psd`.`receivedQty` AS `InQty`,  \n" +
                "                0 AS `OutQty`,  \n" +
                "                0 AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            `packing_slip_material_receive_det` `psd`  \n" +
                "        WHERE  \n" +
                "            (EXISTS( SELECT  \n" +
                "                    1  \n" +
                "                FROM  \n" +
                "                    `packing_slip_material_receive` `p`  \n" +
                "                WHERE  \n" +
                "                    ((`p`.`id` = `psd`.`refPackingSlipMaterialRecID`)  \n" +
                "                        AND (`p`.`receiptType` = 'P')  \n" +
                "                        AND (`p`.`isDeleted` = 0)))  \n" +
                "                AND (`psd`.`binID` IS NOT NULL)  \n" +
                "                AND (`psd`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`deletedAt` IS NULL)) UNION ALL SELECT  \n" +
                "            `psd`.`refPackingSlipMaterialRecID` AS `packingSlipID`,  \n" +
                "                `csd`.`packaging` AS `packagingID`,  \n" +
                "                `csd`.`fromBin` AS `BinID`,  \n" +
                "                `csd`.`fromWarehouse` AS `warehouseID`,  \n" +
                "                `csd`.`fromDepartment` AS `parentWarehouseID`,  \n" +
                "                `csd`.`refcompid` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                0 AS `InQty`,  \n" +
                "                `csd`.`orgQty` AS `OutQty`,  \n" +
                "                0 AS `returnQty`,  \n" +
                "                NULL AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            ((`component_sid_stock` `csd`  \n" +
                "        JOIN `component_sid_stock_packing_detail` `csp` ON ((`csd`.`id` = `csp`.`refComponentSidStockID`)))  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`csp`.`refPackingSlipDetailID` = `psd`.`id`)))  \n" +
                "        WHERE  \n" +
                "            ((`csd`.`isDeleted` = 0)  \n" +
                "                AND (`csd`.`deletedAt` IS NULL)) UNION ALL SELECT  \n" +
                "            `psds`.`refPackingSlipId` AS `packingSlipID`,  \n" +
                "                `psds`.`packagingId` AS `packagingID`,  \n" +
                "                `psds`.`binId` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psds`.`partId` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                0 AS `InQty`,  \n" +
                "                0 AS `OutQty`,  \n" +
                "                `psds`.`qty` AS `returnQty`,  \n" +
                "                NULL AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            ((`packing_slip_material_receive_det_stock` `psds`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`psd`.`id` = `psds`.`refPackingSlipDetId`)))  \n" +
                "        JOIN `warehousemst` `w` ON (((`w`.`ID` = `psd`.`warehouseID`)  \n" +
                "            AND (`psd`.`refPackingSlipMaterialRecID` = `psds`.`refPackingSlipId`)  \n" +
                "            AND (`psd`.`packagingID` = `psds`.`packagingId`)  \n" +
                "            AND (`psd`.`binID` = `psds`.`binId`)  \n" +
                "            AND (`psd`.`warehouseID` = `w`.`ID`)  \n" +
                "            AND (`psd`.`parentWarehouseID` = `w`.`parentWHID`)  \n" +
                "            AND (`psd`.`partID` = `psds`.`partId`))))  \n" +
                "        WHERE  \n" +
                "            ((`psds`.`type` = 'PU')  \n" +
                "                AND (`psds`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`isDeleted` = 0))) `a`  \n" +
                "    GROUP BY `a`.`packingSlipID` , `a`.`packagingID` , `a`.`BinID` , `a`.`warehouseID` , `a`.`parentWarehouseID` , `a`.`partId` , `a`.`nickname`;  \n" +
                /* **************************** New Script -> 30-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5092,'2.00','V1','Bug 35702: QA Testing Bugs User Story 35332: UMID Pending Parts: Implement Advance Filter - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5092:
             allDbChangesArray.push(
             /* **************************** New Script -> 30-07-2021 *********************************** */
             "DROP procedure IF EXISTS `Sproc_RetrieveComponentPriceBreakDetails`;  \n" +
             "CREATE PROCEDURE `Sproc_RetrieveComponentPriceBreakDetails`(  \n" +
             "	IN ppageIndex INT,  \n" +
             "	IN precordPerPage INT,  \n" +
             "	IN pOrderBy VARCHAR(255),  \n" +
             "	IN pWhereClause VARCHAR(16383)  \n" +
             ")  \n" +
             "BEGIN  \n" +
             "  \n" +
             "	DECLARE pOffset INT;  \n" +
             "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
             "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
             "	DECLARE v_TimeZone VARCHAR(50);  \n" +
             "  \n" +
             "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
             "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
             "  \n" +
             "	SET @temp_Sproc_RetrieveComponentPriceBreakDetails = CONCAT(\"SELECT PBD.id,PBD.mfgPNID,PBD.priceBreak,PBD.unitPrice,  \n" +
             "		PBD.priceBreak * PBD.unitPrice AS ExtendedPrice,C.mfgcodeID,C.mfgPN, md.mfgCode, md.mfgName, PBD.updatedOn,  \n" +
             "		fun_getUserNameByID(PBD.updatedBy) updatedby,  \n" +
             "		fun_getUserNameByID(PBD.createdBy) createdby,  \n" +
             "		fun_getRoleByID(PBD.createByRoleId) createdbyRole,  \n" +
             "		fun_getRoleByID(PBD.updateByRoleId) updatedbyRole,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(PBD.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(PBD.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
             "		C.PIDCode, fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg, rr.rohsIcon, rr.name AS rohsName  \n" +
             "	FROM component_price_break_details AS PBD  \n" +
             "	LEFT JOIN component C ON C.id = PBD.mfgPNID  \n" +
             "	LEFT JOIN mfgcodemst md ON md.id = C.mfgcodeID  \n" +
             "	LEFT JOIN rfq_rohsmst rr ON rr.id = C.rohsstatusID  \n" +
             "	WHERE PBD.isDeleted = 0 and PBD.`type` = 1 \");  \n" +
             "  \n" +
             "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
             "		SET pOrderBy = \"ORDER BY id ASC\";  \n" +
             "	ELSE  \n" +
             "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
             "		SET pWhereClause = '1=1' ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
             "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
             "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
             "	ELSE  \n" +
             "		SET rowNumWhere = '';  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* to get total count of rows */  \n" +
             "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentPriceBreakDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
             "		PREPARE query2 FROM @SQLStatement2;  \n" +
             "		EXECUTE query2;  \n" +
             "		DEALLOCATE PREPARE query2;  \n" +
             "  \n" +
             "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentPriceBreakDetails,\" ) c  \n" +
             "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
             "		PREPARE query1 FROM @SQLStatement2;  \n" +
             "		EXECUTE query1;  \n" +
             "		DEALLOCATE PREPARE query1;  \n" +
             "  \n" +
             "END;  \n" +
             /* **************************** Add Script Version -> 30-07-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (5093,'2.00','V1',' Bug 35800: Part Master: Price Break Details - After click on the cancel button, still the focus is not closed - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;
            case 5093:
                allDbChangesArray.push(
                 /* **************************** New Script -> 30-07-2021  *********************************** */
                 "DROP procedure IF EXISTS `Sproc_GetAssyStockDetailByID`;  \n" +
                 "CREATE PROCEDURE `Sproc_GetAssyStockDetailByID`(    \n" +
                 "	IN passyStockID INT    \n" +
                 "	)  \n" +
                 "BEGIN    \n" +
                 "		SELECT s.id,s.openingStock,s.openingdate,    \n" +
                 "			s.woNumber,s.serialNo,s.partID,s.`type`,    \n" +
                 "			s.whID,s.binID,  s.dateCode, s.dateCodeFormat, s.poNumber, s.poQty , s.soNumber ,   \n" +
                 "			(SELECT SUM(sh.shippedqty)  FROM shippedassembly sh WHERE sh.partID=s.partID    \n" +
                 "				AND sh.woNumber=s.woNumber AND sh.isDeleted=0) shipQty    \n" +
                 "		FROM assemblystock s    \n" +
                 "		WHERE s.id=passyStockID    \n" +
                 "		AND s.isDeleted=0;    \n" +
                 "  \n" +
                 "END;  \n" +
                 
                 /* **************************** New Script -> 30-07-2021  *********************************** */
                 "DROP procedure IF EXISTS `Sproc_GetAssemblyStock`;  \n" +
                 "CREATE PROCEDURE `Sproc_GetAssemblyStock`(    \n" +
                 "	IN ppageIndex INT,    \n" +
                 "	IN precordPerPage INT,    \n" +
                 "	IN pOrderBy VARCHAR(255),    \n" +
                 "    IN pWhereClause VARCHAR(16383)    \n" +
                 "    )  \n" +
                 "BEGIN    \n" +
                 "	DECLARE pOffset INT;    \n" +
                 "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                 "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                 "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                 "  \n" +
                 "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                 "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                 "  \n" +
                 "	SET @temp_Sproc_GetAssemblyStock = CONCAT(\" SELECT s.id, s.openingdate,    \n" +
                 "			c.imageURL, c.documentPath, s.partID, c.mfgPN, c.PIDCode,    \n" +
                 "			c.nickname, c.rev, c.custAssyPN, c.mfgPNDescription,    \n" +
                 "			ro.rohsIcon, ro.name AS rohsName, s.woNumber, s.serialNo,    \n" +
                 "			s.openingStock,fun_getWarehouseNameByID(s.whID) warehouse,fun_getBinNameByID(s.binID) binName,    \n" +
                 "			fun_getDepartmentNameByBinID(s.binID) parentWarehouse,    \n" +
                 "			(select count(1) from shippedassembly sh where sh.partID=s.partID and sh.woNumber=s.woNumber and sh.isdeleted=0) systemGeneratedsss,    \n" +
                 "			fun_getStockType(s.type) typestock,    \n" +
                 "			s.dateCode,s.dateCodeFormat, s.poNumber, s.poQty , s.soNumber ,  \n" +
                 "			fun_getUserNameByID(s.updatedBy) updatedby,    \n" +
                 "			fun_getUserNameByID(s.createdBy) createdby,    \n" +
                 "			fun_getRoleByID(s.createByRoleId) createdbyRole,    \n" +
                 "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,    \n" +
                 "			fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,    \n" +
                 "			fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt    \n" +
                 "			  ,(select sum(qtyPerBox) from workorder_boxserialno where assyStockId =  s.id) qtyBox    \n" +
                 "		FROM assemblystock s    \n" +
                 "		JOIN component c ON c.id = s.partID AND c.category = 3    \n" +
                 "		LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id    \n" +
                 "		WHERE s.isdeleted = 0 and s.type='OS'\");    \n" +
                 "  \n" +
                 "  \n" +
                 "		IF (pOrderBy IS NOT NULL) THEN    \n" +
                 "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                 "		ELSE    \n" +
                 "			SET pOrderBy = CONCAT(\"ORDER BY PIDCode DESC\");    \n" +
                 "		END IF;    \n" +
                 "  \n" +
                 "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                 "			SET pWhereClause = '1=1';    \n" +
                 "		END IF;    \n" +
                 "  \n" +
                 "  \n" +
                 "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                 "			SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                 "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);    \n" +
                 "		ELSE    \n" +
                 "			SET rowNumWhere = '';    \n" +
                 "		END IF;    \n" +
                 "  \n" +
                 "		/* to get total count of rows */    \n" +
                 "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetAssemblyStock,\" ) c where 1=1 and \", pWhereClause);    \n" +
                 "		PREPARE query2 FROM @SQLStatement2;    \n" +
                 "		EXECUTE query2;    \n" +
                 "		DEALLOCATE PREPARE query2;    \n" +
                 "  \n" +
                 "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetAssemblyStock,\" ) c    \n" +
                 "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                 "		PREPARE query1 FROM @SQLStatement2;    \n" +
                 "		EXECUTE query1;    \n" +
                 "		DEALLOCATE PREPARE query1;    \n" +
                 "  \n" +
                 "END;  \n" +
            
                 /* **************************** New Script -> 30-07-2021  *********************************** */
                 "ALTER VIEW `vu_salesorder_shipped_report` AS   \n" +
                 "    SELECT   \n" +
                 "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                 "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                 "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                 "        `a`.`poNumber` AS `Po Number`,  \n" +
                 "        `a`.`poDate` AS `Po Date`,  \n" +
                 "        `a`.`customerID` AS `Customer ID`,  \n" +
                 "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                 "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                 "        `a`.`status` AS `Sales Order Status`,  \n" +
                 "        `a`.`revision` AS `Revision`,  \n" +
                 "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                 "        `a`.`termsID` AS `Terms ID`,  \n" +
                 "        `a`.`soDate` AS `So Date`,  \n" +
                 "        `a`.`partID` AS `PartID`,  \n" +
                 "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                 "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                 "        `a`.`rev` AS `Assy Revision`,  \n" +
                 "        `a`.`nickName` AS `NickName`,  \n" +
                 "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                 "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                 "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                 "        `a`.`qty` AS `PO Qty`,  \n" +
                 "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                 "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                 "        `a`.`companyCode` AS `Company Code`,  \n" +
                 "        `a`.`companyName` AS `Company Name`,  \n" +
                 "        `a`.`fullName` AS `Full Name`,  \n" +
                 "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                 "        `a`.`isCancle` AS `isCancle`,  \n" +
                 "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                 "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                 "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                 "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                 "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                 "        `a`.`remark` AS `remark`,  \n" +
                 "        `a`.`price` AS `price`,  \n" +
                 "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                 "        `a`.`kitQty` AS `kitQty`,  \n" +
                 "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                 "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                 "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                 "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                 "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                 "        (CASE  \n" +
                 "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                 "            WHEN ((IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) > 0) THEN 'In Progress'  \n" +
                 "            ELSE 'Completed'  \n" +
                 "        END) AS `Status`,  \n" +
                 "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                 "        `a`.`createdDate` AS `createdDate`,  \n" +
                 "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                 "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                 "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                 "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                 "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                 "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                 "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                 "        `a`.`lineID` AS `lineID`,  \n" +
                 "        `a`.`custPOLineNumber` AS `custPOLineNumber`  \n" +
                 "    FROM  \n" +
                 "        (SELECT   \n" +
                 "            `sm`.`id` AS `salesOrderId`,  \n" +
                 "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                 "                `sm`.`poNumber` AS `poNumber`,  \n" +
                 "                `sm`.`poDate` AS `poDate`,  \n" +
                 "                `sm`.`customerID` AS `customerID`,  \n" +
                 "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                 "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                 "                `sm`.`status` AS `status`,  \n" +
                 "                `sm`.`revision` AS `revision`,  \n" +
                 "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                 "                `sm`.`termsID` AS `termsID`,  \n" +
                 "                `sm`.`soDate` AS `soDate`,  \n" +
                 "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                 "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                 "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                 "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                 "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                 "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                 "                (SELECT   \n" +
                 "                        1  \n" +
                 "                    FROM  \n" +
                 "                        `workorder_salesorder_details` `x`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                 "                            AND (`x`.`isDeleted` = 0))  \n" +
                 "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                 "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                 "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                 "                `co`.`rev` AS `rev`,  \n" +
                 "                `co`.`nickName` AS `nickName`,  \n" +
                 "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                 "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                 "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                 "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                 "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                 "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                 "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                 "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                 "                `roh`.`name` AS `RoHSName`,  \n" +
                 "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                 "                `a`.`qty` AS `qty`,  \n" +
                 "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                 "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                 "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                 "                `a`.`partID` AS `partID`,  \n" +
                 "                `a`.`isCancle` AS `isCancle`,  \n" +
                 "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                 "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                 "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                 "                (SELECT   \n" +
                 "                        MIN(`ssm`.`shippingDate`)  \n" +
                 "                    FROM  \n" +
                 "                        `salesshippingmst` `ssm`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                 "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                 "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                 "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                 "                `a`.`remark` AS `remark`,  \n" +
                 "                `a`.`price` AS `price`,  \n" +
                 "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                 "                `a`.`kitQty` AS `kitQty`,  \n" +
                 "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                 "                (SELECT   \n" +
                 "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                 "                    FROM  \n" +
                 "                        `shippedassembly`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                 "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                 "                            AND `shippedassembly`.`shippingId` IN (SELECT   \n" +
                 "                                `salesshippingmst`.`shippingID`  \n" +
                 "                            FROM  \n" +
                 "                                `salesshippingmst`  \n" +
                 "                            WHERE  \n" +
                 "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                 "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                 "                `a`.`lineID` AS `lineID`,  \n" +
                 "                `a`.`custPOLineNumber` AS `custPOLineNumber`  \n" +
                 "        FROM  \n" +
                 "            ((((((`salesorderdet` `a`  \n" +
                 "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                 "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                 "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                 "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                 "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                 "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                 "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                 "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                 "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                 "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                 "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                 "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                 "        WHERE  \n" +
                 "            ((`a`.`isDeleted` = 0)  \n" +
                 "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
 
                 /* **************************** New Script -> 30-07-2021  *********************************** */
                 "ALTER VIEW `vu_customer_packing_slip_qty` AS  \n" +
                 "    SELECT   \n" +
                 "        `a`.`opStock` AS `opStock`,  \n" +
                 "        `a`.`woID` AS `woID`,  \n" +
                 "        FUN_GETLASTWOOPIDBYWONUMBER(`a`.`woNumber`) AS `lastWOOPID`,  \n" +
                 "        `a`.`woNumber` AS `woNumber`,  \n" +
                 "        `a`.`assyID` AS `assyID`,  \n" +
                 "        `a`.`availableQty` AS `availableQty`,  \n" +
                 "        `a`.`availableQtyWithUMIDStock` AS `availableQtyWithUMIDStock`,  \n" +
                 "        `a`.`availableQty` AS `actualAvalilableQty`,  \n" +
                 "        `a`.`partID` AS `partID`,  \n" +
                 "        `a`.`rohsIcon` AS `rohsIcon`,  \n" +
                 "        `a`.`rohsName` AS `rohsName`,  \n" +
                 "        `a`.`mfgPN` AS `mfgPN`,  \n" +
                 "        NULL AS `selectedQty`,  \n" +
                 "        `a`.`warehouseName` AS `warehouseName`,  \n" +
                 "        `a`.`binName` AS `binName`,  \n" +
                 "        `a`.`binID` AS `binID`,  \n" +
                 "        `a`.`totalUMIDCount` AS `totalUMIDCount`,  \n" +
                 "        `a`.`totalUMIDCountAfterShipped` AS `totalUMIDCountAfterShipped`,  \n" +
                 "        `a`.`departmentName` AS `departmentName`,  \n" +
                 "        `a`.`stockType` AS `stockType`,  \n" +
                 "        `a`.`stockTypeName` AS `stockTypeName`,  \n" +
                 "        `a`.`poNumbers` AS `poNumbers`,  \n" +
                 "        `a`.`poQty` AS `poQty`,  \n" +
                 "        `a`.`soNumber` AS `soNumbers`  \n" +
                 "    FROM  \n" +
                 "        (SELECT   \n" +
                 "            (SUM(`atk`.`openingStock`) - (IFNULL(`css`.`pkgQty`, 0) + (SELECT   \n" +
                 "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                 "                    FROM  \n" +
                 "                        `shippedassembly` `ss`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`ss`.`isDeleted` = 0)  \n" +
                 "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                 "                            AND (`ss`.`partID` = `atk`.`partID`)  \n" +
                 "                            AND (`ss`.`stockType` = 'US'))))) AS `opStock`,  \n" +
                 "                `atk`.`partID` AS `partID`,  \n" +
                 "                `atk`.`woID` AS `woID`,  \n" +
                 "                `atk`.`woNumber` AS `woNumber`,  \n" +
                 "                (CASE  \n" +
                 "                    WHEN (`atk`.`type` = 'AS') THEN 'Adjustment Stock'  \n" +
                 "                    WHEN (`atk`.`type` = 'WS') THEN 'Work Order Stock'  \n" +
                 "                    WHEN (`atk`.`type` = 'OS') THEN 'Initial Stock'  \n" +
                 "                    ELSE ''  \n" +
                 "                END) AS `stockTypeName`,  \n" +
                 "                `atk`.`type` AS `stockType`,  \n" +
                 "                FUN_GETASSYPIDCODEBYID(`atk`.`partID`) AS `assyID`,  \n" +
                 "                FUN_GETROHSICONBYPARTID(`atk`.`partID`) AS `rohsIcon`,  \n" +
                 "                FUN_GETROHSNAMEBYPARTID(`atk`.`partID`) AS `rohsName`,  \n" +
                 "                FUN_GETCOMPONENTNAMEBYID(`atk`.`partID`) AS `mfgPN`,  \n" +
                 "                FUN_GETWAREHOUSENAMEBYID(`atk`.`whID`) AS `warehouseName`,  \n" +
                 "                FUN_GETBINNAMEBYID(`atk`.`binID`) AS `binName`,  \n" +
                 "                `atk`.`binID` AS `binID`,  \n" +
                 "                IFNULL(`css`.`pkgQty`, 0) AS `totalUMIDCount`,  \n" +
                 "                FUN_GETDEPARTMENTNAMEBYBINID(`atk`.`binID`) AS `departmentName`,  \n" +
                 "                IFNULL(`css`.`pkgQty`, 0) AS `totalUMIDCountAfterShipped`,  \n" +
                 "                (SUM(`atk`.`openingStock`) - (SELECT   \n" +
                 "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                 "                    FROM  \n" +
                 "                        `shippedassembly` `ss`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`ss`.`isDeleted` = 0)  \n" +
                 "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                 "                            AND (`ss`.`partID` = `atk`.`partID`)))) AS `availableQtyWithUMIDStock`,  \n" +
                 "                ((SUM(`atk`.`openingStock`) - (SELECT   \n" +
                 "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                 "                    FROM  \n" +
                 "                        `shippedassembly` `ss`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`ss`.`isDeleted` = 0)  \n" +
                 "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                 "                            AND (`ss`.`partID` = `atk`.`partID`)))) - IFNULL(`css`.`pkgQty`, 0)) AS `availableQty`,  \n" +
                 "                GROUP_CONCAT(DISTINCT `atk`.`poNumber`  \n" +
                 "                    SEPARATOR ', ') AS `poNumbers`,  \n" +
                 "                `atk`.`poQty` AS `poQty`,  \n" +
                 "                `atk`.`soNumber` AS `soNumber`  \n" +
                 "        FROM  \n" +
                 "            (`assemblystock` `atk`  \n" +
                 "        LEFT JOIN (SELECT   \n" +
                 "            `css`.`woID` AS `woId`,  \n" +
                 "                `css`.`woNumber` AS `woNumber`,  \n" +
                 "                SUM(`css`.`pkgQty`) AS `pkgQty`  \n" +
                 "        FROM  \n" +
                 "            `component_sid_stock` `css`  \n" +
                 "        WHERE  \n" +
                 "            ((`css`.`isDeleted` = 0)  \n" +
                 "                AND (`css`.`woNumber` IS NOT NULL))  \n" +
                 "        GROUP BY `css`.`woID` , `css`.`woNumber`) `css` ON ((`css`.`woNumber` = `atk`.`woNumber`)))  \n" +
                 "        WHERE  \n" +
                 "            (`atk`.`isDeleted` = 0)  \n" +
                 "        GROUP BY `atk`.`woNumber` , `atk`.`partID` , `atk`.`whID` , `atk`.`binID` , `atk`.`woID` , `atk`.`woNumber` , `css`.`pkgQty`) `a`  \n" +
                 "    WHERE  \n" +
                 "        (`a`.`availableQty` > 0) ; \n" +
 
                 /* **************************** New Script -> 30-07-2021  *********************************** */
                 "DROP procedure IF EXISTS `Sproc_getCustomerPackingSlipTransferQty`;  \n" +
                 "CREATE PROCEDURE `Sproc_getCustomerPackingSlipTransferQty`(      \n" +
                 "	IN pPartID INT      \n" +
                 "	)  \n" +
                 "BEGIN      \n" +
                 "  	SELECT vucp.opStock,      \n" +
                 "		vucp.woID,      \n" +
                 "		vucp.lastWOOPID,      \n" +
                 "		vucp.woNumber,      \n" +
                 "		vucp.assyID,      \n" +
                 "		vucp.availableQty,       \n" +
                 "		#get available qty - shipped qty only, no need to deduct package qty of work order again      \n" +
                 "		-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `availableQty`,      \n" +
                 "		vucp.actualAvalilableQty,      \n" +
                 "		-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `actualAvalilableQty` ,      \n" +
                 "		vucp.partID,      \n" +
                 "		vucp.rohsIcon,      \n" +
                 "		vucp.rohsName,      \n" +
                 "		vucp.mfgPN,      \n" +
                 "		vucp.selectedQty,      \n" +
                 "		vucp.warehouseName,      \n" +
                 "		vucp.binName,      \n" +
                 "		vucp.binID,      \n" +
                 "		vucp.totalUMIDCount,      \n" +
                 "		vucp.departmentName,      \n" +
                 "		vucp.stockType,      \n" +
                 "		vucp.stockTypeName,      \n" +
                 "		(CASE WHEN vucp.woID IS NULL THEN IFNULL(vucp.soNumbers,'')  \n" +
                 "			ELSE GROUP_CONCAT(DISTINCT IFNULL(sm.salesorderNumber,'')) END) AS soNumbers,      \n" +
                 "		(CASE WHEN vucp.woID IS NULL THEN IFNULL(vucp.poNumbers,'')  \n" +
                 "			ELSE GROUP_CONCAT(DISTINCT IFNULL(sm.poNumber,'')) END) AS poNumbers,    \n" +
                 "                w.buildQty,      \n" +
                 "                NULL AS UMID,      \n" +
                 "		NULL AS refsidid ,      \n" +
                 "		(CASE WHEN vucp.woID IS NULL THEN (SELECT GROUP_CONCAT(dateCode SEPARATOR ', ') FROM AssemblyStock WHERE woNumber = `vucp`.`woNumber`      \n" +
                 "								AND isDeleted = 0 AND `type` = 'OS')      \n" +
                 "				ELSE w.dateCode END) woDateCode      \n" +
                 "                FROM  vu_customer_packing_slip_qty  vucp      \n" +
                 "			LEFT JOIN workorder w ON w.woID=vucp.woID      \n" +
                 "			LEFT JOIN workorder_salesorder_details wsd ON wsd.woId=w.woID      \n" +
                 "			LEFT JOIN salesorderdet sd ON sd.id=wsd.salesOrderDetailId AND sd.partCategory=3      \n" +
                 "			LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID      \n" +
                 "		WHERE vucp.partID=pPartID      \n" +
                 "		GROUP BY vucp.opStock,      \n" +
                 "		vucp.woID,      \n" +
                 "		vucp.lastWOOPID,      \n" +
                 "		vucp.woNumber,      \n" +
                 "		vucp.assyID,      \n" +
                 "		vucp.availableQty,      \n" +
                 "		vucp.actualAvalilableQty,      \n" +
                 "		vucp.partID,      \n" +
                 "		vucp.rohsIcon,      \n" +
                 "		vucp.rohsName,      \n" +
                 "		vucp.mfgPN,      \n" +
                 "		vucp.selectedQty,      \n" +
                 "		vucp.warehouseName,      \n" +
                 "		vucp.binName,      \n" +
                 "		vucp.binID,      \n" +
                 "		vucp.totalUMIDCount,      \n" +
                 "		vucp.departmentName,      \n" +
                 "		vucp.stockType,      \n" +
                 "		vucp.stockTypeName,      \n" +
                 "		w.buildQty,w.dateCode,  \n" +
                 "        sm.salesorderNumber,vucp.poNumbers,  \n" +
                 "        sm.poNumber , vucp.soNumbers  \n" +
                 "  \n" +
                 "		UNION     \n" +
                 "  \n" +
                 "		SELECT /*SUM(css.pkgQty) AS opStock,*/      \n" +
                 "			SUM(css.orgQty) AS opStock,      \n" +
                 "			css.woID,      \n" +
                 "			NULL lastWOOPID,      \n" +
                 "			css.woNumber,      \n" +
                 "			 `fun_getAssyPIDCodeByID`(`css`.`refcompid`)  AS `assyID`,      \n" +
                 "			/*((SUM(`css`.`pkgQty`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss`      \n" +
                 "							WHERE `ss`.`isDeleted` = 0 AND `ss`.`woNumber` = `css`.`woNumber`      \n" +
                 "							AND `ss`.`partID` = `css`.`refcompid`      \n" +
                 "							AND `ss`.`refsidid` = `css`.`id` ))      \n" +
                 "						) AS `availableQty` ,   */      \n" +
                 "			SUM(`css`.`pkgQty`) AS `availableQty`  ,      \n" +
                 "			SUM(`css`.`pkgQty`) AS actualAvalilableQty,      \n" +
                 "			css.refcompid partID,      \n" +
                 "			`fun_getRoHSIconByPartID`(`css`.`refcompid`)  AS `rohsIcon`,      \n" +
                 "			`fun_getRoHSNameByPartID`(`css`.`refcompid`)  AS `rohsName`,      \n" +
                 "			`fun_getComponentNameByID`(`css`.`refcompid`)  AS `mfgPN`,      \n" +
                 "			0 AS selectedQty,      \n" +
                 "			`fun_getWarehouseNameByBinID`(`css`.`binID`)  AS `warehouseName`,      \n" +
                 "			`fun_getBinNameByID`(`css`.`binID`)  AS `binName`,      \n" +
                 "			css.binID,      \n" +
                 "			IFNULL(SUM(`css`.`pkgQty`),0) AS totalUMIDCount,      \n" +
                 "			`fun_getDepartmentNameByBinID`(`css`.`binID`)  AS `departmentName` ,      \n" +
                 "			'US' AS stockType,      \n" +
                 "			'UMID Stock' AS stockTypeName,      \n" +
                 "			vu_wsd.salesOrderNumber AS soNumbers,      \n" +
                 "			vu_wsd.poNumber AS poNumbers,      \n" +
                 "			wo.buildQty,      \n" +
                 "			css.uid AS UMID,      \n" +
                 "			css.id AS refsidid,      \n" +
                 "			(CASE WHEN css.woID IS NULL THEN (SELECT dateCode FROM AssemblyStock WHERE woNumber = `css`.`woNumber`      \n" +
                 "								AND isDeleted = 0 AND `type` = 'OS' LIMIT 1)      \n" +
                 "				ELSE wo.dateCode END) woDateCode      \n" +
                 "		FROM component_sid_stock css      \n" +
                 "			LEFT JOIN workorder wo ON wo.woID=css.woID      \n" +
                 "			LEFT JOIN vu_workorder_salesorder_details vu_wsd ON vu_wsd.woID=css.woID      \n" +
                 "		WHERE css.refcompid = pPartID      \n" +
                 "		AND css.stockInventoryType IN ( 'AI'  ,'SI')    \n" +
                 "		AND IFNULL(css.pkgQty,0) > 0      \n" +
                 "		AND css.isDeleted = 0      \n" +
                 "		GROUP BY `css`.`woID` ,`css`.`woNumber` , `css`.`refcompid`, `css`.`binID`,      \n" +
                 "				vu_wsd.salesOrderNumber, vu_wsd.poNumber, wo.buildQty,      \n" +
                 "				css.uid, css.id, wo.dateCode  ;   \n" +
                 "    END;  \n" +
                 
 
                 /* **************************** New Script -> 30-07-2021  *********************************** */
                 "ALTER VIEW `vu_workorder_summary_stk` AS  \n" +
                 "    SELECT   \n" +
                 "        `a`.`woid` AS `woid`,  \n" +
                 "        `a`.`woNumber` AS `woNumber`,  \n" +
                 "        `a`.`woVersion` AS `woVersion`,  \n" +
                 "        `a`.`partID` AS `partID`,  \n" +
                 "        `a`.`buildQty` AS `buildQty`,  \n" +
                 "        `a`.`customerID` AS `customerID`,  \n" +
                 "        IFNULL(`a`.`excessQty`, 0) AS `buildOverageQty`,  \n" +
                 "        IFNULL(SUM(`a`.`assignSoWoQty`), 0) AS `poQty`,  \n" +
                 "        IFNULL(SUM(`a`.`initialStockPoQty`), 0) AS `initialStockPoQty`,  \n" +
                 "        IFNULL(SUM(`a`.`ShippedQty`), 0) AS `shippedQty`,  \n" +
                 "        IFNULL(SUM(`a`.`ScrapQty`), 0) AS `scrapQty`,  \n" +
                 "        IFNULL(SUM(`a`.`readytoShipQty`), 0) AS `readytoShipQty`,  \n" +
                 "        IFNULL(SUM(`a`.`stockAdjustmentQty`), 0) AS `stockAdjustmentQty`,  \n" +
                 "        IFNULL(SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`),  \n" +
                 "                0) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                 "        (CASE  \n" +
                 "            WHEN ((IFNULL(`a`.`buildQty`, 0) - ((IFNULL(SUM(`a`.`ScrapQty`), 0) + IFNULL(SUM(`a`.`ShippedQty`), 0)) + IFNULL(SUM(`a`.`readytoShipQty`), 0))) < 0) THEN 0  \n" +
                 "            ELSE (IFNULL(`a`.`buildQty`, 0) - ((IFNULL(SUM(`a`.`ScrapQty`), 0) + IFNULL(SUM(`a`.`ShippedQty`), 0)) + IFNULL(SUM(`a`.`readytoShipQty`), 0)))  \n" +
                 "        END) AS `wipQty`,  \n" +
                 "        (SELECT   \n" +
                 "                SUM(`workorder_trans_production`.`totalQty`)  \n" +
                 "            FROM  \n" +
                 "                `workorder_trans_production`  \n" +
                 "            WHERE  \n" +
                 "                `workorder_trans_production`.`woTransID` IN (SELECT   \n" +
                 "                        `workorder_trans`.`woTransID`  \n" +
                 "                    FROM  \n" +
                 "                        `workorder_trans`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`workorder_trans`.`woID` = `a`.`woid`)  \n" +
                 "                            AND `workorder_trans`.`opID` IN (SELECT FUN_GETFIRSTOPERATIONID(`a`.`woid`))))) AS `firstOPtotalQty`  \n" +
                 "    FROM  \n" +
                 "        (SELECT   \n" +
                 "            `wo`.`woID` AS `woid`,  \n" +
                 "                `wo`.`woNumber` AS `woNumber`,  \n" +
                 "                `wo`.`woVersion` AS `woVersion`,  \n" +
                 "                `wo`.`partID` AS `partID`,  \n" +
                 "                `wo`.`buildQty` AS `buildQty`,  \n" +
                 "                `wo`.`customerID` AS `customerID`,  \n" +
                 "                `wo`.`excessQty` AS `excessQty`,  \n" +
                 "                0 AS `assignSoWoQty`,  \n" +
                 "                0 AS `initialStockPoQty`,  \n" +
                 "                0 AS `ScrapQty`,  \n" +
                 "                0 AS `ShippedQty`,  \n" +
                 "                0 AS `readytoShipQty`,  \n" +
                 "                0 AS `stockAdjustmentQty`,  \n" +
                 "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                 "        FROM  \n" +
                 "            `workorder` `wo`  \n" +
                 "        WHERE  \n" +
                 "            (`wo`.`isDeleted` = 0) UNION ALL SELECT   \n" +
                 "            `wsd`.`woID` AS `woid`,  \n" +
                 "                FUN_GETWORKORDERNUMBERBYID(`wsd`.`woID`) AS `woNumber`,  \n" +
                 "                NULL AS `woVersion`,  \n" +
                 "                NULL AS `partID`,  \n" +
                 "                0 AS `buildQty`,  \n" +
                 "                NULL AS `customerID`,  \n" +
                 "                0 AS `excessQty`,  \n" +
                 "                SUM(`wsd`.`poQty`) AS `assignSoWoQty`,  \n" +
                 "                0 AS `initialStockPoQty`,  \n" +
                 "                0 AS `ScrapQty`,  \n" +
                 "                0 AS `ShippedQty`,  \n" +
                 "                0 AS `readytoShipQty`,  \n" +
                 "                0 AS `stockAdjustmentQty`,  \n" +
                 "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                 "        FROM  \n" +
                 "            `workorder_salesorder_details` `wsd`  \n" +
                 "        WHERE  \n" +
                 "            (`wsd`.`isDeleted` = 0)  \n" +
                 "        GROUP BY `wsd`.`woID` UNION ALL SELECT   \n" +
                 "            `wt`.`woID` AS `woid`,  \n" +
                 "                FUN_GETWORKORDERNUMBERBYID(`wt`.`woID`) AS `woNumber`,  \n" +
                 "                NULL AS `woVersion`,  \n" +
                 "                NULL AS `partID`,  \n" +
                 "                0 AS `buildQty`,  \n" +
                 "                NULL AS `customerID`,  \n" +
                 "                0 AS `excessQty`,  \n" +
                 "                0 AS `assignSoWoQty`,  \n" +
                 "                0 AS `initialStockPoQty`,  \n" +
                 "                SUM(`wp`.`scrapQty`) AS `ScrapQty`,  \n" +
                 "                0 AS `ShippedQty`,  \n" +
                 "                0 AS `readytoShipQty`,  \n" +
                 "                0 AS `stockAdjustmentQty`,  \n" +
                 "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                 "        FROM  \n" +
                 "            (`workorder_trans` `wt`  \n" +
                 "        JOIN `workorder_trans_production` `wp` ON ((`wt`.`woTransID` = `wp`.`woTransID`)))  \n" +
                 "        WHERE  \n" +
                 "            ((`wt`.`isDeleted` = 0)  \n" +
                 "                AND (`wp`.`isDeleted` = 0))  \n" +
                 "        GROUP BY `wt`.`woID` UNION ALL SELECT   \n" +
                 "            `sh`.`workorderID` AS `woid`,  \n" +
                 "                `sh`.`woNumber` AS `woNumber`,  \n" +
                 "                NULL AS `woVersion`,  \n" +
                 "                `sh`.`partID` AS `partID`,  \n" +
                 "                0 AS `buildQty`,  \n" +
                 "                NULL AS `customerID`,  \n" +
                 "                0 AS `excessQty`,  \n" +
                 "                0 AS `assignSoWoQty`,  \n" +
                 "                0 AS `initialStockPoQty`,  \n" +
                 "                0 AS `ScrapQty`,  \n" +
                 "                SUM(`sh`.`shippedqty`) AS `ShippedQty`,  \n" +
                 "                0 AS `readytoShipQty`,  \n" +
                 "                0 AS `stockAdjustmentQty`,  \n" +
                 "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                 "        FROM  \n" +
                 "            `shippedassembly` `sh`  \n" +
                 "        WHERE  \n" +
                 "            ((`sh`.`isDeleted` = 0)  \n" +
                 "                AND (`sh`.`isDeleted` = 0))  \n" +
                 "        GROUP BY `sh`.`woNumber` UNION ALL SELECT   \n" +
                 "            `astock`.`woID` AS `woid`,  \n" +
                 "                `astock`.`woNumber` AS `woNumber`,  \n" +
                 "                NULL AS `woVersion`,  \n" +
                 "                `astock`.`partID` AS `partID`,  \n" +
                 "                0 AS `buildQty`,  \n" +
                 "                NULL AS `customerID`,  \n" +
                 "                0 AS `excessQty`,  \n" +
                 "                0 AS `assignSoWoQty`,  \n" +
                 "                SUM(`astock`.`poQty`) AS `initialStockPoQty`,  \n" +
                 "                0 AS `ScrapQty`,  \n" +
                 "                0 AS `ShippedQty`,  \n" +
                 "                (IFNULL(SUM(`astock`.`openingStock`), 0) - (SELECT   \n" +
                 "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                 "                    FROM  \n" +
                 "                        `shippedassembly`  \n" +
                 "                    WHERE  \n" +
                 "                        ((`shippedassembly`.`isDeleted` = 0)  \n" +
                 "                            AND (`shippedassembly`.`partID` = `astock`.`partID`)  \n" +
                 "                            AND (`shippedassembly`.`woNumber` = `astock`.`woNumber`)))) AS `readytoShipQty`,  \n" +
                 "                0 AS `stockAdjustmentQty`,  \n" +
                 "                IFNULL(SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                 "        FROM  \n" +
                 "            `assemblystock` `astock`  \n" +
                 "        WHERE  \n" +
                 "            ((IFNULL(`astock`.`isDeleted`, 0) = 0)  \n" +
                 "                AND (`astock`.`type` <> 'AS'))  \n" +
                 "        GROUP BY `astock`.`woNumber` UNION ALL SELECT   \n" +
                 "            `astock`.`woID` AS `woid`,  \n" +
                 "                `astock`.`woNumber` AS `woNumber`,  \n" +
                 "                NULL AS `woVersion`,  \n" +
                 "                `astock`.`partID` AS `partID`,  \n" +
                 "                0 AS `buildQty`,  \n" +
                 "                NULL AS `customerID`,  \n" +
                 "                0 AS `excessQty`,  \n" +
                 "                0 AS `assignSoWoQty`,  \n" +
                 "                0 AS `initialStockPoQty`,  \n" +
                 "                0 AS `ScrapQty`,  \n" +
                 "                0 AS `ShippedQty`,  \n" +
                 "                0 AS `readytoShipQty`,  \n" +
                 "                IFNULL(SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQty`,  \n" +
                 "                IFNULL(SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                 "        FROM  \n" +
                 "            `assemblystock` `astock`  \n" +
                 "        WHERE  \n" +
                 "            ((IFNULL(`astock`.`isDeleted`, 0) = 0)  \n" +
                 "                AND (`astock`.`type` = 'AS'))  \n" +
                 "        GROUP BY `astock`.`woNumber`) `a`  \n" +
                 "    GROUP BY `a`.`woNumber`  ;\n" +
             
                /* **************************** Add Script Version -> 30-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5094,'2.00','V1',' User Story 34837: Initial Stock and View Assembly Stock Changes Suggested by Client - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
            case 5094:
            allDbChangesArray.push(
            /* **************************** New Script -> 30-07-2021  *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetAssemblyWOStockDetails`;  \n" +
            "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(      \n" +
            "	IN ppageIndex INT,      \n" +
            "	IN pRecordPerPage INT,      \n" +
            "	IN pOrderBy VARCHAR(255),      \n" +
            "	IN pWhereClause VARCHAR(16383),     \n" +
            "	IN pPartID INT,    \n" +
            "	IN pWoID INT ,  \n" +
            "    IN pPONumber VARCHAR(255),  \n" +
            "    IN pIsShowAllWO tinyint)  \n" +
            "BEGIN    \n" +
            "	DECLARE pOffset INT;      \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);        \n" +
            "	DECLARE v_TimeZone VARCHAR(50);     \n" +
            "	DECLARE whereClause1 VARCHAR(500);    \n" +
            "	SET whereClause1 = \"where 1=1\";    \n" +
            "  \n" +
            "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
            "		SET pWhereClause = '1=1' ;      \n" +
            "	END IF;  \n" +
            "  \n" +
            "    SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
            "  \n" +
            "    IF pPartID IS NOT NULL THEN    \n" +
            "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);    \n" +
            "	END IF;   \n" +
            "  \n" +
            "    IF pWoID IS NOT NULL THEN    \n" +
            "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);    \n" +
            "	END IF;   \n" +
            "  \n" +
            "    IF (pPONumber IS NOT NULL) THEN    \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPONumber,'\",replace(c.poNumber,'\"', ',','\"'))');    \n" +
            "	end if;   \n" +
            "  \n" +
            "     IF (!pIsShowAllWO)  THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,    \n" +
            "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,    \n" +
            "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,    \n" +
            "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,    \n" +
            "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,    \n" +
            "						 (CASE WHEN vu_wss.woid IS NULL THEN    \n" +
            "							(SELECT GROUP_CONCAT(DISTINCT poNumber SEPARATOR ', ') FROM `assemblystock`  WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')    \n" +
            "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)    \n" +
            "						   END) poNumber,    \n" +
            "						 (CASE WHEN vu_wss.woid IS NULL THEN   \n" +
            "							(SELECT GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ') FROM `assemblystock` WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
            "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
            "                            END) soNumbers,   \n" +
            "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,    \n" +
            "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,    \n" +
            "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
            "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
            "					FROM vu_workorder_summary_stk vu_wss    \n" +
            "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo    \n" +
            "								ON vu_wss.woid = wo.woMstID    \n" +
            "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID    \n" +
            "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID    \n" +
            "					\", whereClause1);    \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");      \n" +
            "	ELSE      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
            "	END IF;      \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
            "		SET pOffset = (ppageIndex -1) * pRecordPerPage;      \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
            "	ELSE      \n" +
            "		SET rowNumWhere = '';      \n" +
            "	END IF;      \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
            "	-- select @SQLStatement1;      \n" +
            "	PREPARE query1 FROM @SQLStatement1;        \n" +
            "	EXECUTE query1;        \n" +
            "	DEALLOCATE PREPARE query1;        \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
            "	-- select @SQLStatement2;      \n" +
            "	PREPARE query2 FROM @SQLStatement2;        \n" +
            "	EXECUTE query2;   \n" +
            "	DEALLOCATE PREPARE query2;        \n" +
            "END;  \n" +
            /* **************************** New Script -> 30-07-2021  *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetAssemblyPOStockDetails`;  \n" +
            "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(      \n" +
            "	IN ppageIndex INT,      \n" +
            "	IN pRecordPerPage INT,      \n" +
            "	IN pOrderBy VARCHAR(255),      \n" +
            "	IN pWhereClause VARCHAR(16383),     \n" +
            "	IN pPartID INT ,  \n" +
            "    IN pIsShowAllPO tinyint)  \n" +
            "BEGIN     \n" +
            "	DECLARE pOffset INT;      \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);        \n" +
            "	DECLARE v_TimeZone VARCHAR(50);     \n" +
            "    DECLARE paymentCMJoin VARCHAR(1000);    \n" +
            "    DECLARE whereClause1 VARCHAR(500);    \n" +
            "	SET whereClause1 = \"where 1=1\";    \n" +
            "  \n" +
            "    SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
            "  \n" +
            "    IF pPartID IS NOT NULL THEN    \n" +
            "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");    \n" +
            "	END IF;   \n" +
            "  \n" +
            "    IF !pIsShowAllPO THEN  \n" +
            "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");    \n" +
            "	ELSE  \n" +
            "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");    \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"    \n" +
            "	select a.salesOrderDetailId,    \n" +
            "		a.soID,  \n" +
            "		a.poNumber,    \n" +
            "		a.poDate,    \n" +
            "		a.soNumber,    \n" +
            "		a.PartID,   \n" +
            "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,    \n" +
            "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
            "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,    \n" +
            "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN    \n" +
            "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))    \n" +
            "			ELSE 0 END) AS excessShipQty,    \n" +
            "		a.buildQty from (SELECT    \n" +
            "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,    \n" +
            "				vu_ssr.`Sales Order ID` soID,   \n" +
            "				vu_ssr.`Po Number` poNumber,    \n" +
            "				vu_ssr.`Po Date` poDate,    \n" +
            "				vu_ssr.`Sales Order` soNumber,    \n" +
            "				vu_ssr.`PO Qty` poQty,    \n" +
            "				vu_ssr.`Shipped Qty` shippedQty,    \n" +
            "				vu_ssr.`Balanced Due Qty` backOrderQty,    \n" +
            "				vu_ssr.`PartID` PartID,    \n" +
            "				ka.perAssyBuildQty AS    qpa,    \n" +
            "                vu_ssr.`Status` status,  \n" +
            "				vu_ssr.`lineID` lineID,  \n" +
            "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
            "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0) FROM workorder_salesorder_details wsd    \n" +
            "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0    \n" +
            "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty    \n" +
            "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`    \n" +
            "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0 ) a \", whereClause1);    \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");      \n" +
            "	ELSE      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
            "	END IF;      \n" +
            "  \n" +
            "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
            "		SET pWhereClause = '1=1' ;      \n" +
            "	END IF;   \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
            "		SET pOffset = (ppageIndex -1) * pRecordPerPage;      \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
            "	ELSE      \n" +
            "		SET rowNumWhere = '';      \n" +
            "	END IF;      \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
            "	-- select @SQLStatement1;      \n" +
            "	PREPARE query1 FROM @SQLStatement1;        \n" +
            "	EXECUTE query1;        \n" +
            "	DEALLOCATE PREPARE query1;        \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
            "	-- select @SQLStatement2;      \n" +
            "	PREPARE query2 FROM @SQLStatement2;        \n" +
            "	EXECUTE query2;        \n" +
            "	DEALLOCATE PREPARE query2;        \n" +
            "END;  \n" +
            
            /* **************************** Add Script Version -> 30-07-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5095,'2.00','V1',' User Story 34837: SP Changes - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5095:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "UPDATE rfq_lineitems_filter SET displayName = 'Various Internal Parts Issue (Mounting, Functional, Pin, etc.)' WHERE filterCode = 'INTERNALPN';  \n" +
                "UPDATE rfq_lineitems_filter SET displayName = 'Duplicate Part (Common)' WHERE filterCode = 'DUPLICATEPID'; \n" +
                "UPDATE rfq_lineitems_filter SET displayName = 'Part Correct/Incorrect Status (TBD) (Decision pending to its correct or incorrect) ' WHERE filterCode = 'UNKNOWNPART'; \n" +
                /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5096,'2.00','V1','Change BOM Filter Text  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5096:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_RequireFlagFromPartMaster` ;  \n" +
                "CREATE PROCEDURE `Sproc_Update_BOM_RequireFlagFromPartMaster`(  \n" +
                "                    	IN pAliasGroupID INT,  \n" +
                "                    	IN pPartID INT,  \n" +
                "                    	IN pNewProgramingRequired TINYINT,  \n" +
                "                    	IN pNewMatingPartRquired TINYINT,  \n" +
                "                    	IN pNewDriverToolRequired TINYINT,  \n" +
                "                    	IN pNewFunctionalTestingRequired TINYINT,  \n" +
                "                    	IN pNewPickupPadRequired TINYINT,  \n" +
                "                    	IN pOldPartStatus INT,  \n" +
                "                    	IN pNewPartStatus INT,  \n" +
                "                    	IN pOldUOM INT,  \n" +
                "                    	IN pNewUOM INT,  \n" +
                "                    	IN pOldFeature VARCHAR(255),  \n" +
                "                    	IN pNewFeature VARCHAR(255),  \n" +
                "                    	IN pOldConnecterTypeID INT,  \n" +
                "                    	IN pNewConnecterTypeID INT,  \n" +
                "                    	IN pOldNoOfRows INT,  \n" +
                "                    	IN pNewNoOfRows INT,  \n" +
                "                    	IN pUserId INT,  \n" +
                "                    	IN pUserRoleId INT  \n" +
                "                    )  \n" +
                "BEGIN  \n" +
                "                        DECLARE totalCount INT DEFAULT 0;  \n" +
                "                        DECLARE currIndex INT DEFAULT 0;  \n" +
                "                       DECLARE currMfgPnID INT;  \n" +
                "                       DECLARE currAssyID INT;  \n" +
                "                       DECLARE lastAssyID INT;  \n" +
                "                       DECLARE subAssyType INT;  \n" +
                "                       DECLARE vActivePartStatusID INT;  \n" +
                "                       SET lastAssyID = 0;  \n" +
                "  \n" +
                "                   	SET  subAssyType = 3;  \n" +
                "                   	SELECT id INTO vActivePartStatusID FROM component_partstatusmst cps WHERE cps.name = 'Active';  \n" +
                "  \n" +
                "                   	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                "                   	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                "                   	SELECT  rla.partID, rla.mfgPNID  \n" +
                "                   	FROM rfq_lineitems_alternatepart AS rla  \n" +
                "                   	WHERE rla.deletedAt IS NULL  \n" +
                "                       AND rla.isDeleted = 0  \n" +
                "                   	AND (EXISTS (SELECT 1 FROM component_packagingalias cp  \n" +
                "                   				WHERE cp.componentID = rla.mfgPNID  \n" +
                "                                     AND cp.isDeleted = 0  \n" +
                "                                     AND cp.aliasgroupID = pAliasGroupID)  \n" +
                "                   		OR rla.mfgPNID = pPartID)  \n" +
                "                   	GROUP BY rla.partID, rla.mfgPNID  \n" +
                "                       ORDER BY rla.partID, rla.mfgPNID;  \n" +
                "  \n" +
                "  \n" +
                "                       /* Update Assembly Internal version with parent assembly where part is added */  \n" +
                "                       UPDATE component  \n" +
                "                   	SET  \n" +
                "                   		liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "                   		liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
                "                   	WHERE id IN(  \n" +
                "                   	WITH RECURSIVE cte AS  \n" +
                "                   	(  \n" +
                "                   	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "                   	  FROM component c  \n" +
                "                         JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                "                   	  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                "  \n" +
                "                   	  UNION ALL  \n" +
                "                   	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "                   	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child  \n" +
                "                   	  WHERE rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                "                   	  AND cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                "                   	)  \n" +
                "                   	SELECT DISTINCT partId FROM cte);  \n" +
                "  \n" +
                "                       /* Update BOM flag Detail where part is used where part is added */  \n" +
                "                       SELECT unitName, measurementTypeID INTO @oldUOMName, @oldUOMClassID FROM uoms WHERE id = pOldUOM;  \n" +
                "                   	SELECT unitName, measurementTypeID INTO @newUOMName, @newUOMClassID FROM uoms WHERE id = pNewUOM;  \n" +
                "  \n" +
                "                   	UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	SET  \n" +
                "                   		rla.programingRequiredStep = (CASE WHEN pNewProgramingRequired = 1 THEN (CASE WHEN rl.programingStatus = 0 THEN 0 ELSE 1 END) ELSE 1 END),  \n" +
                "                   		rla.matingPartRquiredStep = (CASE WHEN pNewMatingPartRquired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.driverToolsRequiredStep = (CASE WHEN pNewDriverToolRequired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.functionalTestingRequiredStep = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.pickupPadRequiredStep = (CASE WHEN pNewPickupPadRequired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.invalidConnectorTypeStep = (CASE WHEN pOldConnecterTypeID != pNewConnecterTypeID THEN  \n" +
                "                   							(CASE WHEN pNewConnecterTypeID = -1  AND !rl.numOfPosition THEN 0  \n" +
                "                   								WHEN pNewConnecterTypeID != -1 AND (!c.noOfPosition OR (c.noOfPosition != rl.numOfPosition)) THEN 0  \n" +
                "                   								ELSE 1  \n" +
                "                   							END)  \n" +
                "                   						ELSE rla.invalidConnectorTypeStep END),  \n" +
                "                   		rla.partPinIsLessthenBOMPinStep = (CASE WHEN pOldConnecterTypeID != pNewConnecterTypeID THEN  \n" +
                "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN 0 ELSE 1 END)  \n" +
                "                   						     ELSE rla.partPinIsLessthenBOMPinStep END),  \n" +
                "  \n" +
                "                   		rla.obsoletePartStep = (CASE WHEN pOldPartStatus != pNewPartStatus THEN  \n" +
                "                   						(CASE WHEN pNewPartStatus != vActivePartStatusID THEN 0  \n" +
                "                   							WHEN pNewPartStatus = vActivePartStatusID THEN 1 END)  \n" +
                "                   					ELSE rla.obsoletePartStep END),  \n" +
                "                   		rla.mismatchNumberOfRowsStep = (CASE WHEN pOldNoOfRows != pNewNoOfRows  THEN  \n" +
                "                   							(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                "                   								((c.mountingTypeID = 3 AND (!rl.numOfRows OR rl.numOfRows != pNewNoOfRows))  \n" +
                "                   									OR (c.mountingTypeID = 2 AND !rl.numOfRows AND rl.numOfRows != pNewNoOfRows)  \n" +
                "                   								 ) THEN  \n" +
                "                   							 0 ELSE 1 END)  \n" +
                "                   						ELSE rla.mismatchNumberOfRowsStep END),  \n" +
                "                   		rla.uomMismatchedStep = (CASE WHEN pOldUOM != pNewUOM  THEN (CASE WHEN @newUOMClassID != ul.measurementTypeID THEN 0 ELSE 1 END) ELSE rla.uomMismatchedStep END),  \n" +
                "                   		rla.description = CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id),REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id)),'')),  \n" +
                "				rla.epoxyStep = (CASE WHEN pOldFeature != pNewFeature  THEN (CASE WHEN LOCATE('EPOXY', UPPER(pNewFeature)) > 0 THEN 0 ELSE 1 END) ELSE rla.epoxyStep END),  \n" +
                "                   		rla.customerApproval = 'P',  \n" +
                "                   		rla.customerApprovalBy = NULL,  \n" +
                "                   		rla.customerApprovalDate = NULL,  \n" +
                "                   		rla.updatedAt = UTC_TIMESTAMP(),  \n" +
                "                   		rla.updatedBy = pUserId,  \n" +
                "                   		rla.updateByRoleId = pUserRoleId  \n" +
                "                   	WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	/* Update BOM set drive tool require error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewDriverToolRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),''),  \n" +
                "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set matting part require error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewMatingPartRquired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),''),  \n" +
                "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set pickup pad require error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewPickupPadRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),''),  \n" +
                "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "                   	/* Update BOM set functional testing required error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),''),  \n" +
                "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set Programming error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewProgramingRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),''),  \n" +
                "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set Pin Mismatch error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldConnecterTypeID != pNewConnecterTypeID THEN  \n" +
                "                   					(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN  \n" +
                "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),''),  \n" +
                "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id))  \n" +
                "                   					ELSE  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),'')  \n" +
                "                   					END)  \n" +
                "                   				     ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set Obsolate error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldPartStatus != pNewPartStatus THEN  \n" +
                "                   					(CASE WHEN pNewPartStatus != vActivePartStatusID THEN  \n" +
                "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id)),''),  \n" +
                "                   						'\n', fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id))  \n" +
                "                   					WHEN pNewPartStatus = vActivePartStatusID THEN  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id)),'')  \n" +
                "                   					END)  \n" +
                "                   				ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldNoOfRows != pNewNoOfRows  THEN  \n" +
                "                   					(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                "                   						((c.mountingTypeID = 3 AND (!rl.numOfRows OR rl.numOfRows != pNewNoOfRows))  \n" +
                "                   							OR (c.mountingTypeID = 2 AND !rl.numOfRows AND rl.numOfRows != pNewNoOfRows)  \n" +
                "                   						 ) THEN  \n" +
                "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),''),  \n" +
                "                   							'\n', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id))  \n" +
                "                   					 ELSE  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),'')  \n" +
                "                   					  END)  \n" +
                "                   				ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set UOM Mismatch error description Detail where part is used where part is added */  \n" +
                "  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = ( CASE WHEN pOldUOM != pNewUOM  THEN  \n" +
                "                   					(CASE WHEN @newUOMClassID != ul.measurementTypeID THEN  \n" +
                "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('\n',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName)),''),  \n" +
                "                   							'\n', REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@newUOMName))  \n" +
                "                   					ELSE  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('\n',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName)),'')  \n" +
                "                   					END)  \n" +
                "                   				ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldFeature != pNewFeature  THEN  \n" +
                "								(CASE WHEN LOCATE('EPOXY', UPPER(pNewFeature)) > 0 THEN  \n" +
                "									CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),''),  \n" +
                "									'\n',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id))  \n" +
                "								ELSE  \n" +
                "									REPLACE(IFNULL(rla.description,''),CONCAT('\n',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),'')  \n" +
                "								END)  \n" +
                "							ELSE  \n" +
                "								IFNULL(rla.description,'')  \n" +
                "							END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_createBOMErrorMsgByErrorCodeandLineID` ;  \n" +
                "CREATE FUNCTION `fun_createBOMErrorMsgByErrorCodeandLineID`(  \n" +
                "	pErrorCode VARCHAR(100),  \n" +
                "	pRFQLineItemAlternatePartID INT  \n" +
                ") RETURNS VARCHAR(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "DECLARE vErrorMsg VARCHAR(2000);  \n" +
                "DECLARE vErrorCode VARCHAR(2000);  \n" +
                "DECLARE vMPN VARCHAR(200);  \n" +
                "DECLARE vMFR VARCHAR(200);  \n" +
                "DECLARE vSPN VARCHAR(200);  \n" +
                "DECLARE vSupplierPN VARCHAR(200);  \n" +
                "DECLARE vCPN VARCHAR(200);  \n" +
                "DECLARE vCPNRev VARCHAR(200);  \n" +
                "DECLARE vPartPIN VARCHAR(200);  \n" +
                "DECLARE vPartRow VARCHAR(200);  \n" +
                "DECLARE vLinePin VARCHAR(200);  \n" +
                "DECLARE vLineRow VARCHAR(200);  \n" +
                "DECLARE vPartUOM VARCHAR(200);  \n" +
                "DECLARE vLineUOM VARCHAR(200);  \n" +
                "DECLARE vPartStatus VARCHAR(200);  \n" +
                "  \n" +
                "	SELECT description,errorcode INTO vErrorMsg,vErrorCode FROM rfq_lineitems_errorcode  \n" +
                "	WHERE errorcode = pErrorCode;  \n" +
                "	SELECT rla.mfgPN, rla.mfgCode, rla.distPN, rla.distributor, rl.custPN, rl.customerRev,c.noOfPosition, rl.numOfPosition,  \n" +
                "		c.noOfRows, rl.numOfRows, uc.unitName, ul.unitName, cps.name  \n" +
                "		INTO  \n" +
                "		vMPN, vMFR, vSPN, vSupplierPN, vCPN, vCPNRev, vPartPIN, vLinePin, vPartRow,  vLineRow, vPartUOM, vLineUOM, vPartStatus  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	INNER JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "	INNER JOIN component c ON c.id = rla.mfgPNID  \n" +
                "	INNER JOIN uoms uc ON uc.id = c.uom  \n" +
                "	INNER JOIN uoms ul ON ul.id = rl.uomID  \n" +
                "	INNER JOIN component_partstatusmst cps ON cps.id = c.partStatus  \n" +
                "	WHERE rla.id = pRFQLineItemAlternatePartID;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% MFR %>', IFNULL(vMFR,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% MPN %>', IFNULL(vMPN,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% CPN %>', IFNULL(vCPN,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% CPN Rev %>', IFNULL(vCPNRev,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% Supplier %>', IFNULL(vSupplierPN,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% SPN %>', IFNULL(vSPN,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% Part No. of Rows %>', IFNULL(vPartRow,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% No. of Rows %>', IFNULL(vLineRow,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% UOM %>', IFNULL(vLineUOM,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% Part UOM %>', IFNULL(vPartUOM,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% Part Status %>', IFNULL(vPartStatus,'')) INTO vErrorMsg;  \n" +
                "	#SELECT REPLACE(vErrorMsg, '<% Mounting Types %>', IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
                "	#SELECT REPLACE(vErrorMsg, '<% Functional Types %>', IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% Pin Per REF DES ON PCB %>', IFNULL(vLinePin,'')) INTO vErrorMsg;  \n" +
                "	SELECT REPLACE(vErrorMsg, '<% Part Pin COUNT %>', IFNULL(vPartPIN,'')) INTO vErrorMsg;  \n" +
                "  \n" +
                "	RETURN CONCAT(vErrorCode,': ',vErrorMsg);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5097,'2.00','V1','Bug 35783: QA Testing findings for check #22675: In Part master if we have any property which we will used in BOM validations - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;   
                case 5097:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 31-07-2021 *********************************** */
                    "ALTER TABLE `rfq_mountingtypemst`  \n" +
                    "ADD COLUMN `hasLimitedShelfLife` TINYINT(1) NOT NULL DEFAULT '0';  \n" +
                    /* **************************** Add Script Version -> 31-07-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5098,'2.00','V1',' Add HaslimitedShelfLife Mounting Type - Shubham '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                break; 
                case 5098:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 02-08-2021 *********************************** */
                    "DROP procedure IF EXISTS `Sproc_RetrieveMountingTypeList`;  \n" +
                    "CREATE PROCEDURE `Sproc_RetrieveMountingTypeList`(  \n" +
                    "	IN ppageIndex INT,  \n" +
                    "	IN precordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN psourceDetails VARCHAR(50)  \n" +
                    "	)  \n" +
                    "BEGIN  \n" +
                    "		DECLARE pOffset INT;  \n" +
                    "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                    "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                    "		DECLARE vTimeZone VARCHAR(50);  \n" +
                    "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                    "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS tempMoutingType;  \n" +
                    "  \n" +
                    "		SET @tempMountQuery=CONCAT(\"create temporary table if not exists  tempMoutingType as  \n" +
                    "		select id,refTableName,refId,alias,isdeleted from component_fields_genericalias_mst where deletedAt is NULL\");  \n" +
                    "  \n" +
                    "		IF(psourceDetails IS NOT NULL OR psourceDetails<>'')THEN  \n" +
                    "			SET @tempMountQuery=CONCAT(@tempMountQuery,\" and id in (select refAliasID from  component_attributes_source_mapping where mfgcodeid in (\",psourceDetails,\"))\");  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		        PREPARE queryMount FROM @tempMountQuery;  \n" +
                    "			EXECUTE queryMount;  \n" +
                    "			DEALLOCATE PREPARE queryMount;  \n" +
                    "  \n" +
                    "		SET @tempQuery = CONCAT(\"SELECT id,`name`,description,isActive,colorCode,isCountTypeEach,hasLimitedShelfLife,numberOfPrintForUMID,systemGenerated,  \n" +
                    "			displayOrder,  \n" +
                    "			CASE WHEN isCountTypeEach=1 THEN 'Yes' ELSE 'No' END CountTypeEach ,  \n" +
                    "            CASE WHEN hasLimitedShelfLife=1 THEN 'Yes' ELSE 'No' END limitedShelfLife,  \n" +
                    "			fun_getUserNameByID(updatedBy) updatedby,  \n" +
                    "			fun_getUserNameByID(createdBy) createdby,  \n" +
                    "			fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                    "			fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                    "			fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                    "		        fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                    "            (CASE WHEN (systemGenerated = 0) THEN 'No'  \n" +
                    "				WHEN (systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                    "			(CASE WHEN (`isActive` = 0) THEN 'Disable'  \n" +
                    "				WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,  \n" +
                    "  \n" +
                    "          (#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist  \n" +
                    "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist  \n" +
                    "			  from component_attributes_source_mapping c1  \n" +
                    "				join mfgcodemst m on m.id = c1.mfgCodeID  \n" +
                    "				where c1.refAliasID = cfg.id  \n" +
                    "				 ),''))  SEPARATOR '##') AS aliaslist  \n" +
                    "						  FROM tempMoutingType cfg WHERE IFNULL(cfg.isdeleted,0) = 0  \n" +
                    "						  AND  cfg.refTableName ='rfq_mountingtypemst'  \n" +
                    "          AND cfg.refId=`rfq_mountingtypemst`.`id` ) AS aliaslist  \n" +
                    "            FROM `rfq_mountingtypemst`  \n" +
                    "			WHERE `deletedAt` IS NULL\");  \n" +
                    "  \n" +
                    "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                    "			SET pOrderBy = \"ORDER BY displayOrder IS NULL, displayOrder ASC ,name ASC\";  \n" +
                    "		ELSE  \n" +
                    "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                    "			SET pWhereClause = '1=1' ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                    "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                    "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "		ELSE  \n" +
                    "			SET rowNumWhere = '';  \n" +
                    "		END IF;  \n" +
                    "  IF(psourceDetails IS NOT NULL)THEN  \n" +
                    "  SET pWhereClause=CONCAT(pWhereClause,\" and aliaslist is not null\");  \n" +
                    "  END IF;  \n" +
                    "  \n" +
                    "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                    "  \n" +
                    "			PREPARE query2 FROM @SQLStatement2;  \n" +
                    "			EXECUTE query2;  \n" +
                    "			DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                    "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "  \n" +
                    "			PREPARE query1 FROM @SQLStatement2;  \n" +
                    "			EXECUTE query1;  \n" +
                    "			DEALLOCATE PREPARE query1;  \n" +
                    "    END;  \n" +
                    /* **************************** Add Script Version -> 02-08-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5099,'2.00','V1',' User Story 35562: Part Master: Changes for Shelf Life Days - SHUBHAM  '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                break;        
            case 5099:
                allDbChangesArray.push(
                /* **************************** New Script -> 02-08-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN                         \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);                     \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);                     \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);                     \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);                     \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);                     \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);                \n" +
                "	DECLARE PORLINE_OTY INT;                    \n" +
                "	DECLARE vTotalQty INT;               \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;                      \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;           \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN                        \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';                      \n" +
                "	ELSE                         \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;                   \n" +
                "	END IF;                \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),                      \n" +
                "		(                     \n" +
                "			CASE                     \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'                     \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'                     \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'                     \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'                     \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'                     \n" +
                "				ELSE NULL                     \n" +
                "			END                     \n" +
                "		),                     \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),                      \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN                      \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                     \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),                     \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                     \n" +
                "		END IF;                     \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN                       \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                     \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),                     \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                     \n" +
                "		END IF;                     \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN                           \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                     \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),                      \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),                     \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                        \n" +
                "		END IF;                            \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),                      \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN                         \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN                     \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),                     \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "		END IF;                     \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN                       \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                     \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),                     \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "		END IF;                     \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',                     \n" +
                "		CAST(                     \n" +
                "			(                     \n" +
                "				CASE                      \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'                     \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'                     \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'                      \n" +
                "				END                     \n" +
                "			)                     \n" +
                "		AS CHAR),                     \n" +
                "		CAST(                     \n" +
                "			(                     \n" +
                "				CASE                      \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'                     \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'                     \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'                      \n" +
                "				END                     \n" +
                "			)                     \n" +
                "		AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN                          \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                     \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),                      \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "		END IF;                     \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',                  \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',                     \n" +
                "		CAST(                     \n" +
                "			(                     \n" +
                "				CASE                      \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'                     \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'                     \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'                      \n" +
                "				END                     \n" +
                "			)                     \n" +
                "		AS CHAR),                     \n" +
                "		CAST(                     \n" +
                "			(                     \n" +
                "				CASE                      \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'                     \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'                     \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'                      \n" +
                "				END                     \n" +
                "			)                     \n" +
                "		AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN                     \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN                     \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;                     \n" +
                "		ELSE                     \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;                     \n" +
                "		END IF;                     \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN                     \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;                     \n" +
                "		ELSE                     \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;                     \n" +
                "		END IF;                     \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN                     \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;                     \n" +
                "		ELSE                     \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;                     \n" +
                "		END IF;                     \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN                     \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;                     \n" +
                "		ELSE                     \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;                     \n" +
                "		END IF;                     \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN                               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),                     \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "		END IF;                     \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN                               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),                     \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "		END IF;                     \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN                               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,                      \n" +
                "		CONCAT(                     \n" +
                "			(                     \n" +
                "				CASE                     \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '                     \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '                     \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '                     \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '                     \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '                     \n" +
                "					ELSE 'Line# '                     \n" +
                "				END                     \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'                     \n" +
                "		),                     \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                 \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5100,'2.00','V1','Bug 35835: [Main Branch] When user do make any changes in RMA Credit memo then the status of CM in RMA Packing slip shows as Draft. - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
            case 5100:
                allDbChangesArray.push(
                /* **************************** New Script -> 03-08-2021 *********************************** */
                "drop procedure if exists `Sproc_checkDelete_supplier_invoice_and_memo`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_invoice_and_memo`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMemoIds varchar(1000);  \n" +
                "    DECLARE vLineIds varchar(1000);  \n" +
                "    DECLARE vCount int;  \n" +
                "    DECLARE vCountLock int;  \n" +
                "    DECLARE vCountHalt int;  \n" +
                "  \n" +
                "    DROP temporary table if exists tempPackingSlipMst;  \n" +
                "    CREATE TEMPORARY TABLE tempPackingSlipMst(  \n" +
                "		cnt int,  \n" +
                "        msg varchar(500)  \n" +
                "    );  \n" +
                "  \n" +
                "	/*getting credit/debit memo ids from selected rows*/  \n" +
                "	select GROUP_CONCAT(a.id), count(1), sum(case when a.lockstatus = 'LC' then 1 else 0 end)  \n" +
                "      into vMemoIds, vCount, vCountLock  \n" +
                "	  from packing_slip_material_receive a  \n" +
                "	 where find_in_set(a.id, IDs)  \n" +
                "	   and a.receiptType in ('C','D');  \n" +
                "  \n" +
                "	select count(1) into vCountHalt  \n" +
                "	 from holdunholdtrans a  \n" +
                "	where status = 'H'  \n" +
                "	  and find_in_set(a.refTransId, IDs)  \n" +
                "	  and refType in ('SINV','SCM','SDM');  \n" +
                "  \n" +
                "	if vCountLock = 0 and vCountHalt = 0 then  \n" +
                "		/*deleting credit/debit memo before deleting invoice*/  \n" +
                "		if vCount > 0 then  \n" +
                "			CALL Sproc_checkDelete_packing_slip_material_receive_memo('packing_slip_material_receive_memo', vMemoIds, deletedBy, entityID, refrenceIDs, pRoleID);  \n" +
                "		end if;  \n" +
                "	else  \n" +
                "		if vCountLock != 0 then  \n" +
                "			insert into tempPackingSlipMst(cnt, msg)  \n" +
                "			values (vCountLock, 'TRANSACTION_LOCKED');  \n" +
                "		elseif vCountHalt != 0 then  \n" +
                "			insert into tempPackingSlipMst(cnt, msg)  \n" +
                "			values (vCountHalt, 'TRANSACTION_HALTED');  \n" +
                "        end if;  \n" +
                "	end if;  \n" +
                "	/*checking credit/debit memo created from selected invoices*/  \n" +
                "	select GROUP_CONCAT(a.id), count(1) into vLineIds, vCount  \n" +
                "	  from packing_slip_material_receive_det a  \n" +
                "	 where a.isdeleted = 0  \n" +
                "	 and a.refPackingSlipDetId is not null  \n" +
                "	 and exists (select 1 from packing_slip_material_receive p where p.id = a.refPackingSlipMaterialRecID and p.receiptType in ('C','D') and p.isDeleted=0)  \n" +
                "	 and exists (select 1  \n" +
                "				  from packing_slip_material_receive_det d  \n" +
                "				 where d.id = a.refPackingSlipDetId  \n" +
                "				   and exists (select 1 from packing_slip_material_receive p  \n" +
                "								where p.id = d.refPackingSlipMaterialRecID  \n" +
                "								  and p.receiptType = 'I'  \n" +
                "								  and find_in_set(p.id, IDs)  \n" +
                "								  and p.isDeleted = 0)  \n" +
                "				   and d.isDeleted = 0);  \n" +
                "  \n" +
                "    if vCount = 0 then  \n" +
                "		if vLineIds is not null and vLineIds != '' then  \n" +
                "			CALL Sproc_checkDelete_packing_slip_material_receive_det('packing_slip_material_receive_det', vLineIds, deletedBy, entityID, refrenceIDs, pRoleID);  \n" +
                "        end if;  \n" +
                "	else  \n" +
                "		insert into tempPackingSlipMst(cnt, msg)  \n" +
                "        values (vCount, 'CM_DM_CREATED');  \n" +
                "    end if;  \n" +
                "	IF(countList = FALSE) THEN  \n" +
                "		IF (SELECT ifnull(SUM(t.cnt),0) FROM tempPackingSlipMst t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update packing_slip_material_receive set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where ID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update packing_slip_material_receive set `status` = \"W\", refPackingSlipNumberForInvoice = NULL where refPackingSlipNumberForInvoice in(',IDs,') and isDeleted = 0');  \n" +
                "			PREPARE stmt2 FROM @SQL2;  \n" +
                "			EXECUTE stmt2;  \n" +
                "  \n" +
                "			SELECT * FROM tempPackingSlipMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempPackingSlipMst t/* having SUM(t.cnt) > 0*/;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT 		t1.cnt, t1.cnt as TotalCount,  \n" +
                "					ifnull(t2.display_page_name,t1.msg) AS msg,  \n" +
                "                    ifnull(t2.display_page_name,t1.msg) as Message  \n" +
                "		FROM 		tempPackingSlipMst t1  \n" +
                "		left JOIN 	table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "		WHERE 		IFNULL(cnt,0) > 0  \n" +
                "					AND msg IS NOT NULL  \n" +
                "					AND msg != \"\"  \n" +
                "		ORDER BY 	t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP temporary table if exists tempPackingSlipMst;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetSupplierRMADetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierRMADetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	psmr.receiptType = 'R' AND (psmrd.isDeleted = 0 AND psmr.isDeleted = 0);  \n" +
                "	ELSE  \n" +
                "		SELECT 		psmr.id  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, psmr.poNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.receiptDate  \n" +
                "				, psmr.refPackingSlipNumberForInvoice  \n" +
                "				, psmr.shippingMethodId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.shippingMethodId) shippingMethod  \n" +
                "				, psmr.carrierId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.carrierId) carrier  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, psmrd.packingSlipSerialNumber  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, (CASE WHEN psmrd.refPackingSlipIdForRma IS NULL THEN psmrd.refPackingSlipForRma ELSE fun_getPackingSlipNumberById(psmrd.refPackingSlipIdForRma) END) refPackingSlipNumber  \n" +
                "				, (CASE WHEN psmrd.refInvoiceIdForRma IS NULL THEN psmrd.refInvoiceForRma ELSE fun_getSupplierInvoiceNumberByID(psmrd.refInvoiceIdForRma) END) refInvoiceNumber  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "                , mfgMstdetail.mfgType AS mfrPnMfgType  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, mfgMst.mfgName AS mfgName  \n" +
                "				, mfgMst.mfgCode AS mfgCode  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "                , psmrd.isDeleted  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT JOIN 	component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		WHERE      	psmr.receiptType = 'R'  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psmr.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmr.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5101,'2.00','V1','User Story 35372: Supplier Invoice, CM, DM: Give view option and manage delete functionality - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5101:
                allDbChangesArray.push(
                /* **************************** New Script -> 03-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustRefundedListByRefTrans` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustRefundedListByRefTrans`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPayCMID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsDisplayAllTransWhereCreditUsed TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pTransModeType IS NOT NULL) THEN  \n" +
                "		IF (pTransModeType = -9) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "				JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM ,  \n" +
                "							psipd.comment AS commentForPaymentCM  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "							JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "						WHERE psipd.refRefundPaymentID = \",pPayCMID,\" AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "						) payCMRefundDetTemp  \n" +
                "					ON psip.id = payCMRefundDetTemp.refPayementid  \n" +
                "			\");  \n" +
                "		ELSEIF (pTransModeType = -6) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "				JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM , psipd.comment AS commentForPaymentCM,  \n" +
                "							 cps.creditMemoNumber AS paymentCMNumber  \n" +
                "						 FROM packingslip_invoice_payment_det psipd  \n" +
                "							JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "						WHERE psipd.refRefundCustCreditMemoID = \",pPayCMID,\" AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "						) payCMRefundDetTemp  \n" +
                "					ON psip.id = payCMRefundDetTemp.refPayementid  \n" +
                "				\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustAllRefundTransactionPopupList = CONCAT(\"  \n" +
                "		SELECT  psip.id AS custPaymentDBMstID,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "			payCMRefundDetTemp.paymentAmountForPaymentCM ,  \n" +
                "			payCMRefundDetTemp.commentForPaymentCM ,  \n" +
                "			gtmm.modeName,  \n" +
                "			psip.refPaymentMode,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		      \",paymentCMJoin,\"  \n" +
                "		WHERE psip.refPaymentMode = '\", pRefPaymentMode ,\"'  \n" +
                "		AND refGencTransModeID = '\",pTransModeType,\"'  \n" +
                "		AND psip.isPaymentVoided = 0  \n" +
                "		AND psip.isDeleted = 0  \"  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pIsDisplayAllTransWhereCreditUsed = 1) THEN  \n" +
                "  \n" +
                "		SET @Sproc_RetrieveCustAllRefundTransactionPopupList = CONCAT(@Sproc_RetrieveCustAllRefundTransactionPopupList, \"  \n" +
                "			UNION  \n" +
                "  \n" +
                "			SELECT 	psip.id AS custPaymentDBMstID,  \n" +
                "				psip.mfgcodeID ,  \n" +
                "				fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "				psip.bankName,  \n" +
                "				psip.bankAccountNo,  \n" +
                "				psip.paymentType,  \n" +
                "				psip.paymentDate AS refundDate,  \n" +
                "				psip.paymentNumber,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				psip.paymentAmount AS paymentAmountForPaymentCM ,  \n" +
                "				psip.remark AS commentForPaymentCM ,  \n" +
                "				'Applied Credit Memo' AS modeName,  \n" +
                "				psip.refPaymentMode,  \n" +
                "				fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				JOIN genericcategory gc ON gc.gencCategoryID = psip.paymentType AND gc.isDeleted = 0  \n" +
                "			WHERE psip.refPaymentMode = 'CA'  \n" +
                "			AND psip.refCustCreditMemoID = \",pPayCMID,\"  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "  \n" +
                "		\");  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY refPaymentMode ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5102,'2.00','V1',' Sproc_RetrieveCustRefundedListByRefTrans - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5102:
                    allDbChangesArray.push(
                    /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_RequireFlagFromPartMaster`;  \n" +
                    "CREATE PROCEDURE `Sproc_Update_BOM_RequireFlagFromPartMaster`(  \n" +
                    "                    	IN pAliasGroupID INT,  \n" +
                    "                    	IN pPartID INT,  \n" +
                    "                    	IN pNewProgramingRequired TINYINT,  \n" +
                    "                    	IN pNewMatingPartRquired TINYINT,  \n" +
                    "                    	IN pNewDriverToolRequired TINYINT,  \n" +
                    "                    	IN pNewFunctionalTestingRequired TINYINT,  \n" +
                    "                    	IN pNewPickupPadRequired TINYINT,  \n" +
                    "                    	IN pOldPartStatus INT,  \n" +
                    "                    	IN pNewPartStatus INT,  \n" +
                    "                    	IN pOldUOM INT,  \n" +
                    "                    	IN pNewUOM INT,  \n" +
                    "                    	IN pOldFeature VARCHAR(255),  \n" +
                    "                    	IN pNewFeature VARCHAR(255),  \n" +
                    "                    	IN pOldConnecterTypeID INT,  \n" +
                    "                    	IN pNewConnecterTypeID INT,  \n" +
                    "                    	IN pOldNoOfRows INT,  \n" +
                    "                    	IN pNewNoOfRows INT,  \n" +
                    "                    	IN pUserId INT,  \n" +
                    "                    	IN pUserRoleId INT  \n" +
                    "                    )  \n" +
                    "BEGIN  \n" +
                    "                        DECLARE totalCount INT DEFAULT 0;  \n" +
                    "                        DECLARE currIndex INT DEFAULT 0;  \n" +
                    "                       DECLARE currMfgPnID INT;  \n" +
                    "                       DECLARE currAssyID INT;  \n" +
                    "                       DECLARE lastAssyID INT;  \n" +
                    "                       DECLARE subAssyType INT;  \n" +
                    "                       DECLARE vActivePartStatusID INT;  \n" +
                    "                       SET lastAssyID = 0;  \n" +
                    "  \n" +
                    "                   	SET  subAssyType = 3;  \n" +
                    "                   	SELECT id INTO vActivePartStatusID FROM component_partstatusmst cps WHERE cps.name = 'Active';  \n" +
                    "  \n" +
                    "                   	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                    "                   	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                    "                   	SELECT  rla.partID, rla.mfgPNID  \n" +
                    "                   	FROM rfq_lineitems_alternatepart AS rla  \n" +
                    "                   	WHERE rla.deletedAt IS NULL  \n" +
                    "                       AND rla.isDeleted = 0  \n" +
                    "                   	AND (EXISTS (SELECT 1 FROM component_packagingalias cp  \n" +
                    "                   				WHERE cp.componentID = rla.mfgPNID  \n" +
                    "                                     AND cp.isDeleted = 0  \n" +
                    "                                     AND cp.aliasgroupID = pAliasGroupID)  \n" +
                    "                   		OR rla.mfgPNID = pPartID)  \n" +
                    "                   	GROUP BY rla.partID, rla.mfgPNID  \n" +
                    "                       ORDER BY rla.partID, rla.mfgPNID;  \n" +
                    "  \n" +
                    "  \n" +
                    "                       /* Update Assembly Internal version with parent assembly where part is added */  \n" +
                    "      /*                 UPDATE component  \n" +
                    "                   	SET  \n" +
                    "                   		liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                    "                   		liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
                    "                   	WHERE id IN(  \n" +
                    "                   	WITH RECURSIVE cte AS  \n" +
                    "                   	(  \n" +
                    "                   	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                    "                   	  FROM component c  \n" +
                    "                         JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                    "                   	  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                    "  \n" +
                    "                   	  UNION ALL  \n" +
                    "                   	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                    "                   	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child  \n" +
                    "                   	  WHERE rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                    "                   	  AND cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                    "                   	)  \n" +
                    "                   	SELECT DISTINCT partId FROM cte);  \n" +
                    "  */  \n" +
                    "                       /* Update BOM flag Detail where part is used where part is added */  \n" +
                    "                       SELECT unitName, measurementTypeID INTO @oldUOMName, @oldUOMClassID FROM uoms WHERE id = pOldUOM;  \n" +
                    "                   	SELECT unitName, measurementTypeID INTO @newUOMName, @newUOMClassID FROM uoms WHERE id = pNewUOM;  \n" +
                    "  \n" +
                    "                   	UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                    "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                    "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	SET  \n" +
                    "                   		rla.programingRequiredStep = (CASE WHEN pNewProgramingRequired = 1 THEN (CASE WHEN rl.programingStatus = 0 THEN 0 ELSE 1 END) ELSE 1 END),  \n" +
                    "                   		rla.matingPartRquiredStep = (CASE WHEN pNewMatingPartRquired = 1 THEN 0 ELSE 1 END),  \n" +
                    "                   		rla.driverToolsRequiredStep = (CASE WHEN pNewDriverToolRequired = 1 THEN 0 ELSE 1 END),  \n" +
                    "                   		rla.functionalTestingRequiredStep = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN 0 ELSE 1 END),  \n" +
                    "                   		rla.pickupPadRequiredStep = (CASE WHEN pNewPickupPadRequired = 1 THEN 0 ELSE 1 END),  \n" +
                    "                   		rla.invalidConnectorTypeStep = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
                    "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition is not null THEN 0  \n" +
                    "                   								WHEN pNewConnecterTypeID <> -1 AND (c.noOfPosition is not null OR (c.noOfPosition <> rl.numOfPosition)) THEN 0  \n" +
                    "                   								ELSE 1  \n" +
                    "                   							END)  \n" +
                    "                   						ELSE rla.invalidConnectorTypeStep END),  \n" +
                    "                   		rla.partPinIsLessthenBOMPinStep = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
                    "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN 0 ELSE 1 END)  \n" +
                    "                   						     ELSE rla.partPinIsLessthenBOMPinStep END),  \n" +
                    "  \n" +
                    "                   		rla.obsoletePartStep = (CASE WHEN pOldPartStatus <> pNewPartStatus THEN  \n" +
                    "                   						(CASE WHEN pNewPartStatus <> vActivePartStatusID THEN 0  \n" +
                    "                   							WHEN pNewPartStatus = vActivePartStatusID THEN 1 END)  \n" +
                    "                   					ELSE rla.obsoletePartStep END),  \n" +
                    "                   		rla.mismatchNumberOfRowsStep = (CASE WHEN pOldNoOfRows <> pNewNoOfRows  THEN  \n" +
                    "                   							(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                    "                   								((c.mountingTypeID = 3 AND (rl.numOfRows is not null OR rl.numOfRows <> pNewNoOfRows))  \n" +
                    "                   									OR (c.mountingTypeID = 2 AND rl.numOfRows is not null AND rl.numOfRows <> pNewNoOfRows)  \n" +
                    "                   								 ) THEN  \n" +
                    "                   							 0 ELSE 1 END)  \n" +
                    "                   						ELSE rla.mismatchNumberOfRowsStep END),  \n" +
                    "                   		rla.uomMismatchedStep = (CASE WHEN pOldUOM <> pNewUOM  THEN (CASE WHEN @newUOMClassID <> ul.measurementTypeID THEN 0 ELSE 1 END) ELSE rla.uomMismatchedStep END),  \n" +
                    "                   		rla.description = CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id),REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id)),'')),  \n" +
                    "				rla.epoxyStep = (CASE WHEN pOldFeature <> pNewFeature  THEN (CASE WHEN LOCATE('EPOXY', UPPER(pNewFeature)) > 0 THEN 0 ELSE 1 END) ELSE rla.epoxyStep END),  \n" +
                    "                   		rla.customerApproval = 'P',  \n" +
                    "                   		rla.customerApprovalBy = NULL,  \n" +
                    "                   		rla.customerApprovalDate = NULL,  \n" +
                    "                   		rla.updatedAt = UTC_TIMESTAMP(),  \n" +
                    "                   		rla.updatedBy = pUserId,  \n" +
                    "                   		rla.updateByRoleId = pUserRoleId  \n" +
                    "                   	WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	/* Update BOM set drive tool require error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pNewDriverToolRequired = 1 THEN  \n" +
                    "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),''),  \n" +
                    "                   						'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id))  \n" +
                    "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),'') END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	  /* Update BOM set matting part require error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pNewMatingPartRquired = 1 THEN  \n" +
                    "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),''),  \n" +
                    "                   						'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id))  \n" +
                    "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),'') END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	  /* Update BOM set pickup pad require error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pNewPickupPadRequired = 1 THEN  \n" +
                    "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),''),  \n" +
                    "                   						'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id))  \n" +
                    "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),'') END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "                   	/* Update BOM set functional testing required error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN  \n" +
                    "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),''),  \n" +
                    "                   						'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id))  \n" +
                    "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),'') END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	  /* Update BOM set Programming error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pNewProgramingRequired = 1 THEN  \n" +
                    "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),''),  \n" +
                    "                   						'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id))  \n" +
                    "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),'') END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	  /* Update BOM set Pin Mismatch error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
                    "                   					(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN  \n" +
                    "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),''),  \n" +
                    "                   						'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id))  \n" +
                    "                   					ELSE  \n" +
                    "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),'')  \n" +
                    "                   					END)  \n" +
                    "                   				     ELSE rla.description END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	  /* Update BOM set Obsolate error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pOldPartStatus <> pNewPartStatus THEN  \n" +
                    "                   					(CASE WHEN pNewPartStatus <> vActivePartStatusID THEN  \n" +
                    "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id)),''),  \n" +
                    "                   						'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id))  \n" +
                    "                   					WHEN pNewPartStatus = vActivePartStatusID THEN  \n" +
                    "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id)),'')  \n" +
                    "                   					END)  \n" +
                    "                   				ELSE rla.description END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pOldNoOfRows <> pNewNoOfRows  THEN  \n" +
                    "                   					(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                    "                   						((c.mountingTypeID = 3 AND (rl.numOfRows is not null OR rl.numOfRows <> pNewNoOfRows))  \n" +
                    "                   							OR (c.mountingTypeID = 2 AND rl.numOfRows is not null AND rl.numOfRows <> pNewNoOfRows)  \n" +
                    "                   						 ) THEN  \n" +
                    "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),''),  \n" +
                    "                   							'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id))  \n" +
                    "                   					 ELSE  \n" +
                    "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),'')  \n" +
                    "                   					  END)  \n" +
                    "                   				ELSE rla.description END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "                   	  /* Update BOM set UOM Mismatch error description Detail where part is used where part is added */  \n" +
                    "  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                    "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                    "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = ( CASE WHEN pOldUOM <> pNewUOM  THEN  \n" +
                    "                   					(CASE WHEN @newUOMClassID <> ul.measurementTypeID THEN  \n" +
                    "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName)),''),  \n" +
                    "                   							'  \n" +
                    "', REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@newUOMName))  \n" +
                    "                   					ELSE  \n" +
                    "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName)),'')  \n" +
                    "                   					END)  \n" +
                    "                   				ELSE rla.description END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
                    "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                    "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                    "                   	   SET  \n" +
                    "                   		rla.description = (CASE WHEN pOldFeature <> pNewFeature  THEN  \n" +
                    "								(CASE WHEN LOCATE('EPOXY', UPPER(pNewFeature)) > 0 THEN  \n" +
                    "									CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),''),  \n" +
                    "									'  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id))  \n" +
                    "								ELSE  \n" +
                    "									REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                    "',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),'')  \n" +
                    "								END)  \n" +
                    "							ELSE  \n" +
                    "								IFNULL(rla.description,'')  \n" +
                    "							END)  \n" +
                    "                   	  WHERE rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_MountingType_FunctionalType_new`;  \n" +
                    "CREATE PROCEDURE `Sproc_Update_BOM_MountingType_FunctionalType_new`(  \n" +
                    "	IN pPartID INT,  \n" +
                    "	IN puserID INT,  \n" +
                    "    IN pRoleID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE subAssyType INT;  \n" +
                    " 	SET  subAssyType = 3;  \n" +
                    "  	DROP TEMPORARY TABLE IF EXISTS  componentResult;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS componentResult AS  \n" +
                    "	SELECT  rla.partID  \n" +
                    "	FROM rfq_lineitems_alternatepart AS rla  \n" +
                    "	WHERE rla.mfgPNID = pPartID AND rla.isDeleted = FALSE  \n" +
                    "	GROUP BY  partID;  \n" +
                    "  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                    "	SELECT  rla.partID  \n" +
                    "	FROM rfq_lineitems_alternatepart AS rla  \n" +
                    "	WHERE rla.mfgPNID = pPartID AND rla.isDeleted = 0  \n" +
                    "	GROUP BY rla.partID;  \n" +
                    "  \n" +
                    "	/* Update BOM Detail where part is used where part is added */  \n" +
                    "		UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "		JOIN (  \n" +
                    "				SELECT (MIN(c.mountingTypeID) != MAX(c.mountingTypeID)) AS mismatchMount,  \n" +
                    "						(MIN(c.functionalCategoryID)!=MAX(c.functionalCategoryID))AS mismatchFunctional, rla.rfqLineItemsID  \n" +
                    "				FROM rfq_lineitems_alternatepart rla  \n" +
                    "				JOIN component c ON c.id = rla.mfgPNID  \n" +
                    "				WHERE rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0  \n" +
                    "					AND rla.rfqLineItemsID IN(SELECT rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE mfgPNID IN (pPartID))  \n" +
                    "				GROUP BY rla.rfqLineItemsID  \n" +
                    "				HAVING COUNT(1) >1  \n" +
                    "			) mmla ON rla.rfqLineItemsID = mmla.rfqLineItemsID AND rla.isDeleted = 0  \n" +
                    "        SET  \n" +
                    "		rla.mismatchMountingTypeStep = (CASE WHEN mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 1 THEN 0  \n" +
                    "					WHEN mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 0 THEN 0 ELSE 1 END),  \n" +
                    "		rla.approvedMountingType = (CASE WHEN (((mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 1)  \n" +
                    "					OR mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 1) AND rla.approvedMountingType = 1) THEN 0  \n" +
                    "					WHEN mmla.mismatchMount = 0 AND mmla.mismatchFunctional = 0 THEN 0 ELSE 0 END),  \n" +
                    "		rla.mismatchFunctionalCategoryStep = (CASE WHEN mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 1 THEN 0  \n" +
                    "					WHEN mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 0 THEN 0 ELSE 1 END),  \n" +
                    "		rla.description  = (CASE WHEN mmla.mismatchMount = 1 AND mmla.mismatchFunctional = 1 THEN  \n" +
                    "						CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),'  \n" +
                    "',  \n" +
                    "							fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id), '  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id))  \n" +
                    "					WHEN mmla.mismatchMount = 0 AND mmla.mismatchFunctional = 0 THEN  \n" +
                    "						REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),'')  \n" +
                    "					ELSE  \n" +
                    "						(CASE WHEN mmla.mismatchMount = 1 AND mmla.mismatchFunctional = 0 THEN  \n" +
                    "								CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id))  \n" +
                    "							WHEN mmla.mismatchFunctional = 1 AND mmla.mismatchMount = 0 THEN  \n" +
                    "								CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),'  \n" +
                    "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id))  \n" +
                    "						 END)  \n" +
                    "					END),  \n" +
                    "		rla.customerApproval = 'P',  \n" +
                    "		rla.isUnlockApprovedPart = 1,  \n" +
                    "		rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                    "		rla.updatedBy = puserID,  \n" +
                    "		rla.updateByRoleId = pRoleID  \n" +
                    "        WHERE rla.isdeleted = 0;  \n" +
                    "  \n" +
                    "  /* Update Assembly Internal version with parent assembly where part is added */  \n" +
                    "		UPDATE component  \n" +
                    "		SET  \n" +
                    "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                    "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
                    "		WHERE id IN(  \n" +
                    "		WITH RECURSIVE cte AS  \n" +
                    "		(  \n" +
                    "		  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM component c  \n" +
                    "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                    "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                    "  \n" +
                    "		  UNION ALL  \n" +
                    "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM rfq_lineitems rlp  \n" +
                    "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
                    "          INNER JOIN component cp ON cp.id = rlap.mfgPNID  \n" +
                    "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                    "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                    "		)  \n" +
                    "		SELECT DISTINCT partId FROM cte);  \n" +
                    "  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_UpdateRFQ_LineItems_AlternatePart_Restrict_new`;  \n" +
                    "CREATE PROCEDURE `Sproc_UpdateRFQ_LineItems_AlternatePart_Restrict_new`(  \n" +
                    "	IN pPartID INT,  \n" +
                    "	IN pOldRestrictUseWithPermission TINYINT,  \n" +
                    "	IN pNewRestrictUseWithPermission TINYINT,  \n" +
                    "	IN pOldRestrictUsePermanently TINYINT,  \n" +
                    "	IN pNewRestrictUsePermanently TINYINT,  \n" +
                    "	IN pOldRestrictPackagingUseWithpermission TINYINT,  \n" +
                    "	IN pNewRestrictPackagingUseWithpermission TINYINT,  \n" +
                    "	IN pOldRestrictPackagingUsePermanently TINYINT,  \n" +
                    "	IN pNewRestrictPackagingUsePermanently TINYINT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE subAssyType INT;  \n" +
                    " 	SET  subAssyType = 3;  \n" +
                    "  \n" +
                    "  if IFNULL(pOldRestrictUsePermanently, 0) != IFNULL(pNewRestrictUsePermanently, 0) or IFNULL(pOldRestrictUseWithPermission, 0) != IFNULL(pNewRestrictUseWithPermission, 0) then  \n" +
                    "	/* Create Temporary table for update assembly where partid is used */  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
                    "		CREATE TEMPORARY TABLE IF NOT EXISTS componentResult AS  \n" +
                    "		SELECT distinct rla.partID  \n" +
                    "		FROM rfq_lineitems_alternatepart AS rla  \n" +
                    "		WHERE rla.isdeleted = 0 and (rla.mfgPNID = pPartID  \n" +
                    "		or exists (select 1 from component c where c.id = rla.mfgPNID and c.packaginggroupID = (select packaginggroupID from component where id = pPartID)));  \n" +
                    "   else  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
                    "		CREATE TEMPORARY TABLE IF NOT EXISTS componentResult AS  \n" +
                    "		SELECT distinct rla.partID  \n" +
                    "		FROM rfq_lineitems_alternatepart AS rla  \n" +
                    "		WHERE rla.isdeleted = 0 and rla.mfgPNID = pPartID;  \n" +
                    "	end if;  \n" +
                    "	/* Update Assembly Internal version with parent assembly where part is added   */  \n" +
                    "	/*	UPDATE component  \n" +
                    "		SET  \n" +
                    "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                    "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
                    "		WHERE id IN(  \n" +
                    "		WITH RECURSIVE cte AS  \n" +
                    "		(  \n" +
                    "		  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM component c  \n" +
                    "		  join componentResult trla on trla.partID = c.id  \n" +
                    "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                    "  \n" +
                    "		  UNION ALL  \n" +
                    "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM rfq_lineitems rlp  \n" +
                    "          Inner join rfq_lineitems_alternatepart rlap on rlap.rfqLineItemsID = rlp.id  \n" +
                    "          Inner Join component cp on cp.id = rlap.mfgPNID  \n" +
                    "          Inner Join cte child on child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                    "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                    "		)  \n" +
                    "		SELECT DISTINCT partId FROM cte);  \n" +
                    "  \n" +
                    "	*/  \n" +
                    "	/* Update BOM Detail where part is used where part is added */  \n" +
                    "		IF  IFNULL(pOldRestrictUsePermanently, 0) != IFNULL(pNewRestrictUsePermanently, 0) or IFNULL(pOldRestrictUseWithPermission, 0) != IFNULL(pNewRestrictUseWithPermission, 0) then  \n" +
                    "		   UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "			SET  \n" +
                    "				rla.restrictUsePermanentlyStep = (case when IFNULL(pNewRestrictUsePermanently, 0) = 0 then 1 else 0 end),  \n" +
                    "				rla.restrictUseWithPermissionStep = (case when IFNULL(pNewRestrictUseWithPermission, 0) = 0 then 1 else 0 end)  \n" +
                    "			WHERE rla.isDeleted = 0 and (rla.mfgPNID = pPartID  \n" +
                    "			or exists (select 1 from component c where c.id = rla.mfgPNID and c.packaginggroupID = (select packaginggroupID from component where id = pPartID)));  \n" +
                    "  \n" +
                    "			if IFNULL(pNewRestrictUsePermanently, 0) = 1 or IFNULL(pNewRestrictUseWithPermission, 0) = 1 then  \n" +
                    "				UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "					SET  \n" +
                    "						rla.restrictUseExcludingAliasStep = 1,  \n" +
                    "						rla.restrictUseExcludingAliasWithPermissionStep = 1  \n" +
                    "					WHERE rla.isDeleted = 0 and (rla.mfgPNID = pPartID  \n" +
                    "					or exists (select 1 from component c where c.id = rla.mfgPNID and c.packaginggroupID = (select packaginggroupID from component where id = pPartID)));  \n" +
                    "			end if;  \n" +
                    "        END IF;  \n" +
                    "  \n" +
                    "        IF (IFNULL(pOldRestrictPackagingUsePermanently, 0) != IFNULL(pNewRestrictPackagingUsePermanently, 0) or IFNULL(pOldRestrictPackagingUseWithpermission, 0) != IFNULL(pNewRestrictPackagingUseWithpermission, 0) ) then  \n" +
                    "		    UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "				SET  \n" +
                    "					rla.restrictUsePermanentlyStep = 1 ,  \n" +
                    "					rla.restrictUseWithPermissionStep = 1  \n" +
                    "				WHERE rla.isDeleted = 0 and (rla.mfgPNID = pPartID  \n" +
                    "				or exists (select 1 from component c where c.id = rla.mfgPNID and c.packaginggroupID = (select packaginggroupID from component where id = pPartID)));  \n" +
                    "  \n" +
                    "            UPDATE rfq_lineitems_alternatepart rla  \n" +
                    "				SET  \n" +
                    "					rla.restrictUseExcludingAliasStep = (case when IFNULL(pNewRestrictPackagingUsePermanently, 0) = 1 then 0 else 1 end),  \n" +
                    "					rla.restrictUseExcludingAliasWithPermissionStep = (case when IFNULL(pNewRestrictPackagingUseWithpermission, 0) = 1 then 0 else 1 end)  \n" +
                    "				WHERE rla.mfgPNID = pPartID and rla.isDeleted = 0;  \n" +
                    "		end if;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                    /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5103,'2.00','V1','Bug 35290: BOM : Internal Version Mismatched, Assembly BOM Change Version HISTORY : Change version history is not missing in between for one of assy. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                    break;                
                case 5103:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 03-08-2021 *********************************** */
                    "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                    "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                    "	IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P') THEN  \n" +
                    "		SET NEW.poLineWorkingStatus='C';  \n" +
                    "		SET NEW.poLineCompleteType='Auto';  \n" +
                    "	ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'Manual') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'Manual' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                    "		SET NEW.poLineWorkingStatus='P';  \n" +
                    "		SET NEW.poLineCompleteType=null;  \n" +
                    "	END IF;  \n" +
                    "END;  \n" +
                    /* **************************** New Script -> 03-08-2021 *********************************** */
                    "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                    "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                    "	DECLARE vPurchaseOrderDetID INT;  \n" +
                    "	DECLARE vPurchaseOrderID INT;  \n" +
                    "	DECLARE vStatus VARCHAR(5);  \n" +
                    "	DECLARE vPOStatus VARCHAR(5);  \n" +
                    "	SELECT id INTO vPurchaseOrderDetID FROM purchase_order_det WHERE id=NEW.refPurchaseOrderDetID AND isDeleted = FALSE;  \n" +
                    "	SELECT refPurchaseOrderID INTO vPurchaseOrderID FROM purchase_order_det WHERE id= NEW.refPurchaseOrderDetID;  \n" +
                    "	SELECT poWorkingStatus INTO vPOStatus FROM purchase_order_mst WHERE id= vPurchaseOrderID;  \n" +
                    "  \n" +
                    "	IF ((NEW.isDeleted = TRUE OR (IFNULL(NEW.poLineWorkingStatus,0)!=IFNULL(OLD.poLineWorkingStatus,0))OR (IFNULL(NEW.receivedQty,0)!=IFNULL(OLD.receivedQty,0))) AND (vPOStatus!='CA') AND (vPurchaseOrderDetID IS NOT NULL)) THEN  \n" +
                    "		SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=vPurchaseOrderID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                    "		SET vStatus=IFNULL(vStatus,'C');  \n" +
                    "		IF(vStatus='P') THEN  \n" +
                    "			UPDATE purchase_order_mst SET poWorkingStatus=vStatus WHERE id=vPurchaseOrderID;  \n" +
                    "		ELSE  \n" +
                    "			UPDATE purchase_order_mst SET poWorkingStatus=vStatus,poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=vPurchaseOrderID;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 03-08-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5104,'2.00','V1',' Update TRG_BU_purchase_order_line_release_det and TRG_AU_purchase_order_line_release_det trigger  - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                    break;
                    case 5104:
                        allDbChangesArray.push(
                        /* **************************** New Script -> 04-08-2021 *********************************** */
                          "DROP TRIGGER IF EXISTS Trg_AU_help_blog_det;  \n" +
                          "CREATE TRIGGER `Trg_AU_help_blog_det` AFTER UPDATE ON `help_blog_det` FOR EACH ROW BEGIN  \n" +
                          "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                          "		VALUES(\"HELPBLOGDET\", CAST(new.id AS CHAR),'Description', CAST(OLD.description AS CHAR), CAST(new.description AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                          "	END IF;  \n" +
                          "	IF IFNULL(OLD.isSystemGenerated,0) != IFNULL(NEW.isSystemGenerated,0) THEN  \n" +
                          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                          "		VALUES(\"HELPBLOGDET\", CAST(new.id AS CHAR),'System Generated', CAST(OLD.isSystemGenerated AS CHAR), CAST(new.isSystemGenerated AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                          "	END IF;  \n" +
                          "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                          "		VALUES(\"HELPBLOGDET\", CAST(new.id AS CHAR),'Dispaly Order', CAST(OLD.displayOrder AS CHAR), CAST(new.displayOrder AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                          "	END IF;  \n" +
                          "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                          "		VALUES(\"HELPBLOGDET\", CAST(new.id AS CHAR),'Dispaly Order', OLD.title, new.title , fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                          "	END IF;  \n" +
                          "END;  \n" +	
                        /* **************************** Add Script Version -> 04-08-2021 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                        "VALUES (5105,'2.00','V1','Trg_AU_help_blog_det  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                        );
                      break;
                      case 5105:
                        allDbChangesArray.push(
                        /* **************************** New Script -> 04-08-2021 *********************************** */
                          "alter table operations modify  column opOrder decimal(7,3);  \n" +
                          "alter table workorder_operation modify  column opOrder decimal(7,3);  \n" +
                        /* **************************** Add Script Version -> 04-08-2021 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                        "VALUES (5106,'2.00','V1','Increase opOrder field width in Operation & WorkorderOperaiton  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                        );
                      break;
                      case 5106:
                        allDbChangesArray.push(
                        /* **************************** New Script -> 04-08-2021 *********************************** */
                          "DROP PROCEDURE IF EXISTS Sproc_ProcessedSerialQty;  \n" +
                          "CREATE PROCEDURE `Sproc_ProcessedSerialQty`(  \n" +
                          "IN pWOOPID INT,  \n" +
                          "IN pWOID INT,  \n" +
                          "IN pWOTransID INT,  \n" +
                          "IN pSerialNoList JSON,  \n" +
                          "IN pProdStatus VARCHAR(5),  \n" +
                          "IN pOpID INT,  \n" +
                          "IN pEmployeeID INT,  \n" +
                          "IN pUserId INT,  \n" +
                          "IN pRoleId INT,  \n" +
                          "IN pSerialType INT  \n" +
                          ")  \n" +
                          "BEGIN  \n" +
                          "	DECLARE vExistingSerailNo INT;  \n" +
                          "    DECLARE vIdleSerailNo INT;  \n" +
                          "    DECLARE vFinalSerailNo VARCHAR(500);  \n" +
                          "    DECLARE vScrapSerailNoCount INT;  \n" +
                          "    DECLARE vCurrentWOOPNo DECIMAL(7,3);  \n" +
                          "    DECLARE vCountClusterOP INT;  \n" +
                          "    DECLARE vCurrWOOPClusterOp INT;  \n" +
                          "    DECLARE vCurrentStatus VARCHAR(5);  \n" +
                          "    DECLARE vCurrOperationName VARCHAR(500);  \n" +
                          "    DECLARE vClusterId INT;  \n" +
                          "    DECLARE vIsRework TINYINT(1);  \n" +
                          "    DECLARE vIsLoopOperation TINYINT(1);  \n" +
                          "    DECLARE vIsTrackBySerialNo TINYINT(1);  \n" +
                          "    DECLARE vIsTrackBySerialFromWOOP TINYINT(1);  \n" +
                          "    DECLARE vIsParallelOperation TINYINT(1);  \n" +
                          "    DECLARE vPreviosWOOPID INT;  \n" +
                          "    DECLARE vPreviousIsRework TINYINT(1);  \n" +
                          "    DECLARE vPreviousIsLoopOperation TINYINT(1);  \n" +
                          "    DECLARE vPreviousWOOPNo DECIMAL(7,3);  \n" +
                          "    DECLARE vNextWOOPID INT;  \n" +
                          "    DECLARE vNextIsRework TINYINT(1);  \n" +
                          "    DECLARE vNextIsLoopOperation TINYINT(1);  \n" +
                          "    DECLARE vNextWOOPNo DECIMAL(7,3);  \n" +
                          "    DECLARE vCountPassedSRNoCount INT;  \n" +
                          "    DECLARE vCountLoopPassedSRNoCount INT;  \n" +
                          "    DECLARE vCountLoopAlreadyPassedSRNoCount INT;  \n" +
                          "    DECLARE vAlreadPassedCount INT;  \n" +
                          "    DECLARE vPassedFromLoopCount INT;  \n" +
                          "    DECLARE vSerialNoExists VARCHAR(500);  \n" +
                          "    DECLARE vIndexNo INT DEFAULT 0;  \n" +
                          "    DECLARE vSerialCount INT DEFAULT 0;  \n" +
                          "    DECLARE vSerialNo VARCHAR(500);  \n" +
                          "    DECLARE vIsFirstOperation TINYINT(1);  \n" +
                          "    DECLARE vSerialNoId INT;  \n" +
                          "	DECLARE vMatchClustorWOPOIDId INT;  \n" +
                          "    DECLARE v_IsAllowSerialMappingWO int;  \n" +
                          "  \n" +
                          "		/*1 = Passed,2 = Reprocess Required,3 = Defect Observed,4 = Scrapped,5 = Rework Required  \n" +
                          "			, 6=Missing Parts with Board, 7=Bypass */  \n" +
                          "    DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                          "	BEGIN  \n" +
                          "		ROLLBACK;  \n" +
                          "		RESIGNAL;  \n" +
                          "	END;  \n" +
                          "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                          "	 BEGIN  \n" +
                          "		ROLLBACK;  \n" +
                          "		RESIGNAL;  \n" +
                          "	END;  \n" +
                          "	START TRANSACTION;  \n" +
                          "  \n" +
                          "		DROP TEMPORARY TABLE IF EXISTS serialText;  \n" +
                          "		CREATE TEMPORARY TABLE serialText(txt TEXT );  \n" +
                          "		INSERT INTO serialText VALUES(pSerialNoList);  \n" +
                          "		DROP TEMPORARY TABLE IF EXISTS serialNoList;  \n" +
                          "		#CREATE TEMPORARY TABLE serialNoList( serialNo VARCHAR(500) );  \n" +
                          "        CREATE TEMPORARY TABLE IF NOT EXISTS serialNoList AS  \n" +
                          "		SELECT 	*  \n" +
                          "		FROM 	JSON_TABLE(  \n" +
                          "				pSerialNoList,  \n" +
                          "				\"$[*]\" COLUMNS(  \n" +
                          "					`serialNo` VARCHAR(500) PATH \"$.serialNo\"  \n" +
                          "				)  \n" +
                          "			) AS WoSrNo;  \n" +
                          "#		SET @SQL = CONCAT(\"insert into serialNoList (serialNo) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM serialText), \",\", \"'),('\"),\"');\");  \n" +
                          "#		PREPARE stmt1 FROM @SQL;  \n" +
                          "#		EXECUTE stmt1;  \n" +
                          "  \n" +
                          "		-- Idle  \n" +
                          "		-- 1-Passed  \n" +
                          "		-- 2-Reprocessed  \n" +
                          "		-- 3-DefectObserved  \n" +
                          "		-- 4-Scrapped  \n" +
                          "		-- 5-ReworkRequired  \n" +
                          "		-- 6-Board with Missing Parts  \n" +
                          "		-- 7-Bypass  \n" +
                          "  \n" +
                          "		/* Get Detail of current Workorder Operation */  \n" +
                          "		SELECT opNumber, isRework, isLoopOperation, isTrackBySerialNo, isTrackBySerialFromWOOP, isAllowFinalSerialMapping  \n" +
                          "			INTO vCurrentWOOPNo, vIsRework, vIsLoopOperation, vIsTrackBySerialNo, vIsTrackBySerialFromWOOP, v_IsAllowSerialMappingWO  \n" +
                          "		FROM workorder_operation WHERE woOPID =pWOOPID AND qtyControl = 1  \n" +
                          "				AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1;  \n" +
                          "		DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;  \n" +
                          "		CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail  \n" +
                          "					( errorCode INT(11), serialNo VARCHAR(500), prodstatus VARCHAR(255), operationName VARCHAR(500));  \n" +
                          "  \n" +
                          "		DROP TEMPORARY TABLE IF EXISTS tempWoOperationList;  \n" +
                          "		CREATE TEMPORARY TABLE IF NOT EXISTS tempWoOperationList  \n" +
                          "			(woOPID INT(11),opID INT(11), woID INT(11),opNumber DECIMAL(7,3),opName VARCHAR(255),opOrder DECIMAL(7,3)  \n" +
                          "			,operationTypeID INT(11),opStatus INT(2),isRework TINYINT(1),isLoopOperation TINYINT(1),isTrackBySerialNo TINYINT(1), isTrackBySerialFromWOOP TINYINT(1), qtyControl TINYINT(1));  \n" +
                          "  \n" +
                          "		/* Get list of Operation for Work order */  \n" +
                          "		INSERT INTO tempWoOperationList(woOPID,opID, woID,opNumber,opName,opOrder,operationTypeID,opStatus,isRework,isLoopOperation,isTrackBySerialNo, isTrackBySerialFromWOOP, qtyControl)  \n" +
                          "					SELECT woOPID,opID, woID,opNumber,opName,opOrder,operationTypeID,opStatus,isRework,isLoopOperation,isTrackBySerialNo, isTrackBySerialFromWOOP, qtyControl  \n" +
                          "				FROM workorder_operation a WHERE woID = pWOID AND qtyControl = 1 AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "		DROP TEMPORARY TABLE IF EXISTS tempClustorOPList;  \n" +
                          "		CREATE TEMPORARY TABLE IF NOT EXISTS tempClustorOPList  \n" +
                          "			( woOPId INT(11), clusterID INT(11));  \n" +
                          "  \n" +
                          "		/* Get list of Clustor for Work order */  \n" +
                          "		INSERT INTO tempClustorOPList (woOPId, clusterID)  \n" +
                          "					SELECT woOPID, clusterID FROM workorder_operation_cluster  WHERE  \n" +
                          "											clusterID IN (SELECT clusterID FROM workorder_cluster WHERE woID = pWOID  \n" +
                          "					AND deletedAt IS NULL AND isDeleted = 0)  \n" +
                          "					AND deletedAt IS NULL AND isDeleted = 0 ORDER BY 1 DESC;  \n" +
                          "		IF(SELECT COUNT(1)FROM tempWoOperationList WHERE woID = pWOID AND qtyControl = 1 AND  \n" +
                          "			opNumber > vCurrentWOOPNo ORDER BY opNumber)  \n" +
                          "		THEN  \n" +
                          "			SELECT opNumber, isRework, isLoopOperation, woOPID  \n" +
                          "				INTO vNextWOOPNo, vNextIsRework, vNextIsLoopOperation, vNextWOOPID FROM tempWoOperationList  \n" +
                          "				WHERE woID = pWOID AND qtyControl = 1 AND opNumber > vCurrentWOOPNo ORDER BY opNumber LIMIT 1;  \n" +
                          "		END IF;  \n" +
                          "		SELECT COUNT(*) FROM serialNoList INTO vSerialCount;  \n" +
                          "		SET vIndexNo = 0;  \n" +
                          "  \n" +
                          "		WHILE vIndexNo < vSerialCount DO  \n" +
                          "			SET vSerialNo = NULL;  \n" +
                          "			SET vFinalSerailNo = NULL;  \n" +
                          "			SET vScrapSerailNoCount = 0;  \n" +
                          "			SET vCountPassedSRNoCount= 0;  \n" +
                          "			SET vCountLoopPassedSRNoCount= 0;  \n" +
                          "			SET vCountLoopAlreadyPassedSRNoCount= 0;  \n" +
                          "			SET vAlreadPassedCount = 0;  \n" +
                          "			SET vPassedFromLoopCount = 0;  \n" +
                          "			SET vPreviousWOOPNo = NULL;  \n" +
                          "			SET vPreviousIsRework = 0;  \n" +
                          "			SET vPreviousIsLoopOperation = 0;  \n" +
                          "			SET vPreviosWOOPID = NULL;  \n" +
                          "			SET vClusterId = NULL;  \n" +
                          "			SET vIsParallelOperation = 0;  \n" +
                          "			SET vCountClusterOP = 0;  \n" +
                          "			SET vCurrWOOPClusterOp = NULL;  \n" +
                          "			SET vIsFirstOperation = 0;  \n" +
                          "			SET vCurrentStatus = NULL;  \n" +
                          "			SET vCurrOperationName =NULL;  \n" +
                          "            SET vMatchClustorWOPOIDId = NULL;  \n" +
                          "			SELECT serialNo INTO vSerialNo FROM serialNoList LIMIT vIndexNo,1;  \n" +
                          "    			-- pSerialType  \n" +
                          "			/* Check  Serial No is 'MFR' or 'FINAL' */  \n" +
                          "            IF(pSerialType is null)  \n" +
                          "            THEN  \n" +
                          "				SELECT (CASE WHEN(a.serialType = 2) THEN a.refMFGSerialNo ELSE a.SerialNo END) ID,  \n" +
                          "					(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE (SELECT ws.SerialNo FROM workorder_serialmst ws  \n" +
                          "						WHERE ws.refMFGSerialNoId = a.ID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1) END) finalSerialNo ,  \n" +
                          "					(CASE WHEN(pSerialType = 2) THEN (SELECT ID FROM workorder_serialmst ws  \n" +
                          "						WHERE a.SerialNo = a.refMFGSerialNo AND a.serialType = 1 AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)  \n" +
                          "					ELSE a.ID END) SerialId  \n" +
                          "					INTO vSerialNo, vFinalSerailNo, vSerialNoId  \n" +
                          "				FROM workorder_serialmst a WHERE a.woId = pWOID AND a.deletedAt IS NULL AND a.isDeleted = 0 AND  \n" +
                          "					((a.SerialNo = vSerialNo AND a.serialType = 1) OR (a.SerialNo = vSerialNo AND a.serialType = 2 AND a.refMFGSerialNo IS NOT NULL)) LIMIT 1;  \n" +
                          "			ELSE  \n" +
                          "				SELECT a.SerialNo ID,  \n" +
                          "					a.ID SerialId  \n" +
                          "					INTO vSerialNo, vSerialNoId  \n" +
                          "				FROM workorder_serialmst a WHERE a.woId = pWOID AND a.deletedAt IS NULL AND a.isDeleted = 0 AND  \n" +
                          "					((a.SerialNo = vSerialNo AND a.serialType = pSerialType)) LIMIT 1;  \n" +
                          "				SET vFinalSerailNo = case when(pSerialType = 2) then vSerialNo else NULL end;  \n" +
                          "			END IF;  \n" +
                          "  \n" +
                          "			/* Check  Serial No is exists or not */  \n" +
                          "			IF(vSerialNo IS NULL)  \n" +
                          "			THEN  \n" +
                          "				SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;  \n" +
                          "			ELSE  \n" +
                          "				IF(pSerialType is null)  \n" +
                          "                then  \n" +
                          "					SET vIdleSerailNo = (SELECT ID FROM workorder_serialmst WHERE  SerialNo = vSerialNo AND  \n" +
                          "						currStatus ='Idle' AND serialType = 1 AND woID = pWOID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1);  \n" +
                          "				else  \n" +
                          "					SET vIdleSerailNo = (SELECT ID FROM workorder_serialmst WHERE  SerialNo = vSerialNo AND  \n" +
                          "						currStatus ='Idle' AND serialType = pSerialType AND woID = pWOID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1);  \n" +
                          "                end if;  \n" +
                          "  \n" +
                          "				IF(vIdleSerailNo IS NULL)  \n" +
                          "				THEN  \n" +
                          "					/* Current Serial No already 'Scrap' = 4 => 'Scrap' or not */  \n" +
                          "					SET vScrapSerailNoCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0  \n" +
                          "										AND woID = pWOID AND serialNo IN (vSerialNo) AND prodstatus = '4');  \n" +
                          "  \n" +
                          "					 #-------------- Serial No already 'Scrap' or not ---------------------  \n" +
                          "					IF(vScrapSerailNoCount > 0)  \n" +
                          "					THEN  \n" +
                          "						SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;  \n" +
                          "					ELSE  \n" +
                          "						-- v_IsAllowSerialMappingWO  \n" +
                          "                        IF(v_IsAllowSerialMappingWO = 1 and vFinalSerailNo is null)  \n" +
                          "                        THEN  \n" +
                          "							INSERT INTO tempValidationDetail (errorCode, serialNo, prodstatus, operationName)  \n" +
                          "								VALUES (1, vSerialNo, 'Require mapping serial#', '');  \n" +
                          "                        ELSE  \n" +
                          "							SET vCountPassedSRNoCount = 0;  \n" +
                          "							IF (vNextIsLoopOperation = 1) THEN  \n" +
                          "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */  \n" +
                          "								SET vPassedFromLoopCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND  \n" +
                          "									woID = pWOID AND woOPID = vNextWOOPID AND serialNo IN (vSerialNo) AND prodstatus IN ('2','4'));  \n" +
                          "  \n" +
                          "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */  \n" +
                          "								SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND  \n" +
                          "								woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus IN ('1','4','6','7'));  \n" +
                          "							ELSEIF (vIsLoopOperation = 1) THEN  \n" +
                          "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */  \n" +
                          "								SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND  \n" +
                          "								woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus IN ('4'));  \n" +
                          "  \n" +
                          "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */  \n" +
                          "								SET vPassedFromLoopCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND  \n" +
                          "								woID = pWOID AND woOPID = pWOOPID AND woTransID = pWOTransID AND serialNo IN (vSerialNo) AND prodstatus IN ('1'));  \n" +
                          "							ELSE  \n" +
                          "								/*---------- Passed Serial No already in 'Passed/Defect Obseved/Rework' for current Operation */  \n" +
                          "								SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0 AND  \n" +
                          "								woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus != '2');  \n" +
                          "							END IF;  \n" +
                          "  \n" +
                          "							IF((vNextIsLoopOperation = 1 AND vPassedFromLoopCount > 0) OR (vIsLoopOperation = 1 AND vPassedFromLoopCount > 0) OR vAlreadPassedCount > 0)  \n" +
                          "							THEN  \n" +
                          "								SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;  \n" +
                          "							ELSE  \n" +
                          "								IF(vIsTrackBySerialNo = 1) THEN  \n" +
                          "									SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList WHERE isTrackBySerialFromWOOP=1 ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;  \n" +
                          "								ELSE  \n" +
                          "									SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;  \n" +
                          "								END IF;  \n" +
                          "  \n" +
                          "								IF(vIsFirstOperation = 1)  \n" +
                          "								THEN  \n" +
                          "									SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,  \n" +
                          "											pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;  \n" +
                          "								ELSE  \n" +
                          "									#-------------- Current Operation contain setial no as a 'Reprocess'  ---------------------  \n" +
                          "									SET vAlreadPassedCount = (SELECT COUNT(1) FROM workorder_trans_serialNo WHERE deletedAt IS NULL AND isDeleted = 0  \n" +
                          "													AND woID = pWOID AND woOPID = pWOOPID AND serialNo IN (vSerialNo) AND prodstatus = '2');  \n" +
                          "  \n" +
                          "									IF(vAlreadPassedCount > 0)  \n" +
                          "									THEN  \n" +
                          "										SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,  \n" +
                          "											pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;  \n" +
                          "									ELSE  \n" +
                          "										SELECT opNumber, isRework, isLoopOperation, woOPID  \n" +
                          "										INTO vPreviousWOOPNo, vPreviousIsRework, vPreviousIsLoopOperation, vPreviosWOOPID FROM tempWoOperationList  \n" +
                          "											 WHERE woID = pWOID AND opNumber < vCurrentWOOPNo ORDER BY opNumber DESC LIMIT 1;  \n" +
                          "  \n" +
                          "										/* ---------- Check Current Operation Is Rework ----- */  \n" +
                          "										IF(vIsRework = 0)  \n" +
                          "										THEN  \n" +
                          "											IF(vPreviousIsRework = 1)  \n" +
                          "											THEN  \n" +
                          "												IF(vPreviousIsLoopOperation = 1)  \n" +
                          "												THEN  \n" +
                          "													/* Get Before Work Order Operation of 'Rework'  */  \n" +
                          "													SELECT opNumber, woOPID INTO vPreviousWOOPNo, vPreviosWOOPID FROM tempWoOperationList  \n" +
                          "															WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1;  \n" +
                          "  \n" +
                          "													IF((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID) IS NOT NULL)  \n" +
                          "													THEN  \n" +
                          "														SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;  \n" +
                          "														SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;  \n" +
                          "  \n" +
                          "														/* ---------- Is cluser 'Parellel - 1' or 'Sequence - 0' ----- */  \n" +
                          "														IF(vIsParallelOperation = 1)  \n" +
                          "														THEN  \n" +
                          "															/* ---------- All Operation Passed through Cluster ----- */  \n" +
                          "															SET vMatchClustorWOPOIDId = NULL;  \n" +
                          "															SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);  \n" +
                          "															SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)  \n" +
                          "																THEN 1 ELSE 0 END)  \n" +
                          "															INTO vCountPassedSRNoCount  FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																	AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId)  \n" +
                          "																	AND woTransprodID IS NOT NULL  \n" +
                          "																	AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "														ELSE  \n" +
                          "															SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																	AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL  \n" +
                          "																	AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "														END IF;  \n" +
                          "													ELSE  \n" +
                          "  \n" +
                          "															/* ----------  ----- */  \n" +
                          "															SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																	AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL  \n" +
                          "																	AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "													END IF;  \n" +
                          "												ELSEIF(vNextIsLoopOperation = 1)  \n" +
                          "												THEN  \n" +
                          "													/* Next Work Order Operation 'Rework with Loop Operation'  */  \n" +
                          "													SELECT COUNT(1) INTO vCountLoopPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7') AND woTransprodID IS NOT NULL  \n" +
                          "																	AND woOPID = vNextWOOPID AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "													IF(vCountLoopPassedSRNoCount = 0)  \n" +
                          "													THEN  \n" +
                          "														/* Previous Work Order Operation 'Rework'  */  \n" +
                          "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7') AND woTransprodID IS NOT NULL  \n" +
                          "																	AND woOPID = vPreviosWOOPID AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "														IF(vCountPassedSRNoCount = 0)  \n" +
                          "														THEN  \n" +
                          "															/* Get Before Work Order Operation of 'Rework'  */  \n" +
                          "															SELECT opNumber, woOPID INTO vPreviousWOOPNo, vPreviosWOOPID FROM tempWoOperationList  \n" +
                          "																WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1;  \n" +
                          "															SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;  \n" +
                          "  \n" +
                          "															IF(vClusterId IS NOT NULL)  \n" +
                          "															THEN  \n" +
                          "																SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;  \n" +
                          "  \n" +
                          "																/* ---------- Is cluser 'Parellel - 1' or 'Sequence - 0' ----- */  \n" +
                          "																IF(vIsParallelOperation = 1)  \n" +
                          "																THEN  \n" +
                          "																	/* ---------- All Operation Passed through Cluster ----- */  \n" +
                          "													SET vMatchClustorWOPOIDId = NULL;  \n" +
                          "																	SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);  \n" +
                          "																	SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)  \n" +
                          "																		THEN 1 ELSE 0 END)  \n" +
                          "																	INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																			AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId) AND woTransprodID IS NOT NULL  \n" +
                          "																			AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "																ELSE  \n" +
                          "																	SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																				AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL  \n" +
                          "																				AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "																END IF;  \n" +
                          "															ELSE  \n" +
                          "																/* ----------  ----- */  \n" +
                          "																SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																			AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL  \n" +
                          "																			AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "															END IF;  \n" +
                          "														END IF;  \n" +
                          "													ELSE  \n" +
                          "														/* ----------  ----- */  \n" +
                          "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "															AND woOPID IN (vNextWOOPID)  \n" +
                          "															AND serialNo = vSerialNo AND woTransprodID IS NOT NULL  \n" +
                          "															AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "													END IF;  \n" +
                          "												ELSE  \n" +
                          "													/* Previous Work Order Operation 'Rework'  */  \n" +
                          "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7') AND woTransprodID IS NOT NULL  \n" +
                          "																	AND woOPID = vPreviosWOOPID AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "													IF(vCountPassedSRNoCount = 0)  \n" +
                          "													THEN  \n" +
                          "														/* Get Before Work Order Operation of 'Rework'  */  \n" +
                          "														SELECT opNumber, woOPID INTO vPreviousWOOPNo, vPreviosWOOPID FROM tempWoOperationList  \n" +
                          "																WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1;  \n" +
                          "  \n" +
                          "														IF((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID) IS NOT NULL)  \n" +
                          "														THEN  \n" +
                          "															SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;  \n" +
                          "															SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;  \n" +
                          "  \n" +
                          "															/* ---------- Is cluser 'Parellel - 1' or 'Sequence - 0' ----- */  \n" +
                          "															IF(vIsParallelOperation = 1)  \n" +
                          "															THEN  \n" +
                          "																/* ---------- All Operation Passed through Cluster ----- */  \n" +
                          "																SET vMatchClustorWOPOIDId = NULL;  \n" +
                          "																SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);  \n" +
                          "																SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)  \n" +
                          "																		THEN 1 ELSE 0 END)  \n" +
                          "																INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																		AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId) AND woTransprodID IS NOT NULL  \n" +
                          "																		AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "															ELSE  \n" +
                          "																SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																			AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL  \n" +
                          "																			AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "															END IF;  \n" +
                          "														ELSE  \n" +
                          "															/* ---------- Not Cluster then Consider Single operation ----- */  \n" +
                          "															SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE prodStatus IN ('1','6','7')  \n" +
                          "																		AND woOPID IN (vPreviosWOOPID) AND woTransprodID IS NOT NULL  \n" +
                          "																		AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "														END IF;  \n" +
                          "													END IF;  \n" +
                          "												END IF;  \n" +
                          "											ELSE  \n" +
                          "												/*-------------- Previous Operation Not Rework Operation ----------------- */  \n" +
                          "												/* ---------- Check Previous Operation and Current Operation Cluser ----- */  \n" +
                          "												SET vCountClusterOP = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.woOPID = vPreviosWOOPID);  \n" +
                          "  \n" +
                          "												/* ----------- Current Operation into Cluser or not ---- */  \n" +
                          "												IF(((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPID = pWOOPID)) IS NOT NULL)  \n" +
                          "												THEN  \n" +
                          "													SET vCurrWOOPClusterOp = (SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPID = pWOOPID);  \n" +
                          "  \n" +
                          "													SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vCurrWOOPClusterOp;  \n" +
                          "  \n" +
                          "													IF(vIsParallelOperation = 1)  \n" +
                          "													THEN  \n" +
                          "														/* ---------- Is cluser 'Parellel' or 'Sequence' ----- */  \n" +
                          "														SELECT opNumber INTO vPreviousWOOPNo FROM tempWoOperationList WHERE  \n" +
                          "															woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vCurrWOOPClusterOp)  \n" +
                          "															ORDER BY opNumber ASC LIMIT 1;  \n" +
                          "														SET vPreviosWOOPID = (SELECT woOPId FROM tempWoOperationList WHERE woID = pWOID AND opNumber < vPreviousWOOPNo ORDER BY opNumber DESC LIMIT 1);  \n" +
                          "													END IF;  \n" +
                          "  \n" +
                          "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID AND  \n" +
                          "															prodStatus NOT IN ('2','4') AND woOPID = vPreviosWOOPID AND woTransprodID IS NOT NULL  \n" +
                          "															AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "												ELSEIF (vCountClusterOP > 0)  \n" +
                          "												THEN  \n" +
                          "													/* ------- Previous Operation into Cluster Operation ------------------- */  \n" +
                          "													SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;  \n" +
                          "  \n" +
                          "													SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;  \n" +
                          "  \n" +
                          "													/* ---------- Is cluser 'Parellel' or 'Sequence' ----- */  \n" +
                          "													IF(vIsParallelOperation = 1)  \n" +
                          "													THEN  \n" +
                          "														/* ---------- All Operation Passed through Cluster ----- */  \n" +
                          "														SET vMatchClustorWOPOIDId = NULL;  \n" +
                          "														SET vMatchClustorWOPOIDId = (SELECT COUNT(1) FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId);  \n" +
                          "														SELECT (CASE WHEN(COUNT(1) = vMatchClustorWOPOIDId)  \n" +
                          "																THEN 1 ELSE 0 END)  \n" +
                          "														INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID AND  \n" +
                          "																	deletedAt IS NULL AND isDeleted = 0 AND  \n" +
                          "																	prodStatus NOT IN ('2','4') AND woTransprodID IS NOT NULL  \n" +
                          "																	AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId)  \n" +
                          "																	AND serialNo = vSerialNo;  \n" +
                          "													ELSE  \n" +
                          "														/* ---------- All Operation Passed through Cluster ----- */  \n" +
                          "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID AND  \n" +
                          "																	deletedAt IS NULL AND isDeleted = 0 AND prodStatus NOT IN ('2','4') AND woTransprodID IS NOT NULL  \n" +
                          "																	AND woOPID IN (vPreviosWOOPID) AND serialNo = vSerialNo;  \n" +
                          "													END IF;  \n" +
                          "												ELSE  \n" +
                          "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE woID = pWOID  \n" +
                          "																	 AND deletedAt IS NULL AND isDeleted = 0 AND prodStatus NOT IN ('2','4') AND woTransprodID IS NOT NULL  \n" +
                          "																	AND woOPID IN (vPreviosWOOPID) AND serialNo = vSerialNo;  \n" +
                          "												END IF;  \n" +
                          "											END IF;  \n" +
                          "										ELSE  \n" +
                          "											/* ---------- Check Previous Operation and Current Operation Cluser ----- */  \n" +
                          "											IF ((SELECT t.clusterID FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID) IS NOT NULL)  \n" +
                          "											THEN  \n" +
                          "												SELECT t.clusterID INTO vClusterId FROM tempClustorOPList AS t WHERE t.woOPId = vPreviosWOOPID;  \n" +
                          "												SELECT isParellelOperation INTO vIsParallelOperation FROM workorder_cluster WHERE clusterID = vClusterId;  \n" +
                          "  \n" +
                          "												/* ---------- Is cluser '1 - Parellel' or '0 - Sequence' ----- */  \n" +
                          "												IF(vIsParallelOperation = 1)  \n" +
                          "												THEN  \n" +
                          "													/* ---------- All Operation contain 'Defect - 3' or 'Rework - 5' through Cluster ----- */  \n" +
                          "													SELECT COUNT(1) INTO vCountPassedSRNoCount  FROM workorder_trans_serialno WHERE (prodStatus = '5'  OR prodStatus = '3' )  \n" +
                          "														AND woOPID IN (SELECT t.woOPId FROM tempClustorOPList AS t WHERE t.clusterID = vClusterId)  \n" +
                          "														AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "												ELSE  \n" +
                          "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE (prodStatus = '5'  OR prodStatus = '3' )  \n" +
                          "																AND  woOPID IN (vPreviosWOOPID)  \n" +
                          "																AND serialNo = vSerialNo AND deletedAt IS NULL AND isDeleted = 0;  \n" +
                          "												END IF;  \n" +
                          "											ELSE  \n" +
                          "												IF (vIsLoopOperation = 1) THEN  \n" +
                          "													/* ---------- All Operation contain shoudl not passed/scrapped/bypass/missing part ----- */  \n" +
                          "													SELECT COUNT(1) INTO  vCountLoopAlreadyPassedSRNoCount FROM workorder_trans_serialno WHERE (prodStatus IN ('1','4','6','7'))  \n" +
                          "															AND woOPID IN (vPreviosWOOPID) AND deletedAt IS NULL AND isDeleted = 0 AND serialNo = vSerialNo;  \n" +
                          "  \n" +
                          "													IF(vCountLoopAlreadyPassedSRNoCount = 0) THEN  \n" +
                          "														/* ---------- All Operation contain 'Defect - 3' or 'Rework - 5' through Cluster ----- */  \n" +
                          "														SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE ((prodStatus = '5'  OR prodStatus = '3'))  \n" +
                          "															AND woOPID IN (vPreviosWOOPID) AND deletedAt IS NULL AND isDeleted = 0 AND serialNo = vSerialNo;  \n" +
                          "													END IF;  \n" +
                          "												ELSE  \n" +
                          "													/* ---------- All Operation contain 'Defect - 3' or 'Rework - 5' through Cluster ----- */  \n" +
                          "													SELECT COUNT(1) INTO vCountPassedSRNoCount FROM workorder_trans_serialno WHERE ((prodStatus = '5'  OR prodStatus = '3'))  \n" +
                          "														AND woOPID IN (vPreviosWOOPID) AND deletedAt IS NULL AND isDeleted = 0 AND serialNo = vSerialNo;  \n" +
                          "												END IF;  \n" +
                          "											END IF;  \n" +
                          "										END IF;  \n" +
                          "  \n" +
                          "										IF(vCountPassedSRNoCount > 0)  \n" +
                          "										THEN  \n" +
                          "											SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,  \n" +
                          "											pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;  \n" +
                          "										ELSE  \n" +
                          "											SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;  \n" +
                          "										END IF;  \n" +
                          "									END IF;  \n" +
                          "								END IF;  \n" +
                          "							END IF;  \n" +
                          "						END IF;  \n" +
                          "					END IF;  \n" +
                          "				ELSE  \n" +
                          "					IF(vIsTrackBySerialNo = 1) THEN  \n" +
                          "						SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList WHERE isTrackBySerialFromWOOP=1 ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;  \n" +
                          "					ELSE  \n" +
                          "						SET vIsFirstOperation =  CASE WHEN(pWOOPID = (SELECT woOPID FROM tempWoOperationList ORDER BY opNumber ASC LIMIT 1)) THEN 1 ELSE 0 END;  \n" +
                          "					END IF;  \n" +
                          "  \n" +
                          "					IF(vIsFirstOperation = 0)  \n" +
                          "					THEN  \n" +
                          "						SELECT fun_InsertCurrStatusSRNo(vSerialNo, pWOID, pSerialType) INTO @tempInvalidCount;  \n" +
                          "					ELSE  \n" +
                          "						SELECT fun_AddSerialNoTranscation(pWOID, pOpID, pWOTransID, pWOOPID, pProdStatus, vSerialNo,  \n" +
                          "										pUserId, pEmployeeID, pRoleId, vFinalSerailNo, vSerialNoId) INTO @tempCount;  \n" +
                          "					END IF;  \n" +
                          "				END IF;  \n" +
                          "			END IF;  \n" +
                          "			SET vIndexNo = vIndexNo + 1;  \n" +
                          "		END WHILE;  \n" +
                          "	SELECT * FROM tempValidationDetail;  \n" +
                          "    COMMIT;  \n" +
                          "END;  \n" +	
                        /* **************************** Add Script Version -> 04-08-2021 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                        "VALUES (5107,'2.00','V1','Sproc_ProcessedSerialQty  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                        );
                      break;
                      case 5107:
                        allDbChangesArray.push(
                        /* **************************** New Script -> 04-08-2021 *********************************** */
                          "DROP PROCEDURE IF EXISTS Sproc_ValidateScanChangeReel;  \n" +
                          "CREATE PROCEDURE `Sproc_ValidateScanChangeReel`(  \n" +
                          "	IN pOldUMID VARCHAR(15),  \n" +
                          "	IN pfeederLocation VARCHAR(1000),  \n" +
                          "	IN pNewUMID VARCHAR(15),  \n" +
                          "	IN ppartID INT,  \n" +
                          "	IN pwoOpEqpID INT,  \n" +
                          "	IN pwoOpID INT,  \n" +
                          "	IN pwoTransID INT,  \n" +
                          "	IN pemployeeId INT,  \n" +
                          "	IN pcheckKitAllocation INT,  \n" +
                          "	IN pverificationType VARCHAR(255),  \n" +
                          "	IN pisVerify INT,  \n" +
                          "	IN ptransactionType VARCHAR(1),  \n" +
                          "	IN preelChangeType VARCHAR(100),  \n" +
                          "	IN ptoBinID INT,  \n" +
                          "	IN pisConfirmed INT,  \n" +
                          "	IN pwoID INT,  \n" +
                          "	IN pCreatedBy VARCHAR(255),  \n" +
                          "    IN pApprovedBy INT,  \n" +
                          "    IN pApprovedReason VARCHAR(500)  \n" +
                          ")  \n" +
                          "BEGIN  \n" +
                          "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                          "	DECLARE temp_umid_comp_id INT;  \n" +
                          "	DECLARE temp_comp_uom INT;  \n" +
                          "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                          "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                          "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                          "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
                          "	DECLARE temp_eqpFeederID INT;  \n" +
                          "	DECLARE oldUMIDVerified INT DEFAULT 0;  \n" +
                          "	DECLARE newUMIDVerified INT DEFAULT 0;  \n" +
                          "	DECLARE valid_umid_transfer INT  DEFAULT 0;  \n" +
                          "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);  \n" +
                          "	DECLARE temp_last_inserted_umid_id INT ;  \n" +
                          "	DECLARE temp_salesOrderDetID VARCHAR(100);  \n" +
                          "  \n" +
                          "	SET temp_umid_comp_id  = NULL;  \n" +
                          "	SET temp_umid_pidcode  = NULL;  \n" +
                          "	SET temp_umid_mfgPN  = NULL;  \n" +
                          "	SET temp_all_mfg_id_lineID = NULL;  \n" +
                          "	-- Step 1 - Validate Old UMID  \n" +
                          "		-- Step 1.1 - check with zero out  \n" +
                          "			-- empty bin and empty wh  \n" +
                          "			-- update table with reelStatus \"R\"  \n" +
                          "			-- add new umid with same feeder with reelStatus \"P\"  \n" +
                          "			-- Step 2 - check with umid & Feeder validate  \n" +
                          "		-- step 1.2 - finish job case  \n" +
                          "			-- no new umid in this case.  \n" +
                          "			-- update umid status \"In Transist\"  \n" +
                          "			-- update table with reelStatus \"R\"  \n" +
                          "		-- step 1.3 - transfer material case  \n" +
                          "			-- get new bin and wh details based on new ui.  \n" +
                          "			-- update umid status \"In Transist\"  \n" +
                          "			-- update table with reelStatus \"R\"  \n" +
                          "			-- add new umid with same feeder with reelStatus \"P\"  \n" +
                          "			-- Step 2 - check with umid & feeder validate  \n" +
                          "	-- Step 2 - check with umid validate  \n" +
                          "	-- Stpe 3 -- check for feeder validation  \n" +
                          "  \n" +
                          "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                          "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                          "	-- create temporary table for error  \n" +
                          "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                          "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                          "	(  \n" +
                          "	     errorText VARCHAR(2000),  \n" +
                          "	     isFeederError INT,  \n" +
                          "	     isUMIDError INT,  \n" +
                          "	     isConfirmation INT,  \n" +
                          "	     isMessage INT,  \n" +
                          "	     isInformation INT,  \n" +
                          "	     stringText1 VARCHAR(1000),  \n" +
                          "	     stringText2 VARCHAR(1000),  \n" +
                          "	     stringText3 VARCHAR(1000)  \n" +
                          "	);  \n" +
                          "  \n" +
                          "  \n" +
                          "	-- IF(pOldUMID IS NOT NULL AND pfeederLocation IS NOT NULL AND pNewUMID IS NOT NULL) THEN  \n" +
                          "	-- 		CALL Sproc_ValidateScanFeederFirst (pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID,pwoOpID,pwoTransID,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pCreatedBy);  \n" +
                          "	-- ELSE  \n" +
                          "			DROP TEMPORARY TABLE IF EXISTS temp_old_umid_details;  \n" +
                          "			CREATE TEMPORARY TABLE temp_old_umid_details AS  \n" +
                          "			SELECT c.id, c.PIDCode, c.mfgPN,  \n" +
                          "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode,  \n" +
                          "			c.restrictUsePermanently AS RestrictFromPart,  \n" +
                          "			c.packagingGroupId,  \n" +
                          "			c.rev AS rev,  \n" +
                          "			c.imageURL AS imageURL,  \n" +
                          "			c.mfgPNDescription AS mfgPNDescription,  \n" +
                          "			c.roHSStatusID,  \n" +
                          "			c.alertExpiryDays,  \n" +
                          "			c.umidVerificationRequire,  \n" +
                          "			c.uom,  \n" +
                          "			c.isCPN,  \n" +
                          "			c.isCustom,  \n" +
                          "			rr.name rohsStatus,  \n" +
                          "			rr.rohsIcon rohsIcon,  \n" +
                          "			css.id AS refsidid,  \n" +
                          "			css.binID AS binID,  \n" +
                          "			css.pkgQty AS pkgQty,  \n" +
                          "			css.uid,  \n" +
                          "			fun_getUnitNameByID(c.uom) unitName,  \n" +
                          "			css.isUMIDRestrict AS RestrictFromUMID,  \n" +
                          "			css.expiryDate,  \n" +
                          "			1 isActualComponent,  \n" +
                          "			0 isPackagingAlias,  \n" +
                          "			wtud.eqpFeederID,  \n" +
                          "			(SELECT woefd.feederLocation FROM workorder_operation_equipment_feeder_details woefd WHERE wtud.eqpFeederID=woefd.id AND deletedAt IS NULL) feederLocation,  \n" +
                          "			(SELECT woefd.isActive FROM workorder_operation_equipment_feeder_details woefd WHERE wtud.eqpFeederID=woefd.id AND deletedAt IS NULL) feederActiveStatus,  \n" +
                          "			wtud.reelStatus,  \n" +
                          "			(SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL AND id  \n" +
                          "					IN (SELECT rfqLineItemID FROM workorder_operation_feeder_lineitem_details WHERE deletedAt IS NULL  \n" +
                          "					AND eqpFeederID IN (wtud.eqpFeederID))  \n" +
                          "				) AS refDesig,  \n" +
                          "			(SELECT GROUP_CONCAT(IFNULL(wol.rfqLineItemID,'')) FROM workorder_operation_feeder_lineitem_details wol  \n" +
                          "				WHERE eqpFeederID IN (wtud.eqpFeederID) AND wol.deletedAt IS NULL) AS rfqLineItemsID,  \n" +
                          "             wtud.isVerified  \n" +
                          "		FROM component c  \n" +
                          "		LEFT JOIN workorder_trans_umid_details wtud  \n" +
                          "			ON (wtud.mfgPNID = c.id AND wtud.deletedAt IS NULL)  \n" +
                          "		-- AND wtud.isVerified=1  \n" +
                          "		LEFT JOIN component_sid_stock css  \n" +
                          "			ON (css.id = wtud.refsidid AND css.id = wtud.refsidid AND css.deletedAt IS NULL  )  \n" +
                          "		LEFT JOIN rfq_rohsmst rr  \n" +
                          "			ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)  \n" +
                          "		WHERE css.uid = pOldUMID  \n" +
                          "		AND wtud.reelStatus=\"P\"  \n" +
                          "		AND wtud.transactionType=ptransactionType  \n" +
                          "		AND wtud.woOPID=pwoOpID  \n" +
                          "		AND c.deletedAt IS NULL;  \n" +
                          " -- select '1';  \n" +
                          "		IF((SELECT COUNT(1) FROM temp_old_umid_details) > 0) THEN  \n" +
                          "			SELECT id, pidcode, uom, mfgPN, isCPN, eqpFeederID, rfqLineItemsID  \n" +
                          "			INTO temp_umid_comp_id, temp_umid_pidcode, temp_comp_uom, temp_umid_mfgPN, temp_comp_is_cpn, temp_eqpFeederID, temp_rfqLineItemsID  \n" +
                          "            FROM temp_old_umid_details;  \n" +
                          "			SET oldUMIDVerified=1;  \n" +
                          "             IF(pOldUMID IS NOT NULL AND (pfeederLocation IS NOT NULL OR pNewUMID IS NOT NULL)) THEN  				-- select 'CALL Sproc_ValidateScanFeederFirst (',pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy,');';  \n" +
                          "				-- CALL Sproc_ValidateScanFeederFirst (pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy);  \n" +
                          "				CALL Sproc_ValidateScanUMIDFirst (pNewUMID, pfeederLocation,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy, pApprovedBy, pApprovedReason);  \n" +
                          "			END IF;  \n" +
                          "			-- SET valid_umid_transfer = 1;  \n" +
                          "		ELSE  \n" +
                          "			-- INVALID_OLD_UMID  \n" +
                          "			SET result = fun_checkAndInsertError('UMID017', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                          "		END IF;  \n" +
                          "		IF(pOldUMID IS NOT NULL AND (pfeederLocation IS NULL AND pNewUMID IS NULL)) THEN  \n" +
                          "			INSERT INTO `uid_verification_history`(  \n" +
                          "				`scanString1`,		`scanString2`,  \n" +
                          "				`string1PartID`,	`scanString1MFG`,  \n" +
                          "				`scanString1MFGPNID`,	`string2PartID`,  \n" +
                          "				`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
                          "				`status`,  \n" +
                          "				`isDeleted`,		`createdBy`,  \n" +
                          "				`createdAt`,       	`woTransID`,  \n" +
                          "				`woOpEqpID`, 		`verificationType`)  \n" +
                          "			VALUES (  \n" +
                          "				pOldUMID,						CASE WHEN (pNewUMID IS NULL) THEN '' ELSE pNewUMID END,  \n" +
                          "				temp_umid_comp_id,  					fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),  \n" +
                          "				temp_umid_mfgPN,					NULL,  \n" +
                          "				NULL, 							NULL,  \n" +
                          "				CASE WHEN (oldUMIDVerified = 1 OR newUMIDVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                          "				0,							IFNULL(pCreatedBy,''),  \n" +
                          "				fun_DatetimetoUTCDateTime(),        			pwoTransID,  \n" +
                          "				pwoOpEqpID,						pverificationType  \n" +
                          "			);  \n" +
                          "  \n" +
                          "  \n" +
                          "			#0. return history of umid transfer  \n" +
                          "			IF(valid_umid_transfer = 0) THEN  \n" +
                          "				SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                          "			END IF;  \n" +
                          "			#1. return history of verification  \n" +
                          "			SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                          "			#2. return error  \n" +
                          "			SELECT * FROM temp_scan_error;  \n" +
                          "			#3. return umid details  \n" +
                          "			-- IF (uidVerified=1) THEN  \n" +
                          "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                          "			SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                          "			SELECT * FROM temp_umid_details;  \n" +
                          "			-- END IF;  \n" +
                          "  \n" +
                          "			#5. return feeder details  \n" +
                          "			-- IF (feederVerified=1) THEN  \n" +
                          "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                          "			SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                          "			SELECT * FROM temp_feeder_details;  \n" +
                          "			-- END IF;  \n" +
                          "  \n" +
                          "			#6. return allocated UMID details  \n" +
                          "			-- IF (pfeederLocation IS NULL and pNewUMID IS not NULL) THEN  \n" +
                          "			-- 	SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
                          "			-- 	WHERE wsd.deletedAt IS NULL AND wsd.woID IN (SELECT woop.woID FROM workorder_operation woop  \n" +
                          "			-- 	WHERE woop.woOPID=pwoOpID AND woop.deletedAt IS NULL);  \n" +
                          "  \n" +
                          "			-- 	SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                          "			-- 	AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                          "			-- 	WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                          "			-- 	CALL Sproc_GetStockAllocateList (temp_salesOrderDetID,ppartID,temp_all_mfg_id_lineID,temp_comp_uom,\"AllocatedStock\");  \n" +
                          "			-- ELSE  \n" +
                          "			-- 	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                          "			-- 	WHERE 1=0;  \n" +
                          "			-- END IF;  \n" +
                          "			#6. return allocated UMID details  \n" +
                          "			IF (pOldUMID IS NOT NULL AND oldUMIDVerified=1) THEN  \n" +
                          "				-- select '1';  \n" +
                          "				SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
                          "				WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;  \n" +
                          "  \n" +
                          "				IF (temp_comp_is_cpn = 0) THEN  \n" +
                          "					SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
                          "					FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                          "					AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                          "					WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                          "				ELSE  \n" +
                          "					SELECT GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
                          "					FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                          "					AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                          "					WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                          "				END IF;  \n" +
                          "				CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");  \n" +
                          "			ELSE  \n" +
                          "				SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                          "				WHERE 1=0;  \n" +
                          "			END IF;  \n" +
                          "			#8. return last inserted/updated records for umid transaction  \n" +
                          "			SELECT NULL AS temp_last_inserted_umid_id;  \n" +
                          "			#7. old UMID Details with Feeder Location  \n" +
                          "			SELECT * FROM temp_old_umid_details;  \n" +
                          "		ELSE  \n" +
                          "			SELECT * FROM temp_old_umid_details;  \n" +
                          "		END IF;  \n" +
                          "	 -- END IF;  \n" +
                          "END;  \n" +	
                        /* **************************** Add Script Version -> 04-08-2021 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                        "VALUES (5108,'2.00','V1','Sproc_ValidateScanChangeReel  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                        );
                      break;
        case 5108:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "						'No'  \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "						'Yes'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `isHotJobValue`,  \n" +
                "			`vuss`.`Sales Order ID` AS id,  \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "			`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "			`vuss`.frequency as frequencyName,  \n" +
                "			case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "			 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "			`vuss`.`Po Number` AS poNumber,  \n" +
                "			`vuss`.`Po Date` AS poDate,  \n" +
                "			`vuss`.`Customer ID` AS customerID,  \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "			`vuss`.`Sales Order Status` AS `status`,  \n" +
                "			`vuss`.`Revision` AS revision,  \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "			`vuss`.`Terms ID` AS termsID,  \n" +
                "			`vuss`.`So Date` AS soDate,  \n" +
                "			`vuss`.`Company Name` AS companyName,  \n" +
                "			`vuss`.`internalPO` AS internalPO,  \n" +
                "			`vuss`.`mfgCode` AS mfgCode,  \n" +
                "			`vuss`.`Full Name` AS fullName,  \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "			`vuss`.`PO Qty` AS qty,  \n" +
                "			ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "			ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "			`vuss`.`mrpQty` AS mrpQty,  \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "			`vuss`.`kitQty` AS kitQty, \",  \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "			`vuss`.`shippingQty` AS shippingQty,  \n" +
                "			`vuss`.`remark` AS remark,  \n" +
                "			`vuss`.`Assy ID` AS PIDCode,  \n" +
                "			`vuss`.`Assy Name` AS mfgPN,  \n" +
                "			`vuss`.`NickName` AS nickName,  \n" +
                "			`vuss`.`liveVersion` AS liveVersion,  \n" +
                "			`vuss`.`partDescription` AS partDescription,  \n" +
                "			`vuss`.`cancleReason` AS cancleReason,  \n" +
                "			`vuss`.`Status` AS completedStatus,  \n" +
                "			`vuss`.`modifyDate` AS modifyDate,  \n" +
                "			`vuss`.`createdDate` AS createdDate,  \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "			vuss.isBlanketPO,  \n" +
                "			vuss.blanketPOText,  \n" +
                "			vuss.poRevision,  \n" +
                "			vuss.partType,  \n" +
                "			vuss.isCancle,  \n" +
                "			vuss.mfgcodeID,  \n" +
                "			vuss.manufacturerName,  \n" +
                "			`vuss`.`PartID` AS partID,  \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "			`vuss`.`kitNumber` AS kitNumber,  \n" +
                "			`vuss`.`serialNumber` AS serialNumber,  \n" +
                "			`vuss`.partCategory,  \n" +
                "			vuss.lineID,  \n" +
                "			vuss.internalCommentSo,  \n" +
                "			vuss.internalComment,  \n" +
                "			ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "			vuss.Status as salesOrderDetStatusConvertedValues,  \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "			 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "						'Draft'  \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "						'Published'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `statusConvertedValue`,  \n" +
                "			hutkit.refType as refTypeKA,  \n" +
                "			hutkit.status as haltStatusKA,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	hutkit.status = 'H' THEN  \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "					ELSE 	''  \n" +
                "				END  \n" +
                "			) AS reasonKA,  \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "						'Unplanned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "						'Partially Planned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "						'Fully Planned'  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			) as kitPlanStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	ka.kitReturnStatus is null then  \n" +
                "						'N/A'  \n" +
                "					ELSE  \n" +
                "						ka.kitReturnStatus  \n" +
                "				END  \n" +
                "			) as kitReturnStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ka.kitReleaseStatus is null then  \n" +
                "						'Not Released'  \n" +
                "					else  \n" +
                "						ka.kitReleaseStatus  \n" +
                "				END  \n" +
                "			) as kitReleaseStatus,  \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "			p.nextReleaseDate,  \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,  \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "			p.releasedPlanCount totalkitRelease,  \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "            IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "            IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "			vuss.releasedWorkorder,  \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "	LEFT JOIN  	(  \n" +
                "				SELECT  salesOrderDetID,  \n" +
                "					refAssyId,  \n" +
                "					count(1) totalPlan,  \n" +
                "                    SUM(poQty) totalPOQty,  \n" +
                "                    SUM(kitReleaseQty) totalKitQty,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "				FROM 	salesorder_plan_detailsmst  \n" +
                "				WHERE 	isDeleted=0  \n" +
                "						AND subAssyID is null  \n" +
                "				GROUP BY salesOrderDetID, refAssyId  \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "	LEFT JOIN 	(  \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "					`k`.`assyID` AS `assyID`,  \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "					`k`.`shortageLine` AS `shortageLine`,  \n" +
                "					allocPermainAssy allocPerComponent,  \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "					FROM (  \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "							mainAssy AS `assyID`,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "							sum( k.shortageline) shortageline,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "					      FROM (  \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) `k`  \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "					) `k`  \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC, \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob =1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJobValue=\"Yes\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuild > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = - 2 THEN  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "											ELSE  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) END  \n" +
                "										END  \n" +
                "								END  \n" +
                "							) shortagePerBuild,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END  \n" +
                "											ELSE  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "										END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailable,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										',fun_getKitConsolidateLineMFGPNWithPackaging(pPackagingAlias, pRefSalesOrderDetailId, pCustomerId),',  \n" +
                "										',fun_getKitMFRPNIdsWithPackaging(pRefSalesOrderDetailId),',  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "		WHERE', pWhereClause,' ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pLineId LONGTEXT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuild > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId  \n" +
                "		FROM kit_allocation ka  \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id  \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND  \n" +
                "				ka.status = 'A' AND  \n" +
                "                css.isdeleted = 0 AND  \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE  \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "					uomID, 			unitName,    			uomClassID,						isInstall,				c.connecterTypeID,  \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName as name,  \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,  \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,  \n" +
                "					allocatedPins,		scrapedPins,  \n" +
                "					/*SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IFNULL(d.availableStock, 0)),0)) availableStock,  \n" +
                "					SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IFNULL(d.availableStock, 0)) availableStockInPin,*/  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE  \n" +
                "									WHEN c.connecterTypeID = -2 THEN  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END  \n" +
                "								END  \n" +
                "						END  \n" +
                "					) shortagePerBuild,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE  \n" +
                "									WHEN c.connecterTypeID = - 2 THEN  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0  \n" +
                "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailable  \n" +
                "				FROM	(  \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
                "							a.custPNID,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
                "							a.restrictCPNUseInBOMStep,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,  \n" +
                "							a.uomID, 				u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "							a.isInstall,			a.connecterTypeID,  \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
                "							',fun_getKitConsolidateLineMFGPNWithPackaging(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
                "							',fun_getKitMFRPNIdsWithPackaging(pRefSalesOrderDetID),',  \n" +
                "							a.numOfPosition,  \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,  \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
                "							IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a  \n" +
                "                    INNER JOIN 	uoms u ON a.uomID = u.id AND u.isDeleted = 0  \n" +
                "					INNER JOIN 	(  \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
                "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,  \n" +
                "										SUM(b.scrapedPins) scrapedPins  \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a  \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
                "				) AS  c  \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)  \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,  \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID,  \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,  \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,  \n" +
                "						consumeQty,		allocatedPins,			scrapedPins,		uomClassID  \n" +
                "		)  \n" +
                "		AS  mainQuery  \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pkitAllocationLineItemId INT,  \n" +
                "    IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pKitqty INT DEFAULT 0;  \n" +
                "    DECLARE pCustomer VARCHAR(1000);  \n" +
                "    DECLARE pCustomerID INT;  \n" +
                "  \n" +
                "    IF(pAssyID = 0) THEN  \n" +
                "		SELECT 	IFNULL(s.kitQty,0),  \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID  \n" +
                "				FROM salesorderdet s  \n" +
                "				JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "				 WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  IFNULL(k.totalAssyBuildQty,0),  \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID  \n" +
                "					FROM kit_allocation_assy_detail k  \n" +
                "					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "								AND k.partId = pAssyID  \n" +
                "								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsConsolidated = 0) THEN  \n" +
                "		SELECT  \n" +
                "				c.id,			 refSalesOrderDetID,		partID,						PIDCode,  \n" +
                "				lineID,			 isCustom, 					pCustomer companyName, 		pCustomerID customerID,  \n" +
                "				FUN_GETUNITNAMEBYID(uomID) AS unitName, 	connecterTypeID,  \n" +
                "				fun_getRoHSNameByID(RoHSStatusID) rohsName,  numOfPosition,  \n" +
                "				fun_getRoHSIconByID(RoHSStatusID) rohsIcon,  \n" +
                "				allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "                consumeUnits, 		consumePin,  \n" +
                "				(CASE  \n" +
                "					WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "				END) requiredQtyBuild,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(uomMismatchedStep = 0  \n" +
                "							OR connecterTypeID != - 2)  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "				END) requirePinsBuild,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						uomMismatchedStep = 0  \n" +
                "							OR isNotRequiredKitAllocation = 1  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE CASE  \n" +
                "						WHEN  \n" +
                "							connecterTypeID = - 2  \n" +
                "						THEN  \n" +
                "							CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "							END  \n" +
                "						ELSE CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "					END  \n" +
                "				END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "						k.id,	 		k.refSalesOrderDetID,	 k.partID,  \n" +
                "						c.PIDCode,		c.isCustom,       		c.connecterTypeID,  \n" +
                "						c.RoHSStatusID,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "							THEN  \n" +
                "								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
                "									OR k.isBuyDNPQty = 'P'  \n" +
                "									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
                "								OR k.isBuyDNPQty = 'P'  \n" +
                "								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "						END) AS qpa,  \n" +
                "						k.lineID,			k.uomID,	 					k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "						k.numOfPosition,	k.isNotRequiredKitAllocation,	kal.uomMismatchedStep,  \n" +
                "						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "				FROM  \n" +
                "					kit_allocation_lineitems k  \n" +
                "				LEFT JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id  \n" +
                "				JOIN component c ON k.partID = c.id AND c.isGoodPart = 1  \n" +
                "				LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "					AND k.partID = ka.assyID  \n" +
                "					AND k.refRfqLineitem = ka.refBOMLineID  \n" +
                "				WHERE  \n" +
                "					k.id = pkitAllocationLineItemId) AS c  \n" +
                "			GROUP BY id, refSalesOrderDetID, partID, qpa, lineID, uomID, PIDCode,  \n" +
                "					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "					rfqLineItemsId, numOfPosition, connecterTypeID,	isCustom,  RoHSStatusID;  \n" +
                "		ELSE  \n" +
                "			SELECT  \n" +
                "					c.id,			 refSalesOrderDetID,		partID,					PIDCode,  \n" +
                "					lineID,			 isCustom, 					pCustomer companyName, 	pCustomerID customerID,  \n" +
                "					FUN_GETUNITNAMEBYID(uomID) AS unitName, 	connecterTypeID,  \n" +
                "					fun_getRoHSNameByID(RoHSStatusID) rohsName,  numOfPosition,  \n" +
                "					fun_getRoHSIconByID(RoHSStatusID) rohsIcon,  \n" +
                "					allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "					consumeUnits, 		consumePin,  \n" +
                "					(CASE  \n" +
                "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(uomMismatchedStep = 0  \n" +
                "								OR connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							uomMismatchedStep = 0  \n" +
                "								OR isNotRequiredKitAllocation = 1  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE CASE  \n" +
                "							WHEN  \n" +
                "								connecterTypeID = - 2  \n" +
                "							THEN  \n" +
                "								CASE  \n" +
                "									WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "									ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "								END  \n" +
                "							ELSE CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "							END  \n" +
                "						END  \n" +
                "					END) shortagePerBuild  \n" +
                "				FROM  \n" +
                "					(SELECT  \n" +
                "							k.id,	 		k.refSalesOrderDetID,	 k.refAssyId partID,  \n" +
                "							c.PIDCode,		c.isCustom,       		c.connecterTypeID,  \n" +
                "							c.RoHSStatusID,  \n" +
                "							k.kitQPAWithDNP AS qpa,  \n" +
                "							k.lineID,			k.uomID,	 					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
                "							k.numOfPosition,	k.isNotRequiredKitAllocation,	k.uomMismatchedStep,  \n" +
                "							IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "							IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "			FROM  \n" +
                "				kit_allocation_consolidate_line_detail k  \n" +
                "			LEFT JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id  \n" +
                "			JOIN component c ON k.refAssyId = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "				AND k.refAssyId = ka.assyID  \n" +
                "				AND k.rfqLineItemsId = ka.refBOMLineID  \n" +
                "			WHERE  \n" +
                "				k.id = pkitAllocationLineItemId) AS c  \n" +
                "		GROUP BY id, refSalesOrderDetID, partID, qpa, lineID, uomID, PIDCode,  \n" +
                "				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "				rfqLineItemsId, numOfPosition, connecterTypeID, isCustom,  RoHSStatusID;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5109,'2.00','V1','User Story #35806 Improvement changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5109:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "ALTER TABLE component_sid_stock ADD selfLifeDays INT;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "ALTER TABLE component_sid_stock ADD shelfLifeAcceptanceDays INT;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "ALTER TABLE component_sid_stock ADD maxShelfLifeAcceptanceDays INT;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveSplitUMIDDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSplitUMIDDetail`(  \n" +
                "	IN pUIDID INT,  \n" +
                "    IN pSplitUID VARCHAR(20),  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "    IN pPackaging INT,  \n" +
                "    IN pInventoryType VARCHAR(10),  \n" +
                "	IN pSplitCount DECIMAL(18,8),  \n" +
                "	IN pSplitUnit DECIMAL(18,8),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "    IN pIsKitAllocation TINYINT,  \n" +
                "    IN pUOM INT,  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "	IN pCountApprovalHistoryData JSON  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDHistoryID INT;  \n" +
                "    DECLARE v_newSplitUID INT;  \n" +
                "    DECLARE v_maxKitList INT;  \n" +
                "    DECLARE v_consumedQtyDiff INT;  \n" +
                "    DECLARE v_kitID INT;  \n" +
                "    DECLARE v_kitAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_totalAllocatedUnits DECIMAL(18,8);  \n" +
                "  \n" +
                "    IF(pSplitUID IS NOT NULL) THEN  \n" +
                "			#Insert split umid into component_sid_stock table  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSidStk AS  \n" +
                "			SELECT id,uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus,  \n" +
                "						costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "						mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "						sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "						customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "						rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays  \n" +
                "			FROM component_sid_stock WHERE id = pUIDID;  \n" +
                "			INSERT INTO component_sid_stock  \n" +
                "			(  \n" +
                "					uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, stockInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID,  \n" +
                "					mfrDateCode, rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID,  \n" +
                "					pkgQty, orgQty, pkgUnit, orgPkgUnit, binID, packaging, fromBin, orgRecBin, fromWarehouse, fromDepartment,  \n" +
                "					orgRecWarehouse, orgRecDepartment, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    isDeleted, createdBy, createByRoleId, createdAt, updatedBy, updateByRoleId, updatedAt  \n" +
                "			)  \n" +
                "			SELECT 	pSplitUID, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, pInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "					rohsStatusID, woID, woNumber, id, uid, IFNULL(parentUIDId,id), IFNULL(parentUID,uid),  \n" +
                "					pSplitCount, pSplitCount, pSplitUnit, pSplitUnit, pToBinID, pPackaging, pFromBinID, pFromBinID,  \n" +
                "					pFromWHID, pFromParentWH, pFromWHID, pFromParentWH, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    0 , pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime()  \n" +
                "			FROM tempComponentSidStk;  \n" +
                "			SET v_newSplitUID = LAST_INSERT_ID();  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "			# have to update count/unit into parent umid after split  \n" +
                "			IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "				UPDATE 	component_sid_stock  \n" +
                "				SET 	pkgUnit = pPkgUnit,  \n" +
                "						pkgQty = pPkgCount,  \n" +
                "						isinStk = 1,  \n" +
                "						updatedBy = pUserID,  \n" +
                "						updateByRoleId = pUserRoleID,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = pUIDID;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			# If parent UMID is allocated to kit then remove allocation if remaining qty is less than allocated qty  \n" +
                "			IF(pIsKitAllocation = 1) THEN  \n" +
                "					#Insert current kit allocated id into table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "					#Insert other kit detail in temp table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "					CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "					SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "							rp.promiseShipDate,  \n" +
                "							fun_convertUOM(k.allocatedUOM, pUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "					FROM 	kit_allocation k  \n" +
                "					LEFT JOIN (  \n" +
                "						SELECT 	salesOrderDetID,  \n" +
                "							(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "							MIN(poDueDate) promiseShipDate  \n" +
                "							FROM 	vu_release_plan_detail  \n" +
                "							GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "					WHERE 	k.status = 'A'  \n" +
                "					AND		k.refuidid = pUIDID  \n" +
                "					ORDER BY rp.promiseShipDate DESC;  \n" +
                "  \n" +
                "					SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO v_totalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "					#Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "					IF(v_totalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						SET v_consumedQtyDiff = v_totalAllocatedUnits - pSplitUnit;  \n" +
                "						WHILE v_consumedQtyDiff > 0 DO  \n" +
                "							IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "								SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "								INTO 	v_kitID,	v_kitAllocatedUnit  \n" +
                "								FROM 	tempOtherSharedKit tk  \n" +
                "								WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "								IF(v_kitID IS NOT NULL) THEN  \n" +
                "									UPDATE tempOtherSharedKit tk  \n" +
                "									SET 	tk.status = 'D'  \n" +
                "									WHERE 	tk.id = v_kitID;  \n" +
                "  \n" +
                "									UPDATE 	kit_allocation k  \n" +
                "									SET 	k.status = 'D',  \n" +
                "										k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "										k.returnQty = pSplitCount,  \n" +
                "										k.returnUnit = pSplitUnit,  \n" +
                "										k.returnUOM = pUOM,  \n" +
                "										k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "										k.updatedBy = pUserID,  \n" +
                "										k.updateByRoleId = pUserRoleID,  \n" +
                "										k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "									WHERE 	k.id = v_kitID;  \n" +
                "  \n" +
                "									INSERT INTO tempKitID (tempKitId) VALUES (v_kitID);  \n" +
                "  \n" +
                "									SET v_consumedQtyDiff = v_consumedQtyDiff - v_kitAllocatedUnit;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END WHILE;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			# Manage deallocation approval history data  \n" +
                "			IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "				#Insert selected count approval records in temp table to return count approval Data  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM JSON_TABLE(  \n" +
                "						pCountApprovalHistoryData,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "							approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "							approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "							deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "							approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "							isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "					)  \n" +
                "				) AS countApproval;  \n" +
                "				SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "						INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "				FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            # Insert log in UMID history page  for parent umid  \n" +
                "			INSERT INTO component_sid_stock_history  \n" +
                "				(  \n" +
                "					transType, 			actionPerformed, 	refUIDId, 			uid,  \n" +
                "					splitUIDId,			splitUID,			fromUIDId, 			fromUID,  \n" +
                "					parentUIDId, 		parentUID,  		refcompid, 			binID,  \n" +
                "					warehouseID, 		deptWHID, 			currentQty,		 	currentUnit,  \n" +
                "					splitQty,		 	splitUnit,			uom,  \n" +
                "					isDeleted,			createdBy, 			createdAt, 		  	createByRoleId,  \n" +
                "					updatedBy,			updatedAt,		 	updateByRoleId,		approvedDate,  \n" +
                "					approvalReason,	  	approvedBy,			deallocatedKitDesc, 	approvedByRoleId,  \n" +
                "					isApproved,			orgQty,				orgUnit  \n" +
                "				)  \n" +
                "			SELECT  \n" +
                "					'Split UMID',		'Split UMID',		pUIDID,		css.uid,		v_newSplitUID, 		pSplitUID,  \n" +
                "					css.fromUIDId, 		css.fromUID,		css.parentUIDId, 		css.parentUID, 			css.refcompid,  \n" +
                "					css.binID,			b.warehouseID,		w.parentWHID deptWHID,			pPkgCount,			pPkgUnit,  \n" +
                "					pSplitCount,		pSplitUnit,	  		css.uom,		  		0,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),      		pUserRoleID,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),	   pUserRoleID,			v_approvedDate,  \n" +
                "					v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,  \n" +
                "					v_isApproved,       css.orgQty,		css.orgPkgUnit  \n" +
                "			FROM  	component_sid_stock   css  \n" +
                "			JOIN 	binmst b ON css.binID = b.id  \n" +
                "			JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "			WHERE   css.isdeleted = 0  \n" +
                "			AND 	css.id = pUIDID;  \n" +
                "  \n" +
                "            IF(pIsKitAllocation = 1) THEN  \n" +
                "				/* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "				SET v_newUIDHistoryID = LAST_INSERT_ID();  \n" +
                "				UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDHistoryID WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "			END IF;  \n" +
                "    END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "    SELECT v_newSplitUID AS id, pSplitUID AS uid;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5110,'2.00','V1','User Story #35563 Improvement changes & Bug #35834 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5110:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP function IF EXISTS `fun_getPackingSlipDetailStatusByKey`;  \n" +
                "CREATE FUNCTION `fun_getPackingSlipDetailStatusByKey`(  \n" +
                "	pKey VARCHAR(2)  \n" +
                ") RETURNS varchar(100) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_status VARCHAR(100);  \n" +
                "	IF pKey='P' THEN  \n" +
                "		SET v_status='Pending';  \n" +
                "	ELSEIF pKey='A' THEN  \n" +
                "		SET v_status='Accepted';  \n" +
                "	ELSEIF pKey='R' THEN  \n" +
                "		SET v_status='Rejected';  \n" +
                "	ELSEIF pKey='AD' THEN  \n" +
                "		SET v_status='Accept With Deviation';  \n" +
                "	ELSE  \n" +
                "		SET v_status=NULL;  \n" +
                "	END IF;  \n" +
                "	RETURN v_status;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL)THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL )THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY BinID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL)THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL)THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN LIKE \"%', pScanMPNPID ,'%\" OR pidCode LIKE \"%', pScanMPNPID ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN = \"', pScanMPNPID ,'\" OR pidCode = \"', pScanMPNPID ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                supplierCodeName,					packagingType,  		packingSlipDate,   		packingSlipNumber,  supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						fun_getPackagingNameByID(vucp.packagingID) packagingType,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5111,'2.00','V1','User Story #35332 Improvement changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5111:
                allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Special Note',  \n" +
                "			CAST(OLD.specialNote AS CHAR),	CAST(NEW.specialNote AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
                "			CAST(OLD.updatedAtApi AS CHAR),	CAST(NEW.updatedAtApi AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
                "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Lock',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Price',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,			'component',		'Auto Verification(Assembly Parts)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchasing Comment',  \n" +
                "			CAST(OLD.purchasingComment AS CHAR),	CAST(NEW.purchasingComment AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Detailed Description',  \n" +
                "			CAST(OLD.detailDescription AS CHAR),	CAST(NEW.detailDescription AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		set pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			set pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        set pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			set pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId)  \n" +
                "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
                "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5112,'2.00','V1',' Bug 35909: Label different into history tab and Internal Ref# value not display into History - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5112:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "						'No'  \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "						'Yes'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `isHotJobValue`,  \n" +
                "            `vuss`.`isHotJob`,  \n" +
                "			`vuss`.`Sales Order ID` AS id,  \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "			`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "			`vuss`.frequency as frequencyName,  \n" +
                "			case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "			 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "			`vuss`.`Po Number` AS poNumber,  \n" +
                "			`vuss`.`Po Date` AS poDate,  \n" +
                "			`vuss`.`Customer ID` AS customerID,  \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "			`vuss`.`Sales Order Status` AS `status`,  \n" +
                "			`vuss`.`Revision` AS revision,  \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "			`vuss`.`Terms ID` AS termsID,  \n" +
                "			`vuss`.`So Date` AS soDate,  \n" +
                "			`vuss`.`Company Name` AS companyName,  \n" +
                "			`vuss`.`internalPO` AS internalPO,  \n" +
                "			`vuss`.`mfgCode` AS mfgCode,  \n" +
                "			`vuss`.`Full Name` AS fullName,  \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "			`vuss`.`PO Qty` AS qty,  \n" +
                "			ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "			ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "			`vuss`.`mrpQty` AS mrpQty,  \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "			`vuss`.`kitQty` AS kitQty, \",  \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "			`vuss`.`shippingQty` AS shippingQty,  \n" +
                "			`vuss`.`remark` AS remark,  \n" +
                "			`vuss`.`Assy ID` AS PIDCode,  \n" +
                "			`vuss`.`Assy Name` AS mfgPN,  \n" +
                "			`vuss`.`NickName` AS nickName,  \n" +
                "			`vuss`.`liveVersion` AS liveVersion,  \n" +
                "			`vuss`.`partDescription` AS partDescription,  \n" +
                "			`vuss`.`cancleReason` AS cancleReason,  \n" +
                "			`vuss`.`Status` AS completedStatus,  \n" +
                "			`vuss`.`modifyDate` AS modifyDate,  \n" +
                "			`vuss`.`createdDate` AS createdDate,  \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "			vuss.isBlanketPO,  \n" +
                "			vuss.blanketPOText,  \n" +
                "			vuss.poRevision,  \n" +
                "			vuss.partType,  \n" +
                "			vuss.isCancle,  \n" +
                "			vuss.mfgcodeID,  \n" +
                "			vuss.manufacturerName,  \n" +
                "			`vuss`.`PartID` AS partID,  \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "			`vuss`.`kitNumber` AS kitNumber,  \n" +
                "			`vuss`.`serialNumber` AS serialNumber,  \n" +
                "			`vuss`.partCategory,  \n" +
                "			vuss.lineID,  \n" +
                "			vuss.internalCommentSo,  \n" +
                "			vuss.internalComment,  \n" +
                "			ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "			vuss.Status as salesOrderDetStatusConvertedValues,  \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "			 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "			(  \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "						'Draft'  \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "						'Published'  \n" +
                "					ELSE  \n" +
                "						''  \n" +
                "				END  \n" +
                "			) AS `statusConvertedValue`,  \n" +
                "			hutkit.refType as refTypeKA,  \n" +
                "			hutkit.status as haltStatusKA,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	hutkit.status = 'H' THEN  \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "					ELSE 	''  \n" +
                "				END  \n" +
                "			) AS reasonKA,  \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "						'Unplanned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "						'Partially Planned'  \n" +
                "					WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "						'Fully Planned'  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			) as kitPlanStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	ka.kitReturnStatus is null then  \n" +
                "						'N/A'  \n" +
                "					ELSE  \n" +
                "						ka.kitReturnStatus  \n" +
                "				END  \n" +
                "			) as kitReturnStatus,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN ka.kitReleaseStatus is null then  \n" +
                "						'Not Released'  \n" +
                "					else  \n" +
                "						ka.kitReleaseStatus  \n" +
                "				END  \n" +
                "			) as kitReleaseStatus,  \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "			p.nextReleaseDate,  \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,  \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "			p.releasedPlanCount totalkitRelease,  \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "            IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "            IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "			vuss.releasedWorkorder,  \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "	LEFT JOIN  	(  \n" +
                "				SELECT  salesOrderDetID,  \n" +
                "					refAssyId,  \n" +
                "					count(1) totalPlan,  \n" +
                "                    SUM(poQty) totalPOQty,  \n" +
                "                    SUM(kitReleaseQty) totalKitQty,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "				FROM 	salesorder_plan_detailsmst  \n" +
                "				WHERE 	isDeleted=0  \n" +
                "						AND subAssyID is null  \n" +
                "				GROUP BY salesOrderDetID, refAssyId  \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "	LEFT JOIN 	(  \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "					`k`.`assyID` AS `assyID`,  \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "					`k`.`shortageLine` AS `shortageLine`,  \n" +
                "					allocPermainAssy allocPerComponent,  \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "					FROM (  \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "							mainAssy AS `assyID`,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "							sum( k.shortageline) shortageline,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "					      FROM (  \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) `k`  \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "					) `k`  \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5113,'2.00','V1','Bug 35901: When user apply Rush Job filter than it should show only Rush job kits instead on non-Rush job - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5113:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveReportList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReportList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsDynamicReport TINYINT,  \n" +
                "    IN pIsPublishReport TINYINT,  \n" +
                "	IN pIsTemplateReport TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "  \n" +
                "	SET @SQLStatement1=\"  \";  \n" +
                "	IF pIsDynamicReport = TRUE THEN  \n" +
                "		SET @SQLStatement1= \" and reportGenerationType != 3 and reportGenerationType != 1 \";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPublishReport = TRUE THEN  \n" +
                "		SET @SQLStatement1= \" and reportGenerationType != 3  and status = 'P' \";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsTemplateReport = TRUE THEN  \n" +
                "		SET @SQLStatement1= \" and reportGenerationType = '3' \";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT r.*,  \n" +
                "			fun_getUserNameByID(r.updatedBy) updatedbyvalue,  \n" +
                "			fun_getUserNameByID(r.createdBy) createdbyvalue,  \n" +
                "			fun_getRoleByID(r.createByRoleId) createdbyRolevalue,  \n" +
                "			fun_getRoleByID(r.updateByRoleId) updatedbyRolevalue,  \n" +
                "			fun_getReportCategoryNameByCategoryID(r.reportCategoryId) category,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtvalue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtvalue,  \n" +
                "		(CASE WHEN reportViewType THEN 'Detail' ELSE 'Summary' END) reportTypeConvertedvalue,   -- changecolumnnamr  \n" +
                "        e.entityName,  \n" +
                "		(CASE WHEN (r.status = 'D') THEN 'Draft' WHEN (r.status = 'P') THEN 'Published' ELSE '' END) AS statusConvertedValue,  \n" +
                "        (CASE WHEN (r.isEndUserReport = '1') THEN 'No' ELSE 'Yes' END) AS systemGenerated,  \n" +
                "		(CASE WHEN (r.isEndUserReport = '1') THEN '0' ELSE '1' END) AS isSystemGenerated,  \n" +
                "        fun_getReportNameByReportID(r.refReportId) cloneFrom,  \n" +
                "        TIMESTAMPDIFF(SECOND, r.startDesigningDate,'\",@utcDatetime,\"') startActivityDate,  \n" +
                "        fun_getUserNameByID(r.editingBy) activityStartBy  \n" +
                "		FROM `reportmaster`  r  \n" +
                "        left join entity e on e.entityId = r.entityId  \n" +
                "        left join report_change_logs rc on r.id = rc.reportId and endActivityDate is null  \n" +
                "		WHERE r.deletedAt IS NULL and r.entityId is null \", @SQLStatement1);  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY reportName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5114,'2.00','V1',' Enhancement point of report flow based on demo[07/22/2021]. -Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5114:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			salesOrderDetailID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "   SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
            "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
            "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
            "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
            "				 END IF;  \n" +
            "  \n" +
            "				-- if suffix is found than remove those from actual string match  \n" +
            "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
            "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
            "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
            "				 END IF;  \n" +
            "				-- insert all values after seprator split  \n" +
            "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
            "				PREPARE stmt1 FROM @SQL;  \n" +
            "				EXECUTE stmt1;  \n" +
            "				DEALLOCATE PREPARE stmt1;  \n" +
            "				IF (pCategory = 'P') THEN  \n" +
            "					-- create dynamic query to insert in packing slip  \n" +
            "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
            "				ELSE  \n" +
            "					-- create dynamic query to insert in recieving material  \n" +
            "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
            "				END IF;  \n" +
            "  \n" +
            "  \n" +
            "				-- loop item till all records found in string match of barcode template  \n" +
            "				barcodeMatch_loop:LOOP  \n" +
            "					-- get all five selected values  \n" +
            "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
            "					-- exit loop if no record found for barcode match  \n" +
            "					IF exit_loop THEN  \n" +
            "						CLOSE barcodeMatch_cursor;  \n" +
            "						LEAVE barcodeMatch_loop;  \n" +
            "					END IF;  \n" +
            "					-- dynamic query to get dellimeter string with values from string  \n" +
            "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
            "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
            "					EXECUTE stmtdelimiter;  \n" +
            "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
            "  \n" +
            "					-- get delimiter values from string  \n" +
            "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
            "					-- check for field type is static or dynamic  \n" +
            "					-- if static field than check for mfg code and mfg part number  \n" +
            "					IF v_fieldType = 0  THEN  \n" +
            "						-- component_sid_stock  \n" +
            "						-- get static field name from barcode table delimiter data element id  \n" +
            "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
            "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
            "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
            "							SET MFG_Part_No = delimiter_value_data;  \n" +
            "							/* If component id is not found */  \n" +
            "							IF(pComponentID = 0)  \n" +
            "                            THEN  \n" +
            "								/* Get component data */  \n" +
            "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
            "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
            "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
            "								(  \n" +
            "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
            "									FROM 	component c  \n" +
            "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
            "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "									UNION  \n" +
            "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
            "									FROM 		component_otherpn co  \n" +
            "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
            "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
            "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
            "								) a  \n" +
            "								UNION  \n" +
            "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
            "								(  \n" +
            "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
            "									FROM 	component c  \n" +
            "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
            "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
            "									UNION  \n" +
            "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
            "									FROM 		component_otherpn co  \n" +
            "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
            "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
            "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
            "								) a  \n" +
            "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
            "  \n" +
            "								IF (pSupplierID IS NOT NULL) THEN  \n" +
            "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  \n" +
            "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
            "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
            "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
            "								   ELSE  \n" +
            "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
            "								END IF;  \n" +
            "  \n" +
            "								IF (v_componentCount > 1) THEN  \n" +
            "									/* If component is more that one then remove supplier from list */  \n" +
            "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
            "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
            "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
            "  \n" +
            "									/* After remove supplier if get only one record then  */  \n" +
            "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
            "									IF (v_componentCount < 2) THEN  \n" +
            "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
            "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
            "										FROM 	temp_component_supplier_detail;  \n" +
            "									END IF;  \n" +
            "								ELSE  \n" +
            "									IF (pSupplierID IS NULL) THEN  \n" +
            "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
            "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
            "										FROM 	temp_component_detail;  \n" +
            "									ELSE  \n" +
            "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
            "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
            "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
            "											SET v_componentCount=0;  \n" +
            "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
            "										ELSE  \n" +
            "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
            "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
            "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
            "										END IF;  \n" +
            "									END IF;  \n" +
            "								END IF;  \n" +
            "							ELSE  \n" +
            "								/* If component id is found */  \n" +
            "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
            "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
            "								FROM 	component  \n" +
            "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* Remove from cursor if found more that one component */  \n" +
            "							IF v_componentCount > 1 THEN  \n" +
            "								CLOSE barcodeMatch_cursor;  \n" +
            "								LEAVE barcodeMatch_loop;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* If inventory is opening inventory and type is assembly */  \n" +
            "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
            "								CLOSE barcodeMatch_cursor;  \n" +
            "								LEAVE barcodeMatch_loop;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* If bad part found */  \n" +
            "							IF (v_isGoodPart != 1) THEN  \n" +
            "								CLOSE barcodeMatch_cursor;  \n" +
            "								LEAVE barcodeMatch_loop;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* Check all type of restriction */  \n" +
            "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
            "								CLOSE barcodeMatch_cursor;  \n" +
            "								LEAVE barcodeMatch_loop;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* Check all type of restriction with packaging */  \n" +
            "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
            "								CLOSE barcodeMatch_cursor;  \n" +
            "								LEAVE barcodeMatch_loop;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* Barcode MFR and Part MFR mismatch */  \n" +
            "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
            "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
            "								CLOSE barcodeMatch_cursor;  \n" +
            "								LEAVE barcodeMatch_loop;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* Found DIST then set id of MFR of that DIST */  \n" +
            "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
            "							IF (@MFGType = 'DIST') THEN  \n" +
            "								SET v_SupplierID = v_componentId;  \n" +
            "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
            "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* Check kit allocation */  \n" +
            "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
            "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
            "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
            "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
            "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
            "								FROM 	(  \n" +
            "										SELECT 	*  \n" +
            "										FROM  \n" +
            "											(  \n" +
            "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
            "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
            "												FROM 		component_packagingalias cp  \n" +
            "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
            "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
            "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
            "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
            "												UNION  \n" +
            "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
            "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
            "												FROM 		rfq_lineitems_alternatepart rla  \n" +
            "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
            "												UNION  \n" +
            "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
            "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
            "												FROM 		rfq_lineitems_alternatepart rla  \n" +
            "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
            "												GROUP BY 	custPNID, rla.partID  \n" +
            "											) b  \n" +
            "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
            "										GROUP BY b.lineID, b.assyId  \n" +
            "									) a;  \n" +
            "  \n" +
            "								/* BOM line not found  */  \n" +
            "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
            "									CLOSE barcodeMatch_cursor;  \n" +
            "									LEAVE barcodeMatch_loop;  \n" +
            "								/* Found More then one BOM line */  \n" +
            "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
            "									CLOSE barcodeMatch_cursor;  \n" +
            "									LEAVE barcodeMatch_loop;  \n" +
            "								ELSE  \n" +
            "									/* Restrict use bom */  \n" +
            "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
            "										CLOSE barcodeMatch_cursor;  \n" +
            "										LEAVE barcodeMatch_loop;  \n" +
            "									END IF;  \n" +
            "  \n" +
            "									/* BOM line contain any error */  \n" +
            "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
            "									IF (v_isBOMLineClean = 0) THEN  \n" +
            "										CLOSE barcodeMatch_cursor;  \n" +
            "										LEAVE barcodeMatch_loop;  \n" +
            "									END IF;  \n" +
            "								END IF;  \n" +
            "  \n" +
            "								/* Part not install, purchase and not dnp  */  \n" +
            "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
            "									CLOSE barcodeMatch_cursor;  \n" +
            "									LEAVE barcodeMatch_loop;  \n" +
            "								END IF;  \n" +
            "							END IF;  \n" +
            "  \n" +
            "							/* Set dynamic query for component */  \n" +
            "							IF  v_componentCount = 1 THEN  \n" +
            "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
            "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
            "								ELSE  \n" +
            "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
            "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
            "								END IF;  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Not in use */  \n" +
            "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
            "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for pkgQty */  \n" +
            "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for lotcode */  \n" +
            "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
            "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
            "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
            "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
            "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
            "							ELSE  \n" +
            "								SET exit_loop = FALSE;  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for binid */  \n" +
            "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for packaging */  \n" +
            "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for nickname */  \n" +
            "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for po number */  \n" +
            "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for so number */  \n" +
            "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for packing slip number */  \n" +
            "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Set dynamic query for invoice number */  \n" +
            "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
            "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
            "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
            "							ELSE  \n" +
            "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
            "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "					ELSE  \n" +
            "						/* Set dynamic query for other than system generated */  \n" +
            "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
            "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
            "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
            "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
            "					END IF;  \n" +
            "				END LOOP barcodeMatch_loop;  \n" +
            "				-- check if mfg and component both found than  \n" +
            "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
            "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
            "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
            "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
            "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
            "				ELSEIF (v_componentCount > 1) THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
            "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
            "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
            "					IF (v_isGoodPart = 2) THEN  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
            "					ELSE  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
            "					END IF;  \n" +
            "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
            "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
            "					IF (v_isCPNFlag = 1) THEN  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
            "					ELSE  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
            "					END IF;  \n" +
            "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
            "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
            "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
            "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
            "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
            "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
            "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
            "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
            "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
            "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
            "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
            "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
            "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
            "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
            "					IF @Mfgmatched = 0  THEN  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
            "					END IF;  \n" +
            "				ELSE  \n" +
            "					IF @mfgCount = 0 THEN  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
            "					END IF;  \n" +
            "  \n" +
            "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
            "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
            "					END IF;  \n" +
            "				END IF;  \n" +
            "  \n" +
            "				IF (pCPN = 1) THEN  \n" +
            "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
            "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
            "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
            "					END IF;  \n" +
            "  \n" +
            "					IF (@isCPNPart != 1) THEN  \n" +
            "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
            "					END IF;  \n" +
            "				END IF;  \n" +
            "  \n" +
            "				IF (pIsFromUID = 1) THEN  \n" +
            "					/* If not fire any validation */  \n" +
            "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
            "  \n" +
            "						-- must call statements in sequence  \n" +
            "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
            "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
            "						PREPARE stmt1 FROM @SQL1;  \n" +
            "						EXECUTE stmt1;  \n" +
            "  \n" +
            "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');  \n" +
            "						IF (pnickName IS NOT NULL) THEN  \n" +
            "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);  \n" +
            "  \n" +
            "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
            "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						IF (pCustomerID IS NOT NULL) THEN  \n" +
            "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						IF (pAssyID IS NOT NULL) THEN  \n" +
            "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						IF (pSalesOrderDetailID IS NOT NULL) THEN  \n" +
            "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
            "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
            "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						SET @sql2 = UpdateValue;  \n" +
            "						PREPARE stmt2 FROM @SQL2;  \n" +
            "						EXECUTE stmt2;  \n" +
            "						DEALLOCATE PREPARE stmt2;  \n" +
            "  \n" +
            "						/* Add success result in save error table */  \n" +
            "						IF (pkitAssemblyID IS NULL) THEN  \n" +
            "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
            "						ELSE  \n" +
            "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* Add data in table of delimeter table */  \n" +
            "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
            "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
            "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						/* select detail of error table */  \n" +
            "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
            "  \n" +
            "						/* select detail in temp table of component sid stock table  */  \n" +
            "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
            "  \n" +
            "						/* Select data of component */  \n" +
            "						SELECT 	c.*,  \n" +
            "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
            "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
            "							csup.packageQty AS supplierPkgQty,  \n" +
            "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
            "							csup.mfgcodeID AS supplierMfgId,  \n" +
            "							mcm.mfgcode AS supplierMFGCode,  \n" +
            "							mcm.mfgName AS supplierMFGName,  \n" +
            "							csup.mfgPN AS supplierMFGPN,  \n" +
            "							csup.packagingID AS supplierPackagingId,  \n" +
            "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,  \n" +
            "							csup.minimum AS supplierMinimum,  \n" +
            "							ccpn.id AS cpnID,  \n" +
            "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
            "							rfqroh.rohsIcon AS rohsIcon,  \n" +
            "							rfqroh.name AS rohsName,  \n" +
            "							rfqmou.name AS mountingTypeName,  \n" +
            "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
            "							um.unitName AS uomName,  \n" +
            "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
            "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
            "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
            "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
            "						FROM component AS c  \n" +
            "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
            "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
            "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
            "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
            "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
            "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
            "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
            "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
            "						WHERE c.id = v_componentId;  \n" +
            "  \n" +
            "						/* select data of data element of component sid stock */  \n" +
            "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
            "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
            "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
            "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
            "  \n" +
            "						/* select data of cpn */  \n" +
            "						SELECT 	id, refComponentID, refCPNPartID  \n" +
            "						FROM 	component_cust_alias_rev_pn  \n" +
            "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
            "  \n" +
            "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
            "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
            "						) AND isDeleted = 0;  \n" +
            "  \n" +
            "						/* select detail of bom */  \n" +
            "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
            "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
            "						FROM 		rfq_lineitems_alternatepart rla  \n" +
            "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
            "						WHERE 		rla.isDeleted = 0  \n" +
            "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
            "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
            "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
            "  \n" +
            "					ELSE  \n" +
            "						/* Found any error then select error  */  \n" +
            "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
            "					END IF;  \n" +
            "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
            "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
            "				ELSE  \n" +
            "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
            "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
            "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
            "						PREPARE stmt1 FROM @SQL1;  \n" +
            "						EXECUTE stmt1;  \n" +
            "						DEALLOCATE PREPARE stmt1;  \n" +
            "					END IF;  \n" +
            "  \n" +
            "					/* Add success data in temp error table */  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
            "  \n" +
            "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
            "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
            "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
            "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
            "  \n" +
            "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
            "					IF (pCategory = 'M') THEN  \n" +
            "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
            "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
            "						SELECT 	c.*,  \n" +
            "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
            "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
            "							csup.packageQty AS supplierPkgQty,  \n" +
            "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
            "							csup.mfgcodeID AS supplierMfgId,  \n" +
            "							mcm.mfgcode AS supplierMFGCode,  \n" +
            "							mcm.mfgName AS supplierMFGName,  \n" +
            "							csup.packagingID AS supplierPackagingId,  \n" +
            "							csup.mfgPN AS supplierMFGPN,  \n" +
            "							csup.id AS supplierMFGPNID,  \n" +
            "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
            "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
            "							ccpn.id AS cpnID,  \n" +
            "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
            "							rfqroh.rohsIcon AS rohsIcon,  \n" +
            "							rfqroh.name AS rohsName,  \n" +
            "							rfqmou.name AS mountingTypeName,  \n" +
            "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
            "							um.unitName AS uomName,  \n" +
            "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
            "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
            "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
            "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
            "						FROM component AS c  \n" +
            "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
            "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
            "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
            "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
            "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
            "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
            "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
            "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
            "						WHERE c.id = v_componentId;  \n" +
            "					END IF;  \n" +
            "				END IF;  \n" +
            "			ELSE  \n" +
            "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
            "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
            "  \n" +
            "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
            "				SELECT 1;  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
            "				SELECT 1;  \n" +
            "			END IF;  \n" +
            "  \n" +
            "		END block2;  \n" +
            "	ELSE  \n" +
            "		IF (pIsFromUID = 1) THEN  \n" +
            "			SELECT * FROM tempUIDSuccessDetail;  \n" +
            "		ELSE  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
            "			SELECT 1;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 04-08-2021  ********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5115,'2.00','V1','Bug 35925: When user scans part# with having limited life and no added data in shelf life days then it should ask user to add data first - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5115:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdatePartInternalVersion`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePartInternalVersion`(  \n" +
                "    IN pPartId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE subAssyType INT;  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "  \n" +
                "	SET  subAssyType = 3;  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	UPDATE component  \n" +
                "	SET liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "    liveVersion = CONCAT(pCompanyName,'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) AS CHAR))  \n" +
                "	WHERE id IN(  \n" +
                "	WITH RECURSIVE cte AS  \n" +
                "	(  \n" +
                "	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM component c  \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
                "  \n" +
                "	  UNION ALL  \n" +
                "	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child  \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
                "	)  \n" +
                "	SELECT DISTINCT partId FROM cte);  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5116,'2.00','V1','Bug 35290: BOM : Internal Version Mismatched, Assembly BOM Change Version HISTORY : Change version history is not missing in between for one of assy. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;      
        case 5116:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-08-2021 *********************************** */
                "DROP function IF EXISTS `fun_getGenericCategoryCodeNameByID`;  \n" +
                "CREATE FUNCTION `fun_getGenericCategoryCodeNameByID`(  \n" +
                "	pGenericCategoryID INT  \n" +
                ") RETURNS varchar(160) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_GenericCategoryCodeName VARCHAR(160);  \n" +
                "	SELECT 	(  \n" +
                "			CASE  \n" +
                "				WHEN gencCategoryCode IS NOT NULL THEN  \n" +
                "					CONCAT('(', gencCategoryCode, ') ', gencCategoryName)  \n" +
                "				ELSE  \n" +
                "					gencCategoryName  \n" +
                "			END  \n" +
                "		) gencCategoryNameCode  \n" +
                "	INTO 	v_GenericCategoryCodeName  \n" +
                "	FROM 	genericcategory  \n" +
                "	WHERE  	gencCategoryID = pGenericCategoryID  \n" +
                "			AND isDeleted = 0;  \n" +
                "	RETURN v_GenericCategoryCodeName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5117,'2.00','V1',' Bug 35900: Master Page related issues - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5117:
            allDbChangesArray.push(
            /* **************************** New Script -> 05-08-2021 *********************************** */
                "drop function if exists fun_getUMIDActiveFeederCount;  \n" +
                "CREATE FUNCTION `fun_getUMIDActiveFeederCount`(  \n" +
                "	pUMIDId INT  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn INT;  \n" +
                "  \n" +
                "	select count(1)  \n" +
                "    INTO  vReturn  \n" +
                "	from workorder_trans_umid_details wtud  \n" +
                "	join workorder_trans_empinout wte on wte.woTransID = wtud.woTransID and wte.isDeleted = 0  \n" +
                "	where wtud.isVerified = 0  \n" +
                "	and wtud.transactionType ='F'  \n" +
                "	-- and wte.checkoutTime is null  \n" +
                "	and wtud.isDeleted = 0  \n" +
                "    AND wtud.reelStatus  = 'P'  \n" +
                "    and wtud.refsidid = pUMIDId;  \n" +
                "  \n" +
                "	Return vReturn;  \n" +
                "END;  \n" +	
            /* **************************** Add Script Version -> 05-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5118,'2.00','V1',' fun_getUMIDActiveFeederCount - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        break;
        case 5118:
        allDbChangesArray.push(
        /* **************************** New Script -> 05-08-2021 *********************************** */
            "drop procedure if exists sproc_getUMIDActiveFeederList;  \n" +
            "CREATE PROCEDURE `sproc_getUMIDActiveFeederList`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "    IN pUMIDId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = \"ORDER BY woTransID DESC\";  \n" +
            "	END IF;  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = \"''\") THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS `temp_sproc_getUMIDActiveFeederList`;  \n" +
            "	CREATE TEMPORARY TABLE temp_sproc_getUMIDActiveFeederList AS  \n" +
            "	SELECT css.uid,  \n" +
            "    CONCAT(wo.woNumber,'-',wo.woVersion) woNumber,  \n" +
            "    wo.partID,  \n" +
            "    co.mfgPN,  \n" +
            "    co.PIDCode,  \n" +
            "    ro.rohsIcon,  \n" +
            "    co.RoHSStatusID,  \n" +
            "    ro.`name` AS rohsName,  \n" +
            "	woop.opNumber,  \n" +
            "    woop.opName,  \n" +
            "	CONCAT(\"(\",woop.opNumber,\") \", woop.opName) opFullName,  \n" +
            "	woop.woID,  \n" +
            "	woop.woOPID,  \n" +
            "	woempinout.woTransID,  \n" +
            "    woempinout.employeeID,  \n" +
            "    wtrans.isSetup,  \n" +
            "    (CASE WHEN wtrans.isSetup = 1 THEN 'Setup Activity' ELSE 'Production Activity' END ) displayActivityType,  \n" +
            "    (SELECT CONCAT('(',e.initialName,')',e.firstName,' ', e.lastName) FROM employees e WHERE e.id =  woempinout.employeeID AND IFNULL(e.isDeleted,0) = 0) employeeName          	            ,  \n" +
            "    eq.assetName equipmentName,  \n" +
            "    woop.opVersion  \n" +
            "	FROM workorder_trans_umid_details wtud  \n" +
            "    LEFT JOIN workorder_trans_empinout woempinout ON wtud.woTransID = woempinout.woTransID and woempinout.isDeleted = 0  \n" +
            "    JOIN workorder wo ON wo.woID = woempinout.woID AND IFNULL(wo.isDeleted,0) = 0  \n" +
            "	LEFT JOIN workorder_operation woop  ON woop.woopid = woempinout.woopid AND woop.deletedAt IS NULL  \n" +
            "    LEFT JOIN workorder_operation_equipment_feeder_details woefd on woefd.id = wtud.eqpFeederID and woefd.isDeleted = 0  \n" +
            "    JOIN workorder_trans wtrans ON wtrans.woTransID = woempinout.woTransID AND IFNULL(wtrans.isDeleted ,0) = 0  \n" +
            "    LEFT JOIN `component` co ON co.id = wo.partID AND IFNULL(co.isDeleted,0) = 0  \n" +
            "    LEFT JOIN rfq_rohsmst ro  ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND `ro`.`deletedAt` IS NULL  \n" +
            "    LEFT JOIN equipment eq ON eq.eqpID = woefd.eqpID AND eq.isDeleted = 0  \n" +
            "    LEFT JOIN component_sid_stock css ON css.id = wtud.refsidid and css.isDeleted = 0  \n" +
            "	WHERE woempinout.deletedAt IS NULL  \n" +
            "    AND wtud.refsidid = pUMIDId  \n" +
            "    AND wtud.isVerified = 0  \n" +
            "    AND wtud.transactionType = 'F'  \n" +
            "    AND wtud.reelStatus  = 'P'    ;  \n" +
            "  \n" +
            "    set @sqlStatement1 = concat('select count(1) over(partition by c.uid) as totalCount, c.*  \n" +
            "								from temp_sproc_getUMIDActiveFeederList c where ' , pWhereClause , ' ' ,  pOrderBy , rowNumWhere);  \n" +
            "-- select @sqlStatement1;  \n" +
            "    PREPARE query1 FROM @sqlStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 05-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5119,'2.00','V1','sproc_getUMIDActiveFeederList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5119:
        allDbChangesArray.push(
        /* **************************** New Script -> 05-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_ValidateScanChangeReel;  \n" +
            "CREATE PROCEDURE `Sproc_ValidateScanChangeReel`(  \n" +
            "	IN pOldUMID VARCHAR(15),  \n" +
            "	IN pfeederLocation VARCHAR(1000),  \n" +
            "	IN pNewUMID VARCHAR(15),  \n" +
            "	IN ppartID INT,  \n" +
            "	IN pwoOpEqpID INT,  \n" +
            "	IN pwoOpID INT,  \n" +
            "	IN pwoTransID INT,  \n" +
            "	IN pemployeeId INT,  \n" +
            "	IN pcheckKitAllocation INT,  \n" +
            "	IN pverificationType VARCHAR(255),  \n" +
            "	IN pisVerify INT,  \n" +
            "	IN ptransactionType VARCHAR(1),  \n" +
            "	IN preelChangeType VARCHAR(100),  \n" +
            "	IN ptoBinID INT,  \n" +
            "	IN pisConfirmed INT,  \n" +
            "	IN pwoID INT,  \n" +
            "	IN pCreatedBy VARCHAR(255),  \n" +
            "    IN pApprovedBy INT,  \n" +
            "    IN pApprovedReason VARCHAR(500)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
            "	DECLARE temp_umid_comp_id INT;  \n" +
            "	DECLARE temp_comp_uom INT;  \n" +
            "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
            "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
            "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
            "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
            "	DECLARE temp_eqpFeederID INT;  \n" +
            "	DECLARE oldUMIDVerified INT DEFAULT 0;  \n" +
            "	DECLARE newUMIDVerified INT DEFAULT 0;  \n" +
            "	DECLARE valid_umid_transfer INT  DEFAULT 0;  \n" +
            "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);  \n" +
            "	DECLARE temp_last_inserted_umid_id INT ;  \n" +
            "	DECLARE temp_salesOrderDetID VARCHAR(100);  \n" +
            "  \n" +
            "	SET temp_umid_comp_id  = NULL;  \n" +
            "	SET temp_umid_pidcode  = NULL;  \n" +
            "	SET temp_umid_mfgPN  = NULL;  \n" +
            "	SET temp_all_mfg_id_lineID = NULL;  \n" +
            "	-- Step 1 - Validate Old UMID  \n" +
            "		-- Step 1.1 - check with zero out  \n" +
            "			-- empty bin and empty wh  \n" +
            "			-- update table with reelStatus \"R\"  \n" +
            "			-- add new umid with same feeder with reelStatus \"P\"  \n" +
            "			-- Step 2 - check with umid & Feeder validate  \n" +
            "		-- step 1.2 - finish job case  \n" +
            "			-- no new umid in this case.  \n" +
            "			-- update umid status \"In Transist\"  \n" +
            "			-- update table with reelStatus \"R\"  \n" +
            "		-- step 1.3 - transfer material case  \n" +
            "			-- get new bin and wh details based on new ui.  \n" +
            "			-- update umid status \"In Transist\"  \n" +
            "			-- update table with reelStatus \"R\"  \n" +
            "			-- add new umid with same feeder with reelStatus \"P\"  \n" +
            "			-- Step 2 - check with umid & feeder validate  \n" +
            "	-- Step 2 - check with umid validate  \n" +
            "	-- Stpe 3 -- check for feeder validation  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
            "	-- create temporary table for error  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
            "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
            "	(  \n" +
            "	     errorText VARCHAR(2000),  \n" +
            "	     isFeederError INT,  \n" +
            "	     isUMIDError INT,  \n" +
            "	     isConfirmation INT,  \n" +
            "	     isMessage INT,  \n" +
            "	     isInformation INT,  \n" +
            "	     stringText1 VARCHAR(1000),  \n" +
            "	     stringText2 VARCHAR(1000),  \n" +
            "	     stringText3 VARCHAR(1000)  \n" +
            "	);  \n" +
            "  \n" +
            "  \n" +
            "	-- IF(pOldUMID IS NOT NULL AND pfeederLocation IS NOT NULL AND pNewUMID IS NOT NULL) THEN  \n" +
            "	-- 		CALL Sproc_ValidateScanFeederFirst (pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID,pwoOpID,pwoTransID,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pCreatedBy);  \n" +
            "	-- ELSE  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_old_umid_details;  \n" +
            "			CREATE TEMPORARY TABLE temp_old_umid_details AS  \n" +
            "			SELECT c.id, c.PIDCode, c.mfgPN,  \n" +
            "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode,  \n" +
            "			c.restrictUsePermanently AS RestrictFromPart,  \n" +
            "			c.packagingGroupId,  \n" +
            "			c.rev AS rev,  \n" +
            "			c.imageURL AS imageURL,  \n" +
            "			c.mfgPNDescription AS mfgPNDescription,  \n" +
            "			c.roHSStatusID,  \n" +
            "			c.alertExpiryDays,  \n" +
            "			c.umidVerificationRequire,  \n" +
            "			c.uom,  \n" +
            "			c.isCPN,  \n" +
            "			c.isCustom,  \n" +
            "			rr.name rohsStatus,  \n" +
            "			rr.rohsIcon rohsIcon,  \n" +
            "			css.id AS refsidid,  \n" +
            "			css.binID AS binID,  \n" +
            "			css.pkgQty AS pkgQty,  \n" +
            "			css.uid,  \n" +
            "			fun_getUnitNameByID(c.uom) unitName,  \n" +
            "			css.isUMIDRestrict AS RestrictFromUMID,  \n" +
            "			css.expiryDate,  \n" +
            "			1 isActualComponent,  \n" +
            "			0 isPackagingAlias,  \n" +
            "			wtud.eqpFeederID,  \n" +
            "			(SELECT woefd.feederLocation FROM workorder_operation_equipment_feeder_details woefd WHERE wtud.eqpFeederID=woefd.id AND deletedAt IS NULL) feederLocation,  \n" +
            "			(SELECT woefd.isActive FROM workorder_operation_equipment_feeder_details woefd WHERE wtud.eqpFeederID=woefd.id AND deletedAt IS NULL) feederActiveStatus,  \n" +
            "			wtud.reelStatus,  \n" +
            "			(SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL AND id  \n" +
            "					IN (SELECT rfqLineItemID FROM workorder_operation_feeder_lineitem_details WHERE deletedAt IS NULL  \n" +
            "					AND eqpFeederID IN (wtud.eqpFeederID))  \n" +
            "				) AS refDesig,  \n" +
            "			(SELECT GROUP_CONCAT(IFNULL(wol.rfqLineItemID,'')) FROM workorder_operation_feeder_lineitem_details wol  \n" +
            "				WHERE eqpFeederID IN (wtud.eqpFeederID) AND wol.deletedAt IS NULL) AS rfqLineItemsID,  \n" +
            "             wtud.isVerified  \n" +
            "		FROM component c  \n" +
            "		LEFT JOIN workorder_trans_umid_details wtud  \n" +
            "			ON (wtud.mfgPNID = c.id AND wtud.deletedAt IS NULL)  \n" +
            "		-- AND wtud.isVerified=1  \n" +
            "		LEFT JOIN component_sid_stock css  \n" +
            "			ON (css.id = wtud.refsidid AND css.id = wtud.refsidid AND css.deletedAt IS NULL  )  \n" +
            "		LEFT JOIN rfq_rohsmst rr  \n" +
            "			ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)  \n" +
            "		WHERE css.uid = pOldUMID  \n" +
            "		AND wtud.reelStatus=\"P\"  \n" +
            "		AND wtud.transactionType=ptransactionType  \n" +
            "		AND wtud.woOPID=pwoOpID  \n" +
            "		AND c.deletedAt IS NULL;  \n" +
            " -- select '1';  \n" +
            "		IF((SELECT COUNT(1) FROM temp_old_umid_details) > 0) THEN  \n" +
            "			SELECT id, pidcode, uom, mfgPN, isCPN, eqpFeederID, rfqLineItemsID  \n" +
            "			INTO temp_umid_comp_id, temp_umid_pidcode, temp_comp_uom, temp_umid_mfgPN, temp_comp_is_cpn, temp_eqpFeederID, temp_rfqLineItemsID  \n" +
            "            FROM temp_old_umid_details;  \n" +
            "			SET oldUMIDVerified=1;  \n" +
            "             IF(pOldUMID IS NOT NULL AND (pfeederLocation IS NOT NULL OR pNewUMID IS NOT NULL)) THEN  \n" +
            "             -- select 'CALL Sproc_ValidateScanFeederFirst (',pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy,');';  \n" +
            "				-- CALL Sproc_ValidateScanFeederFirst (pfeederLocation,pNewUMID,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy);  \n" +
            "				CALL Sproc_ValidateScanUMIDFirst (pNewUMID, pfeederLocation,ppartID,pwoOpEqpID, pwoOpID, pwoTransID, pemployeeId,TRUE, pverificationType, 1, ptransactionType, 1, preelChangeType, ptoBinID, pOldUMID, pisConfirmed, pwoID, pCreatedBy, pApprovedBy, pApprovedReason);  \n" +
            "			END IF;  \n" +
            "			-- SET valid_umid_transfer = 1;  \n" +
            "		ELSE  \n" +
            "			-- INVALID_OLD_UMID  \n" +
            "			SET result = fun_checkAndInsertError('UMID017', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "		END IF;  \n" +
            "		IF(pOldUMID IS NOT NULL AND (pfeederLocation IS NULL AND pNewUMID IS NULL)) THEN  \n" +
            "			INSERT INTO `uid_verification_history`(  \n" +
            "				`scanString1`,		`scanString2`,  \n" +
            "				`string1PartID`,	`scanString1MFG`,  \n" +
            "				`scanString1MFGPNID`,	`string2PartID`,  \n" +
            "				`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
            "				`status`,  \n" +
            "				`isDeleted`,		`createdBy`,  \n" +
            "				`createdAt`,       	`woTransID`,  \n" +
            "				`woOpEqpID`, 		`verificationType`)  \n" +
            "			VALUES (  \n" +
            "				pOldUMID,						CASE WHEN (pNewUMID IS NULL) THEN '' ELSE pNewUMID END,  \n" +
            "				temp_umid_comp_id,  					fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),  \n" +
            "				temp_umid_mfgPN,					NULL,  \n" +
            "				NULL, 							NULL,  \n" +
            "				CASE WHEN (oldUMIDVerified = 1 OR newUMIDVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
            "				0,							IFNULL(pCreatedBy,''),  \n" +
            "				fun_DatetimetoUTCDateTime(),        			pwoTransID,  \n" +
            "				pwoOpEqpID,						pverificationType  \n" +
            "			);  \n" +
            "  \n" +
            "  \n" +
            "			#0. return history of umid transfer  \n" +
            "			IF(valid_umid_transfer = 0) THEN  \n" +
            "				SELECT id FROM kit_allocation WHERE 1=0;  \n" +
            "			END IF;  \n" +
            "			#1. return history of verification  \n" +
            "			SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
            "			#2. return error  \n" +
            "			SELECT * FROM temp_scan_error;  \n" +
            "			#3. return umid details  \n" +
            "			-- IF (uidVerified=1) THEN  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
            "			SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
            "			SELECT * FROM temp_umid_details;  \n" +
            "			-- END IF;  \n" +
            "  \n" +
            "			#5. return feeder details  \n" +
            "			-- IF (feederVerified=1) THEN  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
            "			SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
            "			SELECT * FROM temp_feeder_details;  \n" +
            "			-- END IF;  \n" +
            "  \n" +
            "			#6. return allocated UMID details  \n" +
            "			-- IF (pfeederLocation IS NULL and pNewUMID IS not NULL) THEN  \n" +
            "			-- 	SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
            "			-- 	WHERE wsd.deletedAt IS NULL AND wsd.woID IN (SELECT woop.woID FROM workorder_operation woop  \n" +
            "			-- 	WHERE woop.woOPID=pwoOpID AND woop.deletedAt IS NULL);  \n" +
            "  \n" +
            "			-- 	SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
            "			-- 	AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "			-- 	WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
            "			-- 	CALL Sproc_GetStockAllocateList (temp_salesOrderDetID,ppartID,temp_all_mfg_id_lineID,temp_comp_uom,\"AllocatedStock\");  \n" +
            "			-- ELSE  \n" +
            "			-- 	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
            "			-- 	WHERE 1=0;  \n" +
            "			-- END IF;  \n" +
            "			#6. return allocated UMID details  \n" +
            "			IF (pOldUMID IS NOT NULL AND oldUMIDVerified=1) THEN  \n" +
            "				-- select '1';  \n" +
            "				SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
            "				WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;  \n" +
            "  \n" +
            "				/*IF (temp_comp_is_cpn = 0) THEN  \n" +
            "					SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
            "					FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  and vuBOMDet.isDeleted = 0  \n" +
            "					AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "					WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
            "				ELSE  */  \n" +
            "					SELECT CASE WHEN vuBOMDet.custPNID IS NOT NULL THEN GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID)  \n" +
            "						ELSE  GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) END  \n" +
            "                    INTO temp_all_mfg_id_lineID  \n" +
            "					FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  and vuBOMDet.isDeleted = 0  \n" +
            "					AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "					WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
            "				-- END IF;  \n" +
            "				CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");  \n" +
            "			ELSE  \n" +
            "				SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
            "				WHERE 1=0;  \n" +
            "			END IF;  \n" +
            "			#8. return last inserted/updated records for umid transaction  \n" +
            "			SELECT NULL AS temp_last_inserted_umid_id;  \n" +
            "			#7. old UMID Details with Feeder Location  \n" +
            "			SELECT * FROM temp_old_umid_details;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM temp_old_umid_details;  \n" +
            "		END IF;  \n" +
            "	 -- END IF;  \n" +
            "END;  \n" +	
        /* **************************** Add Script Version -> 05-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5120,'2.00','V1','Sproc_ValidateScanChangeReel  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5120:
        allDbChangesArray.push(
        /* **************************** New Script -> 05-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_ValidateScanUMIDFirst;  \n" +
            "CREATE PROCEDURE `Sproc_ValidateScanUMIDFirst`(  \n" +
            "	IN pUMID VARCHAR(15),  \n" +
            "	IN pfeederLocation VARCHAR(1000),  \n" +
            "	IN ppartID INT(11),  \n" +
            "	IN pwoOpEqpID INT(11),  \n" +
            "	IN pwoOpID INT(11),  \n" +
            "	IN pwoTransID INT(11),  \n" +
            "	IN pemployeeId INT(11),  \n" +
            "	IN pcheckKitAllocation INT(11),  \n" +
            "	IN pverificationType VARCHAR(255),  \n" +
            "	IN pisVerify INT(11),  \n" +
            "	IN ptransactionType VARCHAR(1),  \n" +
            "	IN pisChangeReel INT(11),  \n" +
            "	IN preelChangeType VARCHAR(100),  \n" +
            "	IN ptoBinID INT(11),  \n" +
            "	IN pOldUMID VARCHAR(15),  \n" +
            "	IN pisConfirmed INT(11),  \n" +
            "	IN pwoID INT(11),  \n" +
            "	IN pCreatedBy VARCHAR(255),  \n" +
            "    IN pApprovedBy INT,  \n" +
            "    IN pApprovedReason VARCHAR(500)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
            "	DECLARE temp_comp_id INT(11);  \n" +
            "	DECLARE temp_comp_uom INT(11);  \n" +
            "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
            "	DECLARE temp_lineID VARCHAR(100);  \n" +
            "	DECLARE temp_pidcode VARCHAR(100);  \n" +
            "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
            "	DECLARE temp_eqpFeederID INT(11);  \n" +
            "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;  \n" +
            "	DECLARE uidVerified INT(11) DEFAULT 0;  \n" +
            "	DECLARE feederVerified INT(11) DEFAULT 0;  \n" +
            "	DECLARE temp_umid_comp_id INT(11);  \n" +
            "	DECLARE temp_umid_pkgQty INT(11);  \n" +
            "	DECLARE temp_umid_stock_id INT(11);  \n" +
            "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
            "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
            "	DECLARE temp_umid_package_id INT(11);  \n" +
            "	DECLARE temp_umid_pkgUnit INT(11);  \n" +
            "	DECLARE temp_umid_pkgCount INT(11);  \n" +
            "	DECLARE temp_umid_pkgUOM INT(11);  \n" +
            "	DECLARE temp_old_umid_comp_id INT(11);  \n" +
            "	DECLARE temp_old_umid_stock_id INT(11);  \n" +
            "	DECLARE temp_old_umid_pkgQty INT(11);  \n" +
            "	DECLARE temp_old_umid_pkgUnit INT(11);  \n" +
            "	DECLARE temp_old_umid_pkgUOM INT(11);  \n" +
            "	DECLARE temp_eqp_wh_id INT(11);  \n" +
            "	DECLARE temp_eqp_bin_id INT(11);  \n" +
            "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
            "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
            "	DECLARE temp_salesorderdetID VARCHAR(100);  \n" +
            "	DECLARE flag_isFeederTransExists INT (11) DEFAULT 0;  \n" +
            "	DECLARE valid_umid_transfer INT (11) DEFAULT 0;  \n" +
            "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
            "	DECLARE temp_json_object VARCHAR(100);  \n" +
            "	DECLARE temp_last_inserted_umid_id INT (11);  \n" +
            "    DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
            "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
            "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
            "	DECLARE temp_old_umid_verify_status TINYINT DEFAULT 0; -- for  change reel flow  \n" +
            "  \n" +
            "	SET temp_eqp_wh_id = NULL;  \n" +
            "	SET temp_eqp_bin_id = NULL;  \n" +
            "	SET temp_eqp_wh_name = NULL;  \n" +
            "  \n" +
            "   -- This will be case when  call from  Change Reel SP : Sproc_ValidateScanChangeReel  \n" +
            "	CREATE temporary TABLE IF NOT EXISTS temp_old_umid_details  \n" +
            "    SELECT 0 As isVerified;  \n" +
            "	SELECT isVerified  \n" +
            "	INTO temp_old_umid_verify_status  \n" +
            "    FROM temp_old_umid_details;  \n" +
            "  \n" +
            "  \n" +
            "	-- create temporary table for error  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
            "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
            "	(  \n" +
            "	     errorText VARCHAR(2000),  \n" +
            "	     isFeederError INT(11),  \n" +
            "	     isUMIDError INT(11),  \n" +
            "	     isConfirmation INT(11),  \n" +
            "	     isMessage INT(11),  \n" +
            "	     isInformation INT(11),  \n" +
            "	     stringText1 VARCHAR(1000),  \n" +
            "	     stringText2 VARCHAR(1000),  \n" +
            "	     stringText3 VARCHAR(1000)  \n" +
            "	);  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
            "  \n" +
            "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
            "	INTO flag_tempVerificationApproval;  \n" +
            "  \n" +
            "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
            "	FROM workorder wo  \n" +
            "	WHERE wo.woID = pwoID  \n" +
            "	AND wo.isDeleted = 0;  \n" +
            "  \n" +
            "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
            "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
            "	ELSE  \n" +
            "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    # Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
            "	#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,')');  \n" +
            "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
            "		SELECT id, refsidid, pkgQty, PIDCode, pkgUOM, pkgUnit, mfgPN, packagingGroupId  \n" +
            "		-- , refSalesOrderDetID  \n" +
            "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_pkgUOM, temp_umid_pkgUnit, temp_umid_mfgPN, temp_umid_package_id  \n" +
            "		-- , temp_salesorderdetID  \n" +
            "		FROM temp_umid_details;  \n" +
            "-- select * from temp_assy_part_list;  \n" +
            "-- select * from temp_umid_details;  \n" +
            "		-- Before doing ZeroOut any UMID it should be verified  \n" +
            "		IF (preelChangeType = \"ZeroOut\"  AND  temp_old_umid_verify_status = 0 and  pUMID is not null) THEN  \n" +
            "			SET result = fun_checkAndInsertError('UMID050', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "        elseif (pfeederLocation IS NOT NULL) THEN  \n" +
            "			IF(fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, 0) > 0) THEN  \n" +
            "				SELECT id, rfqLineItemsID, partID, lineID, eqpFeederID, pidcode, uom, mfgPN, isCPN  \n" +
            "				INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_lineID, temp_eqpFeederID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn  \n" +
            "				FROM temp_feeder_details;  \n" +
            "				-- IF(pisVerify = 1) THEN  \n" +
            "				-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
            "				-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
            "				-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
            "				-- 			-- FAILED  \n" +
            "				-- 			SET @stmt_str = 'FEED001';  \n" +
            "				-- 			INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
            "				-- 			VALUES (@stmt_str, 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "				-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "				-- 		END IF;  \n" +
            "				-- 	END IF;  \n" +
            "				-- ELSE  \n" +
            "					# check for valid lineid for feeder details and umid details  \n" +
            "					#yes - check for lineid and valid than save transaction  \n" +
            "					#no - suggest valid feeder location  \n" +
            "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
            "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
            "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
            "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
            "							-- ALLOCATED  \n" +
            "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "  \n" +
            "					ELSE  \n" +
            "						#in case validate UMID without Kit set true at WO  \n" +
            "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
            "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
            "																WHERE mfgPNID = temp_umid_comp_id  \n" +
            "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
            "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
            "									-- WRONG_LOCATION  \n" +
            "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "							   ELSE  \n" +
            "									SET temp_continue = 1;  \n" +
            "							   END IF;  \n" +
            "						ELSEIF ( fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
            "							SET temp_continue = 1 ;  \n" +
            "						END IF;  \n" +
            "                        IF temp_continue = 1 THEN  \n" +
            "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
            "									SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id,1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
            "								SET result = 0;  \n" +
            "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
            "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "							ELSE  \n" +
            "								IF (pisVerify <> 1) THEN  \n" +
            "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
            "									-- IF NOT ALLOCATED THAN NO NEED TO GIVE ELSE PART, IT IS ALREADY ADDED IN FUNCTION  \n" +
            "                                    -- UMID016 for regualer feeder scan  \n" +
            "                                    -- UMID042 for Part level Kit Allocation checking success  . Both from  fun_checkKitAllocation  \n" +
            "									IF ( pwoOpEqpID IS NOT NULL AND  \n" +
            "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0)  OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
            "										SELECT id, `name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst  \n" +
            "										WHERE refEqpID IN (  \n" +
            "											SELECT eqpID FROM workorder_operation_equipment  \n" +
            "											WHERE woOpEqpID=pwoOpEqpID AND deletedAt IS NULL  \n" +
            "										) AND deletedAt IS NULL;  \n" +
            "  \n" +
            "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
            "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
            "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
            "										END IF;  \n" +
            "  \n" +
            "										-- CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL, (SELECT binID FROM temp_umid_details),temp_eqp_wh_id, NULL, pCreatedBy, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);  \n" +
            "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
            "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
            "												-- Take confirmation  \n" +
            "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
            "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
            "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
            "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
            "													AND refsidid = temp_umid_stock_id  \n" +
            "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
            "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
            "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
            "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
            "													AND woOPID = pwoOpID;  \n" +
            "  \n" +
            "  \n" +
            "												IF(temp_feeder_transID > 0) THEN  \n" +
            "													-- FAILED  \n" +
            "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "												ELSE  \n" +
            "  \n" +
            "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
            "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
            "														pCreatedBy, NULL, NULL,  \n" +
            "														NULL, NULL, NULL, NULL,  \n" +
            "														NULL, NULL, NULL, NULL, NULL,  \n" +
            "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
            "														0,NULL,NULL,NULL,NULL);  \n" +
            "  \n" +
            "													INSERT INTO workorder_trans_umid_details  \n" +
            "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
            "														`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
            "													VALUES  \n" +
            "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
            "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
            "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
            "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
            "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
            "  \n" +
            "													-- VERIFIED  \n" +
            "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
            "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "													SET valid_umid_transfer = 1;  \n" +
            "												END IF;  \n" +
            "											ELSEIF (flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN  \n" +
            "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
            "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
            "													pCreatedBy, NULL, NULL,  \n" +
            "													NULL, NULL, NULL, NULL,  \n" +
            "													NULL, NULL, NULL, NULL, NULL,  \n" +
            "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
            "													0,NULL,NULL,NULL,NULL);  \n" +
            "  \n" +
            "												# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
            "												INSERT INTO workorder_trans_umid_details  \n" +
            "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
            "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
            "												VALUES  \n" +
            "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
            "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
            "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
            "													pCreatedBy, pCreatedBy, \"P\",  \n" +
            "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
            "  \n" +
            "												-- SCANNED  \n" +
            "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
            "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "												SET valid_umid_transfer = 1;  \n" +
            "											END IF;  \n" +
            "										ELSE  \n" +
            "											-- WRONG_LOCATION  \n" +
            "											-- SET @stmt_str = 'UMID018';  \n" +
            "											-- INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
            "											-- VALUES (@stmt_str, 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "										END IF;  \n" +
            "									END IF;  \n" +
            "  \n" +
            "									SET feederVerified = 1;  \n" +
            "								ELSE  \n" +
            "									-- If change reel and old umid details  \n" +
            "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
            "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
            "										-- get component details based on old umid  \n" +
            "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
            "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
            "											FROM component_sid_stock css  \n" +
            "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
            "  \n" +
            "										SELECT wtud.id  \n" +
            "                                        INTO temp_feeder_transID  \n" +
            "                                        FROM workorder_trans_umid_details wtud  \n" +
            "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
            "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
            "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
            "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
            "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
            "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
            "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
            "											AND woOPID = pwoOpID;  \n" +
            "									-- If not change reel than check for reel transaction is done or not  \n" +
            "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
            "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
            "										WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
            "										AND wtud.refsidid = temp_umid_stock_id  \n" +
            "										AND wtud.mfgPNID=temp_umid_comp_id AND wtud.woOpEqpID=pwoOPEqpID  \n" +
            "										AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
            "										FROM workorder_operation_feeder_lineitem_details woefld  \n" +
            "											WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
            "										AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
            "										AND wtud.woOPID = pwoOpID;  \n" +
            "										-- AND isVerified=0;  \n" +
            "									END IF;  \n" +
            "  \n" +
            "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
            "										UPDATE workorder_trans_umid_details  \n" +
            "										SET isVerified=1,  \n" +
            "										verifiedBy=pemployeeId,  \n" +
            "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
            "										WHERE id=temp_feeder_transID;  \n" +
            "  \n" +
            "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
            "										-- VERIFIED  \n" +
            "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "										SET feederVerified = 1;  \n" +
            "									-- if change reel than update verify flag for verfiy true  \n" +
            "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
            "										 IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
            "                                        ( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
            "                                        -- check workorder operation equipment id and kit allocated or not while change reel  \n" +
            "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
            "											WHERE whmst.refEqpID IN (  \n" +
            "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
            "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
            "											) AND whmst.deletedAt IS NULL;  \n" +
            "  \n" +
            "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
            "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
            "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
            "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
            "											END IF;  \n" +
            "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
            "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
            "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
            "														-- Added for multiple kit  \n" +
            "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
            "														(SELECT id FROM kit_allocation ka  \n" +
            "															WHERE ka.refSalesOrderDetID IN  \n" +
            "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
            "																FROM workorder_salesorder_details wsd  \n" +
            "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
            "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
            "														',\\\"returnQty\\\":',0,  \n" +
            "														',\\\"returnUnit\\\":',0,  \n" +
            "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
            "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
            "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
            "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
            "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
            "														pCreatedBy, NULL, NULL,  \n" +
            "														NULL, NULL, NULL, 0,  \n" +
            "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
            "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
            "														1,NULL,NULL,NULL,NULL);  \n" +
            "												ELSE  \n" +
            "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
            "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
            "														pCreatedBy, NULL, NULL,  \n" +
            "														NULL, NULL, NULL, NULL,  \n" +
            "														NULL, NULL, NULL, NULL, NULL,  \n" +
            "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
            "														0,NULL,NULL,NULL,NULL);  \n" +
            "												END IF;  \n" +
            "												SET valid_umid_transfer = 1;  \n" +
            "  \n" +
            "												-- update old record toumid  \n" +
            "												UPDATE workorder_trans_umid_details  \n" +
            "												SET toRefUIDId=temp_umid_stock_id  \n" +
            "												WHERE id=temp_feeder_transID;  \n" +
            "  \n" +
            "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
            "  \n" +
            "												-- transfer umid to bin  \n" +
            "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
            "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
            "													pCreatedBy, NULL, NULL,  \n" +
            "													NULL, NULL, NULL, NULL,  \n" +
            "													NULL, NULL, NULL, NULL, NULL,  \n" +
            "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
            "													0,NULL,NULL,NULL,NULL);  \n" +
            "  \n" +
            "												-- SELECT pwoTransID;  \n" +
            "												-- insert new umid for workorder equipment feeder  \n" +
            "												INSERT INTO workorder_trans_umid_details  \n" +
            "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
            "												VALUES  \n" +
            "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
            "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
            "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
            "													pCreatedBy, pCreatedBy, \"P\");  \n" +
            "  \n" +
            "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
            "												-- UMID SCANNED  \n" +
            "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "											ELSE  \n" +
            "												-- WRONG_LOCATION  \n" +
            "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "											END IF;  \n" +
            "										ELSE  \n" +
            "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "										END IF;  \n" +
            "									ELSE  \n" +
            "										-- FAILED  \n" +
            "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "									END IF;  \n" +
            "								END IF;  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "                    END IF;  \n" +
            "				-- END IF;  \n" +
            "			END IF;  \n" +
            "		ELSE  \n" +
            "			SET uidVerified = 1;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	INSERT INTO `uid_verification_history`(  \n" +
            "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
            "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
            "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
            "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
            "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
            "	VALUES (  \n" +
            "		pUMID,							CASE WHEN (pfeederLocation IS NULL) THEN '' ELSE pfeederLocation END,		temp_umid_comp_id,  \n" +
            "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 								temp_comp_id,  \n" +
            "		fun_getMfgCodeAndNameByPartID(temp_comp_id), 		temp_mfgpn,									CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
            "		0,							IFNULL(pCreatedBy,''),								fun_DatetimetoUTCDateTime(),  \n" +
            "		pwoTransID, 						pwoOpEqpID,									pverificationType  \n" +
            "	);  \n" +
            "  \n" +
            "	#1. return history of umid transfer  \n" +
            "	IF(valid_umid_transfer = 0) THEN  \n" +
            "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	#2. return history of verification  \n" +
            "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
            "  \n" +
            "	#3. return error  \n" +
            "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
            "  \n" +
            "	#4. return umid details  \n" +
            "	-- IF (uidVerified=1) THEN  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
            "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
            "	SELECT * FROM temp_umid_details;  \n" +
            "	-- END IF;  \n" +
            "  \n" +
            "	#5. return feeder details  \n" +
            "	-- IF (feederVerified=1) THEN  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
            "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
            "	SELECT * FROM temp_feeder_details;  \n" +
            "	-- END IF;  \n" +
            "  \n" +
            "	#6. return allocated UMID details  \n" +
            "	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
            "	WHERE 1=0;  \n" +
            "  \n" +
            "	#7 return last inserted/updated records for umid transacrion  \n" +
            "	SELECT temp_last_inserted_umid_id;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 05-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5121,'2.00','V1','Sproc_ValidateScanUMIDFirst  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5121:
        allDbChangesArray.push(
        /* **************************** New Script -> 05-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_validateScanMissingUMIDOnly;  \n" +
            "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(  \n" +
            "	IN pUMID VARCHAR(15),  \n" +
            "	IN ppartID INT,  \n" +
            "	IN pwoOpID INT,  \n" +
            "	IN pwoTransID INT,  \n" +
            "	IN pemployeeId INT,  \n" +
            "	IN pcheckKitAllocation INT,  \n" +
            "	IN pverificationType VARCHAR(255),  \n" +
            "	IN pisVerify INT,  \n" +
            "	IN ptransactionType VARCHAR(1),  \n" +
            "	IN prfqLineItemsID INT,  \n" +
            "	IN pisConfirmed INT,  \n" +
            "	IN pwoID INT,  \n" +
            "	IN pisPlacementTracking INT,  \n" +
            "	IN psaveUMIDDetails INT,  \n" +
            "	IN prefDesig VARCHAR(3000),  \n" +
            "	IN passyQty INT  ,  \n" +
            "    IN pConsumeQty INT,  \n" +
            "    IN pUMIDAllocateStatus INT,  \n" +
            "    IN pCreatedBy VARCHAR(255),  \n" +
            "    IN pCreateByRoleId INT ,  \n" +
            "    IN pApprovedBy INT,  \n" +
            "    IN pApprovedReason VARCHAR(500)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
            "	DECLARE temp_pidcode VARCHAR(100);  \n" +
            "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
            "	DECLARE uidVerified INT DEFAULT 0;  \n" +
            "	DECLARE temp_umid_comp_id INT;  \n" +
            "	DECLARE temp_umid_stock_id INT;  \n" +
            "	DECLARE temp_umid_pkgQty INT;  \n" +
            "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
            "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
            "	DECLARE temp_umid_package_id INT;  \n" +
            "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
            "	DECLARE temp_last_inserted_umid_id INT;  \n" +
            "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
            "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
            "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
            "	DECLARE tot_stock_umid INT DEFAULT 0;  \n" +
            "    DECLARE allocated_stock_umid INT DEFAULT 0 ;  \n" +
            "    DECLARE kit_qty INT DEFAULT 0 ;  \n" +
            "    DECLARE temp_salesorder_detID INT ;  \n" +
            "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;  \n" +
            "    DECLARE vParentWoId INT;  \n" +
            "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit  \n" +
            "	-- create temporary table for error  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
            "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
            "	(  \n" +
            "	     errorText VARCHAR(2000),  \n" +
            "	     isFeederError INT,  \n" +
            "	     isUMIDError INT,  \n" +
            "	     isConfirmation INT,  \n" +
            "	     isMessage INT,  \n" +
            "	     isInformation INT,  \n" +
            "	     stringText1 VARCHAR(1000),  \n" +
            "	     stringText2 VARCHAR(1000),  \n" +
            "	     stringText3 VARCHAR(1000)  \n" +
            "	);  \n" +
            "		#Get parent WO ID in case of revise  work order.  \n" +
            "		WITH RECURSIVE RevWo AS  (  \n" +
            "			SELECT	woId,  \n" +
            "					1 lvl  ,  \n" +
            "					terminateWOID  \n" +
            "			FROM workorder  \n" +
            "			WHERE woId = pwoID  \n" +
            "			AND isDeleted = 0  \n" +
            "			UNION ALL  \n" +
            "			SELECT	wo.woID,  \n" +
            "					rw.lvl +1 lvl,  \n" +
            "					wo.terminateWOID  \n" +
            "			 FROM workorder wo  \n" +
            "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
            "			 WHERE wo.isDeleted = 0  \n" +
            "			 )  \n" +
            "			SELECT rev.woID  INTO vParentWoId  \n" +
            "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
            "  \n" +
            "		#Check for kit allocation flag from BOM Line  \n" +
            "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck  \n" +
            "		FROM rfq_lineitems rli  \n" +
            "		WHERE rli.id = prfqLineItemsID  \n" +
            "        AND rli.isDeleted = 0 ;  \n" +
            "  \n" +
            "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);  \n" +
            "  \n" +
            "		#CHeck Only BOM Part allowed  \n" +
            "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
            "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
            "											WHERE uid = pUMID AND isDeleted = 0 )  \n" +
            "			    AND rla.partID =   ppartID  \n" +
            "				AND rla.isDeleted = 0) = 0 THEN  \n" +
            "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "        END IF;  \n" +
            "	# umid transaction details based on umid  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
            "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
            "    INTO flag_tempVerificationApproval;  \n" +
            "  /*  \n" +
            "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
            "		SET flag_tempVerificationRequire = 1;  \n" +
            "	END IF;  \n" +
            "  */  \n" +
            "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
            "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');  \n" +
            "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN  \n" +
            "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
            "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
            "		FROM temp_umid_details;  \n" +
            "  \n" +
            "  \n" +
            "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
            "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
            "		IF(flag_tempLineCount = 1) THEN  \n" +
            "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
            "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
            "			UPDATE temp_umid_details tud  \n" +
            "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
            "			AND id = prfqLineItemsID)  \n" +
            "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
            "  \n" +
            "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
            "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
            "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "        #step -2 Already  Allocated in Given KIT of same WO  \n" +
            "        IF (pUMIDAllocateStatus = 0 ) THEN  \n" +
            "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))  \n" +
            "            INTO kit_qty  \n" +
            "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID  \n" +
            "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )  \n" +
            "			AND STATUS = 'A';  \n" +
            "  \n" +
            "            IF kit_qty > 0 THEN  \n" +
            "				IF  kit_qty >= pConsumeQty THEN  \n" +
            "					SET pUMIDAllocateStatus = 1 ;  \n" +
            "				ELSEIF kit_qty < pConsumeQty THEN  \n" +
            "					SET pUMIDAllocateStatus = 2 ;  \n" +
            "				END IF ;  \n" +
            "                #SELECT 'LINE 122' , pUMIDAllocateStatus;  \n" +
            "            ELSE  \n" +
            "				SELECT SUM(css.pkgQty) INTO tot_stock_umid  \n" +
            "				FROM component_sid_stock AS css  \n" +
            "				WHERE css.uid = pUMID  \n" +
            "				AND css.isDeleted = 0;  \n" +
            "  \n" +
            "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid  \n" +
            "				FROM kit_allocation AS ka_all  \n" +
            "				WHERE ka_all.uid = pUMID  \n" +
            "				AND  ka_all.status IN ('A','R')  \n" +
            "				GROUP BY ka_all.uid ;  \n" +
            "  \n" +
            "				#step - 3 Check Un-Allocated  stock available or not  \n" +
            "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN  \n" +
            "					SET pUMIDAllocateStatus = 3;  \n" +
            "					#allocate kit from un allocated stock  \n" +
            "				END IF;  \n" +
            "                #SELECT 'LINE 139' , pUMIDAllocateStatus;  \n" +
            "            END IF;  \n" +
            "        END IF;  \n" +
            "        #SELECT 'LINE 142' , pUMIDAllocateStatus;  \n" +
            "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate  \n" +
            "  \n" +
            "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
            "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
            "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "					SET uidVerified = 1;  \n" +
            "				ELSE  \n" +
            "					SET uidVerified = 0;  \n" +
            "					SET result = 0;  \n" +
            "				END IF;  \n" +
            "			ELSE  \n" +
            "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
            "					SET result = 0;  \n" +
            "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
            "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "				ELSE  \n" +
            "						#take first sales order default in case of multiple sales order  \n" +
            "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs  \n" +
            "						INTO temp_salesorder_detID  \n" +
            "						FROM  workorder_salesorder_details  \n" +
            "						WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
            "						AND isDeleted = 0  \n" +
            "						LIMIT 1;  \n" +
            "					-- check verification required  \n" +
            "					-- than verification require than check from which page scan/verify  \n" +
            "                     IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) and psaveUMIDDetails = 1 THEN  \n" +
            "							-- Take confirmation  \n" +
            "						SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
            "					ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) and psaveUMIDDetails = 1 THEN -- verification not require  \n" +
            "						-- if scan option selected than check for already scanned in flow first  \n" +
            "						-- if not scanned than add as verified umid directly  \n" +
            "						IF(pisVerify <> 1) THEN  \n" +
            "							SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
            "							WHERE transactionType='U'  \n" +
            "							AND refsidid = temp_umid_stock_id  \n" +
            "							AND mfgPNID=temp_umid_comp_id  \n" +
            "							AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
            "							AND woOPID = pwoOpID  \n" +
            "							AND employeeID=pemployeeId;  \n" +
            "							-- if already scanned than give message  \n" +
            "							-- else add as verified umid directly  \n" +
            "							IF(temp_feeder_transID > 0) THEN  \n" +
            "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
            "								INSERT INTO workorder_trans_umid_details  \n" +
            "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
            "									`verifiedOn`,`reelStatus`, refDesig,  \n" +
            "									`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
            "								VALUES  \n" +
            "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
            "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
            "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
            "									pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
            "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
            "                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
            "  \n" +
            "	  							-- VERIFIED  \n" +
            "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
            "								SELECT LAST_INSERT_ID() AS id;  \n" +
            "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "								SET uidVerified = 1;  \n" +
            "							ELSE  \n" +
            "								IF psaveUMIDDetails = 1 THEN  \n" +
            "									-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
            "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
            "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;  \n" +
            "										# Check wheather kit allocation required  or not  \n" +
            "  \n" +
            "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
            "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
            "										ELSE  \n" +
            "											SET result = 1;  \n" +
            "										END IF;  \n" +
            "									ELSE  \n" +
            "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
            "												wop.partID = temp_umid_comp_id AND  \n" +
            "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
            "											SET result = 1;  \n" +
            "										END IF;  \n" +
            "									END IF;  \n" +
            "  \n" +
            "									IF (result = 1 ) THEN  \n" +
            "										SET result = 1;  \n" +
            "										INSERT INTO workorder_trans_umid_details  \n" +
            "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
            "										`verifiedOn`, `reelStatus`, refDesig, consumeQty,  \n" +
            "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
            "										VALUES  \n" +
            "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
            "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
            "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
            "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
            "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty,  \n" +
            "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
            "										-- VERIFIED  \n" +
            "										CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
            "										SELECT LAST_INSERT_ID() AS id;  \n" +
            "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
            "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "										SET uidVerified = 1;  \n" +
            "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
            "										SET pUMIDAllocateStatus = 4;  \n" +
            "									END IF;  \n" +
            "								END IF;  \n" +
            "							END IF;  \n" +
            "						ELSE  \n" +
            "							-- if already scanned than verify same umid for history  \n" +
            "							-- if not scanned yet than give message  \n" +
            "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
            "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "								SET uidVerified = 1;  \n" +
            "							ELSE  \n" +
            "								SET uidVerified = 0;  \n" +
            "								SET result = 0;  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "					ELSE  \n" +
            "						-- verification require than check from which page/popup  \n" +
            "						-- if from scan popup than add umid as scanned new record  \n" +
            "						-- else check for verify flow  \n" +
            "                        #select  prfqLineItemsID;  \n" +
            "						IF (pisVerify <> 1) THEN  \n" +
            "							IF psaveUMIDDetails = 1 THEN  \n" +
            "								-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
            "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
            "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;  \n" +
            "                                # Check wheather kit allocation required  or not  \n" +
            "  \n" +
            "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
            "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
            "                                    ELSE  \n" +
            "										SET result = 1;  \n" +
            "                                    END IF;  \n" +
            "                                ELSE  \n" +
            "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
            "											wop.partID = temp_umid_comp_id AND  \n" +
            "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
            "										SET result = 1;  \n" +
            "									END IF;  \n" +
            "								END IF;  \n" +
            "                                #select 'Line261' , result;  \n" +
            "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN  \n" +
            "                                IF result = 1 THEN  \n" +
            "									SET result = 1;  \n" +
            "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;  \n" +
            "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
            "									INSERT INTO workorder_trans_umid_details  \n" +
            "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)  \n" +
            "									VALUES  \n" +
            "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
            "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
            "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
            "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);  \n" +
            "									-- SCANNED  \n" +
            "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
            "									SELECT LAST_INSERT_ID() AS id;  \n" +
            "                                    -- Condition for SMT material / For SMT UMID , only successful scan message  \n" +
            "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
            "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "										SET uidVerified = 1;  \n" +
            "                                    ELSE  \n" +
            "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "										SET uidVerified = 1;  \n" +
            "									END IF;  \n" +
            "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
            "									SET pUMIDAllocateStatus = 4;  \n" +
            "                                END IF;  \n" +
            "							END IF;  \n" +
            "						ELSE  \n" +
            "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
            "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "								SET uidVerified = 1;  \n" +
            "							ELSE  \n" +
            "								SET uidVerified = 0;  \n" +
            "								SET result = 0;  \n" +
            "							END IF;  \n" +
            "						END IF;  \n" +
            "					END IF;  \n" +
            "				END IF;  \n" +
            "			END IF;  \n" +
            "		#END IF;  \n" +
            "	END IF;  \n" +
            "	#END IF;  \n" +
            "  \n" +
            "	#select '10' , 'AT END' ;  \n" +
            "	INSERT INTO `uid_verification_history`(  \n" +
            "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
            "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
            "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
            "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
            "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
            "	VALUES (  \n" +
            "		pUMID,							'',				temp_umid_comp_id,  \n" +
            "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
            "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
            "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
            "		pwoTransID, 						NULL,				pverificationType  \n" +
            "	);  \n" +
            "  \n" +
            "	#0. return assy part list  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
            "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
            "  \n" +
            "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
            "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
            "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
            "	ELSE  \n" +
            "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
            "			-- verified UMID  \n" +
            "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	#1. return history of verification  \n" +
            "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
            "  \n" +
            "	#2. return error  \n" +
            "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';  \n" +
            "  \n" +
            "	#3. return umid details  \n" +
            "	-- IF (uidVerified=1) THEN  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
            "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
            "	SELECT * FROM temp_umid_details;  \n" +
            "	-- SELECT * FROM temp_umid_details;  \n" +
            "	-- END IF;  \n" +
            "  \n" +
            "	#4 return last inserted/updated records for umid transacrion  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
            "	SELECT NULL AS id;  \n" +
            "	SELECT id FROM temp_umid_transIDs;  \n" +
            "  \n" +
            "    #5 return UMID allocation checking status  \n" +
            "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';  \n" +
            "  \n" +
            "END;  \n" +	
        /* **************************** Add Script Version -> 05-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5122,'2.00','V1','Sproc_validateScanMissingUMIDOnly  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5122:
        allDbChangesArray.push(
        /* **************************** New Script -> 05-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_validateScanUMIDOnly;  \n" +
            "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(  \n" +
            "	IN pUMID VARCHAR(15),  \n" +
            "	IN ppartID INT,  \n" +
            "	IN pwoOpID INT,  \n" +
            "	IN pwoTransID INT,  \n" +
            "	IN pemployeeId INT,  \n" +
            "	IN pcheckKitAllocation INT,  \n" +
            "	IN pverificationType VARCHAR(255),  \n" +
            "	IN pisVerify INT,  \n" +
            "	IN ptransactionType VARCHAR(1),  \n" +
            "	IN prfqLineItemsID INT,  \n" +
            "	IN pisConfirmed INT,  \n" +
            "	IN pwoID INT,  \n" +
            "	IN pCreatedBy VARCHAR(255),  \n" +
            "	IN pisPlacementTracking INT,  \n" +
            "	IN psaveUMIDDetails INT,  \n" +
            "	IN prefDesig VARCHAR(3000),  \n" +
            "	IN passyQty INT,  \n" +
            "    IN pApprovedBy INT,  \n" +
            "    IN pApprovedReason VARCHAR(500)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
            "	DECLARE temp_pidcode VARCHAR(100);  \n" +
            "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
            "	DECLARE uidVerified INT DEFAULT 0;  \n" +
            "	DECLARE temp_umid_comp_id INT;  \n" +
            "	DECLARE temp_umid_stock_id INT;  \n" +
            "	DECLARE temp_umid_pkgQty INT;  \n" +
            "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
            "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
            "	DECLARE temp_umid_package_id INT;  \n" +
            "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
            "	DECLARE temp_last_inserted_umid_id INT;  \n" +
            "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
            "	DECLARE flag_tempVerificationApproval  VARCHAR(5)  DEFAULT 'V';  \n" +
            "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
            "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
            "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
            "	DECLARE temp_wo_sub_status INT ;  \n" +
            "	-- create temporary table for error  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
            "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
            "	(  \n" +
            "	     errorText VARCHAR(2000),  \n" +
            "	     isFeederError INT,  \n" +
            "	     isUMIDError INT,  \n" +
            "	     isConfirmation INT,  \n" +
            "	     isMessage INT,  \n" +
            "	     isInformation INT,  \n" +
            "	     stringText1 VARCHAR(1000),  \n" +
            "	     stringText2 VARCHAR(1000),  \n" +
            "	     stringText3 VARCHAR(1000)  \n" +
            "	);  \n" +
            "  \n" +
            "    SELECT isKitAllocationNotRequired,woSubStatus  \n" +
            "    INTO flag_kit_allocation_not_required_wo  , temp_wo_sub_status  \n" +
            "    FROM workorder wo  \n" +
            "    WHERE wo.woID = pwoID  \n" +
            "    AND wo.isDeleted = 0;  \n" +
            "  \n" +
            "	#CHeck Only SMT Part allowed  in case of missing material status  \n" +
            "	IF (temp_wo_sub_status = 9 AND (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
            "			WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
            "										WHERE uid = pUMID AND isDeleted = 0 )  \n" +
            "            AND rla.partID =   ppartID  \n" +
            "			AND rla.isDeleted = 0) > 0 ) THEN  \n" +
            "		 SET result = fun_checkAndInsertError('UMID051', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "	END IF;  \n" +
            "	# umid transaction details based on umid  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
            "  \n" +
            "	select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
            "    INTO flag_tempVerificationApproval;  \n" +
            "	/*IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
            "		SET flag_tempVerificationRequire = 1;  \n" +
            "	END IF;                */  \n" +
            "  \n" +
            "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
            "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
            "    ELSE  \n" +
            "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
            "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
            "  \n" +
            "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
            "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
            "		FROM temp_umid_details;  \n" +
            "  \n" +
            "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
            "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
            "		IF(flag_tempLineCount = 1) THEN  \n" +
            "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
            "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
            "			UPDATE temp_umid_details tud  \n" +
            "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
            "			AND id = prfqLineItemsID)  \n" +
            "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
            "  \n" +
            "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
            "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
            "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
            "		END IF;  \n" +
            "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN  \n" +
            "			SET result = 0;  \n" +
            "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN  \n" +
            "			SET result = 0;  \n" +
            "		ELSE  \n" +
            "			-- need to check from here  \n" +
            "			-- If scan popup with manual placement and allocated in kit and not saved details          --  \n" +
            "			-- Check placement tracking with more than one BOM line item for same part  \n" +
            "			IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0)) THEN  \n" +
            "				SET result = 0;  \n" +
            "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN  \n" +
            "				SET result = 0;  \n" +
            "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN  \n" +
            "				SET result = 0;  \n" +
            "			ELSE  \n" +
            "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
            "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
            "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "						SET uidVerified = 1;  \n" +
            "					ELSE  \n" +
            "						SET uidVerified = 0;  \n" +
            "						SET result = 0;  \n" +
            "					END IF;  \n" +
            "				ELSE  \n" +
            "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
            "						SET result = 0;  \n" +
            "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
            "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
            "					ELSE  \n" +
            "						-- check verification required  \n" +
            "						-- than verification require than check from which page scan/verify  \n" +
            "                        IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) THEN  \n" +
            "							-- Take confirmation  \n" +
            "							SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
            "						ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
            "							-- if scan option selected than check for already scanned in flow first  \n" +
            "							-- if not scanned than add as verified umid directly  \n" +
            "							IF(pisVerify <> 1) THEN  \n" +
            "								SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
            "								WHERE transactionType='U'  \n" +
            "								AND refsidid = temp_umid_stock_id  \n" +
            "								AND mfgPNID=temp_umid_comp_id  \n" +
            "								AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
            "								AND woOPID = pwoOpID  \n" +
            "								AND employeeID=pemployeeId;  \n" +
            "  \n" +
            "								-- if already scanned than give message  \n" +
            "								-- else add as verified umid directly  \n" +
            "								IF(temp_feeder_transID > 0) THEN  \n" +
            "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
            "									INSERT INTO workorder_trans_umid_details  \n" +
            "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
            "										`verifiedOn`,`reelStatus`, refDesig,  \n" +
            "                                         `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
            "									VALUES  \n" +
            "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
            "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
            "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
            "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
            "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
            "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
            "  \n" +
            "									-- SCANNED  \n" +
            "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
            "									SELECT LAST_INSERT_ID() AS id;  \n" +
            "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "									SET uidVerified = 1;  \n" +
            "								ELSE  \n" +
            "									INSERT INTO workorder_trans_umid_details  \n" +
            "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
            "										`verifiedOn`, `reelStatus`, refDesig,  \n" +
            "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
            "									VALUES  \n" +
            "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
            "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
            "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
            "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
            "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
            "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
            "  \n" +
            "									-- VERIFIED  \n" +
            "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
            "									SELECT LAST_INSERT_ID() AS id;  \n" +
            "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
            "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "									SET uidVerified = 1;  \n" +
            "								END IF;  \n" +
            "							ELSE  \n" +
            "								-- if already scanned than verify same umid for history  \n" +
            "								-- if not scanned yet than give message  \n" +
            "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
            "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "									SET uidVerified = 1;  \n" +
            "								ELSE  \n" +
            "									SET uidVerified = 0;  \n" +
            "									SET result = 0;  \n" +
            "								END IF;  \n" +
            "							END IF;  \n" +
            "						 -- this code is commented because as per new implementation there will  be no verification for scan material  \n" +
            "                         /*ELSE  \n" +
            "							-- verification require than check from which page/popup  \n" +
            "							-- if from scan popup than add umid as scanned new record  \n" +
            "							-- else check for verify flow  \n" +
            "							IF (pisVerify <> 1) THEN  \n" +
            "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
            "								INSERT INTO workorder_trans_umid_details  \n" +
            "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
            "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
            "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
            "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)  \n" +
            "								VALUES  \n" +
            "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
            "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
            "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
            "									pCreatedBy, pCreatedBy, \"C\", prefDesig);  \n" +
            "  \n" +
            "								-- SCANNED  \n" +
            "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
            "								SELECT LAST_INSERT_ID() AS id;  \n" +
            "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "								SET uidVerified = 1;  \n" +
            "							ELSE  \n" +
            "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
            "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
            "									SET uidVerified = 1;  \n" +
            "								ELSE  \n" +
            "									SET uidVerified = 0;  \n" +
            "									SET result = 0;  \n" +
            "								END IF;  \n" +
            "							END IF; */  \n" +
            "						END IF;  \n" +
            "					END IF;  \n" +
            "				END IF;  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	INSERT INTO `uid_verification_history`(  \n" +
            "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
            "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
            "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
            "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
            "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
            "	VALUES (  \n" +
            "		pUMID,							'',				temp_umid_comp_id,  \n" +
            "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
            "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
            "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
            "		pwoTransID, 						NULL,				pverificationType  \n" +
            "	);  \n" +
            "  \n" +
            "	#0. return assy part list  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
            "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
            "  \n" +
            "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
            "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
            "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
            "	ELSE  \n" +
            "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
            "			-- verified UMID  \n" +
            "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	#1. return history of verification  \n" +
            "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
            "  \n" +
            "	#2. return error  \n" +
            "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
            "  \n" +
            "	#3. return umid details  \n" +
            "	-- IF (uidVerified=1) THEN  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
            "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
            "	SELECT * FROM temp_umid_details;  \n" +
            "	-- SELECT * FROM temp_umid_details;  \n" +
            "	-- END IF;  \n" +
            "  \n" +
            "	#4 return last inserted/updated records for umid transacrion  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
            "	SELECT NULL AS id;  \n" +
            "	SELECT id FROM temp_umid_transIDs;  \n" +
            "END;  \n" +	
        /* **************************** Add Script Version -> 05-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5123,'2.00','V1','Sproc_validateScanUMIDOnly  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5123:
            allDbChangesArray.push(
            /* **************************** Add Script Version -> 05-08-2021 *********************************** */
            "DROP FUNCTION IF EXISTS `fun_createBOMErrorMsgByErrorCodeandLineID`;  \n" +
            "CREATE FUNCTION `fun_createBOMErrorMsgByErrorCodeandLineID`(  \n" +
            "	pErrorCode VARCHAR(100),  \n" +
            "	pRFQLineItemAlternatePartID INT  \n" +
            ") RETURNS varchar(2000) CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "DECLARE vErrorMsg VARCHAR(2000);  \n" +
            "DECLARE vErrorCode VARCHAR(2000);  \n" +
            "DECLARE vMPN VARCHAR(200);  \n" +
            "DECLARE vMFR VARCHAR(200);  \n" +
            "DECLARE vSPN VARCHAR(200);  \n" +
            "DECLARE vSupplierPN VARCHAR(200);  \n" +
            "DECLARE vCPN VARCHAR(200);  \n" +
            "DECLARE vCPNRev VARCHAR(200);  \n" +
            "DECLARE vPartPIN VARCHAR(200);  \n" +
            "DECLARE vPartRow VARCHAR(200);  \n" +
            "DECLARE vLinePin VARCHAR(200);  \n" +
            "DECLARE vLineRow VARCHAR(200);  \n" +
            "DECLARE vPartUOM VARCHAR(200);  \n" +
            "DECLARE vLineUOM VARCHAR(200);  \n" +
            "DECLARE vPartStatus VARCHAR(200);  \n" +
            "  \n" +
            "	SELECT description,errorcode INTO vErrorMsg,vErrorCode FROM rfq_lineitems_errorcode  \n" +
            "	WHERE errorcode = pErrorCode;  \n" +
            "	SELECT rla.mfgPN, rla.mfgCode, rla.distPN, rla.distributor, rl.custPN, rl.customerRev,c.noOfPosition, rl.numOfPosition,  \n" +
            "		c.noOfRows, rl.numOfRows, uc.unitName, ul.unitName, cps.name  \n" +
            "		INTO  \n" +
            "		vMPN, vMFR, vSPN, vSupplierPN, vCPN, vCPNRev, vPartPIN, vLinePin, vPartRow,  vLineRow, vPartUOM, vLineUOM, vPartStatus  \n" +
            "	FROM rfq_lineitems_alternatepart rla  \n" +
            "	INNER JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "	INNER JOIN component c ON c.id = rla.mfgPNID  \n" +
            "	INNER JOIN uoms uc ON uc.id = c.uom  \n" +
            "	INNER JOIN uoms ul ON ul.id = rl.uomID  \n" +
            "	INNER JOIN component_partstatusmst cps ON cps.id = c.partStatus  \n" +
            "	WHERE rla.id = pRFQLineItemAlternatePartID;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% MFR %>', IFNULL(vMFR,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% MPN %>', IFNULL(vMPN,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% CPN %>', IFNULL(vCPN,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% CPN Rev %>', IFNULL(vCPNRev,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% Supplier %>', IFNULL(vSupplierPN,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% SPN %>', IFNULL(vSPN,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% Part No. of Rows %>', IFNULL(vPartRow,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% No. of Rows %>', IFNULL(vLineRow,'')) INTO vErrorMsg;  \n" +
            "	#SELECT REPLACE(vErrorMsg, '<% UOM %>', IFNULL(vLineUOM,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% Part UOM %>', IFNULL(vPartUOM,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% Part Status %>', IFNULL(vPartStatus,'')) INTO vErrorMsg;  \n" +
            "	#SELECT REPLACE(vErrorMsg, '<% Mounting Types %>', IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
            "	#SELECT REPLACE(vErrorMsg, '<% Functional Types %>', IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% Pin Per REF DES ON PCB %>', IFNULL(vLinePin,'')) INTO vErrorMsg;  \n" +
            "	SELECT REPLACE(vErrorMsg, '<% Part Pin COUNT %>', IFNULL(vPartPIN,'')) INTO vErrorMsg;  \n" +
            "  \n" +
            "	RETURN CONCAT(vErrorCode,': ',vErrorMsg);  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 05-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_RequireFlagFromPartMaster`;  \n" +
            "CREATE PROCEDURE `Sproc_Update_BOM_RequireFlagFromPartMaster`(  \n" +
            "                    	IN pAliasGroupID INT,  \n" +
            "                    	IN pPartID INT,  \n" +
            "                    	IN pNewProgramingRequired TINYINT,  \n" +
            "                    	IN pNewMatingPartRquired TINYINT,  \n" +
            "                    	IN pNewDriverToolRequired TINYINT,  \n" +
            "                    	IN pNewFunctionalTestingRequired TINYINT,  \n" +
            "                    	IN pNewPickupPadRequired TINYINT,  \n" +
            "                    	IN pOldPartStatus INT,  \n" +
            "                    	IN pNewPartStatus INT,  \n" +
            "                    	IN pOldUOM INT,  \n" +
            "                    	IN pNewUOM INT,  \n" +
            "                    	IN pOldFeature VARCHAR(255),  \n" +
            "                    	IN pNewFeature VARCHAR(255),  \n" +
            "                    	IN pOldConnecterTypeID INT,  \n" +
            "                    	IN pNewConnecterTypeID INT,  \n" +
            "                    	IN pOldNoOfRows INT,  \n" +
            "                    	IN pNewNoOfRows INT,  \n" +
            "                    	IN pUserId INT,  \n" +
            "                    	IN pUserRoleId INT  \n" +
            "                    )  \n" +
            "BEGIN  \n" +
            "                        DECLARE totalCount INT DEFAULT 0;  \n" +
            "                        DECLARE currIndex INT DEFAULT 0;  \n" +
            "                       DECLARE currMfgPnID INT;  \n" +
            "                       DECLARE currAssyID INT;  \n" +
            "                       DECLARE lastAssyID INT;  \n" +
            "                       DECLARE subAssyType INT;  \n" +
            "                       DECLARE vActivePartStatusID INT;  \n" +
            "                       SET lastAssyID = 0;  \n" +
            "  \n" +
            "                   	SET  subAssyType = 3;  \n" +
            "                   	SELECT id INTO vActivePartStatusID FROM component_partstatusmst cps WHERE cps.name = 'Active';  \n" +
            "  \n" +
            "                   	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
            "                   	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
            "                   	SELECT  rla.partID, rla.mfgPNID  \n" +
            "                   	FROM rfq_lineitems_alternatepart AS rla  \n" +
            "                   	WHERE rla.deletedAt IS NULL  \n" +
            "                       AND rla.isDeleted = 0  \n" +
            "                   	AND (EXISTS (SELECT 1 FROM component_packagingalias cp  \n" +
            "                   				WHERE cp.componentID = rla.mfgPNID  \n" +
            "                                     AND cp.isDeleted = 0  \n" +
            "                                     AND cp.aliasgroupID = pAliasGroupID)  \n" +
            "                   		OR rla.mfgPNID = pPartID)  \n" +
            "                   	GROUP BY rla.partID, rla.mfgPNID  \n" +
            "                       ORDER BY rla.partID, rla.mfgPNID;  \n" +
            "  \n" +
            "  \n" +
            "                       /* Update Assembly Internal version with parent assembly where part is added */  \n" +
            "      /*                 UPDATE component  \n" +
            "                   	SET  \n" +
            "                   		liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
            "                   		liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
            "                   	WHERE id IN(  \n" +
            "                   	WITH RECURSIVE cte AS  \n" +
            "                   	(  \n" +
            "                   	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
            "                   	  FROM component c  \n" +
            "                         JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
            "                   	  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
            "  \n" +
            "                   	  UNION ALL  \n" +
            "                   	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
            "                   	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child  \n" +
            "                   	  WHERE rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
            "                   	  AND cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
            "                   	)  \n" +
            "                   	SELECT DISTINCT partId FROM cte);  \n" +
            "  */  \n" +
            "                       /* Update BOM flag Detail where part is used where part is added */  \n" +
            "                       SELECT unitName, measurementTypeID INTO @oldUOMName, @oldUOMClassID FROM uoms WHERE id = pOldUOM;  \n" +
            "                   	SELECT unitName, measurementTypeID INTO @newUOMName, @newUOMClassID FROM uoms WHERE id = pNewUOM;  \n" +
            "  \n" +
            "                   	UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
            "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
            "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	SET  \n" +
            "                   		rla.programingRequiredStep = (CASE WHEN pNewProgramingRequired = 1 THEN (CASE WHEN rl.programingStatus = 0 THEN 0 ELSE 1 END) ELSE 1 END),  \n" +
            "                   		rla.matingPartRquiredStep = (CASE WHEN pNewMatingPartRquired = 1 THEN 0 ELSE 1 END),  \n" +
            "                   		rla.driverToolsRequiredStep = (CASE WHEN pNewDriverToolRequired = 1 THEN 0 ELSE 1 END),  \n" +
            "                   		rla.functionalTestingRequiredStep = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN 0 ELSE 1 END),  \n" +
            "                   		rla.pickupPadRequiredStep = (CASE WHEN pNewPickupPadRequired = 1 THEN 0 ELSE 1 END),  \n" +
            "                   		rla.invalidConnectorTypeStep = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
            "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition is not null THEN 0  \n" +
            "                   								WHEN pNewConnecterTypeID <> -1 AND (c.noOfPosition is not null OR (c.noOfPosition <> rl.numOfPosition)) THEN 0  \n" +
            "                   								ELSE 1  \n" +
            "                   							END)  \n" +
            "                   						ELSE rla.invalidConnectorTypeStep END),  \n" +
            "                   		rla.partPinIsLessthenBOMPinStep = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
            "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN 0 ELSE 1 END)  \n" +
            "                   						     ELSE rla.partPinIsLessthenBOMPinStep END),  \n" +
            "  \n" +
            "                   		rla.obsoletePartStep = (CASE WHEN pOldPartStatus <> pNewPartStatus THEN  \n" +
            "                   						(CASE WHEN pNewPartStatus <> vActivePartStatusID THEN 0  \n" +
            "                   							WHEN pNewPartStatus = vActivePartStatusID THEN 1 END)  \n" +
            "                   					ELSE rla.obsoletePartStep END),  \n" +
            "                   		rla.mismatchNumberOfRowsStep = (CASE WHEN pOldNoOfRows <> pNewNoOfRows  THEN  \n" +
            "                   							(CASE WHEN c.connecterTypeID = -1 AND  \n" +
            "                   								((c.mountingTypeID = 3 AND (rl.numOfRows is not null OR rl.numOfRows <> pNewNoOfRows))  \n" +
            "                   									OR (c.mountingTypeID = 2 AND rl.numOfRows is not null AND rl.numOfRows <> pNewNoOfRows)  \n" +
            "                   								 ) THEN  \n" +
            "                   							 0 ELSE 1 END)  \n" +
            "                   						ELSE rla.mismatchNumberOfRowsStep END),  \n" +
            "                   		rla.uomMismatchedStep = (CASE WHEN pOldUOM <> pNewUOM  THEN (CASE WHEN @newUOMClassID <> ul.measurementTypeID THEN 0 ELSE 1 END) ELSE rla.uomMismatchedStep END),  \n" +
            "                   		rla.description = CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id),REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id)),'')),  \n" +
            "				rla.epoxyStep = (CASE WHEN pOldFeature <> pNewFeature  THEN (CASE WHEN LOCATE('EPOXY', UPPER(pNewFeature)) > 0 THEN 0 ELSE 1 END) ELSE rla.epoxyStep END),  \n" +
            "                   		rla.customerApproval = 'P',  \n" +
            "                   		rla.customerApprovalBy = NULL,  \n" +
            "                   		rla.customerApprovalDate = NULL,  \n" +
            "                   		rla.updatedAt = UTC_TIMESTAMP(),  \n" +
            "                   		rla.updatedBy = pUserId,  \n" +
            "                   		rla.updateByRoleId = pUserRoleId  \n" +
            "                   	WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	/* Update BOM set drive tool require error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pNewDriverToolRequired = 1 THEN  \n" +
            "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),''),  \n" +
            "                   						'  \n" +
            "', fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id))  \n" +
            "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),'') END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	  /* Update BOM set matting part require error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pNewMatingPartRquired = 1 THEN  \n" +
            "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),''),  \n" +
            "                   						'  \n" +
            "', fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id))  \n" +
            "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),'') END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	  /* Update BOM set pickup pad require error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pNewPickupPadRequired = 1 THEN  \n" +
            "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),''),  \n" +
            "                   						'  \n" +
            "', fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id))  \n" +
            "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),'') END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "                   	/* Update BOM set functional testing required error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN  \n" +
            "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),''),  \n" +
            "                   						'  \n" +
            "', fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id))  \n" +
            "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),'') END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	  /* Update BOM set Programming error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pNewProgramingRequired = 1 THEN  \n" +
            "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),''),  \n" +
            "                   						'  \n" +
            "', fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id))  \n" +
            "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),'') END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	  /* Update BOM set Pin Mismatch error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
            "                   					(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN  \n" +
            "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),''),  \n" +
            "                   						'  \n" +
            "', fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id))  \n" +
            "                   					ELSE  \n" +
            "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),'')  \n" +
            "                   					END)  \n" +
            "                   				     ELSE rla.description END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	  /* Update BOM set Obsolate error description Detail where part is used where part is added */  \n" +
            "					SELECT cps.name INTO @oldPartStatus FROM component_partstatusmst cps WHERE id = pOldPartStatus;  \n" +
            "					SELECT cps.name INTO @newPartStatus FROM component_partstatusmst cps WHERE id = pNewPartStatus;  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                        JOIN component c ON c.id = rla.mfgpnID  \n" +
            "                   		JOIN component_partstatusmst ps ON ps.id = c.partStatus  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pOldPartStatus <> pNewPartStatus THEN  \n" +
            "                   					(CASE WHEN pNewPartStatus <> vActivePartStatusID THEN  \n" +
            "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id),ps.name,@oldPartStatus)),''),  \n" +
            "                   						'  \n" +
            "', REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id),ps.name,@newPartStatus))  \n" +
            "                   					WHEN pNewPartStatus = vActivePartStatusID THEN  \n" +
            "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id),ps.name,@oldPartStatus)),'')  \n" +
            "                   					END)  \n" +
            "                   				ELSE rla.description END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pOldNoOfRows <> pNewNoOfRows  THEN  \n" +
            "                   					(CASE WHEN c.connecterTypeID = -1 AND  \n" +
            "                   						((c.mountingTypeID = 3 AND (rl.numOfRows is not null OR rl.numOfRows <> pNewNoOfRows))  \n" +
            "                   							OR (c.mountingTypeID = 2 AND rl.numOfRows is not null AND rl.numOfRows <> pNewNoOfRows)  \n" +
            "                   						 ) THEN  \n" +
            "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),''),  \n" +
            "                   							'  \n" +
            "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id))  \n" +
            "                   					 ELSE  \n" +
            "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),'')  \n" +
            "                   					  END)  \n" +
            "                   				ELSE rla.description END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "                   	  /* Update BOM set UOM Mismatch error description Detail where part is used where part is added */  \n" +
            "  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
            "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
            "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = ( CASE WHEN pOldUOM <> pNewUOM  THEN  \n" +
            "                   					(CASE WHEN @newUOMClassID <> ul.measurementTypeID THEN  \n" +
            "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',REPLACE(REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName),'<% UOM %>',ul.unitName)),''),  \n" +
            "                   							'  \n" +
            "', REPLACE(REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@newUOMName),'<% UOM %>',ul.unitName))  \n" +
            "                   					ELSE  \n" +
            "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',REPLACE(REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName),'<% UOM %>',ul.unitName)),'')  \n" +
            "                   					END)  \n" +
            "                   				ELSE rla.description END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
            "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
            "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
            "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
            "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
            "                   	   SET  \n" +
            "                   		rla.description = (CASE WHEN pOldFeature <> pNewFeature  THEN  \n" +
            "								(CASE WHEN LOCATE('EPOXY', UPPER(pNewFeature)) > 0 THEN  \n" +
            "									CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),''),  \n" +
            "									'  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id))  \n" +
            "								ELSE  \n" +
            "									REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
            "',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),'')  \n" +
            "								END)  \n" +
            "							ELSE  \n" +
            "								IFNULL(rla.description,'')  \n" +
            "							END)  \n" +
            "                   	  WHERE rla.isDeleted = 0;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 05-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5124,'2.00','V1','Bug 35783: QA Testing findings for check #22675: In Part master if we have any property which we will used in BOM validations - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5124:
  allDbChangesArray.push(
  /* **************************** New Script -> 06-08-2021 *********************************** */
      "ALTER TABLE salesordermst ADD COLUMN isLegacyPO TINYINT DEFAULT 0;  \n" +
  /* **************************** Add Script Version -> 06-08-2021 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5125,'2.00','V1',' Sales Order table - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5125:
			  allDbChangesArray.push(
			  /* **************************** New Script -> 06-08-2021 *********************************** */
				  "	call sproc_Utility_UpdateIconInPageDetail('Purchase List','mdi mdi-cart-outline');  \n" +
				  "	call sproc_Utility_UpdateIconInPageDetail('Purchase','mdi mdi-cart-outline');  \n" +
			  /* **************************** Add Script Version -> 06-08-2021 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (5126,'2.00','V1',' Icon changes Purchase and purchase list - RITUL '," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
   case 5126:
  allDbChangesArray.push(
  /* **************************** New Script -> 06-08-2021 *********************************** */
      "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
      "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
      "    SELECT  \n" +
      "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
      "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
      "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
      "        `a`.`poNumber` AS `Po Number`,  \n" +
      "        `a`.`poDate` AS `Po Date`,  \n" +
      "        `a`.`customerID` AS `Customer ID`,  \n" +
      "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
      "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
      "        `a`.`status` AS `Sales Order Status`,  \n" +
      "        `a`.`revision` AS `Revision`,  \n" +
      "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
      "        `a`.`termsID` AS `Terms ID`,  \n" +
      "        `a`.`soDate` AS `So Date`,  \n" +
      "        `a`.`partID` AS `PartID`,  \n" +
      "        `a`.`PIDCode` AS `Assy ID`,  \n" +
      "        `a`.`mfgPN` AS `Assy Name`,  \n" +
      "        `a`.`rev` AS `Assy Revision`,  \n" +
      "        `a`.`nickName` AS `NickName`,  \n" +
      "        `a`.`liveVersion` AS `liveVersion`,  \n" +
      "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
      "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
      "        `a`.`qty` AS `PO Qty`,  \n" +
      "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
      "        `a`.`shippingQty` AS `shippingQty`,  \n" +
      "        `a`.`companyName` AS `Company Name`,  \n" +
      "        `a`.`internalPO` AS `internalPO`,  \n" +
      "        `a`.`mfgCode` AS `mfgCode`,  \n" +
      "        `a`.`fullName` AS `Full Name`,  \n" +
      "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
      "        `a`.`isCancle` AS `isCancle`,  \n" +
      "        `a`.`cancleReason` AS `cancleReason`,  \n" +
      "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
      "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
      "        `a`.`shippingDate` AS `shippingDate`,  \n" +
      "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
      "        `a`.`remark` AS `remark`,  \n" +
      "        `a`.`price` AS `price`,  \n" +
      "        `a`.`mrpQty` AS `mrpQty`,  \n" +
      "        `a`.`kitQty` AS `kitQty`,  \n" +
      "        `a`.`isHotJob` AS `isHotJob`,  \n" +
      "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
      "        `a`.`RoHSName` AS `RoHSName`,  \n" +
      "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
      "        `a`.`lineID` AS `lineID`,  \n" +
      "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
      "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
      "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
      "        (CASE  \n" +
      "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
      "            WHEN  \n" +
      "                ((`a`.`salesOrderDetStatus` = 1)  \n" +
      "                    OR (`a`.`salesOrderDetailId` IS NULL))  \n" +
      "            THEN  \n" +
      "                'In Progress'  \n" +
      "            ELSE 'Completed'  \n" +
      "        END) AS `Status`,  \n" +
      "        `a`.`modifyDate` AS `modifyDate`,  \n" +
      "        `a`.`createdDate` AS `createdDate`,  \n" +
      "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
      "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
      "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
      "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
      "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
      "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
      "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
      "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
      "        `a`.`kitnumber` AS `kitnumber`,  \n" +
      "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
      "        `a`.`partDescription` AS `partDescription`,  \n" +
      "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
      "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
      "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
      "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
      "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
      "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
      "        `a`.`internalComment` AS `internalComment`,  \n" +
      "        `a`.`partCategory` AS `partCategory`,  \n" +
      "        `a`.`serialNumber` AS `serialNumber`,  \n" +
      "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
      "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
      "        `a`.`poRevision` AS `poRevision`,  \n" +
      "        `a`.`partType` AS `partType`,  \n" +
      "        (CASE  \n" +
      "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
      "            ELSE `a`.`salesOrderDetStatus`  \n" +
      "        END) AS `salesOrderDetStatus`,  \n" +
      "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
      "        `a`.`frequency` AS `frequency`,  \n" +
      "        `a`.`refSODetID` AS `refSODetID`,  \n" +
      "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`  \n" +
      "    FROM  \n" +
      "        (SELECT  \n" +
      "            `sm`.`id` AS `salesOrderId`,  \n" +
      "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
      "                `sm`.`poNumber` AS `poNumber`,  \n" +
      "                `sm`.`poDate` AS `poDate`,  \n" +
      "                `sm`.`customerID` AS `customerID`,  \n" +
      "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
      "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
      "                `sm`.`status` AS `status`,  \n" +
      "                `sm`.`revision` AS `revision`,  \n" +
      "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
      "                `sm`.`termsID` AS `termsID`,  \n" +
      "                `sm`.`soDate` AS `soDate`,  \n" +
      "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
      "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
      "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
      "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
      "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
      "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
      "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
      "                    ELSE 'No'  \n" +
      "                END) AS `blanketPOText`,  \n" +
      "                `sm`.`poRevision` AS `poRevision`,  \n" +
      "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
      "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
      "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
      "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
      "                `co`.`PIDCode` AS `PIDCode`,  \n" +
      "                `co`.`mfgPN` AS `mfgPN`,  \n" +
      "                `co`.`rev` AS `rev`,  \n" +
      "                `co`.`nickName` AS `nickName`,  \n" +
      "                `co`.`liveVersion` AS `liveVersion`,  \n" +
      "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
      "                `co`.`isCustom` AS `isCustomPart`,  \n" +
      "                `co`.`partType` AS `partType`,  \n" +
      "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
      "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
      "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
      "                `cu`.`isCompany` AS `internalPO`,  \n" +
      "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
      "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
      "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
      "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
      "                `roh`.`name` AS `RoHSName`,  \n" +
      "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
      "                `a`.`qty` AS `qty`,  \n" +
      "                `a`.`id` AS `salesOrderDetailId`,  \n" +
      "                `a`.`kitNumber` AS `kitnumber`,  \n" +
      "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
      "                `a`.`partDescription` AS `partDescription`,  \n" +
      "                `a`.`partID` AS `partID`,  \n" +
      "                `a`.`isCancle` AS `isCancle`,  \n" +
      "                `a`.`isHotJob` AS `isHotJob`,  \n" +
      "                `a`.`cancleReason` AS `cancleReason`,  \n" +
      "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
      "                 sh.shippingDate as shippingDate,  \n" +
      "                 wsd.wosalesOrderDetail as wosalesOrderDetail,  \n" +
      "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
      "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
      "                `a`.`remark` AS `remark`,  \n" +
      "                `a`.`price` AS `price`,  \n" +
      "                `a`.`mrpQty` AS `mrpQty`,  \n" +
      "                `a`.`kitQty` AS `kitQty`,  \n" +
      "                `a`.`shippingQty` AS `shippingQty`,  \n" +
      "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
      "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
      "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
      "                `a`.`internalComment` AS `internalComment`,  \n" +
      "                `a`.`partCategory` AS `partCategory`,  \n" +
      "                `a`.`lineID` AS `lineID`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
      "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
      "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
      "                    ELSE ''  \n" +
      "                END) AS `frequency`,  \n" +
      "                `a`.`refSODetID` AS `refSODetID`,  \n" +
      "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
      "                IFNULL(sq.ShippedQty,0) AS ShippedQty,  \n" +
      "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
      "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
      "        FROM  \n" +
      "            ((((((((`salesordermst` `sm`  \n" +
      "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
      "            AND (`a`.`isDeleted` = 0)  \n" +
      "            AND (`sm`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
      "            AND (`cu`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
      "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
      "            AND (`mg`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
      "            AND (`roh`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
      "            AND (`cc`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
      "            AND (`gc`.`isDeleted` = 0))))  \n" +
      "		LEFT JOIN (  \n" +
      "        SELECT  \n" +
      "                        cpd.refSalesorderDetid, IFNULL(SUM(`cpd`.`shipQty`), 0) ShippedQty  \n" +
      "                    FROM  \n" +
      "                        `customer_packingslip_det` cpd JOIN customer_packingslip cps ON cps.id=cpd.refCustPackingSlipID  \n" +
      "                    WHERE cps.transType='P' AND cpd.isDeleted=0  GROUP BY cpd.refSalesorderDetid  \n" +
      "        )sq ON sq.refSalesorderDetid=`a`.`id`  \n" +
      "        LEFT JOIN(  \n" +
      "			SELECT  \n" +
      "                        `x`.`salesOrderDetailID`,IF(COUNT(1)>0,1,0) wosalesOrderDetail  \n" +
      "                    FROM  \n" +
      "                        `workorder_salesorder_details` `x`  \n" +
      "                    WHERE  \n" +
      "                        `x`.`isDeleted` = 0 GROUP BY `x`.`salesOrderDetailID`  \n" +
      "        ) wsd on wsd.salesOrderDetailID=`a`.`id`  \n" +
      "        LEFT JOIN (  \n" +
      "        SELECT  \n" +
      "                      `ssm`.`sDetID` , MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) shippingDate  \n" +
      "                    FROM  \n" +
      "                        `salesshippingmst` `ssm`  \n" +
      "                    WHERE `ssm`.`isDeleted` = 0 GROUP BY `ssm`.`sDetID`  \n" +
      "        )sh on sh.sDetID=`a`.`id`  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
      "                `s`.`refAssyId` AS `refAssyId`,  \n" +
      "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
      "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
      "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
      "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
      "        FROM  \n" +
      "            (`salesorder_plan_detailsmst` `s`  \n" +
      "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
      "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
      "        WHERE  \n" +
      "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
  /* **************************** Add Script Version -> 06-08-2021 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5127,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
        case 5127:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-08-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
            "	IN pFromPartID INT,  \n" +
            "    IN pNewEpicorType varchar(50),  \n" +
            "    IN pNewAssemblyType INT,  \n" +
            "    IN pNewMfgcodeID INT,  \n" +
            "    IN pNewCustAssyPN varchar(500),  \n" +
            "    IN pNewPartRev varchar(50),  \n" +
            "    IN pNewMfgPN varchar(100),  \n" +
            "    IN pNewAssyCode varchar(50),  \n" +
            "    IN pNewNickName varchar(50),  \n" +
            "    IN pNewPIDCode varchar(109),  \n" +
            "    IN pIsCPN tinyint,  \n" +
            "    IN pIsCustom tinyInt,  \n" +
            "    IN pUserID Int,  \n" +
            "    IN pUserRoleId Int,  \n" +
            "    IN pIsAttribute tinyint,  \n" +
            "    IN pIsSettings tinyint,  \n" +
            "    IN pIsAdditionalAttibute tinyint,  \n" +
            "    IN pIsPackagingDetail tinyint,  \n" +
            "    IN pIsStandards tinyint,  \n" +
            "    IN pIsRequiredFunctionalType tinyint,  \n" +
            "    IN pIsRequiredMountingType tinyint,  \n" +
            "    IN pIsPackagingAliasPart tinyint,  \n" +
            "    IN pIsOtherPartName tinyint,  \n" +
            "    IN pIsAlternatePart tinyint,  \n" +
            "    IN pIsRoHSReplacementPart tinyint,  \n" +
            "    IN pIsDriveTool tinyint,  \n" +
            "    IN pIsProcessMaterial tinyint,  \n" +
            "    IN pIsRequiredMattingParts tinyint,  \n" +
            "    IN pIsPickupPad tinyint,  \n" +
            "    IN pIsFunctionalTesingTool tinyint,  \n" +
            "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
            "    IN pIsBOM tinyint,  \n" +
            "    IN pIsFluxType tinyInt,  \n" +
            "    IN pIsComments tinyInt,  \n" +
            "    IN pIsCopyImages tinyInt,  \n" +
            "    IN pIsCopyDatasheet tinyInt,  \n" +
            "    IN pIsCopyDocument tinyInt,  \n" +
            "    IN pIsOperationalAttirbutes tinyInt,  \n" +
            "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
            "    IN pIsTrackSNumber tinyInt,  \n" +
            "    IN pMfgPNDescription varchar(2000),  \n" +
            "    IN pDetailDescription varchar(2000)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "DECLARE vValidationPassed tinyint;  \n" +
            "DECLARE vFromPartCategory tinyint;  \n" +
            "DECLARE vFromMfgType varchar(5);  \n" +
            "DECLARE vCount INT;  \n" +
            "DECLARE vToPartID INT;  \n" +
            "DECLARE vUserRoleId INT;  \n" +
            "DECLARE vMisMatchFields longtext;  \n" +
            "DECLARE vSerialNumber varchar(20);  \n" +
            "DECLARE vMessage varchar(20);  \n" +
            "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
            "BEGIN  \n" +
            "	ROLLBACK;  \n" +
            "	RESIGNAL;  \n" +
            "END;  \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
            "  BEGIN  \n" +
            "	ROLLBACK;  \n" +
            "	RESIGNAL;  \n" +
            "END;  */  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
            "    select * from component where 1 = 2;  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
            "    select * from component where 1 = 2;  \n" +
            "  \n" +
            "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
            "    select * from component_alternatepn_validations where 1 = 2;  \n" +
            "  \n" +
            "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
            "  	set vCount = 0;  \n" +
            "    select co.category, m.mfgType, count(co.id)  \n" +
            "      into vFromPartCategory, vFromMfgType, vCount  \n" +
            "	  from component co  \n" +
            "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
            "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
            "  \n" +
            "	if vCount = 0 then  \n" +
            "		set vValidationPassed = 0;  \n" +
            "		select 'PART_NOT_FOUND' as message;  \n" +
            "	end if;  \n" +
            "  \n" +
            "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
            "		set pIsAttribute = 1;  \n" +
            "        set pIsAdditionalAttibute = 1;  \n" +
            "    end if;  \n" +
            "  \n" +
            "	set vCount = 0;  \n" +
            "    if (vFromPartCategory = 3) then # check category  \n" +
            "	   select count(1) into vCount  \n" +
            "		 from component co  \n" +
            "		where co.mfgcodeID = pNewMfgcodeID  \n" +
            "          and co.category = 3  \n" +
            "		  and co.custAssyPN = pNewCustAssyPN  \n" +
            "		  and co.rev = pNewPartRev  \n" +
            "          and co.isDeleted = 0  \n" +
            "		  and co.deletedAt is null;  \n" +
            "		if vCount > 0 then  \n" +
            "			set vValidationPassed = 0;  \n" +
            "            select 'DUPLICATE_REV' as message;  \n" +
            "        end if;  \n" +
            "  \n" +
            "         set vCount = 0;  \n" +
            "		 select count(1) into vCount  \n" +
            "			 from component co  \n" +
            "			where co.nickName != pNewNickName  \n" +
            "              and co.category = 3  \n" +
            "              and co.custAssyPN = pNewCustAssyPN  \n" +
            "              and co.mfgcodeID = pNewMfgcodeID  \n" +
            "			  and co.isDeleted = 0  \n" +
            "			  and co.deletedAt is null;  \n" +
            "		  if vCount > 0 then  \n" +
            "			set vValidationPassed = 0;  \n" +
            "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
            "						concat('(',m.mfgCode,') ',m.mfgName) mfrName  \n" +
            "				 from component co  \n" +
            "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
            "				where co.nickName != pNewNickName  \n" +
            "				  and co.category = 3  \n" +
            "				  and co.custAssyPN = pNewCustAssyPN  \n" +
            "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
            "				  and co.isDeleted = 0  \n" +
            "				  and co.deletedAt is null  \n" +
            "				  limit 1;  \n" +
            "		  end if;  \n" +
            "  \n" +
            "		set vCount = 0;  \n" +
            "		 select count(1) into vCount  \n" +
            "			 from component co  \n" +
            "			where co.nickName = pNewNickName  \n" +
            "              and co.category = 3  \n" +
            "              and co.custAssyPN != pNewCustAssyPN  \n" +
            "              and co.mfgcodeID = pNewMfgcodeID  \n" +
            "			  and co.isDeleted = 0  \n" +
            "			  and co.deletedAt is null;  \n" +
            "		 if vCount > 0 then  \n" +
            "			set vValidationPassed = 0;  \n" +
            "				select 'DUPLICATE_NICKNAME' as message,  \n" +
            "                        custAssyPN  \n" +
            "				 from component co  \n" +
            "				where co.nickName = pNewNickName  \n" +
            "				  and co.category = 3  \n" +
            "				  and co.custAssyPN != pNewCustAssyPN  \n" +
            "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
            "				  and co.isDeleted = 0  \n" +
            "				  and co.deletedAt is null  \n" +
            "				  limit 1;  \n" +
            "		  end if;  \n" +
            "	end if;  \n" +
            "  \n" +
            "    set vCount = 0;  \n" +
            "		select count(1) into vCount  \n" +
            "		 from component co  \n" +
            "		where co.mfgcodeID = pNewMfgcodeID  \n" +
            "		  and co.mfgPN = pNewMfgPN  \n" +
            "          and co.isDeleted = 0  \n" +
            "		  and co.deletedAt is null;  \n" +
            "	 if vCount > 0 then  \n" +
            "		set vValidationPassed = 0;  \n" +
            "        select 'DUPLICATE_MFGPN' as message;  \n" +
            "     end if;  \n" +
            "  \n" +
            "    set vCount = 0;  \n" +
            "		select count(1) into vCount  \n" +
            "		 from component co  \n" +
            "		where co.PIDCode = pNewPIDCode  \n" +
            "		  and co.isDeleted = 0  \n" +
            "		  and co.deletedAt is null;  \n" +
            "    if vCount > 0 then  \n" +
            "		set vValidationPassed = 0;  \n" +
            "        select 'DUPLICATE_PID' as message;  \n" +
            "	end if;  \n" +
            "  \n" +
            "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
            "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
            "													'MPNSystemID'  \n" +
            "												else 'SPNSystemID' end,  \n" +
            "											 true);  \n" +
            "		  select systemID, message into vSerialNumber, vMessage  \n" +
            "		  from temp_serialNumber;  \n" +
            "        if vMessage is not null and vMessage != '' then  \n" +
            "			set vValidationPassed = 0;  \n" +
            "			select vMessage as message;  \n" +
            "		end if;  \n" +
            "	end if;  \n" +
            "  \n" +
            "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
            "		-- START TRANSACTION;  \n" +
            "		insert into component(  \n" +
            "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
            "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
            "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
            "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
            "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
            "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
            "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
            "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
            "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
            "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference)  \n" +
            "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
            "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
            "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
            "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
            "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
            "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
            "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
            "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
            "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
            "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
            "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
            "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
            "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
            "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
            "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
            "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
            "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
            "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
            "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
            "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
            "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
            "                internalReference  \n" +
            "		 from component  \n" +
            "		where id = pFromPartID;  \n" +
            "		set vToPartID = LAST_INSERT_ID();  \n" +
            "  \n" +
            "		IF pIsAttribute  then  \n" +
            "			UPDATE `component` toPart,  \n" +
            "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
            "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
            "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
            "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
            "			SET  \n" +
            "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
            "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
            "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
            "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
            "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
            "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
            "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
            "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
            "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
            "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
            "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
            "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
            "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
            "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
            "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
            "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
            "			toPart.`pitch` = fromPart.pitch,  \n" +
            "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
            "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
            "			toPart.`length` = fromPart.length,  \n" +
            "			toPart.`width` = fromPart.width,  \n" +
            "			toPart.`heightText` = fromPart.heightText,  \n" +
            "			toPart.`height` = fromPart.height,  \n" +
            "			toPart.`updatedBy` = pUserID,  \n" +
            "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
            "			toPart.`updatedAt` = current_timestamp()  \n" +
            "			WHERE toPart.`id` = vToPartID;  \n" +
            "		end if;  \n" +
            "		IF pIsSettings then  \n" +
            "			UPDATE `component` toPart,  \n" +
            "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
            "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
            "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
            "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
            "			SET  \n" +
            "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
            "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
            "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
            "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
            "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
            "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
            "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
            "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
            "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
            "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
            "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
            "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
            "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
            "			toPart.`eau` = fromPart.eau,  \n" +
            "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
            "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
            "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
            "			toPart.`bomLock` = fromPart.bomLock,  \n" +
            "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
            "			toPart.`updatedBy` = pUserID,  \n" +
            "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
            "			toPart.`updatedAt` = current_timestamp()  \n" +
            "			WHERE toPart.`id` = vToPartID;  \n" +
            "			INSERT INTO `component_temperature_sensitive_data`  \n" +
            "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
            "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
            "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
            "		end if;  \n" +
            "		IF pIsAdditionalAttibute then  \n" +
            "			UPDATE `component` toPart,  \n" +
            "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
            "			from component where id = pFromPartID) fromPart  \n" +
            "			SET  \n" +
            "			toPart.`tolerance` = fromPart.tolerance,  \n" +
            "			toPart.`voltage` = fromPart.voltage,  \n" +
            "			toPart.`value` = fromPart.value,  \n" +
            "			toPart.`partPackage` = fromPart.partPackage,  \n" +
            "			toPart.`powerRating` = fromPart.powerRating,  \n" +
            "			toPart.`weight` = fromPart.weight,  \n" +
            "			toPart.`feature` = fromPart.feature,  \n" +
            "			toPart.`color` = fromPart.color,  \n" +
            "			toPart.`updatedBy` = pUserID,  \n" +
            "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
            "			toPart.`updatedAt` = current_timestamp()  \n" +
            "			WHERE toPart.`id` = vToPartID;  \n" +
            "		end if;  \n" +
            "		IF pIsPackagingDetail then  \n" +
            "			UPDATE `component` toPart,  \n" +
            "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
            "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart  \n" +
            "			SET  \n" +
            "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
            "			toPart.`packagingID` = fromPart.packagingID,  \n" +
            "			toPart.`minimum` = fromPart.minimum,  \n" +
            "			toPart.`mult` = fromPart.mult,  \n" +
            "			toPart.`packageQty` = fromPart.packageQty,  \n" +
            "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
            "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
            "			toPart.`uom` = fromPart.uom,  \n" +
            "			toPart.`uomText` = fromPart.uomText,  \n" +
            "			toPart.`unit` = fromPart.unit,  \n" +
            "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
            "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
            "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
            "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
            "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
            "			toPart.`updatedBy` = pUserID,  \n" +
            "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
            "			toPart.`updatedAt` = current_timestamp()  \n" +
            "			WHERE toPart.`id` = vToPartID;  \n" +
            "		end if;  \n" +
            "		if pIsStandards then  \n" +
            "			UPDATE `component` toPart,  \n" +
            "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
            "			SET  \n" +
            "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
            "			toPart.`htsCode` = fromPart.htsCode,  \n" +
            "			toPart.`updatedBy` = pUserID,  \n" +
            "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
            "			toPart.`updatedAt` = current_timestamp()  \n" +
            "			WHERE toPart.`id` = vToPartID;  \n" +
            "			INSERT INTO `component_standard_details`  \n" +
            "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
            "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
            "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
            "			and not exists (select 1 from component_standard_details csd  \n" +
            "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
            "		end if;  \n" +
            "		if pIsRequiredMountingType then  \n" +
            "			INSERT INTO `component_requiremountingtype`  \n" +
            "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
            "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
            "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
            "			and not exists (select 1 from component_requiremountingtype  \n" +
            "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
            "		end if;  \n" +
            "		if pIsRequiredFunctionalType then  \n" +
            "			INSERT INTO `component_requirefunctionaltype`  \n" +
            "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
            "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
            "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
            "			and not exists (select 1 from component_requirefunctionaltype  \n" +
            "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
            "		end if;  \n" +
            "		IF pIsAcceptableShippinCountry then  \n" +
            "			INSERT INTO component_acceptable_shipping_countries  \n" +
            "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
            "			SELECT  \n" +
            "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
            "			FROM  \n" +
            "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
            "		end if;  \n" +
            "  \n" +
            "		IF(pIsPackagingAliasPart)  \n" +
            "		THEN  \n" +
            "			set vMisMatchFields  = '';  \n" +
            "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
            "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
            "		END IF;  \n" +
            "		IF(vValidationPassed = 0)  \n" +
            "		THEN  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
            "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
            "		ELSE  \n" +
            "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
            "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
            "  \n" +
            "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
            "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
            "			THEN  \n" +
            "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
            "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
            "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
            "			end if;  \n" +
            "            IF(vValidationPassed = 0)  \n" +
            "			THEN  \n" +
            "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
            "			ELSE  \n" +
            "				if pIsPackagingAliasPart then  \n" +
            "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
            "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
            "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
            "						# update packaging alias group id as new packaging alias group id in component table  \n" +
            "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
            "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
            "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
            "						INSERT INTO `component_packagingalias`  \n" +
            "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
            "						values  \n" +
            "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
            "						INSERT INTO `component_packagingalias`  \n" +
            "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
            "						values  \n" +
            "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
            "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
            "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
            "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
            "					# Insert data in packaging alias table for ToPartID  \n" +
            "						INSERT INTO `component_packagingalias`  \n" +
            "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
            "						values  \n" +
            "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
            "					# Update data for packaging alias group id for  ToPartID  \n" +
            "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
            "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
            "					# Insert data in packaging alias table for ToPartID  \n" +
            "						INSERT INTO `component_packagingalias`  \n" +
            "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
            "						values  \n" +
            "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
            "					# Update data for packaging alias group id for  FromPartID  \n" +
            "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
            "					end if;  \n" +
            "				end if;  \n" +
            "				if pIsOtherPartName then  \n" +
            "					INSERT INTO `component_otherpn`  \n" +
            "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
            "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
            "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
            "					and not exists (select 1 from component_otherpn  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
            "				end if;  \n" +
            "				If pIsAlternatePart then  \n" +
            "					INSERT INTO `component_alternatepn`  \n" +
            "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
            "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
            "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
            "					and not exists (select 1 from component_alternatepn  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
            "				end if;  \n" +
            "				if pIsRoHSReplacementPart then  \n" +
            "					INSERT INTO `component_alternatepn`  \n" +
            "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
            "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
            "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
            "					and not exists (select 1 from component_alternatepn  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
            "				end if;  \n" +
            "				if pIsDriveTool then  \n" +
            "					INSERT INTO `component_drivetools`  \n" +
            "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
            "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
            "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
            "					and not exists (select 1 from component_drivetools  \n" +
            "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
            "				end if;  \n" +
            "				if pIsProcessMaterial then  \n" +
            "					INSERT INTO `component_processmaterial`  \n" +
            "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
            "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
            "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
            "					and not exists (select 1 from component_processmaterial  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
            "				end if;  \n" +
            "				if pIsRequiredMattingParts then  \n" +
            "					INSERT INTO `component_alternatepn`  \n" +
            "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
            "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
            "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
            "					and not exists (select 1 from component_alternatepn  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
            "				end if;  \n" +
            "				if pIsPickupPad then  \n" +
            "					INSERT INTO `component_alternatepn`  \n" +
            "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
            "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
            "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
            "					and not exists (select 1 from component_alternatepn  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
            "				end if;  \n" +
            "				if pIsFunctionalTesingTool then  \n" +
            "					INSERT INTO `component_alternatepn`  \n" +
            "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
            "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
            "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
            "					and not exists (select 1 from component_alternatepn  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
            "				end if;  \n" +
            "				if pIsFinctionalRestingEquipment then  \n" +
            "					INSERT INTO `component_functionaltestingequipment`  \n" +
            "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
            "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
            "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
            "					and not exists (select 1 from component_functionaltestingequipment  \n" +
            "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
            "				end if;  \n" +
            "				if (vFromPartCategory = 3) then  \n" +
            "					if pIsBOM then  \n" +
            "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
            "					end if;  \n" +
            "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
            "				end if;  \n" +
            "				if(pIsComments = 1) THEN  \n" +
            "						INSERT INTO componenet_inspection_requirement_det  \n" +
            "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
            "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
            "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
            "						INSERT INTO assembly_revision_comments  \n" +
            "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
            "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
            "							partID = pFromPartID;  \n" +
            "				END IF;  \n" +
            "  \n" +
            "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
            "				IF pIsCopyImages  then  \n" +
            "					insert into component_images  \n" +
            "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
            "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
            "					 from component_images  \n" +
            "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
            "				end if;  \n" +
            "				IF pIsCopyDatasheet  then  \n" +
            "					insert into component_datasheets  \n" +
            "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
            "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
            "					from component_datasheets  \n" +
            "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
            "				end if;  \n" +
            "				IF pIsOperationalAttirbutes  then  \n" +
            "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
            "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
            "					SELECT  \n" +
            "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
            "					FROM  \n" +
            "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
            "				end if;  \n" +
            "				IF pIsCopyDocument then  \n" +
            "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
            "					INSERT INTO generic_folder  \n" +
            "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
            "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
            "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
            "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
            "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
            "					FROM generic_folder a  \n" +
            "					WHERE a.refTransID = pFromPartID  \n" +
            "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
            "  \n" +
            "					UPDATE generic_folder gf1,  \n" +
            "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
            "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
            "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
            "					) gf2  \n" +
            "					SET gf1.refParentId = gf2.gencFolderID  \n" +
            "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
            "					AND gf1.refTransID = vToPartID  \n" +
            "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
            "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
            "  \n" +
            "					INSERT INTO genericfiles  \n" +
            "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
            "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
            "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
            "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
            "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
            "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
            "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
            "  \n" +
            "					UPDATE genericfiles gf1,  \n" +
            "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
            "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
            "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
            "					) gf2  \n" +
            "					SET gf1.refParentId = gf2.gencFolderID  \n" +
            "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
            "					AND gf1.refTransID = vToPartID  \n" +
            "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
            "				end if;  \n" +
            "  \n" +
            "				-- commit;  \n" +
            "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
            "				IF(@documentPathOfFromPart is null)  \n" +
            "				THEN  \n" +
            "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
            "				END IF;  \n" +
            "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "	end if;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 06-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5128,'2.00','V1',' Create duplicate part- SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        break;
        case 5128:
          allDbChangesArray.push(
          /* **************************** New Script -> 06-08-2021 *********************************** */
          "INSERT INTO page_detail(pageName,RO,RW,  \n" +
          "menuRoute,pageRoute,pageURL,  \n" +
          "menuName,parentPageID,hasChild,  \n" +
          "orderBy,tablevel,iconClass,  \n" +
          "isActive,createdBy,isDeleted,  \n" +
          "isDisplay,displayMenuName,isAllowAsHomePage,  \n" +
          "isPopup)  \n" +
          "VALUES  \n" +
          "('Application & Service Status',0,0,  \n" +
          "'setting.system.developer.statuspage','app.servicestatuspage','/status-service/service-status.html',  \n" +
          "'Application & Service Status',@pageID,0,  \n" +
          "72,1,'icons-service-status',  \n" +
          "1,1,0,  \n" +
          "1,'Application & Service Status',1,  \n" +
          "0);  \n" +
          "  \n" +
          "  \n" +
          "UPDATE page_detail  \n" +
          "SET orderBy = \"22\",  \n" +
          "menuRoute=\"setting.system.companyprofile\"  \n" +
          "WHERE menuName=\"Company Profile\";  \n" +
          /* **************************** Add Script Version -> 06-08-2021 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5129,'2.00','V1','Company Profile and Service Status Page Added - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
          );
        break;
        case 5129:
            allDbChangesArray.push(
            /* **************************** New Script -> 09-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyPOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT ,  \n" +
                "    IN pIsShowAllPO tinyint)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "    DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF !pIsShowAllPO THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");  \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"  \n" +
                "	select a.salesOrderDetailId,  \n" +
                "		a.soID,  \n" +
                "		a.poNumber,  \n" +
                "		a.poDate,  \n" +
                "		a.soNumber,  \n" +
                "		a.PartID,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,  \n" +
                "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,  \n" +
                "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN  \n" +
                "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))  \n" +
                "			ELSE 0 END) AS excessShipQty,  \n" +
                "		a.buildQty,  \n" +
                "        a.woCount  \n" +
                "        from (SELECT  \n" +
                "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,  \n" +
                "				vu_ssr.`Sales Order ID` soID,  \n" +
                "				vu_ssr.`Po Number` poNumber,  \n" +
                "				vu_ssr.`Po Date` poDate,  \n" +
                "				vu_ssr.`Sales Order` soNumber,  \n" +
                "				vu_ssr.`PO Qty` poQty,  \n" +
                "				vu_ssr.`Shipped Qty` shippedQty,  \n" +
                "				vu_ssr.`Balanced Due Qty` backOrderQty,  \n" +
                "				vu_ssr.`PartID` PartID,  \n" +
                "				ka.perAssyBuildQty AS    qpa,  \n" +
                "                vu_ssr.`Status` status,  \n" +
                "				vu_ssr.`lineID` lineID,  \n" +
                "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
                "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0)  \n" +
                "                FROM workorder_salesorder_details wsd  \n" +
                "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0  \n" +
                "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty ,  \n" +
                "                 (select count(vwss.woid) from  vu_workorder_summary_stk vwss  \n" +
                "                JOIN vu_workorder_salesorder_details vwsd ON vwsd.woID = vwss.woID  \n" +
                "                LEFT JOIN workorder wo on ifnull(wo.terminateWOID,wo.woID) = vwss.woID  \n" +
                "                where FIND_IN_SET (vu_ssr.`Po Number`,replace(vwsd.poNumber,' ', ''))  \n" +
                "                and vwss.partID = \",pPartID , \")  woCount  \n" +
                "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`  \n" +
                "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0 ) a \", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 09-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5130,'2.00','V1','Sproc_GetAssemblyPOStockDetails - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        break;
    case 5130:
        allDbChangesArray.push(
        /* **************************** New Script -> 09-08-2021 *********************************** */
        "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
        "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
        "	IN pPageIndex INT,  \n" +
        "	IN pRecordPerPage INT,  \n" +
        "	IN pOrderBy VARCHAR(255),  \n" +
        "	IN pWhereClause VARCHAR(16383),  \n" +
        "	IN pReceiptType VARCHAR(30),  \n" +
        "	IN pMfgCodeIds LONGTEXT,  \n" +
        "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
        "	IN pDueDate DATE,  \n" +
        "	IN pAdditionalDays INT,  \n" +
        "	IN pTermsAndAboveDays INT,  \n" +
        "	IN pInvoiceNumber VARCHAR(50),  \n" +
        "	IN pIsExactSearch TINYINT,  \n" +
        "	IN pMfrPnId INT,  \n" +
        "    IN pInvoiceIds LONGTEXT,  \n" +
        "    IN pExactPaymentNumberSearch TINYINT,  \n" +
        "    IN pPaymentNumber VARCHAR(50),  \n" +
        "    IN pPaymentTermsIds LONGTEXT,  \n" +
        "    IN pInvoiceFromDate DATE,  \n" +
        "    IN pInvoiceToDate DATE  \n" +
        ")  \n" +
        "BEGIN  \n" +
        "	DECLARE pOffset INT;  \n" +
        "	DECLARE rowNumWhere VARCHAR(255);  \n" +
        "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
        "	DECLARE v_TimeZone VARCHAR(50);  \n" +
        "    DECLARE vCurrentDate DATE;  \n" +
        "    DECLARE vMfgCodeFormat INT;  \n" +
        "  \n" +
        "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
        "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
        "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
        "  \n" +
        "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
        "  \n" +
        "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
        "			SELECT 		p.id,  \n" +
        "					p.systemId,  \n" +
        "					p.poNumber,  \n" +
        "                    p.poDate,  \n" +
        "                    p.refPurchaseOrderID poId,  \n" +
        "					p.mfgCodeID,  \n" +
        "					p.supplierSONumber,  \n" +
        "                    p.soDate,  \n" +
        "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
        "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
        "					p.packingSlipDate,  \n" +
        "					p.invoiceNumber,  \n" +
        "                    p.lockStatus invoiceLockStatus,  \n" +
        "					p.invoiceDate,  \n" +
        "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
        "					p.creditMemoNumber,  \n" +
        "                    p.lockStatus creditMemoLockStatus,  \n" +
        "					p.creditMemoDate,  \n" +
        "					p.debitMemoNumber,  \n" +
        "                    p.refSupplierCreditMemoNumber,  \n" +
        "                    p.lockStatus debitMemoLockStatus,  \n" +
        "					p.debitMemoDate,  \n" +
        "					p.receiptDate,  \n" +
        "					p.description,  \n" +
        "					p.billToAddress,  \n" +
        "					p.shipToAddress,  \n" +
        "					p.poVersion,  \n" +
        "					p.isDeleted,  \n" +
        "					p.receiptType,  \n" +
        "					p.`status`,  \n" +
        "					p.applyDate,  \n" +
        "					p.refParentCreditDebitInvoiceno,  \n" +
        "					p.refPackingSlipNumberForInvoice,  \n" +
        "					p.invoiceTotalDue,  \n" +
        "					p.isTariffInvoice,  \n" +
        "					p.creditMemoType,  \n" +
        "                    (  \n" +
        "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
        "								'Invoice Credit Memo (Auto)'  \n" +
        "							WHEN p.creditMemoType = 'MC' THEN  \n" +
        "								'MISC Credit Memo'  \n" +
        "							WHEN p.creditMemoType = 'RC' THEN  \n" +
        "								'RMA Credit Memo'  \n" +
        "							WHEN p.creditMemoType = 'ID' THEN  \n" +
        "								'Invoice Debit Memo (Auto)'  \n" +
        "							WHEN p.creditMemoType = 'MD' THEN  \n" +
        "								'MISC Debit Memo'  \n" +
        "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
        "								'Invoice'  \n" +
        "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
        "								'MISC Invoice'  \n" +
        "						END  \n" +
        "					) subTypeValue,  \n" +
        "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
        "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
        "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
        "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
        "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
        "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
        "                    m.mfgName supplierName,  \n" +
        "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
        "					m.mfgCode supplierCodeName,  \n" +
        "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
        "					pg.packingSlipDocCount,  \n" +
        "					pd.itemReceived,  \n" +
        "					pd.otherChargesItemReceived,  \n" +
        "					pd.itemDisapproved,  \n" +
        "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
        "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
        "					ps.status parentInvoiceStatus,  \n" +
        "					ps.invoiceNumber refInvoiceNumber,  \n" +
        "                    ps.lockStatus refInvoiceLockStatus,  \n" +
        "					ps.creditMemoType parentCreditMemoType,  \n" +
        "					pd.totalExtendedAmount,  \n" +
        "                    pd.totalDiscount,  \n" +
        "					pe.totalCreditAmount,  \n" +
        "					pe.totalDebitAmount,  \n" +
        "					(  \n" +
        "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
        "					) amountToPay,  \n" +
        "                    pd.totalExtendedReceivedPrice,  \n" +
        "					pd.packingDetailNote,  \n" +
        "					pd.approveLineCount,  \n" +
        "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
        "											p.debitMemoDate  \n" +
        "										WHEN p.receiptType = 'C' THEN  \n" +
        "											p.creditMemoDate  \n" +
        "										ELSE p.invoiceDate  \n" +
        "									end), g.termsDays, m.paymentTermsID) paymentDueDate,  \n" +
        "					g.gencCategoryName paymentTermName,  \n" +
        " 					m.paymentTermsID paymentTermsID,  \n" +
        "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
        "                    p.paymentTermsID invPaymentTermsID,  \n" +
        "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
        "					psm.packingSlipModeStatus,  \n" +
        "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
        "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
        "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
        "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
        "					p.invoiceRequireManagementApproval,  \n" +
        "					(  \n" +
        "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
        "								'Yes'  \n" +
        "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
        "								'No'  \n" +
        "						END  \n" +
        "					) invoiceRequireManagementApprovalValue,  \n" +
        "					p.invoiceApprovalStatus,  \n" +
        "					(  \n" +
        "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
        "								'Approved'  \n" +
        "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
        "								'Pending'  \n" +
        "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
        "								'N/A'  \n" +
        "						END  \n" +
        "					) invoiceApprovalStatusValue,  \n" +
        "					p.invoiceApprovedBy,  \n" +
        "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
        "					p.invoiceApprovalDate,  \n" +
        "					p.invoiceApprovalComment,  \n" +
        "					p.internalRemark,  \n" +
        "                    p.remark,  \n" +
        "					p.lockStatus,  \n" +
        "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
        "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
        "						when p.lockStatus = 'LC' then 'Locked'  \n" +
        "						else null end  \n" +
        "					) lockStatusValue,  \n" +
        "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
        "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
        "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
        "                    case when p.receiptType = 'I' then  \n" +
        "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
        "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
        "					h1.refType as haltRefType,  \n" +
        "                    h1.status as haltStatus,  \n" +
        "                    (CASE WHEN h1.status = 'H' THEN  \n" +
        "								'Halted'  \n" +
        "							ELSE ''  \n" +
        "						END  \n" +
        "					) AS haltStatusText,  \n" +
        "                    (CASE  \n" +
        "							WHEN h1.status = 'H' THEN  \n" +
        "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
        "							ELSE ''  \n" +
        "						END  \n" +
        "					) AS haltReason,  \n" +
        "                    psh1.refType as haltRefTypeRefInv,  \n" +
        "                    psh1.status as haltStatusRefInv,  \n" +
        "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
        "								'Halted'  \n" +
        "							ELSE ''  \n" +
        "						END  \n" +
        "					) AS haltReasonRefInvText,  \n" +
        "                    (CASE  \n" +
        "							WHEN psh1.status = 'H' THEN  \n" +
        "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
        "							ELSE ''  \n" +
        "						END  \n" +
        "					) AS haltReasonRefInv,  \n" +
        "                    p.markedForRefund,  \n" +
        "                    (case when p.markedForRefund = 1 then 'Yes'  \n" +
        "						else 'No' end  \n" +
        "					) markedForRefundValue,  \n" +
        "                    p.markedForRefundAmt  \n" +
        "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
        "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
        "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
        "							gFiles.gencFileOwnerType,  \n" +
        "							gFiles.refTransID,  \n" +
        "							gFiles.entityID  \n" +
        "						FROM genericfiles gFiles  \n" +
        "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
        "						and gFiles.entityID in (-13,-15,-16)  \n" +
        "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
        "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
        "																		WHEN p.receiptType = 'D' THEN -16  \n" +
        "																		ELSE -13  \n" +
        "																	END)  \n" +
        "				and psDoc.refTransID = p.id  \n" +
        "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
        "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
        " 											 from holdunholdtrans h2  \n" +
        " 											where h2.refTransId = h1.refTransId  \n" +
        " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
        " 											  and h2.isDeleted = 0)*/  \n" +
        "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
        "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
        "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
        "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
        "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
        " 											 from holdunholdtrans h2  \n" +
        " 											where psh1.refTransId = h2.refTransId  \n" +
        " 											  and h2.refType = 'SINV'  \n" +
        " 											  and h2.isDeleted = 0)*/  \n" +
        "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
        "            left join (  \n" +
        "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
        "				FROM 	vu_genericfilescount g  \n" +
        "				WHERE 	g.entityID = -14  \n" +
        "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
        "            ) pg on pg.refTransID = psm.id  \n" +
        "			left join (  \n" +
        "							select 	a.refPackingSlipMaterialRecID,  \n" +
        "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
        "								sum(a.itemReceived) itemReceived,  \n" +
        "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
        "								sum(a.itemDisapproved) itemDisapproved,  \n" +
        "								sum(a.approveLineCount) approveLineCount,  \n" +
        "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
        "                                sum(discount) totalDiscount,  \n" +
        "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
        "							from 	(  \n" +
        "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
        "										psm.packingSlipSerialNumber,  \n" +
        "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
        "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
        "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
        "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
        "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
        "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
        "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
        "										extendedPrice,  \n" +
        "                                        discount,  \n" +
        "										extendedReceivedPrice  \n" +
        "									FROM 	packing_slip_material_receive_det psm  \n" +
        "									WHERE 	psm.isDeleted = 0  \n" +
        "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
        "								) a  \n" +
        "							group by a.refPackingSlipMaterialRecID  \n" +
        "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
        "				left join (select b.refPackingslipInvoiceID,  \n" +
        "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
        "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
        "							  from packingslip_invoice_payment a  \n" +
        "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
        "							 where a.refPaymentMode IN ('P','RR')  \n" +
        "							   and a.isPaymentVoided = 0  \n" +
        "							   and b.isDeleted = 0  \n" +
        "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
        "				left join (  \n" +
        "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
        "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
        "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
        "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
        "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
        "							from 		packing_slip_material_receive ps  \n" +
        "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
        "                            left join (select b.refPackingslipInvoiceID,  \n" +
        "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
        "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
        "										  from packingslip_invoice_payment a  \n" +
        "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
        "										 where a.refPaymentMode IN ('P','RR')  \n" +
        "										   and b.isPaymentVoided = 0  \n" +
        "										   and b.isDeleted = 0  \n" +
        "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
        "								  where ps.receiptType in ('C','D')  \n" +
        "									and ps.isDeleted = 0  \n" +
        "									and pd.isDeleted = 0  \n" +
        "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
        "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
        "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
        "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
        "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
        "	);  \n" +
        "  \n" +
        "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
        "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
        "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
        "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
        "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
        "				and exists (select 1  \n" +
        "							  from packingslip_invoice_payment pm  \n" +
        "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
        "							 where pm.isPaymentVoided = 0  \n" +
        "							   and pm.refPaymentMode = 'P'  \n" +
        "							   and pd.refPackingslipInvoiceID = p.id  \n" +
        "							   and pm.isDeleted = 0  \n" +
        "                               and pd.isDeleted = 0  \n" +
        "							   and pm.paymentNumber \",  \n" +
        "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
        "                               ,\") \");  \n" +
        "    END IF;  \n" +
        "  \n" +
        "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
        "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
        "	ELSE  \n" +
        "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
        "		SET pWhereClause = '1=1' ;  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF pDueDate IS NOT NULL THEN  \n" +
        "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
        "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
        "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
        "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
        "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
        "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
        "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
        "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
        "    END IF;  \n" +
        "  \n" +
        "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
        "		IF pIsExactSearch = 1 THEN  \n" +
        "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
        "									AND (  \n" +
        "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
        "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
        "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
        "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
        "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
        "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
        "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
        "									  \" ) \"  \n" +
        "						);  \n" +
        "		ELSE  \n" +
        "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
        "									AND (  \n" +
        "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
        "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
        "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
        "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
        "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
        "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
        "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
        "									  \" ) \"  \n" +
        "						);  \n" +
        "		END IF;  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
        "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
        "				SELECT 1  \n" +
        "				  FROM packing_slip_material_receive_det x  \n" +
        "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
        "			)  \n" +
        "		\");  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
        "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
        "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
        "	ELSE  \n" +
        "		SET rowNumWhere = '';  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	/* to get total count of rows */  \n" +
        "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
        "    PREPARE query1 FROM @SQLStatement1;  \n" +
        "    EXECUTE query1;  \n" +
        "	DEALLOCATE PREPARE query1;  \n" +
        "  \n" +
        "	SET @SQLStatement2 = CONCAT(\"  \n" +
        "			SELECT 	c.*,  \n" +
        "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
        "				round(c.paidAmount,2) totalPaidAmount,  \n" +
        "                round(c.refundAmount,2) totalRefundAmount,  \n" +
        "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
        "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
        "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
        "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
        "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
        "	PREPARE query2 FROM @SQLStatement2;  \n" +
        "	EXECUTE query2;  \n" +
        "	DEALLOCATE PREPARE query2;  \n" +
        "  \n" +
        "END;  \n" +
        /* **************************** Add Script Version -> 09-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5131,'2.00','V1','Task 35965: Add Invoice PMT Terms column in Supplier Invoice - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5131:
            allDbChangesArray.push(
            /* **************************** New Script -> 10-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyPOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT ,  \n" +
                "    IN pIsShowAllPO tinyint)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "    DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF !pIsShowAllPO THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");  \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"  \n" +
                "	select a.salesOrderDetailId,  \n" +
                "		a.soID,  \n" +
                "		a.poNumber,  \n" +
                "		a.poDate,  \n" +
                "		a.soNumber,  \n" +
                "		a.PartID,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,  \n" +
                "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,  \n" +
                "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN  \n" +
                "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))  \n" +
                "			ELSE 0 END) AS excessShipQty,  \n" +
                "		a.buildQty,  \n" +
                "        a.woCount  \n" +
                "        from (SELECT  \n" +
                "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,  \n" +
                "				vu_ssr.`Sales Order ID` soID,  \n" +
                "				vu_ssr.`Po Number` poNumber,  \n" +
                "				vu_ssr.`Po Date` poDate,  \n" +
                "				vu_ssr.`Sales Order` soNumber,  \n" +
                "				vu_ssr.`PO Qty` poQty,  \n" +
                "				vu_ssr.`Shipped Qty` shippedQty,  \n" +
                "				vu_ssr.`Balanced Due Qty` backOrderQty,  \n" +
                "				vu_ssr.`PartID` PartID,  \n" +
                "				ka.perAssyBuildQty AS    qpa,  \n" +
                "                vu_ssr.`Status` status,  \n" +
                "				vu_ssr.`lineID` lineID,  \n" +
                "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
                "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0)  \n" +
                "                FROM workorder_salesorder_details wsd  \n" +
                "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0  \n" +
                "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty ,  \n" +
                "                 (select count(vwss.woid) from  vu_workorder_summary_stk vwss  \n" +
                "                JOIN vu_workorder_salesorder_details vwsd ON vwsd.woID = vwss.woID  \n" +
                "                LEFT JOIN workorder wo on ifnull(wo.terminateWOID,wo.woID) = vwss.woID  \n" +
                "                where FIND_IN_SET (vu_ssr.`Po Number`,replace(vwsd.poNumber,' ', ''))  \n" +
                "                and vwss.partID = \",pPartID , \"  \n" +
                "                and (CASE WHEN vwss.woid IS NULL THEN ((vwss.readytoShipQty + vwss.shippedQty + vwss.stockAdjustmentQty) - (vwss.shippedQty)) ELSE ((vwss.buildQty) - (vwss.scrapQty + vwss.shippedQty + vwss.readytoShipQty)) END) >  0)  woCount  \n" +
                "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`  \n" +
                "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0 ) a \", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 10-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5132,'2.00','V1','Sproc_GetAssemblyPOStockDetails - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5132:
             allDbChangesArray.push(
             /* **************************** New Script -> 07-07-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE insertedRefundMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_BillToAddress VARCHAR(2000);  \n" +
                "	DECLARE v_BillToName VARCHAR(100) ;  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CR'  AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> CR - Customer Refund */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedPayOfCust > 0  \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "  \n" +
                "		/* get all customer payment > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.paymentAmount,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db  \n" +
                "			> original Agreed Refund Amount Of Payment  mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	ELSEIF (vCountExistsCheckNo = 0 AND pTotSelectedCMOfCust > 0  \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "             /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "	 -- select * from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "	/* get all customer Refund > against total CM list > available in data base */  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "			SELECT cps.id AS custCreditMemoMstID,  \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,  \n" +
                "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID = cps.id  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
                "			 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount  \n" +
                "		FROM customer_packingslip AS cps  \n" +
                "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "		AND cps.isDeleted = 0 ;  \n" +
                "         -- select * from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))  \n" +
                "					AND (vCountExistsCheckNo = 0)) THEN  \n" +
                "  \n" +
                "		SELECT fun_getAddressbyIDForCheckPrint(cua.id) , cua.companyName INTO v_BillToAddress , v_BillToName  \n" +
                "		FROM customer_addresses cua  \n" +
                "		WHERE cua.customerId = pMfgcodeID  \n" +
                "		AND cua.addressType = 'B'  \n" +
                "		AND cua.isDefault = 1  \n" +
                "		AND cua.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "			`depositBatchNumber` ,  `offsetAmount`,`refGencTransModeID`,  \n" +
                "			`payToName` , `payToAddress`, `billToAddress` , `billToName` ,  \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "			pDepositBatchNumber, pOffsetAmount , pRefGencTransModeID ,  \n" +
                "			v_BillToName, v_BillToAddress , v_BillToAddress , v_BillToName ,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "		SET insertedRefundMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(pTotSelectedPayOfCust > 0) THEN  \n" +
                "			/* add selected refund payment details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(pTotSelectedCMOfCust > 0) THEN  \n" +
                "			/* add selected refund credit memo details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR (vCountExistsCheckNo > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted payment/CM */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted refund master id for Refund Transaction  */  \n" +
                "	SELECT insertedRefundMstID AS insertedRefundMstID;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** New Script -> 10-08-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCheckPrintAndRemittanceCustRefundReport` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		/* Refund master details */  \n" +
                "		SELECT pip.id, pip.accountReference,  \n" +
                "			pip.paymentDate, pip.paymentNumber,  \n" +
                "			pip.paymentAmount,  \n" +
                "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
                "			pip.payToName ,   pip.payToAddress,  \n" +
                "			 pip.billToName AS customerName,  \n" +
                "			 pip.billToAddress AS customerAddress,  \n" +
                "			ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
                "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
                "			g.gencCategoryName AS paymentType ,  \n" +
                "			pip.remark  \n" +
                "		FROM packingslip_invoice_payment pip  \n" +
                "			LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		WHERE pip.id = pPaymentID  \n" +
                "		AND pip.refPaymentMode = 'CR'  \n" +
                "		AND pip.isDeleted = 0  ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get refunded payment or refunded credit memo details */  \n" +
                "		SELECT  psip.id,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.id = pPaymentID  \n" +
                "		AND psip.refPaymentMode = 'CR'  \n" +
                "		AND psip.isDeleted = 0  ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* Default set company (isCompany = 1) address details  */  \n" +
                "		SELECT CONCAT(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,  \n" +
                "			cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
                "			cu.email AS companyEmail,cu.primaryContactName AS companyContactName,  \n" +
                "			(SELECT `name` FROM company_info WHERE isDeleted = 0) companyName  \n" +
                "		FROM customer_addresses cua  \n" +
                "			JOIN mfgcodemst cu ON cu.id = cua.customerId AND cu.isDeleted = 0  \n" +
                "			JOIN countrymst c ON c.countryID = cua.countryID AND c.isDeleted = 0  \n" +
                "		WHERE cua.addressType = 'B'  \n" +
                "		AND cu.isCompany = 1  \n" +
                "		AND cua.isDefault = 1  \n" +
                "		AND cua.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
             /* **************************** New Script -> 10-08-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetAllPaymentOfCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllPaymentOfCustomerRefund`(  \n" +
                "IN pCustomerID INT,  \n" +
                "IN pCustRefundMstID INT,  \n" +
                "IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_isRefundPaymentVoided TINYINT ;  \n" +
                "IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN  \n" +
                "	SELECT *  \n" +
                "	FROM (  \n" +
                "		SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.systemId ,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    )  AS totalRefundIssuedAmount ,  \n" +
                "				psip.paymentAmount AS totalPaymentAmount,  \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
                "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,  \n" +
                "                    (SELECT `comment`  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) `comment`,  \n" +
                "                     (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) paymentAmountForSelectedPayment  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		LEFT JOIN (SELECT psipd.refPayementid,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.isDeleted = 0  \n" +
                "					 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "                     ON psip.id = payDetTemp.refPayementid  \n" +
                "             WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0  \n" +
                "             AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "             )  tempPay  \n" +
                "		WHERE  \n" +
                "			(  \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0  \n" +
                "						 /* get all peding to refund */  \n" +
                "			)  \n" +
                "		;  \n" +
                "ELSE  \n" +
                "  \n" +
                "	/* update customer payment case */  \n" +
                "  \n" +
                "	SELECT isPaymentVoided INTO v_isRefundPaymentVoided  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id = pCustRefundMstID  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	IF(v_isRefundPaymentVoided = 0) THEN  \n" +
                "  \n" +
                "		SELECT *  \n" +
                "		FROM (  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "						(SELECT id  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) AS paymentDetMstID ,  \n" +
                "			psip.paymentNumber,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate,  \n" +
                "		       psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) AS totalRefundIssuedAmount ,  \n" +
                "					psip.paymentAmount AS totalPaymentAmount,  \n" +
                "					IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
                "					IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,  \n" +
                "			(SELECT `comment`  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) `comment`,  \n" +
                "			    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) paymentAmountForSelectedPayment  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,  \n" +
                "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
                "					    FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "												AND cps.isDeleted = 0  \n" +
                "					     WHERE psipd.isDeleted = 0  \n" +
                "						 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "						ON psip.id = payDetTemp.refPayementid  \n" +
                "			WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "			)  tempPay  \n" +
                "			WHERE  \n" +
                "				(  \n" +
                "					(tempPay.paymentAmountForSelectedPayment > 0)  \n" +
                "									 /* get all paid */  \n" +
                "				)  \n" +
                "  \n" +
                "			UNION  \n" +
                "  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,  \n" +
                "				psip.paymentNumber,  \n" +
                "				psip.systemId ,  \n" +
                "				psip.paymentDate,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "						(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID = psip.id  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0  \n" +
                "				    )  AS totalRefundIssuedAmount ,  \n" +
                "						psip.paymentAmount AS totalPaymentAmount,  \n" +
                "						IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
                "						IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,  \n" +
                "				(SELECT `comment`  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0  \n" +
                "				    ) `comment`,  \n" +
                "				    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0  \n" +
                "				    ) paymentAmountForSelectedPayment  \n" +
                "				FROM packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid, psipd.id AS paymentDetMstID ,  \n" +
                "							IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
                "						    FROM packingslip_invoice_payment_det psipd  \n" +
                "							JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "													AND cps.isDeleted = 0  \n" +
                "						     WHERE psipd.isDeleted = 0  \n" +
                "							 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "				     ON psip.id = payDetTemp.refPayementid  \n" +
                "			     WHERE psip.isMarkForRefund = 1  \n" +
                "			     AND psip.mfgcodeID = pCustomerID  \n" +
                "			     AND psip.isDeleted = 0  \n" +
                "			     AND psip.isPaymentVoided = 0  \n" +
                "			     AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "			     AND psip.id NOT IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0  \n" +
                "										AND isDeleted = 0 GROUP BY refPayementid)  \n" +
                "			) tempPay  \n" +
                "  \n" +
                "			WHERE  \n" +
                "			(  \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0  \n" +
                "						 /* get all peding to refund  */  \n" +
                "			)  \n" +
                "			;  \n" +
                "  \n" +
                "	ELSEIF(v_isRefundPaymentVoided = 1) THEN  \n" +
                "  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				(SELECT id  FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id  \n" +
                "						AND refPayementid = pCustRefundMstID AND isDeleted = 0) AS paymentDetMstID ,  \n" +
                "				psip.paymentNumber,  \n" +
                "				psip.systemId ,  \n" +
                "				psip.paymentDate,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) AS totalRefundIssuedAmount ,  \n" +
                "				psip.paymentAmount AS totalPaymentAmount,  \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
                "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,  \n" +
                "				(SELECT `comment` FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND refPayementid = pCustRefundMstID AND isDeleted = 0) `comment`,  \n" +
                "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND refPayementid = pCustRefundMstID AND isDeleted = 0) paymentAmountForSelectedPayment  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				JOIN (SELECT psipd.refPayementid,  \n" +
                "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
                "					    FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "												AND cps.isDeleted = 0  \n" +
                "					     WHERE psipd.isDeleted = 0  \n" +
                "						 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "						ON psip.id = payDetTemp.refPayementid  \n" +
                "			WHERE psip.mfgcodeID = pCustomerID  \n" +
                "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			 ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END IF;  \n" +
                "END;  \n" +
             /* **************************** Add Script Version -> 10-08-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (5133,'2.00','V1',' refund report sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;
        case 5133:
            allDbChangesArray.push(
            /* **************************** New Script -> 10-08-2021 *********************************** */
            "select pageID into @pageID from page_detail where pageName like 'Accounting';  \n" +
            "update page_detail  \n" +
            "   set menuRoute = 'setting.accounting.terms',  \n" +
            "	   parentPageID = @pageID,  \n" +
            "	   orderBy	= 1.6  \n" +
            " where pageName like 'Terms';  \n" +
            "update page_detail  \n" +
            "   set menuRoute = 'setting.accounting.paymenttypecategory',  \n" +
            "	   parentPageID = @pageID,  \n" +
            "	   orderBy	= 1.4  \n" +
            " where pageName like 'Payment Type Category';  \n" +
            "update page_detail  \n" +
            "   set orderBy	= 1.1  \n" +
            " where pageName like 'Chart of Accounts';  \n" +
            "update page_detail  \n" +
            "   set orderBy	= 1.2  \n" +
            " where pageName like 'Account Type';  \n" +
            "update page_detail  \n" +
            "   set orderBy	= 1.3  \n" +
            " where pageName like 'Bank Account';  \n" +
            "update page_detail  \n" +
            "   set orderBy	= 1.5  \n" +
            " where pageName like 'Payment Methods';  \n" +
            "update page_detail  \n" +
            "   set orderBy	= 1.7  \n" +
            " where pageName like 'Charges Type';  \n" +
            /* **************************** Add Script Version -> 10-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5134,'2.00','V1','User Story 35964: Supplier Invoice CM DM payment Terms add column and filter on list page - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5134:
            allDbChangesArray.push(
            /* **************************** New Script -> 10-08-2021 *********************************** */
            "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pReceiptType VARCHAR(30),  \n" +
            "	IN pMfgCodeIds LONGTEXT,  \n" +
            "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
            "	IN pDueDate DATE,  \n" +
            "	IN pAdditionalDays INT,  \n" +
            "	IN pTermsAndAboveDays INT,  \n" +
            "	IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pIsExactSearch TINYINT,  \n" +
            "	IN pMfrPnId INT,  \n" +
            "    IN pInvoiceIds LONGTEXT,  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "    IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvoiceFromDate DATE,  \n" +
            "    IN pInvoiceToDate DATE  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "    DECLARE vCurrentDate DATE;  \n" +
            "    DECLARE vMfgCodeFormat INT;  \n" +
            "  \n" +
            "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
            "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
            "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
            "			SELECT 		p.id,  \n" +
            "					p.systemId,  \n" +
            "					p.poNumber,  \n" +
            "                    p.poDate,  \n" +
            "                    p.refPurchaseOrderID poId,  \n" +
            "					p.mfgCodeID,  \n" +
            "					p.supplierSONumber,  \n" +
            "                    p.soDate,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
            "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
            "					p.packingSlipDate,  \n" +
            "					p.invoiceNumber,  \n" +
            "                    p.lockStatus invoiceLockStatus,  \n" +
            "					p.invoiceDate,  \n" +
            "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
            "					p.creditMemoNumber,  \n" +
            "                    p.lockStatus creditMemoLockStatus,  \n" +
            "					p.creditMemoDate,  \n" +
            "					p.debitMemoNumber,  \n" +
            "                    p.refSupplierCreditMemoNumber,  \n" +
            "                    p.lockStatus debitMemoLockStatus,  \n" +
            "					p.debitMemoDate,  \n" +
            "					p.receiptDate,  \n" +
            "					p.description,  \n" +
            "					p.billToAddress,  \n" +
            "					p.shipToAddress,  \n" +
            "					p.poVersion,  \n" +
            "					p.isDeleted,  \n" +
            "					p.receiptType,  \n" +
            "					p.`status`,  \n" +
            "					p.applyDate,  \n" +
            "					p.refParentCreditDebitInvoiceno,  \n" +
            "					p.refPackingSlipNumberForInvoice,  \n" +
            "					p.invoiceTotalDue,  \n" +
            "					p.isTariffInvoice,  \n" +
            "					p.creditMemoType,  \n" +
            "                    (  \n" +
            "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
            "								'Invoice Credit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MC' THEN  \n" +
            "								'MISC Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'RC' THEN  \n" +
            "								'RMA Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'ID' THEN  \n" +
            "								'Invoice Debit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MD' THEN  \n" +
            "								'MISC Debit Memo'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
            "								'Invoice'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
            "								'MISC Invoice'  \n" +
            "						END  \n" +
            "					) subTypeValue,  \n" +
            "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
            "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "                    m.mfgName supplierName,  \n" +
            "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
            "					m.mfgCode supplierCodeName,  \n" +
            "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
            "					pg.packingSlipDocCount,  \n" +
            "					pd.itemReceived,  \n" +
            "					pd.otherChargesItemReceived,  \n" +
            "					pd.itemDisapproved,  \n" +
            "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
            "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
            "					ps.status parentInvoiceStatus,  \n" +
            "					ps.invoiceNumber refInvoiceNumber,  \n" +
            "                    ps.lockStatus refInvoiceLockStatus,  \n" +
            "					ps.creditMemoType parentCreditMemoType,  \n" +
            "					pd.totalExtendedAmount,  \n" +
            "                    pd.totalDiscount,  \n" +
            "					pe.totalCreditAmount,  \n" +
            "					pe.totalDebitAmount,  \n" +
            "					(  \n" +
            "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
            "					) amountToPay,  \n" +
            "                    pd.totalExtendedReceivedPrice,  \n" +
            "					pd.packingDetailNote,  \n" +
            "					pd.approveLineCount,  \n" +
            "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
            "											p.debitMemoDate  \n" +
            "										WHEN p.receiptType = 'C' THEN  \n" +
            "											p.creditMemoDate  \n" +
            "										ELSE p.invoiceDate  \n" +
            "									end), g.termsDays, m.paymentTermsID) paymentDueDate,  \n" +
            "					g.gencCategoryName paymentTermName,  \n" +
            " 					m.paymentTermsID paymentTermsID,  \n" +
            "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
            "                    p.paymentTermsID invPaymentTermsID,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
            "					psm.packingSlipModeStatus,  \n" +
            "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
            "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
            "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
            "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
            "					p.invoiceRequireManagementApproval,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
            "								'Yes'  \n" +
            "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
            "								'No'  \n" +
            "						END  \n" +
            "					) invoiceRequireManagementApprovalValue,  \n" +
            "					p.invoiceApprovalStatus,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
            "								'Approved'  \n" +
            "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
            "								'Pending'  \n" +
            "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
            "								'N/A'  \n" +
            "						END  \n" +
            "					) invoiceApprovalStatusValue,  \n" +
            "					p.invoiceApprovedBy,  \n" +
            "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
            "					p.invoiceApprovalDate,  \n" +
            "					p.invoiceApprovalComment,  \n" +
            "					p.internalRemark,  \n" +
            "                    p.remark,  \n" +
            "					p.lockStatus,  \n" +
            "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "						when p.lockStatus = 'LC' then 'Locked'  \n" +
            "						else null end  \n" +
            "					) lockStatusValue,  \n" +
            "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
            "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
            "                    case when p.receiptType = 'I' then  \n" +
            "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
            "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
            "					h1.refType as haltRefType,  \n" +
            "                    h1.status as haltStatus,  \n" +
            "                    (CASE WHEN h1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltStatusText,  \n" +
            "                    (CASE  \n" +
            "							WHEN h1.status = 'H' THEN  \n" +
            "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReason,  \n" +
            "                    psh1.refType as haltRefTypeRefInv,  \n" +
            "                    psh1.status as haltStatusRefInv,  \n" +
            "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInvText,  \n" +
            "                    (CASE  \n" +
            "							WHEN psh1.status = 'H' THEN  \n" +
            "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInv,  \n" +
            "                    p.markedForRefund,  \n" +
            "                    (case when p.markedForRefund = 1 then 'Yes'  \n" +
            "						else 'No' end  \n" +
            "					) markedForRefundValue,  \n" +
            "                    p.markedForRefundAmt  \n" +
            "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
            "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
            "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
            "							gFiles.gencFileOwnerType,  \n" +
            "							gFiles.refTransID,  \n" +
            "							gFiles.entityID  \n" +
            "						FROM genericfiles gFiles  \n" +
            "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
            "						and gFiles.entityID in (-13,-15,-16)  \n" +
            "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
            "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
            "																		WHEN p.receiptType = 'D' THEN -16  \n" +
            "																		ELSE -13  \n" +
            "																	END)  \n" +
            "				and psDoc.refTransID = p.id  \n" +
            "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
            "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where h2.refTransId = h1.refTransId  \n" +
            " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
            "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
            "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
            "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
            "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where psh1.refTransId = h2.refTransId  \n" +
            " 											  and h2.refType = 'SINV'  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
            "            left join (  \n" +
            "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
            "				FROM 	vu_genericfilescount g  \n" +
            "				WHERE 	g.entityID = -14  \n" +
            "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
            "            ) pg on pg.refTransID = psm.id  \n" +
            "			left join (  \n" +
            "							select 	a.refPackingSlipMaterialRecID,  \n" +
            "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
            "								sum(a.itemReceived) itemReceived,  \n" +
            "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
            "								sum(a.itemDisapproved) itemDisapproved,  \n" +
            "								sum(a.approveLineCount) approveLineCount,  \n" +
            "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
            "                                sum(discount) totalDiscount,  \n" +
            "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
            "							from 	(  \n" +
            "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
            "										psm.packingSlipSerialNumber,  \n" +
            "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
            "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
            "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
            "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
            "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
            "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
            "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
            "										extendedPrice,  \n" +
            "                                        discount,  \n" +
            "										extendedReceivedPrice  \n" +
            "									FROM 	packing_slip_material_receive_det psm  \n" +
            "									WHERE 	psm.isDeleted = 0  \n" +
            "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
            "								) a  \n" +
            "							group by a.refPackingSlipMaterialRecID  \n" +
            "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
            "				left join (select b.refPackingslipInvoiceID,  \n" +
            "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
            "							  from packingslip_invoice_payment a  \n" +
            "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "							 where a.refPaymentMode IN ('P','RR')  \n" +
            "							   and a.isPaymentVoided = 0  \n" +
            "							   and b.isDeleted = 0  \n" +
            "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
            "				left join (  \n" +
            "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
            "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
            "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
            "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
            "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
            "							from 		packing_slip_material_receive ps  \n" +
            "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
            "                            left join (select b.refPackingslipInvoiceID,  \n" +
            "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
            "										  from packingslip_invoice_payment a  \n" +
            "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "										 where a.refPaymentMode IN ('P','RR')  \n" +
            "										   and b.isPaymentVoided = 0  \n" +
            "										   and b.isDeleted = 0  \n" +
            "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
            "								  where ps.receiptType in ('C','D')  \n" +
            "									and ps.isDeleted = 0  \n" +
            "									and pd.isDeleted = 0  \n" +
            "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
            "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
            "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
            "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
            "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
            "				and exists (select 1  \n" +
            "							  from packingslip_invoice_payment pm  \n" +
            "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
            "							 where pm.isPaymentVoided = 0  \n" +
            "							   and pm.refPaymentMode = 'P'  \n" +
            "							   and pd.refPackingslipInvoiceID = p.id  \n" +
            "							   and pm.isDeleted = 0  \n" +
            "                               and pd.isDeleted = 0  \n" +
            "							   and pm.paymentNumber \",  \n" +
            "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
            "                               ,\") \");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pDueDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
            "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
            "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
            "		IF pIsExactSearch = 1 THEN  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
            "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
            "				SELECT 1  \n" +
            "				  FROM packing_slip_material_receive_det x  \n" +
            "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
            "			)  \n" +
            "		\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "    EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"  \n" +
            "			SELECT 	c.*,  \n" +
            "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
            "				round(c.paidAmount,2) totalPaidAmount,  \n" +
            "                round(c.refundAmount,2) totalRefundAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
            "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
            "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
            "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 10-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5135,'2.00','V1','User Story 35964: Supplier Invoice CM DM payment Terms add column and filter on list page - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5135:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pkitAllocationLineItemId INT,  \n" +
                "    IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pKitqty INT DEFAULT 0;  \n" +
                "    DECLARE pCustomer VARCHAR(1000);  \n" +
                "    DECLARE pPIDCode VARCHAR(200);  \n" +
                "    DECLARE pCustomerID INT;  \n" +
                "    DECLARE pPartID INT;  \n" +
                "    DECLARE pRoHSName VARCHAR(100);  \n" +
                "    DECLARE pRoHSIcon VARCHAR(255);  \n" +
                "  \n" +
                "    IF(pAssyID = 0) THEN  \n" +
                "		SELECT 	IFNULL(s.kitQty,0),  \n" +
                "					fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "					sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "				INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM salesorderdet s  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "					JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "					WHERE s.id = 106 AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  IFNULL(k.totalAssyBuildQty,0),  \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM kit_allocation_assy_detail k  \n" +
                "					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "                    JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "								AND k.partId = pAssyID  \n" +
                "								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsConsolidated = 0) THEN  \n" +
                "		SELECT  \n" +
                "				c.id,			 	refSalesOrderDetID,		mfgPNID,  \n" +
                "                pPartID partID,								pPIDCode PIDCode,  \n" +
                "                pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "                pCustomer companyName, 						pCustomerID customerID,  \n" +
                "				lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "                uomID,			 	unitName,				uomClassID,  \n" +
                "				allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "                consumeUnits, 		consumePin,  \n" +
                "				(CASE  \n" +
                "					WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "				END) requiredQtyBuild,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(uomMismatchedStep = 0  \n" +
                "							OR connecterTypeID != - 2)  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "				END) requirePinsBuild,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						uomMismatchedStep = 0  \n" +
                "							OR isNotRequiredKitAllocation = 1  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE CASE  \n" +
                "						WHEN  \n" +
                "							connecterTypeID = - 2  \n" +
                "						THEN  \n" +
                "							CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "							END  \n" +
                "						ELSE CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "					END  \n" +
                "				END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "						k.id,	 		k.refSalesOrderDetID,		kal.mfgPNID,  \n" +
                "                        k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "                        k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "							THEN  \n" +
                "								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
                "									OR k.isBuyDNPQty = 'P'  \n" +
                "									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
                "								OR k.isBuyDNPQty = 'P'  \n" +
                "								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "						END) AS qpa,  										k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "						k.isNotRequiredKitAllocation,						kal.uomMismatchedStep,  \n" +
                "						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "				FROM  \n" +
                "					kit_allocation_lineitems k  \n" +
                "					INNER JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id AND kal.isDeleted = 0  \n" +
                "					INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "                    INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "					LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND k.partID = ka.assyID  AND k.refRfqLineitem = ka.refBOMLineID  \n" +
                "					WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0  \n" +
                "					GROUP BY k.id, k.refSalesOrderDetID, kal.mfgPNID) AS c  \n" +
                "			GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "					rfqLineItemsId, numOfPosition;  \n" +
                "		ELSE  \n" +
                "			SELECT  \n" +
                "					c.id,			 refSalesOrderDetID,		mfgPNID,  \n" +
                "					pPartID partID,								pPIDCode PIDCode,  \n" +
                "					pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "					pCustomer companyName, 						pCustomerID customerID,  \n" +
                "					lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "					uomID,			 	unitName,				uomClassID,  \n" +
                "					allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "					consumeUnits, 		consumePin,  \n" +
                "					(CASE  \n" +
                "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(uomMismatchedStep = 0  \n" +
                "								OR connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							uomMismatchedStep = 0  \n" +
                "								OR isNotRequiredKitAllocation = 1  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE CASE  \n" +
                "							WHEN  \n" +
                "								connecterTypeID = - 2  \n" +
                "							THEN  \n" +
                "								CASE  \n" +
                "									WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "									ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "								END  \n" +
                "							ELSE CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "							END  \n" +
                "						END  \n" +
                "					END) shortagePerBuild  \n" +
                "				FROM  \n" +
                "					(SELECT  \n" +
                "							k.id,	 		k.refSalesOrderDetID,	 	kal.mfgPNID,  \n" +
                "							k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "							k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "							k.kitQPAWithDNP AS qpa,  					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
                "							k.isNotRequiredKitAllocation,				k.uomMismatchedStep,  \n" +
                "							IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "							IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(ka.consumeQty, 0) consumeQty,		IFNULL(ka.consumePin, 0) consumePin  \n" +
                "			FROM  \n" +
                "				kit_allocation_consolidate_line_detail k  \n" +
                "			INNER JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id AND kal.isDeleted = 0  \n" +
                "            INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "			INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "			LEFT JOIN 	vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND FIND_IN_SET(ka.refBOMLineID, k.consolidatedLineItemIDs)  \n" +
                "			WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, kal.mfgPNID) AS c  \n" +
                "		GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "				rfqLineItemsId, numOfPosition;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5136,'2.00','V1','Task #36047 Refactor Sproc_GetKitallocationLineDetails - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;    
        case 5136:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                "CREATE TRIGGER `Trg_BI_component_sid_stock` BEFORE INSERT ON `component_sid_stock` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWarehouseID INT;  \n" +
                "    DECLARE vParentWHID INT;  \n" +
                "  \n" +
                "    SELECT 	b.warehouseID, 	w.parentWHID  \n" +
                "		INTO vWarehouseID,	vParentWHID  \n" +
                "    FROM binmst b  \n" +
                "    JOIN warehousemst w ON b.warehouseID = w.id AND w.isDeleted = 0  \n" +
                "    AND b.id = NEW.fromBin;  \n" +
                "  \n" +
                "	IF (NEW.fromWarehouse IS NULL OR NEW.fromDepartment IS NULL) THEN  \n" +
                "		SET NEW.fromWarehouse = vWarehouseID ,  \n" +
                "			NEW.fromDepartment = vParentWHID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5137,'2.00','V1','Bug 36111: [Main Branch] From Warehouse is showing NULL data in UMID - Issue of bin id - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 4981:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 07-07-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 07-07-2021 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (4982,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/